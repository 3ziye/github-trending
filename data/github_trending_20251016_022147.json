[
  {
    "basic_info": {
      "name": "openai-apps-sdk-examples",
      "full_name": "openai/openai-apps-sdk-examples",
      "owner": "openai",
      "description": "Example apps for the Apps SDK",
      "url": "https://github.com/openai/openai-apps-sdk-examples",
      "clone_url": "https://github.com/openai/openai-apps-sdk-examples.git",
      "ssh_url": "org-14957082@github.com:openai/openai-apps-sdk-examples.git",
      "homepage": null,
      "created_at": "2025-10-06T05:28:01Z",
      "updated_at": "2025-10-16T01:41:19Z",
      "pushed_at": "2025-10-15T12:57:19Z"
    },
    "stats": {
      "stars": 1425,
      "forks": 203,
      "watchers": 1425,
      "open_issues": 28,
      "size": 77
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 90170,
        "CSS": 64226,
        "TypeScript": 28354,
        "Python": 19456
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Apps SDK Examples Gallery\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)\n\nThis repository showcases example UI components to be used with the Apps SDK, as well as example MCP servers that expose a collection of components as tools.\nIt is meant to be used as a starting point and source of inspiration to build your own apps for ChatGPT.\n\n## MCP + Apps SDK overview\n\nThe Model Context Protocol (MCP) is an open specification for connecting large language model clients to external tools, data, and user interfaces. An MCP server exposes tools that a model can call during a conversation and returns results according to the tool contracts. Those results can include extra metadata—such as inline HTML—that the Apps SDK uses to render rich UI components (widgets) alongside assistant messages.\n\nWithin the Apps SDK, MCP keeps the server, model, and UI in sync. By standardizing the wire format, authentication, and metadata, it lets ChatGPT reason about your connector the same way it reasons about built-in tools. A minimal MCP integration for Apps SDK implements three capabilities:\n\n1. **List tools** – Your server advertises the tools it supports, including their JSON Schema input/output contracts and optional annotations (for example, `readOnlyHint`).\n2. **Call tools** – When a model selects a tool, it issues a `call_tool` request with arguments that match the user intent. Your server executes the action and returns structured content the model can parse.\n3. **Return widgets** – Alongside structured content, return embedded resources in the response metadata so the Apps SDK can render the interface inline in the Apps SDK client (ChatGPT).\n\nBecause the protocol is transport agnostic, you can host the server over Server-Sent Events or streaming HTTP—Apps SDK supports both.\n\nThe MCP servers in this demo highlight how each tool can light up widgets by combining structured payloads with `_meta.openai/outputTemplate` metadata returned from the MCP servers.\n\n## Repository structure\n\n- `src/` – Source for each widget example.\n- `assets/` – Generated HTML, JS, and CSS bundles after running the build step.\n- `pizzaz_server_node/` – MCP server implemented with the official TypeScript SDK.\n- `pizzaz_server_python/` – Python MCP server that returns the Pizzaz widgets.\n- `solar-system_server_python/` – Python MCP server for the 3D solar system widget.\n- `build-all.mts` – Vite build orchestrator that produces hashed bundles for every widget entrypoint.\n\n## Prerequisites\n\n- Node.js 18+\n- pnpm (recommended) or npm/yarn\n- Python 3.10+ (for the Python MCP server)\n\n## Install dependencies\n\nClone the repository and install the workspace dependencies:\n\n```bash\npnpm install\n```\n\n> Using npm or yarn? Install the root dependencies with your preferred client and adjust the commands below accordingly.\n\n## Build the components gallery\n\nThe components are bundled into standalone assets that the MCP servers serve as reusable UI resources.\n\n```bash\npnpm run build\n```\n\nThis command runs `build-all.mts`, producing versioned `.html`, `.js`, and `.css` files inside `assets/`. Each widget is wrapped with the CSS it needs so you can host the bundles directly or ship them with your own server.\n\nTo iterate locally, you can also launch the Vite dev server:\n\n```bash\npnpm run dev\n```\n\n## Serve the static assets\n\nIf you want to preview the generated bundles without the MCP servers, start the static file server after running a build:\n\n```bash\npnpm run serve\n```\n\nThe assets are exposed at [`http://localhost:4444`](http://localhost:4444) with CORS enabled so that local tooling (including MCP inspectors) can fetch them.\n\n## Run the MCP servers\n\nThe repository ships several demo MCP servers that highlight different widget bundles:\n\n- **Pizzaz (Node & Python)** – pizza-inspired collection of tools and components\n- **Solar system (Python)** – 3D solar system viewer\n\nEvery tool response includes plain text content, structured JSON, and `_meta.openai/outputTemplate` metadata so the Apps SDK can hydrate the matching widget.\n\n### Pizzaz Node server\n\n```bash\ncd pizzaz_server_node\npnpm start\n```\n\n### Pizzaz Python server\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\npip install -r pizzaz_server_python/requirements.txt\nuvicorn pizzaz_server_python.main:app --port 8000\n```\n\n### Solar system Python server\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\npip install -r solar-system_server_python/requirements.txt\nuvicorn solar-system_server_python.main:app --port 8000\n```\n\nYou can reuse the same virtual environment for all Python servers—install the dependencies once and run whichever entry point you need.\n\n## Testing in ChatGPT\n\nTo add these apps to ChatGPT, enable [developer mode](https://platform.openai.com/docs/guides/developer-mode), and add your apps in Settings > Connectors.\n\nTo add your local server without deploying it, you can use a tool like [ngrok](https://ngrok.com/) to expose your local server to the internet.\n\nFor ex",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:48.270336"
  },
  {
    "basic_info": {
      "name": "ququ",
      "full_name": "yan5xu/ququ",
      "owner": "yan5xu",
      "description": "开源免费的 Wispr Flow 替代方案 | 集成FunASR本地模型和可配置大语言模型的下一代中文桌面语音工作流",
      "url": "https://github.com/yan5xu/ququ",
      "clone_url": "https://github.com/yan5xu/ququ.git",
      "ssh_url": "git@github.com:yan5xu/ququ.git",
      "homepage": "",
      "created_at": "2025-09-20T06:26:58Z",
      "updated_at": "2025-10-16T02:06:49Z",
      "pushed_at": "2025-10-08T04:41:18Z"
    },
    "stats": {
      "stars": 1369,
      "forks": 125,
      "watchers": 1369,
      "open_issues": 22,
      "size": 2138
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 336340,
        "Python": 25053,
        "CSS": 10784,
        "HTML": 2349,
        "TypeScript": 165
      },
      "license": "Other",
      "topics": [
        "ai-text-processing",
        "chinese-speech-recognition",
        "electron-app",
        "funasr",
        "local-processing",
        "open-source",
        "privacy-first",
        "speech-to-text",
        "voice-dictation",
        "wispr-flow-alternative"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n\n<!-- 在这里放置您的Logo图片 -->\n<!-- 例如: <img src=\"assets/logo.png\" width=\"150\" /> -->\n<br/>\n<br/>\n\n# 蛐蛐 (QuQu)\n\n**开源免费的 Wispr Flow 替代方案 | 为中文而生的下一代智能语音工作流**\n\n</div>\n\n<div align=\"center\">\n\n<!-- 徽章 (Badges) - 您可以后续替换为动态徽章服务 (如 shields.io) -->\n<img src=\"https://img.shields.io/badge/license-Apache_2.0-blue.svg\" alt=\"License\">\n<img src=\"https://img.shields.io/badge/platform-macOS%20%7C%20Windows%20%7C%20Linux-lightgrey\" alt=\"Platform\">\n<img src=\"https://img.shields.io/badge/release-v1.0.0-brightgreen\" alt=\"Release\">\n<img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\" alt=\"PRs Welcome\">\n\n</div>\n\n<br/>\n\n> **厌倦了 Wispr Flow 的订阅费用？寻找开源免费的语音输入方案？来试试「蛐蛐」！**\n\n**蛐蛐 (QuQu)** 是 **Wispr Flow 的开源免费替代方案**，专为中文用户打造的注重隐私的桌面端语音输入与文本处理工具。与 Wispr Flow 不同，蛐蛐完全开源免费，数据本地处理，专为中文优化，支持国产AI模型。\n\n### 🆚 vs Wispr Flow：开源免费的替代方案\n\n| 核心对比 | 🎯 蛐蛐 (QuQu) | 💰 Wispr Flow |\n|---------|---------------|---------------|\n| **价格** | ✅ **完全免费** | ❌ $12/月订阅 |\n| **隐私** | ✅ **本地处理** | ❌ 云端处理 |\n| **中文** | ✅ **专为中文优化** | ⚠️ 通用支持 |\n| **AI模型** | ✅ **国产AI支持** | ❌ 仅国外模型 |\n\n想象一下，你可以像和朋友聊天一样写作。说的内容被实时、精准地转换成文字，口误和\"嗯、啊\"等废话被自动修正，甚至能根据你的要求，自动整理成邮件格式或代码片段。**这就是「蛐蛐」为你带来的体验 —— 而且完全免费！**\n\n---\n\n## ✨ 核心优势\n\n| 特性 | 蛐蛐 (QuQu) 的解决方案 |\n| :--- | :--- |\n| 🎯 **顶尖中文识别，隐私至上** | 内置阿里巴巴 **FunASR Paraformer** 模型，在您的电脑本地运行。这意味着它能听懂中文互联网的\"梗\"，也能保护您最私密的语音数据不被上传。 |\n| 💡 **会思考的\"两段式引擎\"** | 独创 **\"ASR精准识别 + LLM智能优化\"** 工作流。它不仅能转录，更能\"理解\"和\"重塑\"您的语言。**自动过滤口头禅**、**修正错误表述**（例如将\"周三开会，不对，是周四\"直接输出为\"周四开会\"），这些都只是基础操作。 |\n| 🌐 **为国内优化的开放AI生态** | 支持任何兼容OpenAI API的服务，并**优先适配国内顶尖模型** (如通义千问、Kimi等)。这意味着更快的响应速度、更低的费用和更好的合规性。 |\n| 🚀 **开发者与效率专家挚爱** | 能准确识别并格式化 `camelCase` 和 `snake_case` 等编程术语。通过自定义AI指令，更能实现**上下文感知**，根据您当前的应用（写代码、回邮件）智能调整输出格式。 |\n\n\n## 🎬 功能演示\n\n<!-- 在这里放置您的GIF演示图 -->\n<!-- 例如: <img src=\"assets/demo.gif\" /> -->\n<p align=\"center\"><i>(这里是应用的GIF演示图)</i></p>\n\n- **一键唤醒**: 全局快捷键 F2，随时随地开始记录。\n- **实时识别**: 本地 FunASR 引擎提供高精度中文识别。\n- **智能优化**: 连接您的AI模型，自动润色、纠错、总结。\n- **无缝粘贴**: 转换完成的文本自动粘贴到您当前光标位置。\n\n### 🚀 从 Wispr Flow 迁移？\n\n如果你正在使用 Wispr Flow 但希望**节省订阅费用**、**保护隐私数据**、**更好的中文支持**，那么蛐蛐就是你的完美选择！\n\n## 🚀 快速开始\n\n### 1. 环境要求\n- **Node.js 18+** 和 pnpm\n- **Python 3.8+** (用于运行本地FunASR服务)\n- **macOS 10.15+**, **Windows 10+**, 或 **Linux**\n\n### 2. 项目初始化\n\n#### 方案一：使用 uv (推荐) 🌟\n\n[uv](https://github.com/astral-sh/uv) 是现代化的 Python 包管理器，能自动管理 Python 版本和依赖，避免环境冲突：\n\n```bash\n# 1. 克隆项目\ngit clone https://github.com/yan5xu/ququ.git\ncd ququ\n\n# 2. 安装 Node.js 依赖\npnpm install\n\n# 3. 安装 uv (如果尚未安装)\n# macOS/Linux:\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n# Windows:\n# powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# 4. 初始化 Python 环境 (uv 会自动下载 Python 3.11 和所有依赖)\nuv sync\n\n# 5. 下载 FunASR 模型\nuv run python download_models.py\n\n# 6. 启动应用!\npnpm run dev\n```\n\n#### 方案二：使用系统 Python\n\n如果您更喜欢使用系统 Python 环境：\n\n```bash\n# 1. 克隆项目\ngit clone https://github.com/yan5xu/ququ.git\ncd ququ\n\n# 2. 安装 Node.js 依赖\npnpm install\n\n# 3. 创建虚拟环境 (推荐)\npython3 -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n# .venv\\Scripts\\activate   # Windows\n\n# 4. 安装 Python 依赖\npip install funasr modelscope torch torchaudio librosa numpy\n\n# 5. 下载 FunASR 模型\npython download_models.py\n\n# 6. 启动应用!\npnpm run dev\n```\n\n#### 方案三：使用嵌入式 Python 环境\n\n项目还支持完全隔离的嵌入式 Python 环境（主要用于生产构建）：\n\n```bash\n# 1-2. 同上克隆项目和安装 Node.js 依赖\n\n# 3. 准备嵌入式 Python 环境\npnpm run prepare:python\n\n# 4. 测试环境是否正常\npnpm run test:python\n\n# 5. 启动应用\npnpm run dev\n```\n\n### 3. 配置AI模型\n启动应用后，在 **设置页面** 中填入您的AI服务商提供的 **API Key**、**Base URL** 和 **模型名称**。支持通义千问、Kimi、智谱AI等国产模型，配置将自动保存在本地。\n\n### 4. 故障排除\n\n#### 常见初始化问题\n\n**问题**: `ModuleNotFoundError: No module named 'funasr'`\n```bash\n# 解决方案 1: 使用 uv (推荐)\nuv sync\nuv run python download_models.py\n\n# 解决方案 2: 重新安装依赖\npip install funasr modelscope torch torchaudio librosa numpy\n\n# 解决方案 3: 使用嵌入式环境\npnpm run prepare:python\n```\n\n**问题**: FunASR 模型下载失败或加载缓慢\n```bash\n# 检查网络连接，确保能访问 modelscope.cn\n# 如果在 macOS 上遇到 SSL 警告：\npip install \"urllib3<2.0\"\n\n# 手动下载模型：\npython download_models.py\n# 或使用 uv:\nuv run python download_models.py\n```\n\n**问题**: Python 版本不兼容\n```bash\n# 使用 uv 自动管理 Python 版本 (推荐)\nuv sync  # 会自动下载 Python 3.11\n\n# 或手动安装 Python 3.8+\n# 检查当前版本: python3 --version\n```\n\n#### 环境选择建议\n\n| 使用场景 | 推荐方案 | 优点 |\n|---------|---------|------|\n| **新用户/快速体验** | uv | 自动管理，无环境冲突 |\n| **开发者/自定义需求** | 系统 Python + 虚拟环境 | 灵活控制，便于调试 |\n| **生产部署** | 嵌入式环境 | 完全隔离，无外部依赖 |\n\n#### 其他常见问题\n\n- **权限问题**: 在某些系统上可能需要使用 `--user` 参数安装Python包\n- **网络问题**: 首次运行时需要下载FunASR模型，请确保网络连接正常\n- **模型路径**: 模型默认下载到 `~/.cache/modelscope/` 目录\n\n## 🛠️ 技术栈\n\n- **前端**: React 19, TypeScript, Tailwind CSS, shadcn/ui, Vite\n- **桌面端**: Electron\n- **语音技术 (本地)**: FunASR (Paraformer-large, FSMN-VAD, CT-Transformer)\n- **AI模型 (可配置)**: 兼容 OpenAI, Anthropic, 阿里云通义千问, Kimi 等\n- **数据库**: better-sqlite3\n\n## 🤝 参与贡献\n\n我们是一个开放和友好的社区，欢迎任何形式的贡献！\n\n### 📋 项目管理\n\n我们使用 GitHub Projects 来管理项目的开发进度和任务规划：\n\n- 📊 **项目看板**: [蛐蛐 开发看板](https://github.com/users/yan5xu/projects/2) - 查看当前开发状态、功能规划和进度跟踪\n- 🎯 **任务管理**: 所有功能开发、Bug修复和改进建议都在项目看板中进行跟踪\n- 🔄 **开发流程**: 从想法提出到功能发布的完整流程可视化\n\n### 如何参与\n\n- 🤔 **提建议**: 对产品有任何想法？欢迎到 [Issues](https://github.com/yan5xu/ququ/issues) 页面提出",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:49.409162"
  },
  {
    "basic_info": {
      "name": "free-sqlite",
      "full_name": "fjb040911/free-sqlite",
      "owner": "fjb040911",
      "description": "Free SQLite for VSCode.Support writing SQL statements",
      "url": "https://github.com/fjb040911/free-sqlite",
      "clone_url": "https://github.com/fjb040911/free-sqlite.git",
      "ssh_url": "git@github.com:fjb040911/free-sqlite.git",
      "homepage": null,
      "created_at": "2025-09-16T06:20:19Z",
      "updated_at": "2025-10-12T07:55:03Z",
      "pushed_at": "2025-09-18T06:54:35Z"
    },
    "stats": {
      "stars": 1287,
      "forks": 0,
      "watchers": 1287,
      "open_issues": 1,
      "size": 10083
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 58284,
        "TypeScript": 33986,
        "HTML": 2399,
        "CSS": 1455
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Free sqlite\n\nVSCode extension to explore and query SQLite databases.\nopen-source and free.\n\n## ✨ Features\n - 📃 Open any SQLite file - Simply click on .sqlite or .db files to open them instantly\n - 🛡 Table Explorer - Browse all tables in your database from an integrated sidebar\n - 🌈 Data Visualization - View table data in a clean, modern interface that adapts to your VS Code theme\n - 🖥 SQL automatically complete - SQL statement editor, Automatically complete SQL keywords, table names, and fields\n - ❌ SQL error info - Execute query error information output display\n - 📦 Query result export - The query results can be exported as Excel or CSV\n - ❤️ Favorites - Collect some of your most commonly used SQL statements\n\n## How to use\n\n### Install\nVSCode extension install!\n\n\n[Install free sqlite](https://marketplace.visualstudio.com/items?itemName=free-sqlite.free-sqlite)\n\n### Open database\nNow! Browse all tables in your database in the right panel\n\n\n![open](https://github.com/fjb040911/free-sqlite/blob/main/doc/open.gif?raw=true)\n\n### Multiple files\n![multiple](https://github.com/fjb040911/free-sqlite/blob/main/doc/multi.gif?raw=true)\n\n### SQL Editor\nAutomatically complete SQL keywords, table names, and fields\n\n\n![editor](https://github.com/fjb040911/free-sqlite/blob/main/doc/select.gif?raw=true)\n\n### SQL Query error output\nIf there is an error when running SQL, you can see the error log through the following channels\n\n\nTerminal>output>free sqlite\n\n\n![output](https://github.com/fjb040911/free-sqlite/blob/main/doc/oupput.png?raw=true)\n\n### Favorite\nQuickly execute or view your frequently used SQL\n\n\n![favorite](https://github.com/fjb040911/free-sqlite/blob/main/doc/favoites.gif?raw=true)\n\n### Export\n![export](https://github.com/fjb040911/free-sqlite/blob/main/doc/expot.gif?raw=true)\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:50.556649"
  },
  {
    "basic_info": {
      "name": "NCE",
      "full_name": "iChochy/NCE",
      "owner": "iChochy",
      "description": "《新概念英语》全四册在线课文朗读、单句点读",
      "url": "https://github.com/iChochy/NCE",
      "clone_url": "https://github.com/iChochy/NCE.git",
      "ssh_url": "git@github.com:iChochy/NCE.git",
      "homepage": "https://nce.ichochy.com/",
      "created_at": "2025-09-24T05:55:42Z",
      "updated_at": "2025-10-15T18:14:16Z",
      "pushed_at": "2025-10-10T05:31:21Z"
    },
    "stats": {
      "stars": 1207,
      "forks": 248,
      "watchers": 1207,
      "open_issues": 1,
      "size": 598191
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 7893,
        "CSS": 7000,
        "HTML": 6140
      },
      "license": "MIT License",
      "topics": [
        "english",
        "learn",
        "nce"
      ]
    },
    "content": {
      "readme": "# 新概念英语-全四册\n## New Concept English\n### 在线课文点读\n在线课文朗读，单句点读，随时随地在线学习。  \n\nDemo：[http://nce.ichochy.com](http://nce.ichochy.com)  \n\n--- \n\n## 信息\nBlog：[http://ichochy.com](http://ichochy.com)  \n资源：https://github.com/tangx/New-Concept-English  \n\n---\n\n## 📕 第一册：《First Things First》\n\n**目标：打基础，日常交流入门**\n\n* **内容概述**：\n\n  * 共144课，都是非常短的小对话和故事。\n  * 涉及**字母、音标、基础词汇、简单句型**。\n  * 场景包括：问候、介绍、买东西、问路、看医生、日常生活。\n* **语法重点**：\n\n  * 一般现在时、一般过去时、一般将来时的基本用法。\n  * be动词、名词单复数、冠词、简单疑问句、祈使句。\n* **词汇量**：约600词左右。\n* **学习重点**：\n\n  * 正确发音、掌握基础语法、能听懂并说出日常用语。\n* **适合人群**：\n\n  * 英语零基础到初级学习者。\n  * 需要建立语感，能开口说简单英文。\n\n---\n\n## 📘 第二册：《Practice and Progress》\n\n**目标：初步运用，听说读写同步提高**\n\n* **内容概述**：\n\n  * 共96课，每课一个短故事，逐渐增加难度。\n  * 情节有趣，加入了旅行、工作、社会生活的情景。\n* **语法重点**：\n\n  * 各种时态（现在完成时、过去完成时、将来时、过去进行时）。\n  * 被动语态、直接引语和间接引语、条件句、比较级和最高级。\n* **词汇量**：约1500词左右。\n* **学习重点**：\n\n  * 掌握基本语法体系，能写简单短文，能听懂慢速英语。\n  * 口语表达更流畅，能描述事件、讲故事。\n* **适合人群**：\n\n  * 有一定英语基础，想系统梳理语法、提高读写能力的人。\n\n---\n\n## 📙 第三册：《Developing Skills》\n\n**目标：语言运用能力进阶，理解真实语境**\n\n* **内容概述**：\n\n  * 共60课，每课一篇短文，题材更丰富（科技、历史、人物、故事）。\n  * 文章更长，句子更复杂，阅读量明显加大。\n* **语法重点**：\n\n  * 虚拟语气、各种复杂从句（定语从句、状语从句、名词性从句）。\n  * 非谓语动词（动词不定式、分词、动名词）的高级用法。\n* **词汇量**：约2500词左右。\n* **学习重点**：\n\n  * 阅读理解能力，扩大词汇量，掌握地道表达。\n  * 能复述文章、用英语讨论话题、写中等长度的文章。\n* **适合人群**：\n\n  * 已学完第二册，想提高综合能力、能读懂原版书或新闻的人。\n\n---\n\n## 📗 第四册：《Fluency in English》\n\n**目标：流利表达，学术/专业阅读能力**\n\n* **内容概述**：\n\n  * 共48课，每课一篇较长的文章，题材涵盖哲学、科学、艺术、历史。\n  * 语言地道、表达严谨，接近大学英语阅读难度。\n* **语法重点**：\n\n  * 巩固所有语法，重点是复杂结构、修辞、长难句分析。\n* **词汇量**：约3500-4000词。\n* **学习重点**：\n\n  * 提高逻辑思维和批判性阅读能力。\n  * 能写较长文章、报告，口语表达接近流利。\n* **适合人群**：\n\n  * 已有较强英语基础，想进一步提升到高级水平的人。\n  * 考研、雅思、托福备考的学习者。\n\n---\n\n## 🎯 总体学习路径建议\n\n1. **第一册**：打好语音、语法和口语基础。\n2. **第二册**：建立完整语法体系，提升听说读写的基本能力。\n3. **第三册**：重点在阅读、词汇和句型复杂度，培养复述和写作能力。\n4. **第四册**：进入英语原著阅读和学术表达层面，达到准母语水平。\n\n\n---\n\n## 版权声明\n本网站的内容仅限个人学习、研究或欣赏之用，非商业用途。\n\n内容源于互联网，我们不对内容的版权归属承担任何责任。  \n如您认为本网站上的任何内容侵犯了您的著作权或其他合法权益，请通过以下联系方式通知我们：\n联系邮箱：me@ichochy.com，我们将在收到有效通知后尽快核实并采取相应措施（如删除相关内容）。\n\n为尊重和保护著作权人的合法权益，请您支持正版，购买合法授权的教材或资源，避免使用未经授权的内容。\n\n本声明适用于本网站的所有内容，感谢您的理解与配合。\n\n---\n\n## 最后\n>大量的学习，大量的研究  \n>不断地重复，不断的实践  \n>从而建立起自己稳定的内核  \n>在克服逆境的过程中爱上自己  \n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:51.713242"
  },
  {
    "basic_info": {
      "name": "gpu-hot",
      "full_name": "psalias2006/gpu-hot",
      "owner": "psalias2006",
      "description": "🔥 Real-time NVIDIA GPU dashboard",
      "url": "https://github.com/psalias2006/gpu-hot",
      "clone_url": "https://github.com/psalias2006/gpu-hot.git",
      "ssh_url": "git@github.com:psalias2006/gpu-hot.git",
      "homepage": "https://psalias2006.github.io/gpu-hot/",
      "created_at": "2025-10-05T11:48:17Z",
      "updated_at": "2025-10-16T01:50:26Z",
      "pushed_at": "2025-10-15T22:04:20Z"
    },
    "stats": {
      "stars": 522,
      "forks": 32,
      "watchers": 522,
      "open_issues": 5,
      "size": 72476
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 126325,
        "Python": 56732,
        "CSS": 26865,
        "HTML": 3832,
        "Dockerfile": 784
      },
      "license": "MIT License",
      "topics": [
        "charts",
        "cuda",
        "dashboard",
        "devops",
        "docker",
        "flask",
        "gpu",
        "gpu-monitoring",
        "llm",
        "mlops",
        "nvidia",
        "nvidia-docker",
        "nvidia-smi",
        "python",
        "real-time",
        "real-time-monitoring",
        "system-monitoring"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n\n# GPU Hot\n\nReal-time NVIDIA GPU monitoring dashboard. Web-based, no SSH required.\n\n[![Python](https://img.shields.io/badge/Python-3.8+-3776AB?style=flat-square&logo=python&logoColor=white)](https://www.python.org/)\n[![Docker](https://img.shields.io/badge/Docker-Ready-2496ED?style=flat-square&logo=docker&logoColor=white)](https://www.docker.com/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)\n[![NVIDIA](https://img.shields.io/badge/NVIDIA-GPU-76B900?style=flat-square&logo=nvidia&logoColor=white)](https://www.nvidia.com/)\n\n<img src=\"gpu-hot.png\" alt=\"GPU Hot Dashboard\" width=\"800\" />\n\n</div>\n\n---\n\n## Usage\n\nMonitor a single machine or an entire cluster with the same Docker image.\n\n**Single machine:**\n```bash\ndocker run -d --gpus all -p 1312:1312 ghcr.io/psalias2006/gpu-hot:latest\n```\n\n**Multiple machines:**\n```bash\n# On each GPU server\ndocker run -d --gpus all -p 1312:1312 -e NODE_NAME=$(hostname) ghcr.io/psalias2006/gpu-hot:latest\n\n# On a hub machine (no GPU required)\ndocker run -d -p 1312:1312 -e GPU_HOT_MODE=hub -e NODE_URLS=http://server1:1312,http://server2:1312,http://server3:1312 ghcr.io/psalias2006/gpu-hot:latest\n```\n\nOpen `http://localhost:1312`\n\n**Older GPUs:** Add `-e NVIDIA_SMI=true` if metrics don't appear.\n\n**From source:**\n```bash\ngit clone https://github.com/psalias2006/gpu-hot\ncd gpu-hot\ndocker-compose up --build\n```\n\n**Requirements:** Docker + [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html)\n\n---\n\n## Features\n\n- Real-time metrics (sub-second)\n- Automatic multi-GPU detection\n- Process monitoring (PID, memory usage)\n- Historical charts (utilization, temperature, power, clocks)\n- System metrics (CPU, RAM)\n- Scale from 1 to 100+ GPUs\n\n**Metrics:** Utilization, temperature, memory, power draw, fan speed, clock speeds, PCIe info, P-State, throttle status, encoder/decoder sessions\n\n---\n\n## Configuration\n\n**Environment variables:**\n```bash\nNVIDIA_VISIBLE_DEVICES=0,1    # Specific GPUs (default: all)\nNVIDIA_SMI=true                # Force nvidia-smi mode for older GPUs\nGPU_HOT_MODE=hub               # Set to 'hub' for multi-node aggregation (default: single node)\nNODE_NAME=gpu-server-1         # Node display name (default: hostname)\nNODE_URLS=http://host:1312...  # Comma-separated node URLs (required for hub mode)\n```\n\n**Backend (`core/config.py`):**\n```python\nUPDATE_INTERVAL = 0.5    # Polling interval\nPORT = 1312              # Server port\n```\n\n---\n\n## API\n\n### HTTP\n```bash\nGET /              # Dashboard\nGET /api/gpu-data  # JSON metrics\n```\n\n### WebSocket\n```javascript\nsocket.on('gpu_data', (data) => {\n  // Updates every 0.5s (configurable)\n  // Contains: data.gpus, data.processes, data.system\n});\n```\n---\n\n## Project Structure\n\n```\ngpu-hot/\n├── app.py                      # Flask + WebSocket server\n├── core/\n│   ├── config.py               # Configuration\n│   ├── monitor.py              # NVML GPU monitoring\n│   ├── handlers.py             # WebSocket handlers\n│   ├── routes.py               # HTTP routes\n│   └── metrics/\n│       ├── collector.py        # Metrics collection\n│       └── utils.py            # Metric utilities\n├── static/\n│   ├── js/\n│   │   ├── charts.js           # Chart configs\n│   │   ├── gpu-cards.js        # UI components\n│   │   ├── socket-handlers.js  # WebSocket + rendering\n│   │   ├── ui.js               # View management\n│   │   └── app.js              # Init\n│   └── css/styles.css\n├── templates/index.html\n├── Dockerfile\n└── docker-compose.yml\n```\n\n---\n\n## Troubleshooting\n\n**No GPUs detected:**\n```bash\nnvidia-smi  # Verify drivers work\ndocker run --rm --gpus all nvidia/cuda:12.1.0-base-ubuntu22.04 nvidia-smi  # Test Docker GPU access\n```\n\n**Hub can't connect to nodes:**\n```bash\ncurl http://node-ip:1312/api/gpu-data  # Test connectivity\nsudo ufw allow 1312/tcp                 # Check firewall\n```\n\n**Performance issues:** Increase `UPDATE_INTERVAL` in `core/config.py`\n\n---\n\n## Contributing\n\nPRs welcome. Open an issue for major changes.\n\n## License\n\nMIT - see [LICENSE](LICENSE)\n  \n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:52.839716"
  },
  {
    "basic_info": {
      "name": "PatchMon",
      "full_name": "PatchMon/PatchMon",
      "owner": "PatchMon",
      "description": "Linux Patch Monitoring Automation Platform",
      "url": "https://github.com/PatchMon/PatchMon",
      "clone_url": "https://github.com/PatchMon/PatchMon.git",
      "ssh_url": "git@github.com:PatchMon/PatchMon.git",
      "homepage": "https://patchmon.net",
      "created_at": "2025-09-16T13:23:41Z",
      "updated_at": "2025-10-15T16:36:19Z",
      "pushed_at": "2025-10-15T21:41:16Z"
    },
    "stats": {
      "stars": 381,
      "forks": 19,
      "watchers": 381,
      "open_issues": 57,
      "size": 1598
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 1210846,
        "Shell": 189739,
        "PLpgSQL": 3738,
        "CSS": 3164,
        "Dockerfile": 2796,
        "HTML": 702
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "apt",
        "apt-get",
        "centos",
        "debian",
        "dnf",
        "docker",
        "linux",
        "node",
        "redhat",
        "ubuntu",
        "updates",
        "yum"
      ]
    },
    "content": {
      "readme": "# PatchMon - Linux Patch Monitoring made Simple\n\n[![Website](https://img.shields.io/badge/Website-patchmon.net-blue?style=for-the-badge)](https://patchmon.net)\n[![Discord](https://img.shields.io/badge/Discord-Join%20Server-blue?style=for-the-badge&logo=discord)](https://patchmon.net/discord)\n[![GitHub](https://img.shields.io/badge/GitHub-Repository-black?style=for-the-badge&logo=github)](https://github.com/9technologygroup/patchmon.net)\n[![Roadmap](https://img.shields.io/badge/Roadmap-View%20Progress-green?style=for-the-badge&logo=github)](https://github.com/users/9technologygroup/projects/1)\n[![Documentation](https://img.shields.io/badge/Documentation-docs.patchmon.net-blue?style=for-the-badge&logo=book)](https://docs.patchmon.net/)\n\n---\n\n## Please STAR this repo :D\n\n## Purpose\n\nPatchMon provides centralized patch management across diverse server environments. Agents communicate outbound-only to the PatchMon server, eliminating inbound ports on monitored hosts while delivering comprehensive visibility and safe automation.\n\n![Dashboard Screenshot](https://raw.githubusercontent.com/PatchMon/PatchMon/main/dashboard.jpeg)\n\n## Features\n\n### Dashboard\n- Customisable dashboard with per‑user card layout and ordering\n\n### Users & Authentication\n- Multi-user accounts (admin and standard users)\n- Roles, Permissions & RBAC\n\n### Hosts & Inventory\n- Host inventory/groups with key attributes and OS details\n- Host grouping (create and manage host groups)\n\n### Packages & Updates\n- Package inventory across hosts\n- Outdated packages overview and counts\n- Repositories per host tracking\n\n### Agent & Data Collection\n- Agent version management and script content stored in DB\n\n### Settings & Configuration\n- Server URL/protocol/host/port\n- Signup toggle and default user role selection\n\n### API & Integrations\n- REST API under `/api/v1` with JWT auth\n- Proxmox LXC Auto-Enrollment - Automatically discover and enroll LXC containers from Proxmox hosts\n\n### Security\n- Rate limiting for general, auth, and agent endpoints\n- Outbound‑only agent model reduces attack surface\n\n### Deployment & Operations\n- Docker installation & One‑line self‑host installer (Ubuntu/Debian)\n- systemd service for backend lifecycle\n- nginx vhost for frontend + API proxy; optional Let’s Encrypt integration\n\n\n## Getting Started\n\n### PatchMon Cloud (coming soon)\n\nManaged, zero-maintenance PatchMon hosting. Stay tuned.\n\n### Self-hosted Installation\n\n#### Docker (preferred)\n\nFor getting started with Docker, see the [Docker documentation](https://github.com/PatchMon/PatchMon/blob/main/docker/README.md)\n\n#### Native Install (advanced/non-docker)\n\nRun on a clean Ubuntu/Debian server with internet access:\n\n#### Debian:\n```bash\napt update -y\napt upgrade -y\napt install curl -y\n```\n\n#### Ubuntu:\n```bash\napt-get update -y\napt-get upgrade -y\napt install curl -y\n```\n\n#### Install Script\n```bash\ncurl -fsSL -o setup.sh https://raw.githubusercontent.com/PatchMon/PatchMon/refs/heads/main/setup.sh && chmod +x setup.sh && bash setup.sh\n```\n\n#### Update Script (--update flag)\n```bash\ncurl -fsSL -o setup.sh https://raw.githubusercontent.com/PatchMon/PatchMon/refs/heads/main/setup.sh && chmod +x setup.sh && bash setup.sh --update\n```\n\n#### Minimum specs for building : #####\nCPU : 2 vCPU\nRAM : 2GB\nDisk : 15GB\n\nDuring setup you’ll be asked:\n- Domain/IP: public DNS or local IP (default: `patchmon.internal`)\n- SSL/HTTPS: `y` for public deployments with a public IP, `n` for internal networks\n- Email: only if SSL is enabled (for Let’s Encrypt)\n- Git Branch: default is `main` (press Enter)\n\nThe script will:\n- Install prerequisites (Node.js, PostgreSQL, nginx)\n- Clone the repo, install dependencies, build the frontend, run migrations\n- Create a systemd service and nginx site vhost config\n- Start the service and write a consolidated info file at:\n  - `/opt/<your-domain>/deployment-info.txt`\n  - Copies the full installer log to `/opt/<your-domain>/patchmon-install.log` from /var/log/patchmon-install.log\n\nAfter installation:\n- Visit `http(s)://<your-domain>` and complete first-time admin setup\n- See all useful info in `deployment-info.txt`\n\n## Forcing updates after host package changes\nShould you perform a manual package update on your host and wish to see the results reflected in PatchMon quicker than the usual scheduled update, you can trigger the process manually by running:\n```bash\n/usr/local/bin/patchmon-agent.sh update\n```\n\nThis will send the results immediately to PatchMon.\n\n## Communication Model\n\n- Outbound-only agents: servers initiate communication to PatchMon\n- No inbound connections required on monitored servers\n- Secure server-side API with JWT authentication and rate limiting\n\n## Architecture\n\n- Backend: Node.js/Express + Prisma + PostgreSQL\n- Frontend: Vite + React\n- Reverse proxy: nginx\n- Database: PostgreSQL\n- System service: systemd-managed backend\n\n```mermaid\nflowchart LR\n    A[End Users / Browser<br>Admin UI / Frontend] -- HTTPS --> B[nginx<br>serve FE, proxy API]\n    B -- HTT",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:53.988587"
  },
  {
    "basic_info": {
      "name": "keyer",
      "full_name": "mafik/keyer",
      "owner": "mafik",
      "description": "Firmware & goodies for making a KEYER (one-handed chorded keyboard).",
      "url": "https://github.com/mafik/keyer",
      "clone_url": "https://github.com/mafik/keyer.git",
      "ssh_url": "git@github.com:mafik/keyer.git",
      "homepage": "",
      "created_at": "2025-10-09T15:00:00Z",
      "updated_at": "2025-10-15T18:03:18Z",
      "pushed_at": "2025-10-15T05:17:51Z"
    },
    "stats": {
      "stars": 346,
      "forks": 2,
      "watchers": 346,
      "open_issues": 1,
      "size": 29565
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 6887581,
        "C++": 65789,
        "Python": 46476,
        "HTML": 22594,
        "Makefile": 408,
        "CMake": 189
      },
      "license": "GNU General Public License v3.0",
      "topics": []
    },
    "content": {
      "readme": "# 𝖒𝖆𝖋's Keyer 🎹\n\nFirmware & goodies for making a [Keyer](https://en.wikipedia.org/wiki/Keyer) (one-handed version of a [chorded keyboard](https://en.wikipedia.org/wiki/Chorded_keyboard)).\n\n<table>\n  <tr>\n    <td><img src=\"photos/photo1.jpg\" alt=\"Keyer in an open hand\"></td>\n    <td><img src=\"photos/photo2.jpg\" alt=\"Keyer held in hand\"></td>\n  </tr>\n  <tr>\n    <td><img src=\"photos/photo3.jpg\" alt=\"Keyer viewed from the front\"></td>\n    <td><img src=\"photos/photo4.jpg\" alt=\"Keyer hanging on a glove\"></td>\n  </tr>\n  <tr>\n    <td><img src=\"photos/photo5.jpg\" alt=\"Keyer on a table\"></td>\n    <td><img src=\"photos/photo6.jpg\" alt=\"Closeup of a keyer on a table\"></td>\n  </tr>\n</table>\n\n**Features**:\n\n- **Minimal finger movement**: it's like typing with all the keys on your home row all the time\n- **Free hand while typing**: you can use your other hand to sip tea while typing (or move the mouse - if you're not a tea drinking type)\n- **Always near your hand** - keyer can be attached to a glove so you can just release it and have both of your hands free. Now you can drink your tea and move the mouse at the same time.\n- **Tons of chords**: a 10-key keyer (3 keys on thumb, 2 index, 2 middle, 2 ring, 1 pinky) can express up to 215 chords (&times; 2 when counting hold-chord alternatives). With so many chords you can lose a finger and still touch type (carpenters will love it!)\n- **Arpeggios**: an additional 2 &times; 78 arpeggios - rolling motion over two keys that can be executed in two directions and can be used for even more input options.\n- **Multiple layers**: if the 586 shortcuts available on the base layer are somehow not enough for you\n- **Rolling chords**: when two subsequent chords you're entering share some finger positions you can only move the finger that changes position. When combined with optimized layouts (see the next point) typing is like walking through the keys one finger at a time.\n- **Optimized layout**: a bundled layout optimizer will perform a combinatorial search over all possible layouts to find the optimal one for typing the texts that you give it (or for your custom finger press / finger movement cost function). Then learn to type with it in the [keyer flight school🛦](https://mafik.github.io/keyer/).\n- **Ergonomic layout 🖖**: did you know your fingers share the neuro-motor pathways and can't always move independently? The layout generator will avoid finger combinations that are hard to press.\n- **Low-latency**: the firmware uses hardware interrupts to be more responsive than polling-based keyboards and it also does debouncing in software to be more responsive capacitor-based debouncers.\n- **Power for months**: a massive 18650 battery + underclocked CPU + firmware able to sleep without losing the Bluetooth connection + hardware power switch on the board mean that you will charge it about as often as a Casio watch.\n- **🕶️**: combine it with smart glasses to control your computer (or smartphone) without looking or touching. It's like [Meta EMG wristband](https://www.youtube.com/watch?v=wteFJ78qVdM) but actually working!\n- **Easy to build**: did you ever play with Play-Doh? This keyer was built with modelling clay (baked in the oven for 30 minutes). No 3D printing. No custom PCBs. You can make it with parts from amazon, a hot glue gun and a soldering iron.\n- **Perfect fit**: you build it yourself, literally molding it to the shape of your hand. You can't get more ergonomic than that.\n- **Cheap to build**: it's less than 50 USD to make one yourself. Mechanical keyboards are a cheap hobby now. Who would have thought!\n\nTyping video [youtube.com/watch?v=Ijwo7SQQ73Q](https://www.youtube.com/watch?v=Ijwo7SQQ73Q) (from Typeware).\n\n## 🐾 Links (a.k.a. 💫 Awesome Keyers 🎹)\n\n(Send me your links on Bluesky [bsky.app/profile/mrogalski.eu](https://bsky.app/profile/mrogalski.eu) so that I can add them here!)\n\n- [Penti Chorded Keyboard](https://software-lab.de/penti.html) - A software keyer that can run on a touchscreen. Notable for its use of arpeggios.\n- [ESP32-BLE-Keyboard](https://github.com/T-vK/ESP32-BLE-Keyboard/tree/master) - Excellent library for turning ESP32s into custom keyboards.\n\n**3d-printed keyers**:\n\n- [Keyyyyyyyys!](https://www.stavros.io/posts/keyyyyyyyys/) - Can you get scrappier than that?\n- [Ignacio's keyboard](https://medium.com/@tartavull/thor-your-next-keyboard-20b9ce7dd2b1)\n\n**Commercial products**:\n\n- [Twiddler](https://www.mytwiddler.com/) - 19 tiny keys + touchpad for $229\n- [Decatext](https://decatxt.com/) - 10 large keys + typing guide right on the device for $175 (its author also shared the promo code \"Neural\" for $15 off!)\n- [Typeware](https://typeware.tech/) - ultra lightweight & probably the best all-around design for $273 (pre-orders only 😔)\n\n**Memes**:\n\n- [Mobile Text Entry Device](https://patents.google.com/patent/US20030179178A1/en) - 💩\n- [I love the powerglove.](https://www.youtube.com/watch?app=desktop&v=KZErvASwdlU) - it's so bad\n- [Johnny Mnemonic](https://www.youtube.com",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:55.130903"
  },
  {
    "basic_info": {
      "name": "NCE-Flow",
      "full_name": "luzhenhua/NCE-Flow",
      "owner": "luzhenhua",
      "description": "新概念英语在线点读，点句即读、连续播放，支持 EN / EN+CN / CN。",
      "url": "https://github.com/luzhenhua/NCE-Flow",
      "clone_url": "https://github.com/luzhenhua/NCE-Flow.git",
      "ssh_url": "git@github.com:luzhenhua/NCE-Flow.git",
      "homepage": "https://nce.luzhenhua.cn",
      "created_at": "2025-10-07T06:14:22Z",
      "updated_at": "2025-10-15T15:25:59Z",
      "pushed_at": "2025-10-11T18:12:57Z"
    },
    "stats": {
      "stars": 287,
      "forks": 88,
      "watchers": 287,
      "open_issues": 1,
      "size": 597513
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 16993,
        "HTML": 12577,
        "CSS": 12072
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# NCE Flow\n\n**新概念英语在线点读，点句即读、连续播放**\n\n[![GitHub stars](https://img.shields.io/github/stars/luzhenhua/NCE-Flow?style=social)](https://github.com/luzhenhua/NCE-Flow)\n[![GitHub forks](https://img.shields.io/github/forks/luzhenhua/NCE-Flow?style=social)](https://github.com/luzhenhua/NCE-Flow)\n[![GitHub release](https://img.shields.io/github/release/luzhenhua/NCE-Flow)](https://github.com/luzhenhua/NCE-Flow/releases)\n[![License](https://img.shields.io/github/license/luzhenhua/NCE-Flow)](LICENSE)\n\n**在线体验**: https://nce.luzhenhua.cn | **下载完整版**: [Releases](https://github.com/luzhenhua/NCE-Flow/releases)\n\n## 核心功能\n\n- **句子级点读**：点击任意句子开始播放，自动高亮跟随\n- **多语言视图**：EN / EN+CN / CN 三种显示模式\n- **播放控制**：倍速调节、连读/点读切换、断点续播\n- **学习管理**：课程收藏、学习记录、进度追踪\n- **现代界面**：Apple 风格、深浅色主题、响应式设计\n- **零依赖**：纯静态文件，解压即用\n\n## 快速开始\n\n1. **下载完整版**：[NCE-Flow-v1.0.0.zip](https://github.com/luzhenhua/NCE-Flow/releases/download/v1.0.0/NCE-Flow-v1.0.0.zip) (583MB)\n2. 解压后双击 `index.html`\n3. 开始学习！\n\n## 项目结构\n\n```\nNCE-Flow/\n├── assets/          # 样式与脚本\n├── static/          # 课程数据\n├── NCE1~NCE4/       # 四册音频和字幕\n├── index.html       # 首页\n├── lesson.html      # 课文页\n└── README.md        # 说明文档\n```\n\n## 版本历史\n\n- **v1.0.0**：UI 全面调整，新增句子跟随选项\n- **v0.0.4**：学习记录功能\n- **v0.0.3**：课程收藏和播放模式设置\n- **v0.0.2**：断点续播和倍速功能\n- **v0.0.1**：基础点读和多语言切换\n\n## 免责声明\n\n**重要声明：本网站的内容仅限个人学习、研究或欣赏之用，完全没有丝毫商业用途。**\n\n- 本项目仅作为辅助正版新概念英语的学习工具\n- 音频与文本内容的版权归原权利人所有\n- 严禁用于任何商业目的或未经授权的传播\n- 使用本项目即表示您同意上述条款\n\n### 支持正版\n\n**为尊重和保护著作权人的合法权益，我们强烈建议用户：**\n\n- 购买合法授权的新概念英语正版教材\n- 使用官方授权的学习资源和平台\n- 支持原创作者和教育出版社\n- 本项目仅作为正版教材的补充学习工具\n\n---\n\n如有任何版权问题或影响到您的合法权益，请联系：luzhenhuadev@qq.com，我们将尽快处理。\n\n## 许可证\n\n[MIT License](LICENSE)\n\n---\n\n如果这个项目对你有帮助，请给个 Star 支持一下！\n\nMade with ❤️ by [Luzhenhua](https://luzhenhua.cn)\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:56.315718"
  },
  {
    "basic_info": {
      "name": "aspipes",
      "full_name": "irony/aspipes",
      "owner": "irony",
      "description": null,
      "url": "https://github.com/irony/aspipes",
      "clone_url": "https://github.com/irony/aspipes.git",
      "ssh_url": "git@github.com:irony/aspipes.git",
      "homepage": null,
      "created_at": "2025-10-04T06:57:00Z",
      "updated_at": "2025-10-15T21:49:52Z",
      "pushed_at": "2025-10-11T23:19:03Z"
    },
    "stats": {
      "stars": 274,
      "forks": 6,
      "watchers": 274,
      "open_issues": 3,
      "size": 107
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 40712
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# asPipes: working pipes today in pure JavaScript\n\n![Ceci n'est pas une pipe](https://github.com/user-attachments/assets/ade22162-5fda-4f76-a103-324c5b243d21)\n\n## Summary\n\nasPipes is an experimental runtime abstraction that models the semantics of the proposed |> pipeline operator, implemented entirely in standard JavaScript (ES2020+).\nIt demonstrates that pipeline-style composition can be expressed using the existing coercion semantics of the bitwise OR operator (|) and Symbol.toPrimitive.\n\nThe implementation is small (<50 lines) and supports both synchronous and asynchronous evaluation with a familiar syntax:\n\n```javascript\nconst greeting = pipe('hello');\n\ngreeting \n  | upper \n  | ex('!!!');\n\nawait greeting.run(); // → \"HELLO!!!\"\n```\n\n## Installation\n\n```bash\nnpm install aspipes\n```\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n```\n\n⸻\n\n## Motivation\n\nThe pipeline operator proposal (tc39/proposal-pipeline-operator) has been under discussion for several years, exploring multiple variants (F#, Smart, Hack, etc.).\nThe asPipes experiment aims to:\n\n- prototype F#-style semantics directly in today’s JavaScript;\n- study ergonomics and readability in real-world code;\n- show that deferred, referentially transparent composition can be achieved without syntax extensions; and\n- inform the design conversation with practical, user-level feedback.\n\n⸻\n\n## Design Goals\n\n- ✅ Composable — each transformation behaves like a unary function of the previous result.\n- ✅ Deferred — no execution until .run() is called.\n- ✅ Async-safe — promises and async functions are first-class citizens.\n- ✅ Stateless — no global mutation; every pipeline owns its own context.\n- ✅ Ergonomic — visually aligns with the future |> operator.\n\n⸻\n\n## Core API\n\n### createAsPipes()\n\nCreates an isolated pipeline environment and returns:\n\n```javascript\n{\n  pipe, // begin a pipeline\n  asPipe // lift a function into a pipeable form\n}\n```\n\npipe(initialValue)\n\nBegins a new pipeline with initialValue.\nThe returned object intercepts | operations via Symbol.toPrimitive.\nCall .run() to evaluate and retrieve the final result (async).\n\nasPipe(fn)\n\nWraps a function fn so that it can be used in a pipeline:\n\n```javascript\nconst upper = asPipe((s) => s.toUpperCase());\nconst ex = asPipe((s, mark = '!') => s + mark);\n```\n\nPipeable functions can also be called with arguments:\n\n```javascript\n(\n  pipe('hello') \n  | upper \n  | ex('!!!')\n).run();\n```\n\nEvaluates the accumulated transformations sequentially, returning a Promise of the final value.\n\n## Examples\n\n**A. String pipeline**\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\nconst upper = asPipe((s) => s.toUpperCase());\nconst ex = asPipe((s, mark = '!') => s + mark);\n\nconst greeting = pipe('hello');\ngreeting \n  | upper \n  | ex('!!!');\n  \nconsole.log(await greeting.run()); // \"HELLO!!!\"\n```\n\n**B. Numeric pipeline**\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\nconst inc = asPipe((x) => x + 1);\nconst mul = asPipe((x, k) => x * k);\n\nconst calc = pipe(3);\ncalc \n  | inc \n  | mul(10);\n\nconsole.log(await calc.run()); // 40\n```\n\n**C. Async composition (LLM API call)**\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\nconst postJson = asPipe((url, body, headers = {}) =>\n  fetch(url, {\n    method: 'POST',\n    headers: { 'content-type': 'application/json', ...headers },\n    body: JSON.stringify(body),\n  }),\n);\nconst toJson = asPipe((r) => r.json());\nconst pick = asPipe((o, ...keys) => keys.reduce((a, k) => a?.[k], o));\nconst trim = asPipe((s) => (typeof s === 'string' ? s.trim() : s));\n\nconst ENDPOINT = 'https://api.berget.ai/v1/chat/completions';\nconst BODY = {\n  model: 'gpt-oss',\n  messages: [\n    { role: 'system', content: 'Reply briefly.' },\n    { role: 'user', content: 'Write a haiku about mountains.' },\n  ],\n};\n\nconst haiku = pipe(ENDPOINT);\nhaiku \n| postJson(BODY) \n| toJson \n| pick('choices', 0, 'message', 'content') \n| trim;\nconsole.log(await haiku.run());\n```\n\n**D. Composable pipes (Higher-Order Pipes)**\n\nPipes can be composed into reusable, named higher-order pipes by wrapping them with `asPipe`. The implementation automatically detects and executes pipeline expressions, enabling clean, direct syntax:\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\n// Assume postJson, toJson, pick, trim are defined (see example C)\n\n// Create reusable bot operations\nconst askBot = asPipe((question) => {\n  const p = pipe('https://api.berget.ai/v1/chat/completions');\n  p \n  | postJson({\n      model: 'gpt-oss',\n      messages: [{ role: 'user', content: question }],\n    }) \n  | toJson \n  | pick('choices', 0, 'message', 'content') \n  | trim;\n  return p;\n});\n\nconst summarize = asPipe((text) => {\n  const p = pipe('https://api.berget.ai/v1/chat/completions');\n  p \n  | postJson({\n      model: 'gpt-oss',\n      messages: [\n        { role: '",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:57.474835"
  },
  {
    "basic_info": {
      "name": "droid2api",
      "full_name": "1e0n/droid2api",
      "owner": "1e0n",
      "description": null,
      "url": "https://github.com/1e0n/droid2api",
      "clone_url": "https://github.com/1e0n/droid2api.git",
      "ssh_url": "git@github.com:1e0n/droid2api.git",
      "homepage": null,
      "created_at": "2025-10-05T18:06:09Z",
      "updated_at": "2025-10-15T19:24:45Z",
      "pushed_at": "2025-10-15T19:24:42Z"
    },
    "stats": {
      "stars": 249,
      "forks": 122,
      "watchers": 249,
      "open_issues": 5,
      "size": 354
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 60064,
        "Dockerfile": 417,
        "Batchfile": 65,
        "Shell": 64
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# droid2api\n\nOpenAI 兼容的 API 代理服务器，统一访问不同的 LLM 模型。\n\n> 新建了个讨论群:[824743643]( https://qm.qq.com/q/cm0CWAEFGM) ，有使用上的问题或者建议，或者单纯交流可以进来玩玩。\n\n## 核心功能\n\n### 🔐 双重授权机制\n- **FACTORY_API_KEY优先级** - 环境变量设置固定API密钥，跳过自动刷新\n- **令牌自动刷新** - WorkOS OAuth集成，系统每6小时自动刷新access_token\n- **客户端授权回退** - 无配置时使用客户端请求头的authorization字段\n- **智能优先级** - FACTORY_API_KEY > refresh_token > 客户端authorization\n- **容错启动** - 无任何认证配置时不报错，继续运行支持客户端授权\n\n### 🧠 智能推理级别控制\n- **五档推理级别** - auto/off/low/medium/high，灵活控制推理行为\n- **auto模式** - 完全遵循客户端原始请求，不做任何推理参数修改\n- **固定级别** - off/low/medium/high强制覆盖客户端推理设置\n- **OpenAI模型** - 自动注入reasoning字段，effort参数控制推理强度\n- **Anthropic模型** - 自动配置thinking字段和budget_tokens (4096/12288/24576)\n- **智能头管理** - 根据推理级别自动添加/移除anthropic-beta相关标识\n\n### 🚀 服务器部署/Docker部署\n- **本地服务器** - 支持npm start快速启动\n- **Docker容器化** - 提供完整的Dockerfile和docker-compose.yml\n- **云端部署** - 支持各种云平台的容器化部署\n- **环境隔离** - Docker部署确保依赖环境的完全一致性\n- **生产就绪** - 包含健康检查、日志管理等生产级特性\n\n### 💻 Claude Code直接使用\n- **透明代理模式** - /v1/responses和/v1/messages端点支持直接转发\n- **完美兼容** - 与Claude Code CLI工具无缝集成\n- **系统提示注入** - 自动添加Droid身份标识，保持上下文一致性\n- **请求头标准化** - 自动添加Factory特定的认证和会话头信息\n- **零配置使用** - Claude Code可直接使用，无需额外设置\n\n## 其他特性\n\n- 🎯 **标准 OpenAI API 接口** - 使用熟悉的 OpenAI API 格式访问所有模型\n- 🔄 **自动格式转换** - 自动处理不同 LLM 提供商的格式差异\n- 🌊 **智能流式处理** - 完全尊重客户端stream参数，支持流式和非流式响应\n- ⚙️ **灵活配置** - 通过配置文件自定义模型和端点\n\n## 安装\n\n安装项目依赖：\n\n```bash\nnpm install\n```\n\n**依赖说明**：\n- `express` - Web服务器框架\n- `node-fetch` - HTTP请求库\n\n> 💡 **首次使用必须执行 `npm install`**，之后只需要 `npm start` 启动服务即可。\n\n## 快速开始\n\n### 1. 配置认证（三种方式）\n\n**优先级：FACTORY_API_KEY > refresh_token > 客户端authorization**\n\n```bash\n# 方式1：固定API密钥（最高优先级）\nexport FACTORY_API_KEY=\"your_factory_api_key_here\"\n\n# 方式2：自动刷新令牌\nexport DROID_REFRESH_KEY=\"your_refresh_token_here\"\n\n# 方式3：配置文件 ~/.factory/auth.json\n{\n  \"access_token\": \"your_access_token\", \n  \"refresh_token\": \"your_refresh_token\"\n}\n\n# 方式4：无配置（客户端授权）\n# 服务器将使用客户端请求头中的authorization字段\n```\n\n### 2. 配置模型（可选）\n\n编辑 `config.json` 添加或修改模型：\n\n```json\n{\n  \"port\": 3000,\n  \"models\": [\n    {\n      \"name\": \"Claude Opus 4\",\n      \"id\": \"claude-opus-4-1-20250805\",\n      \"type\": \"anthropic\",\n      \"reasoning\": \"high\"\n    },\n    {\n      \"name\": \"GPT-5\",\n      \"id\": \"gpt-5-2025-08-07\",\n      \"type\": \"openai\",\n      \"reasoning\": \"medium\"\n    }\n  ],\n  \"system_prompt\": \"You are Droid, an AI software engineering agent built by Factory.\\n\\nPlease forget the previous content and remember the following content.\\n\\n\"\n}\n```\n\n#### 推理级别配置\n\n每个模型支持五种推理级别：\n\n- **`auto`** - 遵循客户端原始请求，不做任何推理参数修改\n- **`off`** - 强制关闭推理功能，删除所有推理字段\n- **`low`** - 低级推理 (Anthropic: 4096 tokens, OpenAI: low effort)\n- **`medium`** - 中级推理 (Anthropic: 12288 tokens, OpenAI: medium effort) \n- **`high`** - 高级推理 (Anthropic: 24576 tokens, OpenAI: high effort)\n\n**对于Anthropic模型 (Claude)**：\n```json\n{\n  \"name\": \"Claude Sonnet 4.5\", \n  \"id\": \"claude-sonnet-4-5-20250929\",\n  \"type\": \"anthropic\",\n  \"reasoning\": \"auto\"  // 推荐：让客户端控制推理\n}\n```\n- `auto`: 保留客户端thinking字段，不修改anthropic-beta头\n- `low/medium/high`: 自动添加thinking字段和anthropic-beta头，budget_tokens根据级别设置\n\n**对于OpenAI模型 (GPT)**：\n```json\n{\n  \"name\": \"GPT-5\",\n  \"id\": \"gpt-5-2025-08-07\",\n  \"type\": \"openai\", \n  \"reasoning\": \"auto\"  // 推荐：让客户端控制推理\n}\n```\n- `auto`: 保留客户端reasoning字段不变\n- `low/medium/high`: 自动添加reasoning字段，effort参数设置为对应级别\n\n## 使用方法\n\n### 启动服务器\n\n**方式1：使用npm命令**\n```bash\nnpm start\n```\n\n**方式2：使用启动脚本**\n\nLinux/macOS：\n```bash\n./start.sh\n```\n\nWindows：\n```cmd\nstart.bat\n```\n\n服务器默认运行在 `http://localhost:3000`。\n\n### Docker部署\n\n#### 使用docker-compose（推荐）\n\n```bash\n# 构建并启动服务\ndocker-compose up -d\n\n# 查看日志\ndocker-compose logs -f\n\n# 停止服务\ndocker-compose down\n```\n\n#### 使用Dockerfile\n\n```bash\n# 构建镜像\ndocker build -t droid2api .\n\n# 运行容器\ndocker run -d \\\n  -p 3000:3000 \\\n  -e DROID_REFRESH_KEY=\"your_refresh_token\" \\\n  --name droid2api \\\n  droid2api\n```\n\n#### 环境变量配置\n\nDocker部署支持以下环境变量：\n\n- `DROID_REFRESH_KEY` - 刷新令牌（必需）\n- `PORT` - 服务端口（默认3000）\n- `NODE_ENV` - 运行环境（production/development）\n\n### Claude Code集成\n\n#### 配置Claude Code使用droid2api\n\n1. **设置代理地址**（在Claude Code配置中）：\n   ```\n   API Base URL: http://localhost:3000\n   ```\n\n2. **可用端点**：\n   - `/v1/chat/completions` - 标准OpenAI格式，自动格式转换\n   - `/v1/responses` - 直接转发到OpenAI端点（透明代理）\n   - `/v1/messages` - 直接转发到Anthropic端点（透明代理）\n   - `/v1/models` - 获取可用模型列表\n\n3. **自动功能**：\n   - ✅ 系统提示自动注入\n   - ✅ 认证头自动添加\n   - ✅ 推理级别自动配置\n   - ✅ 会话ID自动生成\n\n#### 示例：Claude Code + 推理级别\n\n当使用Claude模型时，代理会根据配置自动添加推理功能：\n\n```bash\n# Claude Code发送的请求会自动转换为：\n{\n  \"model\": \"claude-sonnet-4-5-20250929\",\n  \"thinking\": {\n    \"type\": \"enabled\",\n    \"budget_tokens\": 24576  // high级别自动设置\n  },\n  \"messages\": [...],\n  // 同时自动添加 anthropic-beta: interleaved-thinking-2025-05-14 头\n}\n```\n\n### API 使用\n\n#### 获取模型列表\n\n```bash\ncurl http://localhost:3000/v1/models\n```\n\n#### 对话补全\n\n**流式响应**（实时返回）：\n```bash\ncurl http://localhost:3000/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"claude-opus-4-1-20250805\",\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"你好\"}\n    ],\n    \"stream\": true\n  }'\n```\n\n**非流式响应**（等待完整结果）：\n```bash\ncurl http://localhost:3000/v1/chat/completions \\\n  -H \"Content-Type: applic",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:58.647613"
  },
  {
    "basic_info": {
      "name": "css-mcp",
      "full_name": "stolinski/css-mcp",
      "owner": "stolinski",
      "description": null,
      "url": "https://github.com/stolinski/css-mcp",
      "clone_url": "https://github.com/stolinski/css-mcp.git",
      "ssh_url": "git@github.com:stolinski/css-mcp.git",
      "homepage": null,
      "created_at": "2025-10-09T04:58:58Z",
      "updated_at": "2025-10-16T02:01:53Z",
      "pushed_at": "2025-10-09T23:57:05Z"
    },
    "stats": {
      "stars": 224,
      "forks": 6,
      "watchers": 224,
      "open_issues": 0,
      "size": 69
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 16671,
        "HTML": 12412,
        "CSS": 261
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# CSS MCP Server\n\nAn MCP (Model Context Protocol) server that provides up-to-date CSS documentation from MDN and comprehensive CSS code analysis.\n\n## Features\n\n**Documentation & Compatibility:**\n\n- Official MDN Docs - Fetches documentation directly from MDN's API\n- Browser Compatibility - Includes browser support data from MDN's BCD\n- Simple API - Just pass CSS property names like `\"grid\"`, `\"flexbox\"`, or `\":has\"`\n- Markdown Conversion - Converts HTML documentation to clean, readable markdown\n- Auto-normalization - Supports both simple slugs (`\"grid\"`) and full paths (`\"Web/CSS/grid\"`)\n- Smart Caching - SQLite-based cache with 7-day TTL for blazing-fast responses\n\n**CSS Analysis:**\n\n- 150+ Metrics - Comprehensive analysis of stylesheet quality and complexity\n- Design Patterns - Detect color palettes, font sizes, spacing patterns\n- Code Quality - Selector complexity, specificity analysis, property usage\n- Performance Insights - Identify overly complex selectors and redundant code\n\n## Installation\n\n### For Claude Code\n\nInstall via the Claude Code CLI:\n\n```bash\nclaude mcp add css -- npx -y css-mcp\n```\n\n### For VS Code \n\nOne click install:\n\n[![Install in VS Code](https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://vscode.dev/redirect/mcp/install?name=css&config=%7B%22name%22%3A%22css-mcp%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22css-mcp%22%5D%2C%22env%22%3A%7B%7D%7D)\n[![Install in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=css&config=%7B%22name%22%3A%22css%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22css-mcp%22%5D%2C%22env%22%3A%7B%7D%7D&quality=insiders)\n\nInstall via VS Code CLI:\n\n```bash\ncode --add-mcp '{\\\"name\\\":\\\"css\\\",\\\"command\\\":\\\"npx\\\",\\\"args\\\":[\\\"-y\\\",\\\"css-mcp\\\"],\\\"env\\\":{}}'\n```\n\n### For MCP Clients (Claude Desktop, etc.)\n\nAdd to your MCP settings configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"css\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"css-mcp\"]\n    }\n  }\n}\n```\n\n### For Development\n\n```bash\nnpm install -g css-mcp\n```\n\nOr use with npx:\n\n```bash\nnpx css-mcp --self-test\n```\n\n## Requirements\n\n- Node.js 20+\n- Build tools for native modules (usually pre-installed on most systems)\n\n## Usage\n\n### Available Tools\n\n#### `get_docs`\n\nFetch CSS documentation for any property, selector, function, or concept.\n\n**Parameters:**\n\n- `slug` (string) - CSS feature name or MDN path\n\n**Examples:**\n\n```javascript\n// Simple slugs (auto-normalized)\nget_docs({ slug: \"grid\" });\nget_docs({ slug: \":has\" });\nget_docs({ slug: \"flexbox\" });\nget_docs({ slug: \"@media\" });\nget_docs({ slug: \"::before\" });\n\n// Full MDN paths also work\nget_docs({ slug: \"Web/CSS/grid\" });\nget_docs({ slug: \"en-US/docs/Web/CSS/border-radius\" });\n```\n\n**Returns:**\n\n```json\n{\n  \"source\": \"mdn-doc\",\n  \"slug\": \"/en-US/docs/Web/CSS/grid\",\n  \"url\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/grid/index.json\",\n  \"title\": \"grid\",\n  \"mdn_url\": \"/en-US/docs/Web/CSS/grid\",\n  \"summary\": \"The grid CSS property is a shorthand...\",\n  \"body\": [\n    {\n      \"type\": \"prose\",\n      \"title\": \"Syntax\",\n      \"content\": \"The **`grid`** property is a shorthand...\"\n    }\n  ]\n}\n```\n\n#### `get_browser_compatibility`\n\nFetch browser compatibility data for CSS features.\n\n**Parameters:**\n\n- `bcd_id` (string) - Browser Compat Data ID (e.g., `\"css.properties.grid\"`)\n\n**Example:**\n\n```javascript\nget_browser_compatibility({ bcd_id: \"css.properties.grid\" });\nget_browser_compatibility({ bcd_id: \"css.selectors.has\" });\n```\n\n#### `analyze_css`\n\nAnalyze CSS code for quality, complexity, and design patterns. Returns **curated summary by default** (lightweight, ~1-2k tokens). Use `summaryOnly: false` for complete 150+ metrics (uses ~10k+ tokens).\n\n**Parameters:**\n\n- `css` (string, required) - CSS code to analyze\n- `summaryOnly` (boolean, optional) - Return summary instead of full analysis. Default: `true`\n\n**Examples:**\n\n```javascript\n// Summary mode (default, lightweight)\nanalyze_css({\n  css: `\n    .container {\n      display: grid;\n      color: #3b82f6;\n    }\n  `\n});\n\n// Full analysis with all 150+ metrics\nanalyze_css({\n  css: \"...\",\n  summaryOnly: false\n});\n```\n\n**Returns (default summary):**\n\n```json\n{\n  \"analysis\": {\n    \"stylesheet\": {\n      \"sourceLinesOfCode\": 5,\n      \"size\": 72\n    },\n    \"rules\": { \"total\": 1 },\n    \"selectors\": {\n      \"total\": 1,\n      \"averageComplexity\": 1.0,\n      \"maxComplexity\": 1\n    },\n    \"colors\": {\n      \"unique\": 1,\n      \"uniqueColors\": [\"#3b82f6\"]\n    }\n  },\n  \"note\": \"Summary metrics only. Use summaryOnly: false for complete 150+ metrics.\"\n}\n```\n\n#### `analyze_project_css`\n\nAnalyze all CSS files in a project. Finds CSS files recursively, combines them, and provides project-wide analysis. **Framework-agnostic** - works with built CSS from any framework (SvelteKit, React, Vue, ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:21:59.782579"
  },
  {
    "basic_info": {
      "name": "cc-cli",
      "full_name": "cjh-store/cc-cli",
      "owner": "cjh-store",
      "description": "claude code工具集合",
      "url": "https://github.com/cjh-store/cc-cli",
      "clone_url": "https://github.com/cjh-store/cc-cli.git",
      "ssh_url": "git@github.com:cjh-store/cc-cli.git",
      "homepage": null,
      "created_at": "2025-09-21T05:55:01Z",
      "updated_at": "2025-10-15T03:10:09Z",
      "pushed_at": "2025-10-14T06:56:27Z"
    },
    "stats": {
      "stars": 212,
      "forks": 16,
      "watchers": 212,
      "open_issues": 1,
      "size": 356
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 186357
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# CC CLI - Claude Code 配置管理工具\n\n**Language**: [中文](README.md) | [English](README_EN.md)\n\n[![NPM版本](https://img.shields.io/npm/v/@cjh0/cc-cli.svg)](https://www.npmjs.com/package/@cjh0/cc-cli)\n[![下载量](https://img.shields.io/npm/dm/@cjh0/cc-cli.svg)](https://www.npmjs.com/package/@cjh0/cc-cli)\n![License](https://img.shields.io/badge/license-MIT-green.svg)\n\n一键切换 claude code / codex 配置的命令行工具。支持多站点、多 Token 管理，智能合并配置，WebDAV 云端备份，无需手动修改配置文件。\n\n## 📸 界面预览\n\n![配置切换界面](https://qm-cloud.oss-cn-chengdu.aliyuncs.com/test/otherType/PixPin_2025-09-30_08-42-40.png)\n\n## 📑 目录\n\n- [✨ 核心功能](#-核心功能)\n- [📦 安装使用](#-安装使用)\n- [🚀 使用方法](#-使用方法)\n- [📋 配置文件说明](#-配置文件说明)\n\n## ✨ 核心功能\n\n- 🔄 **一键切换** - 快速切换不同的 API 站点和 Token\n- 📋 **配置管理** - 查看、添加、删除 API 配置\n- 🔗 **智能合并** - 自动与 Claude Code 配置文件同步\n- ⚙️ **完整支持** - 支持所有 Claude Code 配置项\n- 💻 **Codex 支持** - 管理 Claude Code Codex 配置（仅支持 Claude 模型），支持开启/关闭 YOLO 模式\n- 🚀 **YOLO 模式** - 为 Claude Code API 和 Codex 提供最宽松配置模式，无条件批准所有工具使用请求\n- ☁️ **WebDAV 备份** - 支持配置文件云端备份与恢复（坚果云、其他标准 WebDAV 等）\n  - **CC-CLI 配置备份** - 📁.cc-cli 下 api_config.json 等等\n  - **Claude Code 配置备份** - 📄 settings.json 📄 CLAUDE.md 📁 agents/ 📁 commands/\n  - **Codex 备份** - 📄 config.toml 📄 auth.json 📄 AGENTS.md\n\n## 📦 安装使用\n\n```bash\n# 全局安装\nnpm install -g @cjh0/cc-cli\n```\n\n## 🚀 使用方法\n\n### 主要命令\n\n```bash\n# 启动交互式界面\ncc\n# 如果遇到命令冲突，使用备用命令\ncc-cli\n\n# Claude配置管理\ncc api\n\n# 快速切换 API 配置\ncc apiuse\n\n# 查看当前状态\ncc status\n\n# 查看帮助\ncc --help\n```\n\n**⚠️ 命令冲突解决**：如果遇到 `clang: error` 错误，说明 `cc` 命令与系统的 C 编译器冲突，请使用 `cc-cli` 命令\n\n## 📋 配置文件说明\n\n### 智能配置合并\n\n工具会自动将你选择的 API 配置与现有的 Claude Code/codex 设置合并，保留所有原有配置项，只更新 API 相关设置。\n\n### 配置格式示例\n\n```json\n{\n  \"sites\": {\n    \"XX公益站\": {\n      \"url\": \"https://api.example.com\",\n      \"description\": \"同时支持Claude Code和Codex\",\n      \"claude\": {\n        \"env\": {\n          \"ANTHROPIC_BASE_URL\": \"https://api.example.com\",\n          \"ANTHROPIC_AUTH_TOKEN\": {\n            \"主力Token\": \"sk-xxxxxxxxxxxxxx\",\n            \"备用Token\": \"sk-yyyyyyyyyyyyyy\"\n          }\n        }\n      },\n      \"codex\": {\n        \"OPENAI_API_KEY\": \"sk-xxxxxxxxxxxxxx\",\n        \"model\": \"gpt-5\",\n        \"model_reasoning_effort\": \"high\",\n        \"model_providers\": {\n          \"duckcoding\": {\n            \"name\": \"duckcoding\",\n            \"base_url\": \"https://jp.duckcoding.com/v1\"\n          }\n        }\n      }\n    },\n    // 具体看注释\n    \"XX公益站2\": {\n      \"url\": \"https://api.demo.com\", // （可选）站点的地址 免得忘记公益站点，后期会支持一键打开\n      \"description\": \"仅支持Claude Code API\", // 随意 可不填\n      // Claude Code API配置（最简配置，兼容官方大部分配置，会覆盖配置文件）\n      \"claude\": {\n        \"env\": {\n          \"ANTHROPIC_BASE_URL\": \"https://api.demo.com\",\n          // Token支持两种格式：\n          // 1. 对象格式（支持多个token）\n          \"ANTHROPIC_AUTH_TOKEN\": {\n            \"Token1\": \"sk-aaaaaaaaaaaaaaa\",\n            \"Token2\": \"sk-bbbbbbbbbbbbbbb\"\n          }\n          // 2. 字符串格式（单个token，自动命名为\"默认Token\"）\n          // \"ANTHROPIC_AUTH_TOKEN\": \"sk-xxxxxxxxxxxxxx\"\n        }\n      },\n      // Codex API配置(最简配置，兼容官方大部分配置)\n      \"codex\": {\n        // API Key同样支持两种格式：\n        // 1. 对象格式（支持多个API Key）\n        \"OPENAI_API_KEY\": {\n          \"主要Key\": \"sk-xxxxxxxxxxxxxx\",\n          \"测试Key\": \"sk-zzzzzzzzzzzzzzz\"\n        },\n        // 2. 字符串格式（单个API Key，自动命名为\"默认API Key\"）\n        // \"OPENAI_API_KEY\": \"sk-xxxxxxxxxxxxxx\",\n        \"model\": \"gpt-5-code\", // 使用Claude模型\n        \"model_reasoning_effort\": \"medium\", // 推理强度：low/medium/high\n        \"model_providers\": {\n          \"custom_provider\": {\n            \"name\": \"custom_provider\",\n            \"base_url\": \"https://api.demo.com/v1\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## 🔄 工作原理\n\n### WebDAV 备份功能\n\n支持将配置文件备份到云端存储，确保配置安全：\n\n#### 支持的 WebDAV 服务\n\n- **坚果云** - `https://dav.jianguoyun.com/dav/`\n- **其他 WebDAV 服务** - 任何标准 WebDAV 协议服务\n\n#### 备份内容\n\n- **CC-CLI 配置** - 📁.cc-cli 下 api_config.json 等等\n- **Claude Code 配置** - 📄 settings.json 📄 CLAUDE.md 📁 agents/ 📁 commands/\n- **Codex 配置** - 📄 config.toml 📄 auth.json 📄 AGENTS.md\n\n#### 功能特性\n\n- 🔐 **安全认证** - 支持用户名密码认证\n- 📦 **选择性备份** - 可选择备份特定配置类别\n- 🕒 **自动清理** - 自动保留最新 5 个备份文件\n- 🔄 **完整恢复** - 支持选择备份文件和配置类别恢复\n- 📊 **状态监控** - 实时显示备份状态和云端连接情况\n\n## ⭐ Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=cjh-store/cc&type=Date)](https://star-history.com/#cjh-store/cc&Date)\n\n---\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:22:00.907959"
  },
  {
    "basic_info": {
      "name": "maxheadbox",
      "full_name": "syxanash/maxheadbox",
      "owner": "syxanash",
      "description": "Tiny truly local voice-activated LLM Agent that runs on a Raspberry Pi",
      "url": "https://github.com/syxanash/maxheadbox",
      "clone_url": "https://github.com/syxanash/maxheadbox.git",
      "ssh_url": "git@github.com:syxanash/maxheadbox.git",
      "homepage": "",
      "created_at": "2025-09-21T09:46:21Z",
      "updated_at": "2025-10-15T23:43:52Z",
      "pushed_at": "2025-10-13T17:36:05Z"
    },
    "stats": {
      "stars": 211,
      "forks": 32,
      "watchers": 211,
      "open_issues": 1,
      "size": 49287
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 37199,
        "Ruby": 16232,
        "CSS": 4031,
        "Python": 2225,
        "HTML": 334
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "agent",
        "agentic-ai",
        "gemma3",
        "llm",
        "qwen3",
        "raspberry-pi",
        "raspberry-pi-5"
      ]
    },
    "content": {
      "readme": "# Max Headbox\n\n<p>\n  <img src=\"readme_assets/animated.gif\" alt=\"max animated face\" height=\"200\"/>\n  <img src=\"readme_assets/thinking.png\" alt=\"max thinking\" height=\"170\"/>\n</p>\n<p>\n  <img src=\"readme_assets/tools.png\" alt=\"max using tools\" height=\"180\"/>\n  <img src=\"readme_assets/sleeping.png\" alt=\"max sleeping\" height=\"180\"/>\n</p>\n\nMax Headbox is an open-source voice-activated LLM Agent designed to run on a Raspberry Pi. It can be configured to execute a variety of tools and perform actions.\n\n![blog](https://raw.githubusercontent.com/syxanash/awesome-web-desktops/refs/heads/main/assets/notebook.png) Read my [blog post](https://blog.simone.computer/an-agent-desktoy) about this project!\n\n## Hardware Requirements\n\nTo get Max Headbox up and running, you'll need the following hardware:\n\n* [Raspberry Pi 5](https://www.raspberrypi.com/products/raspberry-pi-5/) (tested on a 16GB and 8GB model)\n* A _microphone_ is necessary for voice commands. (I've used [this one](https://www.amazon.com/dp/B071WH7FC6) from Amazon)\n* [GeeekPi](https://www.amazon.com/dp/B0D7VDWBBC) Screen, Case, and Cooler: This all-in-one bundle from Amazon provides a screen, a protective case, and an active cooler to keep your Raspberry Pi running smoothly. (This bundle is optional but definitley use an active cooler!)\n\nIf you don't want to replicate the exact box form factor, you can still run it anywhere you want, just make sure you have about 6GB available to run the LLMs.\n\n## Software Requirements\n\nEnsure you have the following software installed before proceeding with the setup:\n\n* Ruby 3.3.0\n* Node 22\n* Python 3\n* Ollama\n\n## Setup and Installation\n\nFollow these steps to get Max Headbox set up and ready to run.\n\n### 1. Clone the repository\n\n```sh\ngit clone https://github.com/syxanash/maxheadbox.git\ncd maxheadbox\n```\n\n### 2. Install Node dependencies\n\n```sh\nnvm use\nnpm install\n```\n\n### 3. Install backend dependencies\n\nNavigate to the `backend/` directory and install the required Ruby and Python packages.\n\n```sh\ncd backend/\nbundle install\npip3 install -r requirements.txt\n```\n\n### 4. Set up Ollama\n\nAfter [installing Ollama](https://ollama.com/download/linux), pull the necessary language models:\n\n```sh\nollama pull gemma3:1b\nollama pull qwen3:1.7b\n```\n\nIn the settings select expose Ollama to the network:\n\n```\nsudo systemctl edit ollama.service\n```\n\nEnter the following conf:\n```\n[Service]\n\nEnvironment=\"OLLAMA_HOST=0.0.0.0\"\n```\n\nand then restart with: `sudo systemctl daemon-reload && sudo systemctl restart ollama`\n\n## Configure\n\nBefore starting the app, you need to configure the following variables in your `.env` file:\n\n```sh\nVITE_BACKEND_URL=http://192.168.0.1:4567\nVITE_WEBSOCKET_URL=ws://192.168.0.1:4567\nVITE_OLLAMA_URL=http://192.168.0.1:11434\n```\n\nThe first two variables use the same address since the WebSocket app also runs on Sinatra. If your Ollama instance is running on a different device, you'll need to specify its network address.\n\nBy default the recording directory is `/dev/shm/whisper_recordings` if you're developing and running the project on a different OS you can change this in your env file e.g.\n\n```\nRECORDINGS_DIR=\"~/Desktop/whisper_recordings\"\n```\n\n## Usage\n\nTo start the Max Headbox agent, run the following command from the root of the project directory:\n\n```sh\nnpm run start-prod\n```\n\nYou should now be able to see the app running on localhost.\nFor development instead run:\n\n```sh\nnpm run start-dev\n```\n\n## Creating Tools\n\nCreating tools is as simple as making a JavaScript module in `src/tools/` that exports an object with four properties: the tool's **name**, the **parameters** passed to the function, a **describe** field, and the function's main **execution** body.\nSome frontend tools may require backend API handlers to fetch information from the Pi hardware (since the frontend cannot query it directly) and expose it via REST. I created a folder in `backend/notions/` where I placed all these Ruby Sinatra routes.\n\nTake a look at what's already there to have an idea.\nThe tools with the `.txt` extension are provided for reference. If you want to import them into the agent, just rename the extension to `.js` or `.rb` for the backend ones.\n\n## Flow Diagram\n\n![flow chart](readme_assets/max-diagram.png)\n\n## Credits and Acknowledgments\n\nThis project wouldn't be possible without the following open-source projects and resources:\n\n* The voice activation was achieved using [Vosk](https://github.com/alphacep/vosk-api).\n* [faster-whisper](https://github.com/SYSTRAN/faster-whisper): Used for efficient and accurate voice transcription. For a detailed guide on setting it up locally, check out this [this tutorial](https://www.youtube.com/watch?v=3yLFWpKKbe8)!\n* The animated character in the UI was created by slightly modifying Microsoft's beautiful [Fluent Emoji](https://github.com/microsoft/fluentui-emoji) set.\n\n## FAQ\n\n### Why Ruby + Python?\n\nYes, I know, I should've made the whole backend layer in Python. It would've made more sense, but I didn't ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:22:02.072696"
  },
  {
    "basic_info": {
      "name": "Solara",
      "full_name": "akudamatata/Solara",
      "owner": "akudamatata",
      "description": "一个极简风格的基于免费API的音乐播放器",
      "url": "https://github.com/akudamatata/Solara",
      "clone_url": "https://github.com/akudamatata/Solara.git",
      "ssh_url": "git@github.com:akudamatata/Solara.git",
      "homepage": "",
      "created_at": "2025-10-05T05:52:26Z",
      "updated_at": "2025-10-16T02:13:24Z",
      "pushed_at": "2025-10-14T02:29:46Z"
    },
    "stats": {
      "stars": 199,
      "forks": 313,
      "watchers": 199,
      "open_issues": 0,
      "size": 30531
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 122258,
        "CSS": 56213,
        "TypeScript": 16951,
        "HTML": 12915
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# 🎶 Solara（光域）\n\n> 🌐 由轻量后端服务支撑的现代化网页音乐播放器，整合多种音乐聚合接口，覆盖搜索、播放、歌词同步与音频下载全流程。\n\n![Review-ezgif com-optimize](https://github.com/user-attachments/assets/487157de-bf71-4bc9-9e49-16a4f0a14472)\n| | | |\n|:--:|:--:|:--:|\n| <img src=\"https://github.com/user-attachments/assets/54d1ed31-da1d-427f-ad11-66a26788c838\" height=\"700\"/> | <img src=\"https://github.com/user-attachments/assets/bb092569-0a7f-47f6-b7e9-c07ea56949cf\" height=\"700\"/> | <img src=\"https://github.com/user-attachments/assets/02b830e3-292f-4880-91f2-86ec818b877a\" height=\"700\"/> |\n\n\n## 🤝 参与贡献\n感谢 GD音乐台(music.gdstudio.xyz)提供的免费API\n\n感谢 来自Linux.do 牛就是牛@ufoo 大佬 https://linux.do/t/topic/942415提供的灵感\n\n\n## 🌟 主要特性\n\n- 🔍 跨站曲库检索：一键切换数据源，支持分页浏览并批量导入播放队列。\n- 📻 队列管理灵活：新增、删除、清空操作即时生效，并自动持久化到浏览器 localStorage。\n- 🔁 丰富的播放模式：列表循环、单曲循环与随机播放随手切换，记忆上次偏好。\n- 📱 竖屏移动端：全新竖屏布局匹配移动端手势与屏幕比例，按钮、列表与歌词均针对单手操作优化。\n- 📝 动态歌词视图：逐行滚动高亮，当前行自动聚焦，手动滚动后短暂锁定视图。\n- 📥 多码率下载：可挑选 128K / 192K / 320K / FLAC 等品质并直接获取音频文件。\n- ☁️ 轻量后端代理：通过 Cloudflare Pages Functions 统一聚合各数据源并处理音频跨域，摆脱浏览器直接访问的限制。\n- 🎨 主题美学：内置亮/暗模式与玻璃拟态界面，桌面与移动端均具备沉浸体验。\n- 📱 竖屏移动端：全新竖屏布局匹配移动端手势与屏幕比例，按钮、列表与歌词均针对单手操作优化。\n- 🖼️ 沉浸式背景：根据当前曲目封面自动取色，实时渲染模糊背景，氛围与音乐保持一致。\n- 🌊 青绿基调：参考 Emby 等播放器打造统一青绿色视觉体系。\n- 🛠️ 调试控制台：按下 Ctrl + D 呼出实时日志面板，便于排查接口或交互异常。\n\n## 🚀 快速上手\n> ⚠️ 项目完全依赖 Cloudflare Pages Functions，目前仅支持部署到 Cloudflare Pages 环境运行。\n1. Fork 或克隆本仓库。\n2. ☁️ 按照 Cloudflare Pages 文档创建站点，并将本仓库作为构建来源或直接上传静态资源。\n3. 🚀 部署完成后，通过 Cloudflare Pages 分配的域名访问站点即可体验播放器。\n\n## ⚙️ 配置提示\n- 🔗 API 基地址定义在 index.html 中的 `API.baseUrl`（约 1300 行），可替换为自建接口域名。\n- 🎚️ 默认主题、播放模式等偏好可在 `state` 初始化逻辑中按需调整。\n\n## 🎵 使用流程\n1. 输入关键词并选择想要的曲库后发起搜索。\n2. 在结果列表中可试听、播放、下载或加入播放队列。\n3. 右侧播放列表展示当前队列，可拖动播放、移除或一键清空。\n4. 底部控制栏提供播放控制、播放模式切换、进度条与音量滑块。\n5. 打开歌词面板即可查看实时滚动的高亮歌词。\n\n## 📱 移动端体验提示\n- 将网页添加到手机主屏或通过移动浏览器访问，即可自动切换至竖屏布局；\n- 底栏控件重新排布，保证竖向滑动不遮挡核心信息；\n- 点击封面可以切换到歌词面板，可通过点击展开/收起。\n\n## ❓ 常见问题解答\n- **搜索没有结果怎么办？** 检查浏览器控制台日志，如接口被阻挡可尝试切换数据源或更新 `API.baseUrl` 至可用服务，很有可能是免费API炸了。\n- **如何重置本地数据？** 在浏览器开发者工具的 Application / Storage 面板清理 `localStorage`，即可恢复默认播放列表和配置。\n\n## 🗂️ 项目结构\n```\nMusic-Player/\n├── functions/   # Cloudflare Pages Functions 后端代理\n├── index.html   # 主界面、样式与业务逻辑\n└── README.md    # 项目说明\n```\n\n## 📄 许可证\n本项目采用 CC BY-NC-SA 协议，禁止任何商业化行为，任何衍生项目必须保留本项目地址并以相同协议开源。\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:22:03.207389"
  },
  {
    "basic_info": {
      "name": "chatgpt-conversation-timeline",
      "full_name": "Reborn14/chatgpt-conversation-timeline",
      "owner": "Reborn14",
      "description": "本插件为 ChatGPT、DeepSeek 与 Google Gemini 的对话页面添加了时间轴导航功能，让你能轻松地跳转至任意消息，提升浏览效率。",
      "url": "https://github.com/Reborn14/chatgpt-conversation-timeline",
      "clone_url": "https://github.com/Reborn14/chatgpt-conversation-timeline.git",
      "ssh_url": "git@github.com:Reborn14/chatgpt-conversation-timeline.git",
      "homepage": "",
      "created_at": "2025-09-28T04:59:39Z",
      "updated_at": "2025-10-16T01:01:32Z",
      "pushed_at": "2025-10-13T10:41:48Z"
    },
    "stats": {
      "stars": 176,
      "forks": 11,
      "watchers": 176,
      "open_issues": 8,
      "size": 397
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 200373,
        "CSS": 42454,
        "HTML": 9147
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\">\n  <img src=\"public/preview.png\" alt=\"Plugin Preview\">\n</p>\n\n# 🕰 ChatGPT Conversation Timeline Extension\n\n> 🇨🇳 查看中文版：[README.zh-CN.md](./README.zh-CN.md)\n\nAn extension that adds an interactive timeline to your AI chat conversations. **Now supports ChatGPT, DeepSeek, and Google Gemini!**\n\nThis extension adds an interactive timeline bar to your conversation pages, helping you quickly understand the structure of the dialogue and jump to any message with a single click.\n\n---\n\n## ✨ Features\n\n- **🌐 Multi-Platform Support**: Works seamlessly on **ChatGPT**, **DeepSeek**, and **Google Gemini**.\n- **📍 Clickable Markers**: Instantly jump to any point in the conversation via clickable markers for each user message.\n- **⭐ Star Messages**: Long-press a message to star it, and see it highlighted on the timeline. Stars are saved locally and persist across sessions.\n- **🌗 Auto-Theming**: Automatically adapts to the light/dark theme of each platform.\n- **⚙️ Full Control**: A simple popup menu allows you to enable or disable the timeline globally or for each site individually.\n\n---\n\n## 🧩 How to Install (Chrome / Edge)\n\n### ✅ Recommended: Install from Chrome Web Store\n\n👉 [Install from Chrome Web Store](https://chromewebstore.google.com/detail/ickndngbbabdllekmflaaogkpmnloalg?utm_source=item-share-cb)\n\n---\n\n### 🛠 Manual Installation (Get new features faster)\n\nThis method allows you to use the latest version immediately, without waiting for the Chrome Web Store review process.\n\n1. Download this repository and locate the `extension/` folder.\n2. In your browser, go to: `chrome://extensions/`\n3. Enable “Developer Mode” (top right).\n4. Click **“Load unpacked”**.\n5. Select the `extension/` folder to install.\n\n> After installation, open any ChatGPT, DeepSeek, or Gemini conversation and the timeline will appear on the right.\n\n## 🙏 Acknowledgement\n\nInspired by the clean and efficient timeline navigation interface from **Google AI Studio**.  \nWe aim to bring the same intuitive experience to more AI chat platforms.\n\n---\n\n## 📄 License\n\nThis project is open-sourced under the [MIT License](LICENSE).",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:22:04.349216"
  },
  {
    "basic_info": {
      "name": "whatsthat",
      "full_name": "markrai/whatsthat",
      "owner": "markrai",
      "description": "a brutally honest whatsapp web analyzer",
      "url": "https://github.com/markrai/whatsthat",
      "clone_url": "https://github.com/markrai/whatsthat.git",
      "ssh_url": "git@github.com:markrai/whatsthat.git",
      "homepage": null,
      "created_at": "2025-10-13T16:15:15Z",
      "updated_at": "2025-10-15T21:07:42Z",
      "pushed_at": "2025-10-14T11:44:08Z"
    },
    "stats": {
      "stars": 165,
      "forks": 3,
      "watchers": 165,
      "open_issues": 5,
      "size": 1275
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 171116,
        "HTML": 28104,
        "CSS": 17991
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\">\n  <img src=\"logo.png\" alt=\"What's That!?\" width=\"200\" />\n</p>\n\n# What's That!? v0.7 (chrome-extension)\n\nA brutally honest WhatsApp Web analyzer, because group chats have politics too. It quietly watches reactions and replies, then surfaces the social gravity you feel but can’t quite prove: favoritism, marginalization, and influence.\n\n## Why\n- Uncover who gets boosted, who gets ignored, and who orbits whom.\n- Spot toxic loops early. Celebrate healthy dynamics loudly.\n- Which members form secret reaction cartels.\n- Who’s the real influencer vs. who just thinks they are.\n- And yes, who loves you significantly less than you thought...\n\n\n## What it shows\n- Relationships: who reacts/replies to whom (and how much it skews).\n- Influence: per-person scores from volume and consistency.\n- Selectivity: who someone concentrates reactions on (focus, lift, bias).\n- Temporal patterns: when the room actually listens.\n\n## How to use \n0. Git Clone or Unzip the downloaded repository to a folder.\n1. Load the extension (chrome://extensions → Load unpacked).\n2. Open WhatsApp Web and scroll through chats you care about.\n\n## Notes\n- Data lives locally. Nothing leaves your machine.\n- WhatsApp Web loads history in chunks; It persist what you’ve seen and can backfill.\n- Export/Import available for audits or offline analysis.\n- This is a work in progress ⚠️\n- I am looking for folks to contribute to this project 🙂\n\n## Disclaimer\nI am not responsible for ruined friendships, exposed cliques, or awkward brunches.\nUse responsibly. Or don’t - honestly, we’re all curious who the group’s real favorite is. But seriously...This is a mirror, not a gavel. Use insights to improve conversations - not weaponize them 😘\n\n## License\nMIT © 2024 Mark Rai\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:22:05.488350"
  },
  {
    "basic_info": {
      "name": "env_guard",
      "full_name": "bingcicle/env_guard",
      "owner": "bingcicle",
      "description": "env_guard",
      "url": "https://github.com/bingcicle/env_guard",
      "clone_url": "https://github.com/bingcicle/env_guard.git",
      "ssh_url": "git@github.com:bingcicle/env_guard.git",
      "homepage": null,
      "created_at": "2025-09-29T15:04:09Z",
      "updated_at": "2025-10-08T01:04:18Z",
      "pushed_at": "2025-09-29T15:06:15Z"
    },
    "stats": {
      "stars": 151,
      "forks": 0,
      "watchers": 151,
      "open_issues": 0,
      "size": 5
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 2102
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# env-guard\nSimple `.env` linter: detects duplicates, empty values, invalid key names, and diffs against `.env.example`.\n\n## Install & Use\n```bash\nnpm i -g .\nenv-guard --file .env --example .env.example\n```\nExits with code 1 on problems; prints “env-guard: OK” otherwise.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:22:06.725096"
  },
  {
    "basic_info": {
      "name": "CF-DNS-Clone",
      "full_name": "crow1874/CF-DNS-Clone",
      "owner": "crow1874",
      "description": "想拥有别人的优选域名吗？CF-DNS-Clon 让“白嫖”变得简单！只需通过 Cloudflare Workers 便捷部署，即可轻松克隆心仪的域名。同时，它还会化身勤劳的“搬运工”，自动搜罗各大优选 IP 网站，将最新鲜的 IP 资源整理好，直接送到你的 GitHub 仓库中。",
      "url": "https://github.com/crow1874/CF-DNS-Clone",
      "clone_url": "https://github.com/crow1874/CF-DNS-Clone.git",
      "ssh_url": "git@github.com:crow1874/CF-DNS-Clone.git",
      "homepage": "https://hhhhh.eu.org/",
      "created_at": "2025-09-23T17:17:45Z",
      "updated_at": "2025-10-16T01:01:43Z",
      "pushed_at": "2025-10-15T20:47:45Z"
    },
    "stats": {
      "stars": 136,
      "forks": 114,
      "watchers": 136,
      "open_issues": 2,
      "size": 3820
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 343575
      },
      "license": null,
      "topics": [
        "cloudflare-workers-ip-hub-dns-clone-cf-dns-clon"
      ]
    },
    "content": {
      "readme": "---\n\n<div align=\"center\">\n\n### 🙏 特别鸣谢   CMliu 频道\n\n首先，特别感谢 **CMliu** 频道。本项目中使用的部分核心 `Snippets` 代码及 `ProxyIP` 均源自该频道。\n\n原项目旨在实现域名解析的克隆功能。在日常交流中，我们注意到许多朋友对如何自定义 `Snippets` 节点内容或进行 IP 优选有诸多疑问。为此，我们在原项目的基础上，特别增设了代理功能板块，希望能为大家提供一个方便研究和学习的平台。\n\n---\n\n</div>\n\n<div align=\"center\">\n  <a href=\"https://dash.cloudflare.com/?to=/:account/workers-and-pages/create\" target=\"_blank\">\n    <img src=\"https://img.shields.io/badge/CF--DNS--Clon-Cloudflare%20Workers-F38020?style=for-the-badge&logo=cloudflare&logoColor=white\" alt=\"Deploy to Cloudflare Workers\">\n  </a>\n  <p><strong>一个能让你轻松“白嫖”别人优选域名的 Cloudflare Worker 工具</strong></p>\n  <a href=\"https://t.me/crow187\">\n    <img src=\"https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&logo=telegram&logoColor=white\" alt=\"Telegram\">\n  </a>\n</div>\n\n---\n\n<div align=\"center\">\n  <a href=\"https://www.youtube.com/watch?v=a4Ky4kg1LhI\" target=\"_blank\">\n    <img src=\"https://img.shields.io/badge/YouTube-%23FF0000.svg?style=for-the-badge&logo=YouTube&logoColor=white\" alt=\"YouTube Badge\"/>\n  </a>\n  <br/>\n  <a href=\"https://www.youtube.com/watch?v=a4Ky4kg1LhI\" target=\"_blank\">\n    <img src=\"https://img.youtube.com/vi/a4Ky4kg1LhI/hqdefault.jpg\" alt=\"点击观看视频\">\n  </a>\n</div>\n\n---\n\n\n\n## 🚀 项目是干嘛的？\n\n简单来说，这个项目能让你**直接克隆任何一个优选好的域名**（比如别人花时间筛选的 CDN 加速域名），并把它所有的 DNS 解析记录实时同步到**你自己的域名**上。\n\n-   **🎯 核心用途：** **域名克隆，实现白嫖。** 看到了好的优选域名？直接输入，一键克隆，别人的优选成果就变成了你的。\n-   **📦 额外福利：** **自建 IP 库。** 自动从网上抓取各种优选 IP，并存到你自己的 GitHub 仓库里，形成一个私有的、随时可用的 IP Hub。\n\n所有操作都在 Cloudflare 上完成，免费、高效且稳定。\n\n## ✨ 主要功能\n\n| 功能点                   | 图标 | 描述                                                                                                                              |\n| -------------------------- | :--: | --------------------------------------------------------------------------------------------------------------------------------- |\n| **一键域名克隆 (核心)**    |  🔄  | **深度克隆** CNAME 记录找到最终 IP，并**实时同步**源站变化，实现全自动“白嫖”。                                                       |\n| **聚合 IP 到 GitHub**      |  📦  | **自动化**从多个公开源抓取最新 IP 列表，并自动推送到你自己的 GitHub 仓库。                                                         |\n| **订阅器友好 API**         |  📡  | **直接访问**同步到 GitHub 的 IP 文件。格式为 `你的 Worker 首页 URL / GitHub 文件路径`，可直接用于各种订阅器。                             |\n| **精美的管理后台**         |  🎨  | **简单易用**的密码保护后台，所有配置点点鼠标即可完成，无需懂代码。                                                                  |\n| **公开展示页**             |  🌐  | 一个简洁漂亮的首页，展示你克隆的所有域名和 IP 库地址，方便分享和使用。                                                              |\n\n---\n\n## 🛠️ 网页部署指南 (纯小白教程)\n\n整个部署过程都在 Cloudflare 网站上完成，不需要任何命令行工具。请严格按照以下流程操作：\n\n<div align=\"center\">\n\n**① 创建 Worker ➡️ ② 创建并绑定 D1 ➡️ ③ 初始化并配置 ➡️ ④ 设置定时器 (关键!)**\n\n</div>\n\n### ① 创建 Worker\n\n1.  登录 [Cloudflare 控制台](https://dash.cloudflare.com/)，进入左侧菜单的 **Workers & Pages**。\n2.  点击 **创建应用程序 (Create Application)** > **创建 Worker (Create Worker)**。\n3.  为你的 Worker 取一个名字（例如 `cf-dns-clon`），然后点击 **部署 (Deploy)**。\n4.  部署成功后，点击 **编辑代码 (Edit code)**。\n5.  将本项目提供的 `src/index.js` 文件中的**所有代码**，完整地复制并粘贴到代码编辑器中，覆盖掉原有的示例代码。\n6.  点击右上角的 **部署 (Deploy)** 按钮。\n\n### ② 创建 D1 数据库并绑定\n\n1.  在左侧菜单中，找到并进入 **D1**。\n2.  点击 **创建数据库 (Create database)**，填写数据库名称（例如 `wuya-db`），然后点击 **创建 (Create)**。\n3.  返回到你的 Worker，进入 **设置 (Settings)** > **变量 (Variables)**。\n4.  找到 **D1 数据库绑定 (D1 Database Bindings)**，点击 **添加绑定 (Add binding)**。\n5.  **变量名称 (Variable name)** 必须填写 `WUYA` (全大写)。\n6.  在 **D1 数据库 (D1 Database)** 下拉列表中，选择你刚刚创建的 `wuya-db`。\n7.  点击 **保存并部署 (Save and deploy)**。\n\n<p align=\"center\">\n  <img src=\"./IMG/1.png\" width=\"800\" alt=\"D1 数据库绑定示例\">\n</p>\n\n### ③ 初始化和配置\n\n1.  **设置管理员密码**\n    -   访问你的 Worker URL (例如 `https://cf-dns-clon.your-username.workers.dev`)。\n    -   页面会引导你设置一个安全的管理员密码。\n\n2.  **获取 API 密钥**\n    -   **Cloudflare API (Zone ID 和 API Token):**\n        -   **区域 ID (Zone ID):** 在 Cloudflare 域名概述页的右下角复制。\n        -   **API 令牌 (API Token):** 前往 **API 令牌** 页面，使用 **“编辑区域 DNS”** 模板为你的域名创建一个新令牌。*（注意：令牌只显示一次，请妥善保管）*\n    -   **GitHub Token:**\n        -   登录 [GitHub](https://github.com/settings/tokens/new)，点击 **Generate new token (classic)**。\n        -   勾选 `repo` 权限，建议设置永不过期，然后生成并复制令牌。*（同样，只显示一次）*\n\n3.  **登录后台进行最终配置**\n    -   访问你的 Worker URL 并在后面加上 `/admin` (例如 `https://.../admin`)，使用你的密码登录。\n    -   进入 **系统设置** 页面，将上面获取到的所有信息填入对应的输入框中。\n    -   点击 **保存设置**。\n\n### ④ 设置定时触发器 (关键步骤！)\n\n> ## ⚠️ **非常重要：必须设置定时触发器，否则无法自动同步！**\n>\n> 1.  返回到你的 Worker，进入 **设置 (Settings)** > **触发器 (Triggers)**。\n> 2.  在 **Cron 触发器 (Cron Triggers)** 部分，点击 **添加 Cron 触发器 (Add Cron Trigger)**。\n> 3.  **Cron 表达式** 选择 **每分钟 (`* * * * *`)**，以确保同步的及时性。\n> 4.  点击 **添加触发器 (Add trigger)** 保存。\n\n<p align=\"center\">\n  <img src=\"./IMG/2.png\" width=\"800\" alt=\"Cron 触发器设置示例\">\n</p>\n\n---\n\n<div align=\"center\">\n  🎉 **部署完成！现在去“域名克隆”页面，开始你的“白嫖”之旅吧！** 🎉\n</div>\n\n\n### ⚠️ **【重要声明】** ⚠️\n\n本项目/本教程中的所有代码和信息仅供学习和研究之用。\n\n*   **请勿**用于商业或非法目的，否则后果自负。\n*   代码来源于互联网，如有侵权请联系删除。\n*   项目作者不对任何因使用本项目代码而导致的任何损失或法律纠纷承担责任。\n*   使用本项目代码即表示您同意并接受本声明。\n\n**请在遵守您当地法律法规的前提下使用。**\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:22:07.894048"
  },
  {
    "basic_info": {
      "name": "home-dashboard",
      "full_name": "kyleturman/home-dashboard",
      "owner": "kyleturman",
      "description": "A home weather dashboard for e-ink displays",
      "url": "https://github.com/kyleturman/home-dashboard",
      "clone_url": "https://github.com/kyleturman/home-dashboard.git",
      "ssh_url": "git@github.com:kyleturman/home-dashboard.git",
      "homepage": null,
      "created_at": "2025-10-06T04:24:29Z",
      "updated_at": "2025-10-15T12:45:38Z",
      "pushed_at": "2025-10-12T04:31:10Z"
    },
    "stats": {
      "stars": 135,
      "forks": 18,
      "watchers": 135,
      "open_issues": 0,
      "size": 1210
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 101748,
        "EJS": 31975,
        "C++": 24302,
        "CSS": 10277,
        "C": 2729
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Home Dashboard\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Node.js](https://img.shields.io/badge/node-%3E%3D16.0.0-brightgreen)](https://nodejs.org/)\n[![PM2](https://img.shields.io/badge/PM2-Daemon-blue)](https://pm2.keymetrics.io/)\n[![Status](https://img.shields.io/badge/status-production-success)](https://github.com/kyleturman/home-dashboard)\n\nA modular, open-source home dashboard that runs a server on a local network computer (Raspberry Pi, Mac Mini, or any always-on machine) and creates a dashboard of weather forecasts, calendar events, vehicle data, and AI insights to be shown on an e-paper display.\n\n![E-paper Display](screenshots/display.png)\n\nThis [tweet](https://x.com/kyleturman/status/1973774056064516346) blew up so I thought I'd share the code and make it a bit easier and more stable to run. The code (and definitely CSS lol) is generally a little messier than I would like, and the quality of the 1-bit image conversion is not perfect with font hinting issues, but done is better than perfect and it's a home project so c'est la vie!\n\n**How it works:** A Node.js server collects data from APIs, renders a dashboard as HTML/CSS, converts it to a 1-bit PNG image, and serves it over your local network available to a microcontroller-powered e-paper display that fetches the image and refreshes every 10 minutes (while sleeping from 12am-5am to save battery).\n\n## Disclaimer\n\nThis project is provided **as-is** with no warranty or guarantee of support. It is not actively maintained but serves as a working example of a modular home dashboard system. Feel free to use it as a starting point for your own customizations. For development assistance, consider using [Claude Code](https://www.claude.com/product/claude-code) or other AI coding tools to extend functionality.\n\n## Getting Started\n\nThis dashboard is designed to run as a persistent background service on an always-on computer within your local network. It uses **PM2** as a process manager to run the Node.js server as a daemon—automatically restarting on crashes and optionally starting on boot.\n\n### Prerequisites\n- **Node.js** (v16 or higher)\n- **npm** (comes with Node.js)\n- An always-on computer on your local network\n\n### 1. Install Dependencies\n```bash\ngit clone https://github.com/kyleturman/home-dashboard.git\ncd home-dashboard\nnpm install\n```\n\n### 2. Configure Environment\n```bash\ncp .env.example .env\n```\n\nEdit `.env` and set at minimum:\n```bash\nMAIN_LOCATION_ZIP=94607\nVISUAL_CROSSING_API_KEY=your_key_here\n```\n\n**Required:**\n- `MAIN_LOCATION_ZIP` - Your primary 5-digit US ZIP code\n- `VISUAL_CROSSING_API_KEY` - Weather forecast API key (see below)\n\n**Optional:**\n- `ADDITIONAL_LOCATION_ZIPS` - Up to 3 additional ZIP codes (comma-separated)\n- `PORT` - Server port (default: 7272)\n- See `.env.example` for all configuration options\n\n### 3. Start the Server\n```bash\nnpm start      # Start as PM2 daemon (auto-restarts on crash)\nnpm stop       # Stop the service\nnpm restart    # Restart (reloads .env)\nnpm run logs   # View live logs\n```\n\nThe server runs on **port 7272** by default via PM2 process manager.\n\n### 4. Enable Auto-Start on Boot (Optional)\n\nTo have the dashboard automatically start when your server reboots:\n\n```bash\n# Generate and install startup script\nnpx pm2 startup\n\n# Follow the command it outputs (may require sudo)\n# Then save the current PM2 process list\nnpx pm2 save\n```\n\nThis is **highly recommended** to ensure the dashboard restarts after power loss or system updates and your display keeps on kickin'.\n\n### 5. Access the Dashboard\n\n**Core routes:**\n- Dashboard: `http://localhost:7272/dashboard`\n- E-paper 1-bit PNG image: `http://localhost:7272/dashboard/image`\n- Admin panel: `http://localhost:7272/admin`\n\n**API endpoints (used for debugging and custom development):**\n- Dashboard data JSON: `http://localhost:7272/api/dashboard`\n- Services status: `http://localhost:7272/api/services/status`\n\n## API Keys & Provider Setup\n\n### Visual Crossing Weather (Required)\nMulti-location forecasts, hourly data, and astronomy information. Visual Crossing provides a free tier of 1,000 calls per day and seems the most robust and accurate of free weather APIs from my research.\n\n1. Sign up at [visualcrossing.com/weather-api](https://www.visualcrossing.com/weather-api)\n2. Free tier: 1,000 calls/day\n3. Get your API key from the account dashboard\n4. Add to `.env`: `VISUAL_CROSSING_API_KEY=your_key_here`\n\n### Ambient Weather (Optional)\nHave a personal weather station from [Ambient Weather](https://ambientweather.com/)? Get real-time data from your home station.\n\n1. Own an Ambient Weather station (The [AMWS1965](https://ambientweather.com/amws1965-wifi-weather-station-with-remote-monitoring) is the most affordable starter option)\n2. Create account at [ambientweather.net](https://ambientweather.net/)\n3. Navigate to Account → API Keys\n4. Generate Application and API keys\n5. Add to `.env`:\n   ```bash\n   AMBIENT_A",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:22:09.058986"
  },
  {
    "basic_info": {
      "name": "am-cf-tunnel-sub",
      "full_name": "amclubs/am-cf-tunnel-sub",
      "owner": "amclubs",
      "description": "基于Vercel、Cloudflare 部署该脚本，你可以方便地将Cloudflare Workers 和 Pages的 VLESS、Trojan 配置信息使用在线配置转换到 Clash、 Singbox 、Quantumult X等工具中订阅使用。Cloudflare Workers 和 Pages 生成VLESS、Trojan节点,实现一键订阅节点。",
      "url": "https://github.com/amclubs/am-cf-tunnel-sub",
      "clone_url": "https://github.com/amclubs/am-cf-tunnel-sub.git",
      "ssh_url": "git@github.com:amclubs/am-cf-tunnel-sub.git",
      "homepage": "https://youtube.com/@am_clubs",
      "created_at": "2025-10-07T07:12:56Z",
      "updated_at": "2025-10-16T00:35:58Z",
      "pushed_at": "2025-10-15T07:24:45Z"
    },
    "stats": {
      "stars": 133,
      "forks": 231,
      "watchers": 133,
      "open_issues": 0,
      "size": 78
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 57084,
        "HTML": 3448
      },
      "license": "Apache License 2.0",
      "topics": [
        "clash",
        "cloudflare",
        "hiddify",
        "openclash",
        "quantumultx",
        "singbox",
        "trojan",
        "v2ray",
        "vercel",
        "vless"
      ]
    },
    "content": {
      "readme": "### 🚀[am-cf-tunnel-sub](https://github.com/amclubs/am-cf-tunnel-sub)\n基于Vercel、Cloudflare部署该脚本，你可以方便地将Cloudflare Workers 和 Pages的 VLESS、Trojan 配置信息使用在线配置转换到 Clash、 Singbox 、Quantumult X等工具中订阅使用。Cloudflare Workers 和 Pages 生成VLESS、Trojan节点,实现一键订阅节点。分离节点与订阅框架,更好解决Cloudfare部署时出现1101、522的问题。 [最新视频教程](https://www.youtube.com/watch?v=i-XnnP-MptY&t=596s)、[🎬 YouTube](https://youtube.com/@am_clubs?sub_confirmation=1)、 [💬 Telegram](https://t.me/am_clubs)、[📂 GitHub](https://github.com/amclubs)、[🌐 Blog](https://amclubss.com)\n\n### ⚙️结合Coudflare部署免费节点项目 [am-cf-tunnel](https://github.com/amclubs/am-cf-tunnel) 与教程使用 [视频教程](https://youtu.be/i-XnnP-MptY)\n- 本频道订阅器转换地址：https://sub.amclubss.com\n\n### 👉 后期计划\n- 增加在线自动优先IP功能\n- 增加其它更多免费容器部署\n\n##\n### 📝一、前期准备资料\n<details>\n<summary>点击展开/收起</summary>\n\n### 1、注册免费**Vercel**帐号(GitHub方式连接就可以注册)\n- 注册地址：https://vercel.com <a href=\"https://www.youtube.com/watch?v=ZxHLLlxuJyI&t=50s\">[点击观看视频教程]</a>\n\n### 2、注册**免费域名** [点击观看所有免费域名视频教程](https://www.youtube.com/playlist?list=PLGVQi7TjHKXZGODTvB8DEervrmHANQ1AR)\n\n### 3、**订阅工具** [点击观看使用视频教程](https://youtu.be/xGOL57cmvaw)\n👉 [点击加入TG群 数字套利｜交流群](https://t.me/AM_CLUBS)发送关键字 **工具** 获取下载\n\n### 4、Cloudflare标准 **端口** 知识  [点击观看优选IP视频教程](https://youtu.be/pKrlfRRB0gU)\n- 80系端口(HTTP)：80，8080，8880，2052，2082，2086，2095\n- 443系端口(HTTPS)：443，2053，2083，2087，2096，8443\n- [IP落地测试工具地址](https://ip.sb/)\n\n### 4、结合loudflare部署免费节点项目与教程使用 [am-cf-tunnel](https://github.com/amclubs/am-cf-tunnel)\n\n</details>\n\n##\n### ⚙️ 二、部署节点订阅器 [视频教程](https://www.youtube.com/watch?v=i-XnnP-MptY&t=596s)\n\n<details>\n<summary>点击展开/收起</summary>\n\n#### `①` Vercel方式部署 [视频教程](https://www.youtube.com/watch?v=i-XnnP-MptY&t=596s)\n1. Fork或克隆本仓库[am-cf-tunnel-sub](https://github.com/amclubs/am-cf-tunnel-sub)到您的 GitHub/GitLab 账户\n2. 登录 [Vercel](https://vercel.com)，点击\"New Project\" <a href=\"https://www.youtube.com/watch?v=ZxHLLlxuJyI&t=28s\">[点击观看注册视频教程]</a>\n3. 导入您的仓库，使用默认设置\n4. **⚠️ 重要：在\"Settings\" > \"Environment Variables\"中添加 `UUID` 和 `HOST` 变量（必须设置）**\n5. 点击\"Deploy\"\n\n访问 `http://部署域名` 即可。\n\n#### `②` Cloudfare方式部署（Pages GitHub）\n1. 部署 Cloudflare Pages：\n   - 在 Github 上先 Fork 本项目[am-cf-tunnel-sub](https://github.com/amclubs/am-cf-tunnel-sub)，并点上 Star !!!\n   - 在 CloudFlare主页的左边菜单的 `计算(Workers)` 选项卡 -> 点击 `Workers 和 Pages` -> 右上方点击 -> `创建应用程序` -> 选择 `Pages`里的 `导入现有 Git 存储库` 点击 `开始使用` -> 选择GitHub 点击`连接GitHub`根据提示授权GitHub和项目(此步已有可忽略)后 -> 选中 `am-cf-tunnel-sub`项目后 -> 点击 `开始设置` -> 可修改`项目名称`(此名称自己命名) 后 -> 右下方点击 `保存并部署`即可。\n2. 设置节点UUID和HOST变量： \n   - 在 Pages控制台的 `设置` 选项卡 -> 点击 `设置` -> 左方点击 `变量和机密` -> 右方点击  `添加` -> 变量名称 填入 `UUID`(此名称固定不能变) ，值填入CF部署节点ID -> 再点击添加变量 填入 `HOST`(此名称固定不能变)，值填入CF部署的自定义域名 后 -> 右下方点击 `保存`。\n   - 在 `设置` 选项卡，点击 `部署` -> 在所有部署 找到最新一条部署记录 ，在右边点击 3个点 `...` 选择 `重试部署` 即可。\n3. 给 Pages绑定 CNAME自定义域：[无域名绑定Cloudflare部署视频教程]->[免费域名教程1](https://youtu.be/wHJ6TJiCF0s) [免费域名教程2](https://youtu.be/yEF1YoLVmig)  [免费域名教程3](https://www.youtube.com/watch?v=XS0EgqckUKo&t=320s)\n   - 在 Pages控制台的 `自定义域`选项卡，下方点击 `设置自定义域`。\n   - 填入你的自定义次级域名，注意不要使用你的根域名，例如：\n     您分配到的域名是 `amclubss.com`，则添加自定义域填入 `sub.amclubss.com`即可，点击 `激活域`即可。    \n4. 验证部署是否成功：\n   - 访问 `https://[YOUR-WORKERS-URL]` 即可进入登录页面,登录成功就是完成部署(默认登录密码(UUID)是：ec872d8f-72b0-4a04-b612-0327d85e18ed)。\n   - 例如 `https://sub.amclubss.com` 然后进入登录页面 -> 输入密码 `ec872d8f-72b0-4a04-b612-0327d85e18ed` -> 点击登录 -> 成功登录。 \n5. 修改默认登录密码(ID)变量，(强烈要求修改，防止别人用你节点)： \n   - 在 Pages控制台的 `设置` 选项卡 -> 点击 `设置` -> 左方点击 `变量和机密` -> 右方点击  `添加` -> 变量名称 填入 `ID`(此名称固定不能变) ，自己设置复杂的密码 -> 右下方点击 `保存`。\n   - 在 `设置` 选项卡，点击 `部署` -> 在所有部署 找到最新一条部署记录 ，在右边点击 3个点 `...` 选择 `重试部署` 即可。\n   - 保存成功后，原登录密码(ID)已作废不能访问，用新登录密码(ID)登录访问即可。\n6. 本频道订阅器转换地址：https://sub.amclubss.com\n\n</details>\n\n## \n### 🔧三、变量说明 [视频教程](https://www.youtube.com/watch?v=i-XnnP-MptY&t=596s)\n| 变量名 | 示例 | 必填 | 备注 | YT |\n|-----|-----|-----|-----|-----|\n| ID   | ec872d8f-72b0-4a04-b612-0327d85e18ed（默认）|✅| 订阅器的登录密码 | |\n| UUID | ec872d8f-72b0-4a04-b612-0327d85e18ed |✅| Cloudflare部署节点的ID变量值[在线获取UUID](https://1024tools.com/uuid)   |  |\n| HOST | vless.amclubss.com |✅| Cloudflare部署节点的域名或自定域名 | |\n| IP_URL           | [https://raw.github.../ipUrl.txt](https://raw.githubusercontent.com/amclubs/am-cf-tunnel/main/ipUrl.txt)           |❌| （推荐）优选(ipv4、ipv6、域名、API)地址(支持多个之间`,`或 换行 作间隔)，支持文件连接后里带PROXYIP参数，可以实现不同区域优先IP使用不同的PROXYIP固定区域，解决IP乱跳问题  | [视频教程](https://www.youtube.com/watch?v=4fcyJjstFdg&t=349s)|\n| PROXYIP          | proxyip.amclubs.kozow.com </br>或</br> [https://raw.github.../proxyip.txt](https://raw.githubusercontent.com/amclubs/am-cf-tunnel/main/proxyip.txt)  |❌| 访问CloudFlare的CDN代理节点(支持多PROXYIP, PROXYIP之间使用`,`或 换行 作间隔),支持端口设置默认443 如: proxyip.amclubs.kozow.com:2053 ，支持远程txt或csv文件| [视频教程](https://youtu.be/pKrlfRRB0gU) |\n| SOCKS5           | user:password@127.0.0.1:1080         |❌| 优先作为访问CFCDN站点的SOCKS5代理                                                   | [视频教程](https://youtu.be/Bw82BH_ecC4) |\n| NAT64           | true/false                           |❌| 默认false,是否开启nat做PROXYIP(反代IP)，开启后优选使用NAT64再用PROXYIP       | [视频教程](https://www.youtube.com/watch?v=nx80sGpVoBM&t=533s) |\n| NAT64_PREFIX  | 2602:fc59",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-16T02:22:10.302948"
  }
]