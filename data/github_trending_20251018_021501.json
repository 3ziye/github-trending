[
  {
    "basic_info": {
      "name": "nanochat",
      "full_name": "karpathy/nanochat",
      "owner": "karpathy",
      "description": "The best ChatGPT that $100 can buy.",
      "url": "https://github.com/karpathy/nanochat",
      "clone_url": "https://github.com/karpathy/nanochat.git",
      "ssh_url": "git@github.com:karpathy/nanochat.git",
      "homepage": "",
      "created_at": "2025-10-13T13:46:35Z",
      "updated_at": "2025-10-18T02:14:54Z",
      "pushed_at": "2025-10-17T15:35:41Z"
    },
    "stats": {
      "stars": 25003,
      "forks": 2489,
      "watchers": 25003,
      "open_issues": 70,
      "size": 74
    },
    "tech_info": {
      "language": "Python",
      "languages": {
        "Python": 287804,
        "HTML": 20102,
        "Rust": 16657,
        "Shell": 10846
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# nanochat\n\n![nanochat logo](dev/nanochat.png)\n\n> The best ChatGPT that $100 can buy.\n\nThis repo is a full-stack implementation of an LLM like ChatGPT in a single, clean, minimal, hackable, dependency-lite codebase. nanochat is designed to run on a single 8XH100 node via scripts like [speedrun.sh](speedrun.sh), that run the entire pipeline start to end. This includes tokenization, pretraining, finetuning, evaluation, inference, and web serving over a simple UI so that you can talk to your own LLM just like ChatGPT. nanochat will become the capstone project of the course LLM101n being developed by Eureka Labs.\n\n## Talk to it\n\nTo get a sense of the endpoint of this repo, you can currently find [nanochat d32](https://github.com/karpathy/nanochat/discussions/8) hosted on [nanochat.karpathy.ai](https://nanochat.karpathy.ai/). \"d32\" means that this model has 32 layers in the Transformer neural network. This model has 1.9 billion parameters, it was trained on 38 billion tokens by simply running the single script [run1000.sh](run1000.sh), and the total cost of training was ~$800 (about 33 hours training time on 8XH100 GPU node). While today this is enough to outperform GPT-2 of 2019, it falls dramatically short of moden Large Language Models like GPT-5. When talking to these micro models, you'll see that they make a lot of mistakes, they are a little bit naive and silly and they hallucinate a ton, a bit like children. It's kind of amusing. But what makes nanochat unique is that it is fully yours - fully configurable, tweakable, hackable, and trained by you from start to end. To train and talk to your own, we turn to...\n\n## Quick start\n\nThe fastest way to feel the magic is to run the speedrun script [speedrun.sh](speedrun.sh), which trains and inferences the $100 tier of nanochat. On an 8XH100 node at $24/hr, this gives a total run time of about 4 hours. Boot up a new 8XH100 GPU box from your favorite provider (e.g. I use and like [Lambda](https://lambda.ai/service/gpu-cloud)), and kick off the training script:\n\n```bash\nbash speedrun.sh\n```\n\nAlternatively, since the script runs for 4 hours, I like to launch it like this inside a new screen session `speedrun` (and also log output to `speedrun.log`):\n\n```bash\nscreen -L -Logfile speedrun.log -S speedrun bash speedrun.sh\n```\n\nSee the [screen cheatsheet](https://gist.github.com/jctosta/af918e1618682638aa82) if you are less familiar. You can watch it go inside the screen session, or detach with `Ctrl-a d` and `tail speedrun.log` to view progress. Now wait 4 hours. Once it's done, you can talk to your LLM via the ChatGPT-like web UI. Make sure again that your local uv virtual environment is active (run `source .venv/bin/activate`), and serve it:\n\n```bash\npython -m scripts.chat_web\n```\n\nAnd then visit the URL shown. Make sure to access it correctly, e.g. on Lambda use the public IP of the node you're on, followed by the port, so for example [http://209.20.xxx.xxx:8000/](http://209.20.xxx.xxx:8000/), etc. Then talk to your LLM as you'd normally talk to ChatGPT! Get it to write stories or poems. Ask it to tell you who you are to see a hallucination. Ask it why the sky is blue. Or why it's green. The speedrun is a 4e19 FLOPs capability model so it's a bit like talking to a kindergartener :).\n\n---\n\n<img width=\"2672\" height=\"1520\" alt=\"image\" src=\"https://github.com/user-attachments/assets/ed39ddf8-2370-437a-bedc-0f39781e76b5\" />\n\n---\n\nYou can also `cat report.md` file which appeared in the project directory and contains the \"report card\" of the run, i.e. a bunch of evaluations and metrics. At the very end, you'll see a summary table, for example:\n\n---\n\n- Characters: 333,989\n- Lines: 8,304\n- Files: 44\n- Tokens (approx): 83,497\n- Dependencies (uv.lock lines): 2,004\n\n| Metric          | BASE     | MID      | SFT      | RL       |\n|-----------------|----------|----------|----------|----------|\n| CORE            | 0.2219   | -        | -        | -        |\n| ARC-Challenge   | -        | 0.2875   | 0.2807   | -        |\n| ARC-Easy        | -        | 0.3561   | 0.3876   | -        |\n| GSM8K           | -        | 0.0250   | 0.0455   | 0.0758   |\n| HumanEval       | -        | 0.0671   | 0.0854   | -        |\n| MMLU            | -        | 0.3111   | 0.3151   | -        |\n| ChatCORE        | -        | 0.0730   | 0.0884   | -        |\n\nTotal wall clock time: 3h51m\n\n---\n\n(Your table might be missing the RL number by default). For a lot more information around the speedrun script and what to look for and expect, please refer to the walkthrough that I posted in Discussions of the repo: [\"Introducing nanochat: The best ChatGPT that $100 can buy\"](https://github.com/karpathy/nanochat/discussions/1).\n\n## Bigger models\n\nUnsurprisingly, $100 is not enough to train a highly performant ChatGPT clone. In fact, LLMs are famous for their multi-million dollar capex. For our purposes, I think there are two more scales of interest. First is the ~$300 tier d26 model (i.e. depth=26) that trains in ~12",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-18T02:15:02.313910"
  },
  {
    "basic_info": {
      "name": "TinyRecursiveModels",
      "full_name": "SamsungSAILMontreal/TinyRecursiveModels",
      "owner": "SamsungSAILMontreal",
      "description": null,
      "url": "https://github.com/SamsungSAILMontreal/TinyRecursiveModels",
      "clone_url": "https://github.com/SamsungSAILMontreal/TinyRecursiveModels.git",
      "ssh_url": "git@github.com:SamsungSAILMontreal/TinyRecursiveModels.git",
      "homepage": null,
      "created_at": "2025-10-07T13:24:28Z",
      "updated_at": "2025-10-18T01:51:42Z",
      "pushed_at": "2025-10-08T19:46:47Z"
    },
    "stats": {
      "stars": 4642,
      "forks": 596,
      "watchers": 4642,
      "open_issues": 20,
      "size": 1266
    },
    "tech_info": {
      "language": "Python",
      "languages": {
        "Python": 147529
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Less is More: Recursive Reasoning with Tiny Networks\n\nThis is the codebase for the paper: \"Less is More: Recursive Reasoning with Tiny Networks\". TRM is a recursive reasoning approach that achieves amazing scores of 45% on ARC-AGI-1 and 8% on ARC-AGI-2 using a tiny 7M parameters neural network.\n\n[Paper](https://arxiv.org/abs/2510.04871)\n\n### Motivation\n\nTiny Recursion Model (TRM) is a recursive reasoning model that achieves amazing scores of 45% on ARC-AGI-1 and 8% on ARC-AGI-2 with a tiny 7M parameters neural network. The idea that one must rely on massive foundational models trained for millions of dollars by some big corporation in order to achieve success on hard tasks is a trap. Currently, there is too much focus on exploiting LLMs rather than devising and expanding new lines of direction. With recursive reasoning, it turns out that “less is more”: you don’t always need to crank up model size in order for a model to reason and solve hard problems. A tiny model pretrained from scratch, recursing on itself and updating its answers over time, can achieve a lot without breaking the bank.\n\nThis work came to be after I learned about the recent innovative Hierarchical Reasoning Model (HRM). I was amazed that an approach using small models could do so well on hard tasks like the ARC-AGI competition (reaching 40% accuracy when normally only Large Language Models could compete). But I kept thinking that it is too complicated, relying too much on biological arguments about the human brain, and that this recursive reasoning process could be greatly simplified and improved. Tiny Recursion Model (TRM) simplifies recursive reasoning to its core essence, which ultimately has nothing to do with the human brain, does not require any mathematical (fixed-point) theorem, nor any hierarchy.\n\n### How TRM works\n\n<p align=\"center\">\n  <img src=\"https://AlexiaJM.github.io/assets/images/TRM_fig.png\" alt=\"TRM\"  style=\"width: 30%;\">\n</p>\n\nTiny Recursion Model (TRM) recursively improves its predicted answer y with a tiny network. It starts with the embedded input question x and initial embedded answer y and latent z. For up to K improvements steps, it tries to improve its answer y. It does so by i) recursively updating n times its latent z given the question x, current answer y, and current latent z (recursive reasoning), and then ii) updating its answer y given the current answer y and current latent z. This recursive process allows the model to progressively improve its answer (potentially addressing any errors from its previous answer) in an extremely parameter-efficient manner while minimizing overfitting.\n\n### Requirements\n\n- Python 3.10 (or similar)\n- Cuda 12.6.0 (or similar)\n\n```bash\npip install --upgrade pip wheel setuptools\npip install --pre --upgrade torch torchvision torchaudio --index-url https://download.pytorch.org/whl/nightly/cu126 # install torch based on your cuda version\npip install -r requirements.txt # install requirements\npip install --no-cache-dir --no-build-isolation adam-atan2 \nwandb login YOUR-LOGIN # login if you want the logger to sync results to your Weights & Biases (https://wandb.ai/)\n```\n\n### Dataset Preparation\n\n```bash\n# ARC-AGI-1\npython -m dataset.build_arc_dataset \\\n  --input-file-prefix kaggle/combined/arc-agi \\\n  --output-dir data/arc1concept-aug-1000 \\\n  --subsets training evaluation concept \\\n  --test-set-name evaluation\n\n# ARC-AGI-2\npython -m dataset.build_arc_dataset \\\n  --input-file-prefix kaggle/combined/arc-agi \\\n  --output-dir data/arc2concept-aug-1000 \\\n  --subsets training2 evaluation2 concept \\\n  --test-set-name evaluation2\n\n## Note: You cannot train on both ARC-AGI-1 and ARC-AGI-2 and evaluate them both because ARC-AGI-2 training data contains some ARC-AGI-1 eval data\n\n# Sudoku-Extreme\npython dataset/build_sudoku_dataset.py --output-dir data/sudoku-extreme-1k-aug-1000  --subsample-size 1000 --num-aug 1000  # 1000 examples, 1000 augments\n\n# Maze-Hard\npython dataset/build_maze_dataset.py # 1000 examples, 8 augments\n```\n\n## Experiments\n\n### ARC-AGI-1 (assuming 4 H-100 GPUs):\n\n```bash\nrun_name=\"pretrain_att_arc1concept_4\"\ntorchrun --nproc-per-node 4 --rdzv_backend=c10d --rdzv_endpoint=localhost:0 --nnodes=1 pretrain.py \\\narch=trm \\\ndata_paths=\"[data/arc1concept-aug-1000]\" \\\narch.L_layers=2 \\\narch.H_cycles=3 arch.L_cycles=4 \\\n+run_name=${run_name} ema=True\n\n```\n\n*Runtime:* ~3 days\n\n### ARC-AGI-2 (assuming 4 H-100 GPUs):\n\n```bash\nrun_name=\"pretrain_att_arc2concept_4\"\ntorchrun --nproc-per-node 4 --rdzv_backend=c10d --rdzv_endpoint=localhost:0 --nnodes=1 pretrain.py \\\narch=trm \\\ndata_paths=\"[data/arc2concept-aug-1000]\" \\\narch.L_layers=2 \\\narch.H_cycles=3 arch.L_cycles=4 \\\n+run_name=${run_name} ema=True\n\n```\n\n*Runtime:* ~3 days\n\n### Sudoku-Extreme (assuming 1 L40S GPU):\n\n```bash\nrun_name=\"pretrain_mlp_t_sudoku\"\npython pretrain.py \\\narch=trm \\\ndata_paths=\"[data/sudoku-extreme-1k-aug-1000]\" \\\nevaluators=\"[]\" \\\nepochs=50000 eval_interval=5000 \\\nlr=1e-4 puzzle_emb_lr=1e-4 weight_decay=1.0 puzzle",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:03.441338"
  },
  {
    "basic_info": {
      "name": "superpowers",
      "full_name": "obra/superpowers",
      "owner": "obra",
      "description": "Claude Code superpowers: core skills library",
      "url": "https://github.com/obra/superpowers",
      "clone_url": "https://github.com/obra/superpowers.git",
      "ssh_url": "git@github.com:obra/superpowers.git",
      "homepage": null,
      "created_at": "2025-10-09T19:45:18Z",
      "updated_at": "2025-10-18T01:56:55Z",
      "pushed_at": "2025-10-18T01:50:32Z"
    },
    "stats": {
      "stars": 3765,
      "forks": 205,
      "watchers": 3765,
      "open_issues": 9,
      "size": 305
    },
    "tech_info": {
      "language": "Shell",
      "languages": {
        "Shell": 6233,
        "TypeScript": 5054
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Superpowers\n\nGive Claude Code superpowers with a comprehensive skills library of proven techniques, patterns, and workflows.\n\n## What You Get\n\n- **Testing Skills** - TDD, async testing, anti-patterns\n- **Debugging Skills** - Systematic debugging, root cause tracing, verification\n- **Collaboration Skills** - Brainstorming, planning, code review, parallel agents\n- **Development Skills** - Git worktrees, finishing branches, subagent workflows\n- **Meta Skills** - Creating, testing, and sharing skills\n\nPlus:\n- **Slash Commands** - `/brainstorm`, `/write-plan`, `/execute-plan`\n- **Automatic Integration** - Skills activate automatically when relevant\n- **Consistent Workflows** - Systematic approaches to common engineering tasks\n\n## Learn More\n\nRead the introduction: [Superpowers for Claude Code](https://blog.fsck.com/2025/10/09/superpowers/)\n\n## Installation\n\n### Via Plugin Marketplace (Recommended)\n\n```bash\n# In Claude Code\n/plugin marketplace add obra/superpowers-marketplace\n/plugin install superpowers@superpowers-marketplace\n```\n\n### Verify Installation\n\n```bash\n# Check that commands appear\n/help\n\n# Should see:\n# /brainstorm - Interactive design refinement\n# /write-plan - Create implementation plan\n# /execute-plan - Execute plan in batches\n```\n\n## Quick Start\n\n### Using Slash Commands\n\n**Brainstorm a design:**\n```\n/brainstorm\n```\n\n**Create an implementation plan:**\n```\n/write-plan\n```\n\n**Execute the plan:**\n```\n/execute-plan\n```\n\n### Automatic Skill Activation\n\nSkills activate automatically when relevant. For example:\n- `test-driven-development` activates when implementing features\n- `systematic-debugging` activates when debugging issues\n- `verification-before-completion` activates before claiming work is done\n\n## What's Inside\n\n### Skills Library\n\n**Testing** (`skills/testing/`)\n- **test-driven-development** - RED-GREEN-REFACTOR cycle\n- **condition-based-waiting** - Async test patterns\n- **testing-anti-patterns** - Common pitfalls to avoid\n\n**Debugging** (`skills/debugging/`)\n- **systematic-debugging** - 4-phase root cause process\n- **root-cause-tracing** - Find the real problem\n- **verification-before-completion** - Ensure it's actually fixed\n- **defense-in-depth** - Multiple validation layers\n\n**Collaboration** (`skills/collaboration/`)\n- **brainstorming** - Socratic design refinement\n- **writing-plans** - Detailed implementation plans\n- **executing-plans** - Batch execution with checkpoints\n- **dispatching-parallel-agents** - Concurrent subagent workflows\n- **requesting-code-review** - Pre-review checklist\n- **receiving-code-review** - Responding to feedback\n- **using-git-worktrees** - Parallel development branches\n- **finishing-a-development-branch** - Merge/PR decision workflow\n- **subagent-driven-development** - Fast iteration with quality gates\n\n**Meta** (`skills/meta/`)\n- **writing-skills** - Create new skills following best practices\n- **sharing-skills** - Contribute skills back via branch and PR\n- **testing-skills-with-subagents** - Validate skill quality\n- **using-superpowers** - Introduction to the skills system\n\n### Commands\n\nAll commands are thin wrappers that activate the corresponding skill:\n\n- **brainstorm.md** - Activates the `brainstorming` skill\n- **write-plan.md** - Activates the `writing-plans` skill\n- **execute-plan.md** - Activates the `executing-plans` skill\n\n## How It Works\n\n1. **SessionStart Hook** - Loads the `using-superpowers` skill at session start\n2. **Skills System** - Uses Claude Code's first-party skills system\n3. **Automatic Discovery** - Claude finds and uses relevant skills for your task\n4. **Mandatory Workflows** - When a skill exists for your task, using it becomes required\n\n## Philosophy\n\n- **Test-Driven Development** - Write tests first, always\n- **Systematic over ad-hoc** - Process over guessing\n- **Complexity reduction** - Simplicity as primary goal\n- **Evidence over claims** - Verify before declaring success\n- **Domain over implementation** - Work at problem level, not solution level\n\n## Contributing\n\nSkills live directly in this repository. To contribute:\n\n1. Fork the repository\n2. Create a branch for your skill\n3. Follow the `writing-skills` skill for creating new skills\n4. Use the `testing-skills-with-subagents` skill to validate quality\n5. Submit a PR\n\nSee `skills/meta/writing-skills/SKILL.md` for the complete guide.\n\n## Updating\n\nSkills update automatically when you update the plugin:\n\n```bash\n/plugin update superpowers\n```\n\n## License\n\nMIT License - see LICENSE file for details\n\n## Support\n\n- **Issues**: https://github.com/obra/superpowers/issues\n- **Marketplace**: https://github.com/obra/superpowers-marketplace\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:04.541654"
  },
  {
    "basic_info": {
      "name": "Dayflow",
      "full_name": "JerryZLiu/Dayflow",
      "owner": "JerryZLiu",
      "description": "Generate a timeline of your day, automatically",
      "url": "https://github.com/JerryZLiu/Dayflow",
      "clone_url": "https://github.com/JerryZLiu/Dayflow.git",
      "ssh_url": "git@github.com:JerryZLiu/Dayflow.git",
      "homepage": "",
      "created_at": "2025-09-23T01:58:21Z",
      "updated_at": "2025-10-18T02:14:45Z",
      "pushed_at": "2025-10-17T09:52:30Z"
    },
    "stats": {
      "stars": 3444,
      "forks": 143,
      "watchers": 3444,
      "open_issues": 11,
      "size": 42011
    },
    "tech_info": {
      "language": "Swift",
      "languages": {
        "Swift": 879150,
        "Shell": 27102
      },
      "license": "MIT License",
      "topics": [
        "gemini",
        "lmstudio",
        "ollama",
        "productivity",
        "productivity-tools",
        "swift",
        "time",
        "timeline"
      ]
    },
    "content": {
      "readme": "\n<div align=\"center\">\n  <img src=\"docs/images/dayflow_header.png\" alt=\"Dayflow\" width=\"400\">\n</div>\n\n<div align=\"center\">\n  <em>A timeline of your day, automatically.</em><br>\n  Turns your screen activity into a clean timeline with AI summaries and distraction highlights.\n</div>\n\n<div align=\"center\">\n  <!-- Badges -->\n  <img src=\"https://img.shields.io/badge/macOS-13%2B-000?logo=apple\" alt=\"Platform: macOS 13+\">\n  <img src=\"https://img.shields.io/badge/SwiftUI-✓-orange\" alt=\"SwiftUI\">\n  <img src=\"https://img.shields.io/badge/Updates-Sparkle-informational\" alt=\"Updates: Sparkle\">\n  <img src=\"https://img.shields.io/badge/AI-Gemini%20or%20Local-blue\" alt=\"AI: Gemini / Local\">\n  <img src=\"https://img.shields.io/badge/License-MIT-green\" alt=\"License: MIT\">\n</div>\n\n<div align=\"center\">\n  <img src=\"docs/images/hero_animation_1080p.gif\" alt=\"Dayflow Hero Animation\" width=\"800\">\n</div>\n\n<div align=\"center\">\n  <a href=\"https://github.com/JerryZLiu/Dayflow/releases/latest\">\n    <img src=\"https://img.shields.io/badge/Download%20for%20Mac-⬇%20%20Dayflow.dmg-blue?style=for-the-badge&logo=apple\" alt=\"Download for Mac\">\n  </a>\n</div>\n\n<p align=\"center\">\n  <a href=\"#quickstart\">Quickstart</a> •\n  <a href=\"#why-i-built-dayflow\">Why I built Dayflow</a> •\n  <a href=\"#features\">Features</a> •\n  <a href=\"#how-it-works\">How it works</a> •\n  <a href=\"#installation\">Installation</a> •\n  <a href=\"#data--privacy\">Data & Privacy</a> •\n  <a href=\"#automation\">Automation</a> •\n  <a href=\"#debug--developer-tools\">Debug & Developer Tools</a> •\n  <a href=\"#auto-updates-sparkle\">Auto‑updates</a> •\n  <a href=\"#contributing\">Contributing</a>\n</p>\n\n---\n\n## What is Dayflow?\n\nDayflow is a **native macOS app** (SwiftUI) that records your screen at **1 FPS**, analyzes it **every 15 minutes** with AI, and generates a **timeline** of your activities with summaries. \nIt's lightweight (25MB app size) and uses ~100MB of RAM and <1% cpu. \n\n> _Privacy‑minded by design_: You choose your AI provider. Use **Gemini** (bring your own API key) or **local models** (Ollama / LM Studio). See **Data & Privacy** for details.\n\n\n## Why I built Dayflow\n\nI built Dayflow after realizing that my calendar wasn't the source of truth for how I actually spent my time. My screen was. I wanted a calm, trustworthy timeline that let me see my workday without turning into yet another dashboard I had to maintain.\n\nDayflow stands for ownership and privacy by default. You control the data, you choose the AI provider, and you can keep everything local if that's what makes you comfortable. It's MIT licensed and fully open source because anything that watches your screen all day should be completely transparent about what it does with that information. The app should feel like a quiet assistant: respectful of your attention, honest about what it captures, and easy to shut off.\n\n\n---\n\n## Features\n\n- **Automatic timeline** of your day with concise summaries.\n- **1 FPS recording** - minimal CPU/storage impact.\n- **15-minute analysis intervals** for timely updates.\n- **Watch timelapses of your day**.\n- **Auto storage cleanup** - removes old recordings after 3 days.\n- **Distraction highlights** to see what pulled you off‑task.\n- **Native UX** built with **SwiftUI**.\n- **Auto‑updates** with **Sparkle** (daily check + background download).\n\n### Coming soon\n\n- **Infinitely customizable dashboard** — ask any question about your workday, pipe the answers into tiles you arrange yourself, and track trends over time.\n\n  <div align=\"center\">\n    <img src=\"docs/images/DashboardPreview.png\" alt=\"Dayflow dashboard preview\" width=\"800\">\n  </div>\n\n- **Daily journal** — review the highlights Dayflow captured, reflect with guided prompts, and drop screenshots or notes alongside your generated timeline.\n\n  <div align=\"center\">\n    <img src=\"docs/images/JournalPreview.png\" alt=\"Dayflow journal preview\" width=\"800\">\n  </div>\n\n## How it works\n\n1) **Capture** — Records screen at 1 FPS in 15-second chunks.\n2) **Analyze** — Every 15 minutes, sends recent footage to AI.\n3) **Generate** — AI creates timeline cards with activity summaries.\n4) **Display** — Shows your day as a visual timeline.\n5) **Cleanup** — Auto-deletes recordings older than 3 days.\n\n### AI Processing Pipeline\n\nThe efficiency of your timeline generation depends on your chosen AI provider:\n\n```mermaid\nflowchart LR\n    subgraph Gemini[\"Gemini Flow: 2 LLM Calls\"]\n        direction LR\n        GV[Video] --> GU[Upload + Transcribe<br/>1 LLM call] --> GC[Generate Cards<br/>1 LLM call] --> GD[Done]\n    end\n\n    subgraph Local[\"Local Flow: 33+ LLM Calls\"]\n        direction LR\n        LV[Video] --> LE[Extract 30 frames] --> LD[30 descriptions<br/>30 LLM calls] --> LM[Merge<br/>1 call] --> LT[Title<br/>1 call] --> LC[Merge Check<br/>1 call] --> LMC[Merge Cards<br/>1 call] --> LD2[Done]\n    end\n\n    %% Styling\n    classDef geminiFlow fill:#e8f5e8,stroke:#4caf50,stroke-width:2px\n    classDef localFlow fill:#fff8e1,stroke:#ff9800,stroke-width:2px\n    classDef g",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:05.650390"
  },
  {
    "basic_info": {
      "name": "Mole",
      "full_name": "tw93/Mole",
      "owner": "tw93",
      "description": "🐹 Dig deep like a mole to clean you Mac. 像鼹鼠一样深入挖掘来清理你的 Mac",
      "url": "https://github.com/tw93/Mole",
      "clone_url": "https://github.com/tw93/Mole.git",
      "ssh_url": "git@github.com:tw93/Mole.git",
      "homepage": "",
      "created_at": "2025-09-23T06:38:40Z",
      "updated_at": "2025-10-17T23:30:41Z",
      "pushed_at": "2025-10-17T13:21:55Z"
    },
    "stats": {
      "stars": 3341,
      "forks": 103,
      "watchers": 3341,
      "open_issues": 1,
      "size": 384
    },
    "tech_info": {
      "language": "Shell",
      "languages": {
        "Shell": 361830
      },
      "license": "MIT License",
      "topics": [
        "clean",
        "cleaner",
        "cleaner-app",
        "cleaner-cli",
        "cleaner-script",
        "mac",
        "macos",
        "shell"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <h1>Mole</h1>\n  <p><em>Dig deep like a mole to clean your Mac.</em></p>\n</div>\n\n<p align=\"center\">\n  <a href=\"https://github.com/tw93/mole/stargazers\"><img src=\"https://img.shields.io/github/stars/tw93/mole?style=flat-square\" alt=\"Stars\"></a>\n  <a href=\"https://github.com/tw93/mole/releases\"><img src=\"https://img.shields.io/github/v/tag/tw93/mole?label=version&style=flat-square\" alt=\"Version\"></a>\n  <a href=\"LICENSE\"><img src=\"https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\" alt=\"License\"></a>\n  <a href=\"https://github.com/tw93/mole/commits\"><img src=\"https://img.shields.io/github/commit-activity/m/tw93/mole?style=flat-square\" alt=\"Commits\"></a>\n  <a href=\"https://twitter.com/HiTw93\"><img src=\"https://img.shields.io/badge/follow-Tw93-red?style=flat-square&logo=Twitter\" alt=\"Twitter\"></a>\n  <a href=\"https://t.me/+GclQS9ZnxyI2ODQ1\"><img src=\"https://img.shields.io/badge/chat-Telegram-blueviolet?style=flat-square&logo=Telegram\" alt=\"Telegram\"></a>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://cdn.tw93.fun/img/mole.jpeg\" alt=\"Mole - 95.50GB freed\" width=\"800\" />\n  <p align=\"center\">由于 Mole 还在初级版本，如果这台 Mac 对你非常重要，建议再等等。</p>\n</p>\n\n## Features\n\n- **Deep System Cleanup** - Cleans way more junk than CleanMyMac/Lemon - caches, logs, temp files\n- **Thorough Uninstall** - Scans 22+ locations to remove app leftovers, not just the .app file\n- **Interactive Disk Analyzer** - Navigate folders with arrow keys, find and delete large files quickly\n- **Fast & Lightweight** - Terminal-based with arrow-key navigation, pagination, and Touch ID support\n\n## Quick Start\n\n**Install:**\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/tw93/mole/main/install.sh | bash\n```\n\nOr via Homebrew:\n\n```bash\nbrew install tw93/tap/mole\n```\n\n**Run:**\n\n```bash\nmo                      # Interactive menu\nmo clean                # System cleanup\nmo clean --dry-run      # Preview mode\nmo clean --whitelist    # Manage protected caches\nmo uninstall            # Uninstall apps\nmo analyze              # Disk analyzer\n\nmo touchid              # Configure Touch ID for sudo\nmo update               # Update Mole\nmo remove               # Remove Mole from system\nmo --help               # Show help\nmo --version            # Show installed version\n```\n\n## Tips\n\n- Safety first, if your Mac is mission-critical, wait for Mole to mature before full cleanups.\n- Preview the cleanup by running `mo clean --dry-run` and reviewing the generated list.\n- Protect caches with `mo clean --whitelist`; defaults cover Playwright, HuggingFace, and Maven paths.\n- Use `mo touchid` to approve sudo with Touch ID instead of typing your password.\n\n## Features in Detail\n\n### Deep System Cleanup\n\n```bash\n$ mo clean\n\n▶ System essentials\n  ✓ User app cache (45.2GB)\n  ✓ User app logs (2.1GB)\n  ✓ Trash (12.3GB)\n\n▶ Browser cleanup\n  ✓ Chrome cache (8.4GB)\n  ✓ Safari cache (2.1GB)\n\n▶ Developer tools\n  ✓ Xcode derived data (9.1GB)\n  ✓ Node.js cache (14.2GB)\n\n▶ Others\n  ✓ Dropbox cache (5.2GB)\n  ✓ Spotify cache (3.1GB)\n\n====================================================================\nCLEANUP COMPLETE!\nSpace freed: 95.50GB | Free space now: 223.5GB\n====================================================================\n```\n\n### Smart App Uninstaller\n\n```bash\n$ mo uninstall\n\nSelect Apps to Remove\n═══════════════════════════\n▶ ☑ Adobe Creative Cloud      (12.4G) | Old\n  ☐ WeChat                    (2.1G) | Recent\n  ☐ Final Cut Pro             (3.8G) | Recent\n\nUninstalling: Adobe Creative Cloud\n  ✓ Removed application              # /Applications/\n  ✓ Cleaned 52 related files         # ~/Library/ across 12 locations\n    - Support files & caches         # Application Support, Caches\n    - Preferences & logs             # Preferences, Logs\n    - WebKit storage & cookies       # WebKit, HTTPStorages\n    - Extensions & plugins           # Internet Plug-Ins, Services\n    - System files with sudo         # /Library/, Launch daemons\n\n====================================================================\nUNINSTALLATION COMPLETE!\nSpace freed: 12.8GB\n====================================================================\n```\n\n### Disk Space Analyzer\n\n```bash\n$ mo analyze\n\nAnalyzing: /Users/You\n═══════════════════════════════════════════════════════\nTotal: 156.8GB\n\n├─ 📁 Library                                        45.2GB\n│  ├─ 📁 Caches                                      28.4GB\n│  └─ 📁 Application Support                         16.8GB\n├─ 📁 Downloads                                      32.6GB\n│  ├─ 📄 Xcode-14.3.1.dmg                            12.3GB\n│  ├─ 📄 backup_2023.zip                             8.6GB\n│  └─ 📄 old_projects.tar.gz                         5.2GB\n├─ 📁 Movies                                         28.9GB\n│  ├─ 📄 vacation_2023.mov                           15.4GB\n│  └─ 📄 screencast_raw.mp4                          8.8GB\n├─ 📁 Documents                                      18.4GB\n└─ 📁 Desktop                                        12.7GB\n```\n\n## Suppor",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:06.781730"
  },
  {
    "basic_info": {
      "name": "neutts-air",
      "full_name": "neuphonic/neutts-air",
      "owner": "neuphonic",
      "description": "On-device TTS model by Neuphonic",
      "url": "https://github.com/neuphonic/neutts-air",
      "clone_url": "https://github.com/neuphonic/neutts-air.git",
      "ssh_url": "git@github.com:neuphonic/neutts-air.git",
      "homepage": null,
      "created_at": "2025-10-02T12:48:55Z",
      "updated_at": "2025-10-18T02:09:36Z",
      "pushed_at": "2025-10-17T10:20:23Z"
    },
    "stats": {
      "stars": 3316,
      "forks": 295,
      "watchers": 3316,
      "open_issues": 25,
      "size": 1906
    },
    "tech_info": {
      "language": "Python",
      "languages": {
        "Python": 14928
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# NeuTTS Air ☁️\n\nHuggingFace 🤗: [Model](https://huggingface.co/neuphonic/neutts-air), [Q8 GGUF](https://huggingface.co/neuphonic/neutts-air-q8-gguf), [Q4 GGUF](https://huggingface.co/neuphonic/neutts-air-q4-gguf) [Spaces](https://huggingface.co/spaces/neuphonic/neutts-air)\n\n[Demo Video](https://github.com/user-attachments/assets/020547bc-9e3e-440f-b016-ae61ca645184)\n\n_Created by [Neuphonic](http://neuphonic.com/) - building faster, smaller, on-device voice AI_\n\nState-of-the-art Voice AI has been locked behind web APIs for too long. NeuTTS Air is the world’s first super-realistic, on-device, TTS speech language model with instant voice cloning. Built off a 0.5B LLM backbone, NeuTTS Air brings natural-sounding speech, real-time performance, built-in security and speaker cloning to your local device - unlocking a new category of embedded voice agents, assistants, toys, and compliance-safe apps.\n\n## Key Features\n\n- 🗣Best-in-class realism for its size - produces natural, ultra-realistic voices that sound human\n- 📱Optimised for on-device deployment - provided in GGML format, ready to run on phones, laptops, or even Raspberry Pis\n- 👫Instant voice cloning - create your own speaker with as little as 3 seconds of audio\n- 🚄Simple LM + codec architecture built off a 0.5B backbone - the sweet spot between speed, size, and quality for real-world applications\n\n> [!CAUTION]\n> Websites like neutts.com are popping up and they're not affliated with Neuphonic, our github or this repo.\n>\n> We are on neuphonic.com only. Please be careful out there! 🙏\n\n## Model Details\n\nNeuTTS Air is built off Qwen 0.5B - a lightweight yet capable language model optimised for text understanding and generation - as well as a powerful combination of technologies designed for efficiency and quality:\n\n- **Supported Languages**: English\n- **Audio Codec**: [NeuCodec](https://huggingface.co/neuphonic/neucodec) - our 50hz neural audio codec that achieves exceptional audio quality at low bitrates using a single codebook\n- **Context Window**: 2048 tokens, enough for processing ~30 seconds of audio (including prompt duration)\n- **Format**: Available in GGML format for efficient on-device inference\n- **Responsibility**: Watermarked outputs\n- **Inference Speed**: Real-time generation on mid-range devices\n- **Power Consumption**: Optimised for mobile and embedded devices\n\n## Get Started\n\n> [!NOTE]\n> We have added a [streaming example](examples/basic_streaming_example.py) using the `llama-cpp-python` library as well as a [finetuning script](examples/finetune.py). For finetuning, please refer to the [finetune guide](TRAINING.md) for more details.\n\n1. **Clone Git Repo**\n\n   ```bash\n   git clone https://github.com/neuphonic/neutts-air.git\n   cd neutts-air\n   ```\n\n2. **Install `espeak` (required dependency)**\n\n   Please refer to the following link for instructions on how to install `espeak`:\n\n   https://github.com/espeak-ng/espeak-ng/blob/master/docs/guide.md\n\n   ```bash\n   # Mac OS\n   brew install espeak\n\n   # Ubuntu/Debian\n   sudo apt install espeak\n   ```\n\n   Mac users may need to put the following lines at the top of the neutts.py file.\n\n   ```python\n   from phonemizer.backend.espeak.wrapper import EspeakWrapper\n   _ESPEAK_LIBRARY = '/opt/homebrew/Cellar/espeak/1.48.04_1/lib/libespeak.1.1.48.dylib'  #use the Path to the library.\n   EspeakWrapper.set_library(_ESPEAK_LIBRARY)\n   ```\n\n   Windows users may need to run (see https://github.com/bootphon/phonemizer/issues/163)\n\n   ```pwsh\n   $env:PHONEMIZER_ESPEAK_LIBRARY = \"c:\\Program Files\\eSpeak NG\\libespeak-ng.dll\"\n   $env:PHONEMIZER_ESPEAK_PATH = \"c:\\Program Files\\eSpeak NG\"\n   setx PHONEMIZER_ESPEAK_LIBRARY \"c:\\Program Files\\eSpeak NG\\libespeak-ng.dll\"\n   setx PHONEMIZER_ESPEAK_PATH \"c:\\Program Files\\eSpeak NG\"\n   ```\n\n3. **Install Python dependencies**\n\n   The requirements file includes the dependencies needed to run the model with PyTorch.\n   When using an ONNX decoder or a GGML model, some dependencies (such as PyTorch) are no longer required.\n\n   The inference is compatible and tested on `python>=3.11`.\n\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n4. **(Optional) Install Llama-cpp-python to use the `GGUF` models.**\n\n   ```bash\n   pip install llama-cpp-python\n   ```\n\n   To run llama-cpp with GPU suport (CUDA, MPS) support please refer to:\n   https://pypi.org/project/llama-cpp-python/\n\n5. **(Optional) Install onnxruntime to use the `.onnx` decoder.**\n   If you want to run the onnxdecoder\n   ```bash\n   pip install onnxruntime\n   ```\n\n## Running the Model\n\nRun the basic example script to synthesize speech:\n\n```bash\npython -m examples.basic_example \\\n  --input_text \"My name is Dave, and um, I'm from London\" \\\n  --ref_audio samples/dave.wav \\\n  --ref_text samples/dave.txt\n```\n\nTo specify a particular model repo for the backbone or codec, add the `--backbone` argument. Available backbones are listed in [NeuTTS-Air huggingface collection](https://huggingface.co/collections/neuphonic/neutts-air-68cc14b7033b4",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:07.912046"
  },
  {
    "basic_info": {
      "name": "OpenStock",
      "full_name": "Open-Dev-Society/OpenStock",
      "owner": "Open-Dev-Society",
      "description": "OpenStock is an open-source alternative to expensive market platforms. Track real-time prices, set personalized alerts, and explore detailed company insights — built openly, for everyone, forever free.",
      "url": "https://github.com/Open-Dev-Society/OpenStock",
      "clone_url": "https://github.com/Open-Dev-Society/OpenStock.git",
      "ssh_url": "git@github.com:Open-Dev-Society/OpenStock.git",
      "homepage": "https://openstock-ods.vercel.app",
      "created_at": "2025-09-28T18:16:32Z",
      "updated_at": "2025-10-18T02:08:53Z",
      "pushed_at": "2025-10-17T19:09:21Z"
    },
    "stats": {
      "stars": 3291,
      "forks": 363,
      "watchers": 3291,
      "open_issues": 4,
      "size": 2244
    },
    "tech_info": {
      "language": "TypeScript",
      "languages": {
        "TypeScript": 256175,
        "CSS": 16325,
        "JavaScript": 1509,
        "Dockerfile": 698
      },
      "license": "GNU Affero General Public License v3.0",
      "topics": [
        "coderabbit",
        "inngest",
        "nextjs",
        "shadcn-ui",
        "stock-market",
        "tailwindcss"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <br />\n  <a href=\"#\" target=\"_blank\">\n    <img src=\"./public/assets/images/dashboard.png\" alt=\"Project Banner\" />\n  </a>\n  © Open Dev Society. This project is licensed under AGPL-3.0; if you modify, redistribute, or deploy it (including as a web service), you must release your source code under the same license and credit the original authors.\n  <br />\n  <br/>\n\n  <div>\n    <img src=\"https://img.shields.io/badge/-Next.js-black?style=for-the-badge&logoColor=white&logo=next.js&color=000000\" alt=\"Next.js badge\" />\n    <img src=\"https://img.shields.io/badge/-TypeScript-black?style=for-the-badge&logoColor=white&logo=typescript&color=3178C6\"/>\n    <img src=\"https://img.shields.io/badge/-Tailwind%20CSS-black?style=for-the-badge&logoColor=white&logo=tailwindcss&color=38B2AC\"/>\n    <img src=\"https://img.shields.io/badge/-shadcn/ui-black?style=for-the-badge&logoColor=white&logo=shadcnui&color=000000\"/>\n    <img src=\"https://img.shields.io/badge/-Radix%20UI-black?style=for-the-badge&logoColor=white&logo=radixui&color=000000\"/>\n    <img src=\"https://img.shields.io/badge/-Better%20Auth-black?style=for-the-badge&logoColor=white&logo=betterauth&color=000000\"/>\n    <img src=\"https://img.shields.io/badge/-MongoDB-black?style=for-the-badge&logoColor=white&logo=mongodb&color=00A35C\"/>\n    <img src=\"https://img.shields.io/badge/-Inngest-black?style=for-the-badge&logoColor=white&logo=inngest&color=000000\"/>\n    <img src=\"https://img.shields.io/badge/-Nodemailer-black?style=for-the-badge&logoColor=white&logo=gmail&color=EA4335\"/>\n    <img src=\"https://img.shields.io/badge/-TradingView-black?style=for-the-badge&logoColor=white&logo=tradingview&color=2962FF\"/>\n    <img src=\"https://img.shields.io/badge/-Finnhub-black?style=for-the-badge&logoColor=white&color=30B27A\"/>\n    <img src=\"https://img.shields.io/badge/-CodeRabbit-black?style=for-the-badge&logoColor=white&logo=coderabbit&color=9146FF\"/>\n  </div>\n</div>\n\n# OpenStock\n\nOpenStock is an open-source alternative to expensive market platforms. Track real-time prices, set personalized alerts, and explore detailed company insights — built openly, for everyone, forever free.\n\nNote: OpenStock is community-built and not a brokerage. Market data may be delayed based on provider rules and your configuration. Nothing here is financial advice.\n\n## 📋 Table of Contents\n\n1. ✨ [Introduction](#introduction)\n2. 🌍 [Open Dev Society Manifesto](#manifesto)\n3. ⚙️ [Tech Stack](#tech-stack)\n4. 🔋 [Features](#features)\n5. 🤸 [Quick Start](#quick-start)\n6. 🐳 [Docker Setup](#docker-setup)\n7. 🔐 [Environment Variables](#environment-variables)\n8. 🧱 [Project Structure](#project-structure)\n9. 📡 [Data & Integrations](#data--integrations)\n10. 🧪 [Scripts & Tooling](#scripts--tooling)\n11. 🤝 [Contributing](#contributing)\n12. 🛡️ [Security](#security)\n13. 📜 [License](#license)\n14. 🙏 [Acknowledgements](#acknowledgements)\n\n## ✨ Introduction\n\nOpenStock is a modern stock market app powered by Next.js (App Router), shadcn/ui and Tailwind CSS, Better Auth for authentication, MongoDB for persistence, Finnhub for market data, and TradingView widgets for charts and market views.\n\n## 🌍 Open Dev Society Manifesto <a name=\"manifesto\"></a>\n\nWe live in a world where knowledge is hidden behind paywalls. Where tools are locked in subscriptions. Where information is twisted by bias. Where newcomers are told they’re not “good enough” to build.\n\nWe believe there’s a better way.\n\n- Our Belief: Technology should belong to everyone. Knowledge should be open, free, and accessible. Communities should welcome newcomers with trust, not gatekeeping.\n- Our Mission: Build free, open-source projects that make a real difference:\n    - Tools that professionals and students can use without barriers.\n    - Knowledge platforms where learning is free, forever.\n    - Communities where every beginner is guided, not judged.\n    - Resources that run on trust, not profit.\n- Our Promise: We will never lock knowledge. We will never charge for access. We will never trade trust for money. We run on transparency, donations, and the strength of our community.\n- Our Call: If you’ve ever felt you didn’t belong, struggled to find free resources, or wanted to build something meaningful — you belong here.\n\nBecause the future belongs to those who build it openly.\n\n## ⚙️ Tech Stack\n\nCore\n- Next.js 15 (App Router), React 19\n- TypeScript\n- Tailwind CSS v4 (via @tailwindcss/postcss)\n- shadcn/ui + Radix UI primitives\n- Lucide icons\n\nAuth & Data\n- Better Auth (email/password) with MongoDB adapter\n- MongoDB + Mongoose\n- Finnhub API for symbols, profiles, and market news\n- TradingView embeddable widgets\n\nAutomation & Comms\n- Inngest (events, cron, AI inference via Gemini)\n- Nodemailer (Gmail transport)\n- next-themes, cmdk (command palette), react-hook-form\n\nLanguage composition\n- TypeScript (~93.4%), CSS (~6%), JavaScript (~0.6%)\n\n## 🔋 Features\n\n- Authentication\n    - Email/password auth with Better Auth + MongoDB adapter\n    - Protected routes enforced vi",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:09.052160"
  },
  {
    "basic_info": {
      "name": "bdh",
      "full_name": "pathwaycom/bdh",
      "owner": "pathwaycom",
      "description": "Baby Dragon Hatchling (BDH) – Architecture and Code",
      "url": "https://github.com/pathwaycom/bdh",
      "clone_url": "https://github.com/pathwaycom/bdh.git",
      "ssh_url": "git@github.com:pathwaycom/bdh.git",
      "homepage": "",
      "created_at": "2025-09-30T12:05:01Z",
      "updated_at": "2025-10-17T18:39:48Z",
      "pushed_at": "2025-10-14T07:57:02Z"
    },
    "stats": {
      "stars": 3074,
      "forks": 105,
      "watchers": 3074,
      "open_issues": 2,
      "size": 1005
    },
    "tech_info": {
      "language": "Python",
      "languages": {
        "Python": 8721
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Baby Dragon Hatchling\n\n## **Bridging the Gap Between Transformers and the Brain**\n\n**Baby Dragon Hatchling (BDH)** is a biologically inspired large language model architecture that connects principles of deep learning with the foundations of neuroscience. Developed by researchers at [Pathway](https://pathway.com), BDH provides a theoretical and practical framework for understanding the emergence of reasoning and generalization in artificial systems.\n\nThis repository contains the official implementation from the paper:\n> *A. Kosowski, P. Uznański, J. Chorowski, Z. Stamirowska, M. Bartoszkiewicz.*\n> [_The Dragon Hatchling: The Missing Link between the Transformer and Models of the Brain_](https://doi.org/10.48550/arXiv.2509.26507), arXiv (2025).\n\n\n## Overview\n\nBDH represents a **scale-free, locally interacting network of neurons** capable of intrinsic reasoning dynamics. BDH scales like a Transformer on performance benchmarks—yet retains full interpretability and theoretical grounding in the fine-grained dynamics of neuron interactions.\n\n**Key properties:**\n\n- **Scale-free network topology** mimicking biological connectivity\n- **Locally interacting neuron particles** with excitatory/inhibitory dynamics\n- **Hebbian working memory** based on synaptic plasticity, displaying monosemanticity\n- **GPU-friendly state-space formulation** for efficient implementation\n- **Interpretable activations** that are sparse and positive\n\nBDH formalizes a bridge between **neural computation and machine-based language understanding**. It shows how **macro reasoning behavior** in large AI models emerges from **micro-level neuron dynamics**, guided by principles of graph theory and local computation.\n\nEmpirically, BDH matches **GPT-2–scale Transformers** across language and translation tasks at equivalent parameter scales (10M–1B).\n\n\n***\n\n## Architecture\n\n<img src=\"figs/architecture.png\" width=\"600\"/>\n\n***\n\n## Relation to Transformers\n\n<img src=\"figs/vocab.png\" width=\"600\"/>\n\nBDH and the Transformer share attention-inspired computation; however, BDH’s graph-based architecture makes its attention **emerge naturally from neuron-level interactions**, reflecting attention as seen in biological systems.\n\n***\n\n## Scaling Laws\n\n<img src=\"figs/bdh_scaling.png\" width=\"600\"/>\n\nBDH follows **Transformer-like scaling laws**, maintaining parameter efficiency while achieving interpretability at any scale.\n\n***\n\n## Installation and Training\n\n```bash\n# install dependencies\npip install -r requirements.txt\n\n# train BDH on a toy dataset\npython train.py\n```\n\n<!--For visualization and interpretability analysis, explore the example notebooks in `notebooks/`.-->\n\n\n\n## Learn and Discuss\n\n- Watch the *SuperDataScience podcast* [▶️ *Dragon Hatchling: The Missing Link Between Transformers and the Brain*](https://www.youtube.com/watch?v=mfV44-mtg7c) (72 min.) featuring Adrian Kosowski in conversation with Jon Krohn, unpacking BDH’s neuron-level architecture and sparse reasoning dynamics.\n\n- Read about BDH in\n[*Forbes*](https://www.forbes.com/sites/victordey/2025/10/08/can-ai-learn-and-evolve-like-a-brain-pathways-bold-research-thinks-so/),\n[*Semafor*](https://www.semafor.com/article/10/01/2025/new-ai-research-claims-to-be-getting-closer-to-modeling-human-brain),\n[*The Turing Post*](https://www.turingpost.com/p/fod-121-300-million-to-start-a-big-promise-for-science#the-freshest-research-papers-catego),\n[*Quantum Zeitgeist*](https://quantumzeitgeist.com/palo-alto-ai-firm-pathway-unveils-post-transformer-architecture-for-autonomous-ai/),\n[*Golem*](https://www.golem.de/news/neue-ki-architektur-was-ist-baby-dragon-hatchling-2510-201047-2.html),\nand elsewhere in the media.\n\n- Discuss and share the BDH paper on:\n[*Hugging Face Papers*](https://huggingface.co/papers/2509.26507), \n[*Alphaxiv*](https://alphaxiv.org/abs/2509.26507),\nand [*EmergentMind*](https://emergentmind.com/papers/2509.26507).\n\n## Community Forks\n\n- [adamskrodzki/bdh](https://github.com/adamskrodzki/bdh): dynamic vocabulary, stateful attention\n- [mosure/burn_dragon_hatchling](https://github.com/mosure/burn_dragon_hatchling): Burn port\n- [severian42/bdh](https://github.com/severian42/bdh): MLX port\n- [Git-Faisal/bdh](https://github.com/Git-Faisal/bdh)\n- [GrahLnn/bdh](https://github.com/GrahLnn/bdh)\n\n## Acknowledgements\nWe thank Andrej Karpathy for the [nanoGPT](https://github.com/karpathy/nanoGPT/) code and the tiny Shapespeare dataset used in this demonstration.\n\nBDH research stands at the intersection of **AI architecture**, **biological learning models**, and **theoretical computer science**—an effort to map the *equations of reasoning* between artificial and biological intelligence.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:10.164497"
  },
  {
    "basic_info": {
      "name": "Qwen3-Omni",
      "full_name": "QwenLM/Qwen3-Omni",
      "owner": "QwenLM",
      "description": "Qwen3-omni is a natively end-to-end, omni-modal LLM developed by the Qwen team at Alibaba Cloud, capable of understanding text, audio, images, and video, as well as generating speech in real time.",
      "url": "https://github.com/QwenLM/Qwen3-Omni",
      "clone_url": "https://github.com/QwenLM/Qwen3-Omni.git",
      "ssh_url": "git@github.com:QwenLM/Qwen3-Omni.git",
      "homepage": null,
      "created_at": "2025-09-21T09:46:10Z",
      "updated_at": "2025-10-17T21:46:49Z",
      "pushed_at": "2025-10-09T11:13:39Z"
    },
    "stats": {
      "stars": 2663,
      "forks": 142,
      "watchers": 2663,
      "open_issues": 11,
      "size": 26943
    },
    "tech_info": {
      "language": "Jupyter Notebook",
      "languages": {
        "Jupyter Notebook": 38834506,
        "Python": 29676
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# Qwen3-Omni\n\n<br>\n\n<p align=\"center\">\n    <img src=\"https://qianwen-res.oss-cn-beijing.aliyuncs.com//Qwen3-Omni/qwen3_omni_logo.png\" width=\"400\"/>\n<p>\n\n<p align=\"center\">\n        💜 <a href=\"https://chat.qwen.ai/\"><b>Qwen Chat</b></a>&nbsp&nbsp | &nbsp&nbsp🤗 <a href=\"https://huggingface.co/collections/Qwen/qwen3-omni-68d100a86cd0906843ceccbe\">Hugging Face</a>&nbsp&nbsp | &nbsp&nbsp🤖 <a href=\"https://modelscope.cn/collections/Qwen3-Omni-867aef131e7d4f\">ModelScope</a>&nbsp&nbsp | &nbsp&nbsp📑 <a href=\"https://qwen.ai/blog?id=65f766fc2dcba7905c1cb69cc4cab90e94126bf4&from=research.latest-advancements-list\">Blog</a>&nbsp&nbsp | &nbsp&nbsp📚 <a href=\"https://github.com/QwenLM/Qwen3-Omni/tree/main/cookbooks\">Cookbooks</a>&nbsp&nbsp | &nbsp&nbsp📑 <a href=\"https://arxiv.org/pdf/2509.17765\">Paper</a>&nbsp&nbsp\n<br>\n🖥️ <a href=\"https://huggingface.co/spaces/Qwen/Qwen3-Omni-Demo\">Hugging Face Demo</a>&nbsp&nbsp | &nbsp&nbsp 🖥️ <a href=\"https://modelscope.cn/studios/Qwen/Qwen3-Omni-Demo\">ModelScope Demo</a>&nbsp&nbsp | &nbsp&nbsp💬 <a href=\"https://github.com/QwenLM/Qwen/blob/main/assets/wechat.png\">WeChat (微信)</a>&nbsp&nbsp | &nbsp&nbsp🫨 <a href=\"https://discord.gg/CV4E9rpNSD\">Discord</a>&nbsp&nbsp | &nbsp&nbsp📑 <a href=\"https://help.aliyun.com/zh/model-studio/user-guide/qwen-omni\">API</a>\n\n</p>\n\nWe release **Qwen3-Omni**, the natively end-to-end multilingual omni-modal foundation models. It is designed to process diverse inputs including text, images, audio, and video, while delivering real-time streaming responses in both text and natural speech. Click the video below for more information 😃\n\n<details open>\n<summary>English Version</summary>\n<a href=\"https://youtu.be/_zdOrPju4_g\" target=\"_blank\">\n  <img src=\"https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/videocover.png\" alt=\"Open English Video\"/>\n</a>\n</details>\n\n<details>\n<summary>Chinese Version</summary>\n<a href=\"https://youtu.be/Wtjsw5deXfQ\" target=\"_blank\">\n  <img src=\"https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/videocover.png\" alt=\"打开中文视频\"/>\n</a>\n</details>\n\n\n## News\n* 2025.09.26: ⭐️⭐️⭐️ Qwen3-Omni reaches top-1 on Hugging Face Trending! \n* 2025.09.22: 🎉🎉🎉 We have released [Qwen3-Omni](https://huggingface.co/collections/Qwen/qwen3-omni-68d100a86cd0906843ceccbe). For more details, please check our [blog](https://qwen.ai/blog?id=65f766fc2dcba7905c1cb69cc4cab90e94126bf4&from=research.latest-advancements-list)!\n\n## Contents <!-- omit in toc -->\n\n- [Overview](#overview)\n  - [Introduction](#introduction)\n  - [Model Architecture](#model-architecture)\n  - [Cookbooks for Usage Cases](#cookbooks-for-usage-cases)\n- [QuickStart](#quickstart)\n  - [Model Description and Download](#model-description-and-download)\n  - [Transformers Usage](#transformers-usage)\n  - [vLLM Usage](#vllm-usage)\n  - [DashScope API Usage](#dashscope-api-usage)\n  - [Usage Tips (Recommended Reading)](#usage-tips-recommended-reading)\n- [Interaction with Qwen3-Omni](#interaction-with-qwen3-omni)\n  - [Online Demo](#online-demo)\n  - [Real-Time Interaction](#real-time-interaction)\n  - [Launch Local Web UI Demo](#launch-local-web-ui-demo)\n- [Docker](#-docker)\n- [Evaluation](#evaluation)\n  - [Performance of Qwen3-Omni](#performance-of-qwen3-omni)\n  - [Setting for Evaluation](#setting-for-evaluation)\n- [Citation](#citation)\n\n## Overview\n### Introduction\n\n<p align=\"center\">\n    <img src=\"https://qianwen-res.oss-cn-beijing.aliyuncs.com/Qwen3-Omni/q3o_introduction.png\" width=\"90%\"/>\n<p>\n\nQwen3-Omni is the natively end-to-end multilingual omni-modal foundation models. It processes text, images, audio, and video, and delivers real-time streaming responses in both text and natural speech. We introduce several architectural upgrades to improve performance and efficiency. Key features:\n\n* **State-of-the-art across modalities**: Early text-first pretraining and mixed multimodal training provide native multimodal support. While achieving strong audio and audio-video results, unimodal text and image performance does not regress. Reaches SOTA on 22 of 36 audio/video benchmarks and open-source SOTA on 32 of 36; ASR, audio understanding, and voice conversation performance is comparable to Gemini 2.5 Pro.\n\n* **Multilingual**: Supports 119 text languages, 19 speech input languages, and 10 speech output languages.\n  - **Speech Input**: English, Chinese, Korean, Japanese, German, Russian, Italian, French, Spanish, Portuguese, Malay, Dutch, Indonesian, Turkish, Vietnamese, Cantonese, Arabic, Urdu.\n  - **Speech Output**: English, Chinese, French, German, Russian, Italian, Spanish, Portuguese, Japanese, Korean.\n\n* **Novel Architecture**: MoE-based Thinker–Talker design with AuT pretraining for strong general representations, plus a multi-codebook design that drives latency to a minimum.\n\n* **Real-time Audio/Video Interaction**: Low-latency streaming with natural turn-taking and immediate text or speech responses.\n\n* **Flexible Control**: Customize behavior via system prompts for fine-grained control and easy ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:11.288949"
  },
  {
    "basic_info": {
      "name": "skills",
      "full_name": "anthropics/skills",
      "owner": "anthropics",
      "description": "Public repository for Skills",
      "url": "https://github.com/anthropics/skills",
      "clone_url": "https://github.com/anthropics/skills.git",
      "ssh_url": "git@github.com:anthropics/skills.git",
      "homepage": null,
      "created_at": "2025-09-22T15:53:31Z",
      "updated_at": "2025-10-18T02:13:35Z",
      "pushed_at": "2025-10-17T21:44:24Z"
    },
    "stats": {
      "stars": 2582,
      "forks": 186,
      "watchers": 2582,
      "open_issues": 11,
      "size": 3089
    },
    "tech_info": {
      "language": "Python",
      "languages": {
        "Python": 566237,
        "JavaScript": 45621,
        "HTML": 20844,
        "Shell": 11441
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Skills\nSkills are folders of instructions, scripts, and resources that Claude loads dynamically to improve performance on specialized tasks. Skills teach Claude how to complete specific tasks in a repeatable way, whether that's creating documents with your company's brand guidelines, analyzing data using your organization's specific workflows, or automating personal tasks.\n\nFor more information, check out:\n- [What are skills?](https://support.claude.com/en/articles/12512176-what-are-skills)\n- [Using skills in Claude](https://support.claude.com/en/articles/12512180-using-skills-in-claude)\n- [How to create custom skills](https://support.claude.com/en/articles/12512198-creating-custom-skills)\n- [Equipping agents for the real world with Agent Skills](https://anthropic.com/engineering/equipping-agents-for-the-real-world-with-agent-skills)\n\n# About This Repository\n\nThis repository contains example skills that demonstrate what's possible with Claude's skills system. These examples range from creative applications (art, music, design) to technical tasks (testing web apps, MCP server generation) to enterprise workflows (communications, branding, etc.).\n\nEach skill is self-contained in its own directory with a `SKILL.md` file containing the instructions and metadata that Claude uses. Browse through these examples to get inspiration for your own skills or to understand different patterns and approaches.\n\nThe example skills in this repo are open source (Apache 2.0). We've also included the document creation & editing skills that power [Claude's document capabilities](https://www.anthropic.com/news/create-files) under the hood in the [`document-skills/`](./document-skills/) folder. These are source-available, not open source, but we wanted to share these with developers as a reference for more complex skills that are actively used in a production AI application.\n\n**Note:** These are reference examples for inspiration and learning. They showcase general-purpose capabilities rather than organization-specific workflows or sensitive content.\n\n## Disclaimer\n\n**These skills are provided for demonstration and educational purposes only.** While some of these capabilities may be available in Claude, the implementations and behaviors you receive from Claude may differ from what is shown in these examples. These examples are meant to illustrate patterns and possibilities. Always test skills thoroughly in your own environment before relying on them for critical tasks.\n\n# Example Skills\n\nThis repository includes a diverse collection of example skills demonstrating different capabilities:\n\n## Creative & Design\n- **algorithmic-art** - Create generative art using p5.js with seeded randomness, flow fields, and particle systems\n- **canvas-design** - Design beautiful visual art in .png and .pdf formats using design philosophies\n- **slack-gif-creator** - Create animated GIFs optimized for Slack's size constraints\n\n## Development & Technical\n- **artifacts-builder** - Build complex claude.ai HTML artifacts using React, Tailwind CSS, and shadcn/ui components\n- **mcp-server** - Guide for creating high-quality MCP servers to integrate external APIs and services\n- **webapp-testing** - Test local web applications using Playwright for UI verification and debugging\n\n## Enterprise & Communication\n- **brand-guidelines** - Apply Anthropic's official brand colors and typography to artifacts\n- **internal-comms** - Write internal communications like status reports, newsletters, and FAQs\n- **theme-factory** - Style artifacts with 10 pre-set professional themes or generate custom themes on-the-fly\n\n## Meta Skills\n- **skill-creator** - Guide for creating effective skills that extend Claude's capabilities\n- **template-skill** - A basic template to use as a starting point for new skills\n\n# Document Skills\n\nThe `document-skills/` subdirectory contains skills that Anthropic developed to help Claude create various document file formats. These skills demonstrate advanced patterns for working with complex file formats and binary data:\n\n- **docx** - Create, edit, and analyze Word documents with support for tracked changes, comments, formatting preservation, and text extraction\n- **pdf** - Comprehensive PDF manipulation toolkit for extracting text and tables, creating new PDFs, merging/splitting documents, and handling forms\n- **pptx** - Create, edit, and analyze PowerPoint presentations with support for layouts, templates, charts, and automated slide generation\n- **xlsx** - Create, edit, and analyze Excel spreadsheets with support for formulas, formatting, data analysis, and visualization\n\n**Important Disclaimer:** These document skills are point-in-time snapshots and are not actively maintained or updated. Versions of these skills ship pre-included with Claude. They are primarily intended as reference examples to illustrate how Anthropic approaches developing more complex skills that work with binary file formats and document structures.\n\n# Try in Claude Code, C",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:12.418978"
  },
  {
    "basic_info": {
      "name": "jscamp",
      "full_name": "midudev/jscamp",
      "owner": "midudev",
      "description": "Contenido y ejercicios del JSCamp InfoJobs",
      "url": "https://github.com/midudev/jscamp",
      "clone_url": "https://github.com/midudev/jscamp.git",
      "ssh_url": "git@github.com:midudev/jscamp.git",
      "homepage": "https://jscamp.dev",
      "created_at": "2025-09-28T13:28:51Z",
      "updated_at": "2025-10-18T01:29:18Z",
      "pushed_at": "2025-10-16T17:05:55Z"
    },
    "stats": {
      "stars": 2540,
      "forks": 257,
      "watchers": 2540,
      "open_issues": 0,
      "size": 139
    },
    "tech_info": {
      "language": "CSS",
      "languages": {
        "CSS": 14350,
        "HTML": 13958,
        "JavaScript": 4756
      },
      "license": null,
      "topics": [
        "bootcamp"
      ]
    },
    "content": {
      "readme": "![CleanShot 2025-10-01 at 20 11 30@2x](https://github.com/user-attachments/assets/b6ef8402-d367-4a99-b939-8f11dedf91d7)\n\n# 🚀 JSCamp InfoJobs\n\nBienvenidos al bootcamp intensivo de JavaScript y desarrollo web full-stack diseñado para llevarte desde los fundamentos hasta las tecnologías más avanzadas del ecosistema JavaScript. Veremos HTML, CSS, JavaScript, TypeScript, Node.js, SQL, CI/CD y Docker.\n\n## 🎨 El Proyecto Práctico\n\n![CleanShot 2025-10-01 at 20 26 08@2x](https://github.com/user-attachments/assets/d9abec4d-ac41-4962-845c-93006bfe768b)\n\nA lo largo de este bootcamp, construiremos un proyecto completo **desde cero y paso a paso**, aplicando todos los conocimientos de cada módulo.\n\n👉 [Ver diseño del proyecto](https://stitch.withgoogle.com/projects/7508115667617706440)\n\nEste proyecto te permitirá consolidar todo lo aprendido y tener una aplicación real en tu portafolio.\n\n## 📺 La Plataforma\n\nEn **[JSCamp.dev](https://jscamp.dev)** encontrarás todos los videos y contenido del bootcamp para que puedas revisarlo cuando quieras. El registro es gratis.\nLos videos y materiales se irán subiendo **poco a poco** a medida que avancemos en el bootcamp.\n\n### ¿Tiene certificado?\n\nSí, existe un certificado opcional y muy limitado de pago que incluye:\n\n- 🎓 **Certificado Digital** - Certifica tus logros en el bootcamp\n- 📝 **Seguimiento de Ejercicios** - Revisaremos y corregiremos tus ejercicios\n- 💬 **Canal Exclusivo en Discord** - Comunidad premium y soporte directo\n- 🎥 **Directos Exclusivos** - Clases de repaso exclusivas con dudas y preguntas\n- 📄 **Revisión de tu CV** - Equipo de expertos revisan tu CV y te dan feedback\n- 🏢 **Workshop Presencial** - Entrada asegurada a los workshops de Barcelona y Madrid\n\n**Entra a [https://jscamp.dev](https://jscamp.dev), inicia sesión y consigue acceso.**\n\n## 📚 Contenido del Bootcamp\n\n- **00** - HTML & CSS\n- **01** - JavaScript\n- **02** - React\n- **03** - Estado Global y React Router\n- **04** - Node.js\n- **05** - TypeScript\n- **06** - SQL\n- **07** - CI/CD\n- **08** - Docker\n\n## 💻 Requisitos de Instalación\n\nAntes de comenzar, asegúrate de tener instalado el siguiente software:\n\n- **Navegador moderno** - Chrome, Firefox, Edge o Safari actualizado\n- **[Visual Studio Code](https://code.visualstudio.com/)** - Editor de código (recomendado)\n- **[Extensión Live Preview](https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server)** - Extensión para ver HTML/CSS\n- **[Node.js](https://nodejs.org/)** (versión 20 o superior) - Runtime de JavaScript\n- **[Git](https://git-scm.com/)** - Control de versiones\n- **[Docker](https://www.docker.com/)** - Para el módulo de Docker\n- **[Terminal Warp](https://midu.link/warp)** - Terminal con IA y Agentes\n\n## 👨‍💻 Instructor\n\nEste bootcamp es impartido por **midudev**, desarrollador y creador de contenido educativo con una gran comunidad en español.\n\n### 🌐 Redes Sociales\n\n- 🐦 **X**: [@midudev](https://twitter.com/midudev)\n- 📺 **YouTube**: [@midudev](https://youtube.com/@midudev)\n- 🎮 **Twitch**: [midudev](https://twitch.tv/midudev)\n- 📸 **Instagram**: [@midu.dev](https://instagram.com/midu.dev)\n- 💼 **LinkedIn**: [midudev](https://linkedin.com/in/midudev)\n- 🌍 **Web**: [midu.dev](https://midu.dev)\n\n## 🎯 Objetivos\n\nAl finalizar JSCAMP serás capaz de:\n\n- ✅ Construir aplicaciones web completas desde cero\n- ✅ Dominar el ecosistema de JavaScript moderno\n- ✅ Crear APIs REST con Node.js\n- ✅ Desarrollar interfaces con React\n- ✅ Implementar bases de datos SQL\n- ✅ Configurar pipelines de CI/CD\n- ✅ Containerizar aplicaciones con Docker\n- ✅ Aplicar TypeScript en proyectos reales\n\n## 🚀 Cómo Empezar\n\nCada módulo contiene ejercicios prácticos y proyectos reales. Navega a la carpeta correspondiente y sigue las instrucciones.\n\n```bash\n# Clona el repositorio\ngit clone git@github.com:midudev/jscamp.git\n\n# Navega al módulo que desees\ncd jscamp/00-html-css\n\n# ¡Comienza a aprender!\n```\n\n---\n\n⭐️ Si este contenido te resulta útil, no olvides dar una estrella al repositorio\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:13.553589"
  },
  {
    "basic_info": {
      "name": "openzl",
      "full_name": "facebook/openzl",
      "owner": "facebook",
      "description": "A novel data compression framework",
      "url": "https://github.com/facebook/openzl",
      "clone_url": "https://github.com/facebook/openzl.git",
      "ssh_url": "git@github.com:facebook/openzl.git",
      "homepage": "https://openzl.org",
      "created_at": "2025-09-30T18:30:07Z",
      "updated_at": "2025-10-17T21:32:36Z",
      "pushed_at": "2025-10-17T21:32:33Z"
    },
    "stats": {
      "stars": 2366,
      "forks": 92,
      "watchers": 2366,
      "open_issues": 48,
      "size": 15666
    },
    "tech_info": {
      "language": "C",
      "languages": {
        "C": 8860602,
        "C++": 5545626,
        "Python": 239889,
        "TypeScript": 122753,
        "Starlark": 116430,
        "CMake": 62505,
        "Makefile": 29737,
        "Assembly": 14169,
        "CSS": 10966,
        "PowerShell": 6170,
        "Shell": 5823,
        "Thrift": 4215,
        "Batchfile": 3464,
        "JavaScript": 1276,
        "HTML": 462
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "# OpenZL\n\nOpenZL delivers high compression ratios _while preserving high speed_, a level of performance that is out of reach for generic compressors. **Check out the [blog post](https://engineering.fb.com/2025/10/06/developer-tools/openzl-open-source-format-aware-compression-framework/) and [whitepaper](https://arxiv.org/abs/2510.03203) for a breakdown of how it works.**\n\nOpenZL takes a description of your data and builds from it a specialized compressor optimized for your specific format. [Learn how it works →](https://facebook.github.io/openzl/getting-started/introduction/)\n\nOpenZL consists of a core library and tools to generate specialized compressors —\nall compatible with a single universal decompressor.\nIt is designed for engineers that deal with large quantities of specialized datasets (like AI workloads for example) and require high speed for their processing pipelines.\n\nSee our [docs](https://facebook.github.io/openzl) for more information and our [quickstart guide](https://facebook.github.io/openzl/getting-started/quick-start) to get started with a guided tutorial.\n\n## Project Status\n\nThis project is under active development. The API, the compressed format, and the set of codecs and graphs included in OpenZL are all subject to (and will!) change as the project matures.\n\nHowever, we intend to maintain some stability guarantees in the face of that evolution. In particular, payloads compressed with any release-tagged version of the library will remain decompressible by new releases of the library for at least the next several years. And new releases of the library will be able to generate frames compatible with at least the previous release.\n\n(Commits on the `dev` branch offer no guarantees whatsoever. Use only release-tagged commits for any non-experimental deployments.)\n\nDespite the big scary warnings above, we consider the core to have reached production-readiness, and OpenZL is used extensively in production at Meta.\n\n## Building OpenZL\n\n### Prerequisites\nOpenZL requires a compiler that supports C11 and C++17. When building with `cmake`, `cmake 3.20.2` or newer is required. There is ongoing work to relax these restrictions. As that happens, this section will be updated.\n\n### Build with `make`\n\nThe OpenZL library and essential tools can be built using `make`:\n\n```sh\nmake\n```\n\n#### Build Options\n\nThe `Makefile` supports all standard build variables, such as `CC`, `CFLAGS`, `CPPFLAGS`, `LDFLAGS`, `LDLIBS`, etc.\n\nIt builds with multi-threading by default, auto-detecting the local number of cores, and can be overridden using standard `-j#` flag (ex: `make -j8`).\n\n#### Build Types\n\nBinary generation can be altered by explicitly requesting a build type:\n\nExample:\n```sh\nmake lib BUILD_TYPE=DEV\n```\n\nBuild types are documented in `make help`, and their exact flags are detailed with `make show-config`.\n\nUsual ones are:\n\n* `BUILD_TYPE=DEV`: debug build with asserts enabled and ASAN / UBSAN enabled\n* `BUILD_TYPE=OPT`: optimized build with asserts disabled (default)\n\n### Build with `cmake`\n\nOpenZL can be built using `cmake`. Basic usage is as follows:\n\n```sh\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release -DOPENZL_BUILD_TESTS=ON ..\nmake -j\nmake -j test\n```\n\nDetails on setting CMake variables is below.\n\n#### Build Modes\n\nBy default, we ship several different predefined build modes which can be set with the `OPENZL_BUILD_MODE` variable:\n\n* `none` (default): CMake default build mode controlled by `CMAKE_BUILD_TYPE`\n* `dev`: debug build with asserts enabled and ASAN / UBSAN enabled\n* `dev-nosan`: debug build with asserts enabled\n* `opt`: optimized build with asserts disabled\n* `opt-asan`: optimized build with asserts disabled and ASAN / UBSAN enabled\n* `dbgo`: optimized build with asserts enabled\n* `dbgo-asan`: optimized build with asserts enabled and ASAN / UBSAN enabled\n\n> [!CAUTION]\n> When switching between build modes, make sure to purge the CMake cache and re-configure the build. For instance,\n> `cmake --fresh -DOPENZL_BUILD_MODE=dev-nosan ..`\n\nFor ASAN / UBSAN, ensure that `libasan` and `libubsan` are installed on the machine.\n\n#### Editor Integration\n\nOpenZL ships with settings to configure VSCode to work with the CMake build system. To enable it install two extensions:\n\n1. `cmake-tools`\n2. `clangd` (or any other C++ language server that works with `compile_commands.json`)\n\n**Important:** For proper C++ language server support, you need to generate `compile_commands.json`:\n\nThe preferred method is to use the CMake Tools extension command \"`CMake: Configure`\".\n\nIf it doesn't work, or is too difficult to setup, you can use the manual setup:\n\n```bash\nmkdir -p cmakebuild\ncmake -B cmakebuild -DOPENZL_BUILD_TESTS=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .\ncp cmakebuild/compile_commands.json .\n```\n\n**When to regenerate:**\n\n* After cloning the repository (first-time setup)\n* When adding/removing source files\n* When modifying `CMakeLists.txt`\n\n#### CMake Variables\n\n* `CMAKE_C_COMPILER` = Set the C compiler for Op",
      "default_branch": "dev"
    },
    "fetched_at": "2025-10-18T02:15:14.684584"
  },
  {
    "basic_info": {
      "name": "HunyuanImage-3.0",
      "full_name": "Tencent-Hunyuan/HunyuanImage-3.0",
      "owner": "Tencent-Hunyuan",
      "description": "HunyuanImage-3.0: A Powerful Native Multimodal Model for Image Generation",
      "url": "https://github.com/Tencent-Hunyuan/HunyuanImage-3.0",
      "clone_url": "https://github.com/Tencent-Hunyuan/HunyuanImage-3.0.git",
      "ssh_url": "git@github.com:Tencent-Hunyuan/HunyuanImage-3.0.git",
      "homepage": "https://hunyuan.tencent.com/image",
      "created_at": "2025-09-27T07:18:47Z",
      "updated_at": "2025-10-18T01:24:13Z",
      "pushed_at": "2025-10-14T08:42:04Z"
    },
    "stats": {
      "stars": 2224,
      "forks": 91,
      "watchers": 2224,
      "open_issues": 25,
      "size": 34784
    },
    "tech_info": {
      "language": "Python",
      "languages": {
        "Python": 374880,
        "Shell": 806
      },
      "license": "Other",
      "topics": [
        "image-generation",
        "native-multimodal-model"
      ]
    },
    "content": {
      "readme": "[中文文档](./README_zh_CN.md)\n\n<div align=\"center\">\n\n<img src=\"./assets/logo.png\" alt=\"HunyuanImage-3.0 Logo\" width=\"600\">\n\n# 🎨 HunyuanImage-3.0: A Powerful Native Multimodal Model for Image Generation\n\n</div>\n\n\n<div align=\"center\">\n<img src=\"./assets/banner.png\" alt=\"HunyuanImage-3.0 Banner\" width=\"800\">\n\n</div>\n\n<div align=\"center\">\n  <a href=https://hunyuan.tencent.com/image target=\"_blank\"><img src=https://img.shields.io/badge/Official%20Site-333399.svg?logo=homepage height=22px></a>\n  <a href=https://huggingface.co/tencent/HunyuanImage-3.0 target=\"_blank\"><img src=https://img.shields.io/badge/%F0%9F%A4%97%20Models-d96902.svg height=22px></a>\n  <a href=https://github.com/Tencent-Hunyuan/HunyuanImage-3.0 target=\"_blank\"><img src= https://img.shields.io/badge/Page-bb8a2e.svg?logo=github height=22px></a>\n  <a href=https://arxiv.org/pdf/2509.23951 target=\"_blank\"><img src=https://img.shields.io/badge/Report-b5212f.svg?logo=arxiv height=22px></a>\n  <a href=https://x.com/TencentHunyuan target=\"_blank\"><img src=https://img.shields.io/badge/Hunyuan-black.svg?logo=x height=22px></a>\n  <a href=https://docs.qq.com/doc/DUVVadmhCdG9qRXBU target=\"_blank\"><img src=https://img.shields.io/badge/📚-PromptHandBook-blue.svg?logo=book height=22px></a>\n</div>\n\n\n<p align=\"center\">\n    👏 Join our <a href=\"./assets/WECHAT.md\" target=\"_blank\">WeChat</a> and <a href=\"https://discord.gg/ehjWMqF5wY\">Discord</a> | \n💻 <a href=\"https://hunyuan.tencent.com/modelSquare/home/play?modelId=289&from=/visual\">Official website(官网) Try our model!</a>&nbsp&nbsp\n</p>\n\n## 🔥🔥🔥 News\n- **September 28, 2025**: 📖 **HunyuanImage-3.0 Technical Report Released** - Comprehensive technical documentation now available\n- **September 28, 2025**: 🚀 **HunyuanImage-3.0 Open Source Release** - Inference code and model weights publicly available\n\n\n## 🧩 Community Contributions\n\nIf you develop/use HunyuanImage-3.0 in your projects, welcome to let us know.\n\n## 📑 Open-source Plan\n\n- HunyuanImage-3.0 (Image Generation Model)\n  - [x] Inference \n  - [x] HunyuanImage-3.0 Checkpoints\n  - [ ] HunyuanImage-3.0-Instruct Checkpoints (with reasoning)\n  - [ ] VLLM Support\n  - [ ] Distilled Checkpoints\n  - [ ] Image-to-Image Generation\n  - [ ] Multi-turn Interaction\n\n\n## 🗂️ Contents\n- [🔥🔥🔥 News](#-news)\n- [🧩 Community Contributions](#-community-contributions)\n- [📑 Open-source Plan](#-open-source-plan)\n- [📖 Introduction](#-introduction)\n- [✨ Key Features](#-key-features)\n- [🛠️ Dependencies and Installation](#-dependencies-and-installation)\n  - [💻 System Requirements](#-system-requirements)\n  - [📦 Environment Setup](#-environment-setup)\n  - [📥 Install Dependencies](#-install-dependencies)\n  - [Performance Optimizations](#performance-optimizations)\n- [🚀 Usage](#-usage)\n  - [🔥 Quick Start with Transformers](#-quick-start-with-transformers)\n  - [🏠 Local Installation & Usage](#-local-installation--usage)\n  - [🎨 Interactive Gradio Demo](#-interactive-gradio-demo)\n- [🧱 Models Cards](#-models-cards)\n- [📝 Prompt Guide](#-prompt-guide)\n  - [Manually Writing Prompts](#manually-writing-prompts)\n  - [System Prompt For Automatic Rewriting the Prompt](#system-prompt-for-automatic-rewriting-the-prompt)\n  - [Advanced Tips](#advanced-tips)\n  - [More Cases](#more-cases)\n- [📊 Evaluation](#-evaluation)\n- [📚 Citation](#-citation)\n- [🙏 Acknowledgements](#-acknowledgements)\n- [🌟🚀  Github Star History](#-github-star-history)\n\n---\n\n## 📖 Introduction\n\n**HunyuanImage-3.0** is a groundbreaking native multimodal model that unifies multimodal understanding and generation within an autoregressive framework. Our text-to-image module achieves performance **comparable to or surpassing** leading closed-source models.\n\n\n<div align=\"center\">\n  <img src=\"./assets/framework.png\" alt=\"HunyuanImage-3.0 Framework\" width=\"90%\">\n</div>\n\n## ✨ Key Features\n\n* 🧠 **Unified Multimodal Architecture:** Moving beyond the prevalent DiT-based architectures, HunyuanImage-3.0 employs a unified autoregressive framework. This design enables a more direct and integrated modeling of text and image modalities, leading to surprisingly effective and contextually rich image generation.\n\n* 🏆 **The Largest Image Generation MoE Model:** This is the largest open-source image generation Mixture of Experts (MoE) model to date. It features 64 experts and a total of 80 billion parameters, with 13 billion activated per token, significantly enhancing its capacity and performance.\n\n* 🎨 **Superior Image Generation Performance:** Through rigorous dataset curation and advanced reinforcement learning post-training, we've achieved an optimal balance between semantic accuracy and visual excellence. The model demonstrates exceptional prompt adherence while delivering photorealistic imagery with stunning aesthetic quality and fine-grained details.\n\n* 💭 **Intelligent World-Knowledge Reasoning:** The unified multimodal architecture endows HunyuanImage-3.0 with powerful reasoning capabilities. It leverages its extensive world knowledge to intelligently interpret user int",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:15.800830"
  },
  {
    "basic_info": {
      "name": "The-Accidental-CTO",
      "full_name": "subhashchy/The-Accidental-CTO",
      "owner": "subhashchy",
      "description": "How I Scaled from Zero to a Million Store on Dukaan,  Without a CS Degree.  .. A System Design Handbook by  Subhash Choudhary ",
      "url": "https://github.com/subhashchy/The-Accidental-CTO",
      "clone_url": "https://github.com/subhashchy/The-Accidental-CTO.git",
      "ssh_url": "git@github.com:subhashchy/The-Accidental-CTO.git",
      "homepage": "",
      "created_at": "2025-09-26T09:07:20Z",
      "updated_at": "2025-10-18T00:43:12Z",
      "pushed_at": "2025-10-13T19:42:33Z"
    },
    "stats": {
      "stars": 2035,
      "forks": 156,
      "watchers": 2035,
      "open_issues": 7,
      "size": 11754
    },
    "tech_info": {
      "language": "TypeScript",
      "languages": {
        "TypeScript": 167424,
        "CSS": 8323,
        "HTML": 1233,
        "JavaScript": 846
      },
      "license": null,
      "topics": [
        "scaling",
        "system-design"
      ]
    },
    "content": {
      "readme": "\n# **The Accidental CTO**\n\n### 🤝 Book Time with Subhash\n\n [ Discuss how to Save 50% on your Infra Costs](https://topmate.io/subhashchy/) | [ Technical Doubts ? ](https://topmate.io/subhashchy) |  [Email Subhash](mailto:subhash@mydukaan.io)  ]\n\n\n\n## **How I Scaled from Zero to a Million Stores on Dukaan, Without a CS \nI never set out to be a CTO. In fact, I didn’t even have a computer science degree. But somewhere between firefighting server crashes at 3 a.m. and obsessing over replication lag graphs, I found myself building systems that would eventually power over a **million online stores** at Dukaan.\n\nThis book, *The Accidental CTO*, is my behind-the-scenes account of that journey. It’s not a dry academic manual filled with abstract diagrams. Instead, it’s a story-driven handbook — one that mixes late-night startup battles with the **hard system design lessons** that only come from being in the trenches.\n\nFrom scaling a scrappy MVP to running massive distributed pipelines, I’ll take you through the challenges we faced and the decisions that made (or nearly broke) us.\n\n---\n\n### What You’ll Learn Inside\n\n* **Scaling applications**: How we went from thousands to millions of users without falling apart.\n* **Replication, sharding, caching, queues**: When to use them, when *not* to, and what tradeoffs they carry.\n* **Observability as survival**: Why metrics, logs, traces, SLAs, and SLOs aren’t optional — they’re lifelines.\n* **Resilience engineering**: Circuit breakers, retries, graceful degradation — designing for failure, not against it.\n* **The hidden costs of cloud**: Why at scale, your AWS bill can become your biggest investor, and when it makes sense to go self-hosted.\n* **The consistency/availability/latency triangle**: Why you can never fully win, and how to navigate the tradeoffs in real systems.\n\n---\n\n### Why I Wrote This Book\n\nI didn’t want to write another \"theory of distributed systems\" book. There are already plenty of those.\n\nWhat I wanted to share is the **practical side** of system design — the part you only learn when a real company, with real customers and real money at stake, is on fire. The part where you’re not solving toy interview questions but dealing with:\n\n* angry merchants refreshing dashboards,\n* Kafka pipelines silently choking on one bad partition,\n* a database replica 10 minutes behind and nobody knowing why.\n\nThis is the stuff no textbook teaches you.\n\n---\n\n### Who This Book Is For\n\nWhether you’re a **software engineer**, **architect**, or **startup founder**, I wrote this book to help you see distributed systems not as academic puzzles, but as **living, evolving machines** that you can actually build, operate, and grow.\n\nIf you’ve ever wondered *how real companies actually scale* — not in theory, but in practice — this is my candid, first-hand story.\n\nAnd maybe, just maybe, you’ll find a bit of yourself in *The Accidental CTO*.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:16.916045"
  },
  {
    "basic_info": {
      "name": "astron-agent",
      "full_name": "iflytek/astron-agent",
      "owner": "iflytek",
      "description": "An enterprise-ready AI agent development platform combining intelligent RPA, enabling agents to not only think but also act—automating workflows across digital and desktop environments.",
      "url": "https://github.com/iflytek/astron-agent",
      "clone_url": "https://github.com/iflytek/astron-agent.git",
      "ssh_url": "git@github.com:iflytek/astron-agent.git",
      "homepage": null,
      "created_at": "2025-09-19T08:46:01Z",
      "updated_at": "2025-10-18T02:08:36Z",
      "pushed_at": "2025-10-17T08:36:30Z"
    },
    "stats": {
      "stars": 1958,
      "forks": 137,
      "watchers": 1958,
      "open_issues": 1,
      "size": 83110
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 4390979,
        "TypeScript": 4010835,
        "Python": 3945881,
        "PLpgSQL": 2053061,
        "SCSS": 408449,
        "Go": 273134,
        "JavaScript": 133524,
        "Makefile": 88683,
        "Shell": 38887,
        "C": 13024,
        "Dockerfile": 7648,
        "CSS": 6547,
        "HTML": 3017
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# Astron Agent - Agent Platform\n\n<div align=\"center\">\n\n![Logo](docs/logo.svg)\n\n**Astron Agent is an enterprise-grade Agent development platform designed for AI developers and small to medium-sized enterprises.**\n\n[![License](https://img.shields.io/badge/license-apache2.0-blue.svg)](LICENSE)\n[![Version](https://img.shields.io/github/v/release/iflytek/astron-agent)](https://github.com/iflytek/astron-agent/releases)\n[![Build Status](https://img.shields.io/github/actions/workflow/status/iflytek/astron-agent/ci.yml)](https://github.com/iflytek/astron-agent/actions)\n[![Coverage](https://img.shields.io/codecov/c/github/iflytek/astron-agent)](https://codecov.io/gh/iflytek/astron-agent)\n[![GitHub Stars](https://img.shields.io/github/stars/iflytek/astron-agent?style=social)](https://github.com/iflytek/astron-agent/stargazers)\n\nEnglish | [简体中文](README-zh.md)\n\n</div>\n\n## 📑 Table of Contents\n\n- [🔭 What is Astron Agent?](#-What-is-Astron-Agent)\n- [🛠️ Tech Stack](#%EF%B8%8F-tech-stack)\n- [🚀 Quick Start](#-quick-start)\n  - [Using Docker](#using-docker)\n- [📖 Usage Guide](#-usage-guide)\n- [📚 Documentation](#-documentation)\n- [🤝 Contributing](#-contributing)\n- [🌟 Star History](#-star-history)\n- [📞 Support](#-support)\n- [📄 License](#-license)\n\n## 🔭 What is Astron Agent\nAstron Agent is an enterprise-grade Agent development platform designed for AI developers and small to medium-sized enterprises.  \nIt not only provides end-to-end capabilities covering model hosting, application development, performance optimization, and access control, but also innovatively integrates intelligent RPA. This allows Agents not only to “think,” but also to truly “act,” completing complex task chains across digital systems and desktop environments.\n\n### Why Choose Astron Agent?\n- **Consistent and Reliable:** Shares the same core technology with [iFLYTEK Astron Agent Platform](https://agent.xfyun.cn), inheriting its proven enterprise-grade stability.  \n- **Closed Loop of Thinking + Acting:** Deep integration of intelligent RPA enables Agents to move from “generating answers” to “automatically completing tasks.”  \n- **Dual Value for Developers and Enterprises:** Developers can quickly get started and expand, while SMEs can efficiently implement digital workflows.  \n\n### Key Features\n- **Enterprise-Grade High Availability:** Full-stack capabilities for development, building, optimization, and management. Supports one-click deployment with strong reliability.  \n- **Intelligent RPA Integration:** Enables cross-system process automation, empowering Agents with controllable execution to achieve a complete loop “from decision to action.”  \n- **Ready-to-Use Tool Ecosystem:** Integrates massive AI capabilities and tools from the [iFLYTEK Open Platform](https://www.xfyun.cn), validated by millions of developers, supporting plug-and-play access without extra development.  \n- **Flexible Model Support:** Offers diverse access methods, from rapid API-based model validation to one-click deployment of enterprise-level MaaS (Model as a Service) local clusters, meeting needs of all scales.  \n\n### Developer Support\n- **Multi-language Backend:** Supports mainstream languages such as Java, Go, and Python; frontend adapted to TypeScript + React stack.  \n- **Comprehensive Toolchain:** Provides API documentation, deployment guides, and troubleshooting manuals to reduce learning and maintenance costs.  \n- **One-Click Deployment:** Built-in Dockerized environment for out-of-the-box setup and rapid project launch.  \n\n## 🛠️ Tech Stack\n\n- **Backend**: Java 21, Spring Boot 3, Go, Python 3.11\n- **Frontend**: TypeScript 5, React 18\n- **Database**: MySQL 8\n- **Cache**: Redis\n- **Queue**: Apache Kafka\n- **Infrastructure**: Docker, MinIO\n- **Quality Tools**: Checkstyle, PMD, SpotBugs, ESLint, gocyclo, staticcheck, golangci-lint, black, isort, flake8, mypy, pylint\n\n## 🚀 Quick Start\n\n### Using Docker\n\n```bash\n# Clone the repository\ngit clone https://github.com/iflytek/astron-agent.git\ncd astron-agent\n\n# Start the stack\ndocker-compose up -d\n```\n\n- Visit `http://localhost:8080` in your browser.\n\n## 📖 Usage Guide\n\nFor detailed usage instructions, please refer to [Usage Documentation](docs/USAGE.md)\n\n## 📚 Documentation\n\n- [📖 Usage Documentation](docs/USAGE.md)\n- [🚀 Deployment Guide](docs/DEPLOYMENT.md)\n- [📖 API Reference](docs/API.md)\n- [🔧 Configuration](docs/CONFIGURATION.md)\n- [🐛 Troubleshooting](docs/TROUBLESHOOTING.md)\n- [📝 Changelog](CHANGELOG.md)\n\n## 🤝 Contributing\n\nWe welcome contributions of all kinds! Please see our [Contributing Guide](CONTRIBUTING.md)\n\n## 🌟 Star History\n\n<div align=\"center\">\n  <img src=\"https://api.star-history.com/svg?repos=iflytek/astron-agent&type=Date\" alt=\"Star History Chart\" width=\"600\">\n</div>\n\n## 📞 Support\n\n- 💬 Community Discussion: [GitHub Discussions](https://github.com/iflytek/astron-agent/discussions)\n- 🐛 Bug Reports: [Issues](https://github.com/iflytek/astron-agent/issues)\n\n## 📄 License\n\nThis project is licensed under the [Apache 2.0 License](LICENSE",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:18.014667"
  },
  {
    "basic_info": {
      "name": "beads",
      "full_name": "steveyegge/beads",
      "owner": "steveyegge",
      "description": "Beads - A memory upgrade for your coding agent",
      "url": "https://github.com/steveyegge/beads",
      "clone_url": "https://github.com/steveyegge/beads.git",
      "ssh_url": "git@github.com:steveyegge/beads.git",
      "homepage": "",
      "created_at": "2025-10-12T03:09:46Z",
      "updated_at": "2025-10-18T01:57:32Z",
      "pushed_at": "2025-10-18T01:15:36Z"
    },
    "stats": {
      "stars": 1629,
      "forks": 79,
      "watchers": 1629,
      "open_issues": 16,
      "size": 2140
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 742129,
        "Python": 145853,
        "Shell": 7542,
        "Nix": 1297,
        "Ruby": 997
      },
      "license": "MIT License",
      "topics": [
        "agents",
        "claude-code",
        "coding"
      ]
    },
    "content": {
      "readme": "# bd - Beads Issue Tracker 🔗\n\n**Give your coding agent a memory upgrade**\n\n> **🚨 CRITICAL WARNING - Do Not Use for Multiple Workstreams**\n>\n> **v0.9.x has data duplication and data loss bugs when handling multiple workstreams.** This creates a mess that's difficult even for agents to clean up. Until further notice, **use only for single-workstream projects**. A fix is in progress.\n\n> **🚨 MCP SERVER WARNING - Single Project Only**\n>\n> **Do NOT use the MCP server if you have multiple beads repositories/projects.** The MCP server currently routes issues to the wrong database when working across multiple repos. **The beads binary (bd command, v0.9.9+) works fine for multi-workstream scenarios** - instruct your agents to use the binary directly via shell commands instead of the MCP server. A fix for the MCP server is in progress.\n\n> **⚠️ Alpha Status**: This project is in active development. The core features work well, but expect API changes before 1.0. Use for development/internal projects first.\n\nBeads is a lightweight memory system for coding agents, using a graph-based issue tracker. Four kinds of dependencies work to chain your issues together like beads, making them easy for agents to follow for long distances, and reliably perform complex task streams in the right order.\n\nDrop Beads into any project where you're using a coding agent, and you'll enjoy an instant upgrade in organization, focus, and your agent's ability to handle long-horizon tasks over multiple compaction sessions. Your agents will use issue tracking with proper epics, rather than creating a swamp of rotten half-implemented markdown plans.\n\nInstant start:\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/steveyegge/beads/main/install.sh | bash\n```\n\nThen tell your coding agent to start using the `bd` tool instead of markdown for all new work, somewhere in your `AGENTS.md` or `CLAUDE.md`. That's all there is to it!\n\nYou don't use Beads directly as a human. Your coding agent will file and manage issues on your behalf. They'll file things they notice automatically, and you can ask them at any time to add or update issues for you.\n\nBeads gives agents unprecedented long-term planning capability, solving their amnesia when dealing with complex nested plans. They can trivially query the ready work, orient themselves, and land on their feet as soon as they boot up.\n\nAgents using Beads will no longer silently pass over problems they notice due to lack of context space -- instead, they will automatically file issues for newly-discovered work as they go. No more lost work, ever.\n\nBeads issues are backed by git, but through a clever design it manages to act like a managed, centrally hosted SQL database shared by all of the agents working on a project (repo), even across machines.\n\nBeads even improves work auditability. The issue tracker has a sophisticated audit trail, which agents can use to reconstruct complex operations that may have spanned multiple sessions.\n\nAgents report that they enjoy working with Beads, and they will use it spontaneously for both recording new work and reasoning about your project in novel ways. Whether you are a human or an AI, Beads lets you have more fun and less stress with agentic coding.\n\n![AI Agent using Beads](https://raw.githubusercontent.com/steveyegge/beads/main/.github/images/agent-using-beads.jpg)\n\n## Features\n\n- ✨ **Zero setup** - `bd init` creates project-local database (and your agent will do it)\n- 🔗 **Dependency tracking** - Four dependency types (blocks, related, parent-child, discovered-from)\n- 📋 **Ready work detection** - Automatically finds issues with no open blockers\n- 🤖 **Agent-friendly** - `--json` flags for programmatic integration\n- 📦 **Git-versioned** - JSONL records stored in git, synced across machines\n- 🌍 **Distributed by design** - Agents on multiple machines share one logical database via git\n- 🏗️ **Extensible** - Add your own tables to the SQLite database\n- 🔍 **Multi-project isolation** - Each project gets its own database, auto-discovered by directory\n- 🌲 **Dependency trees** - Visualize full dependency graphs\n- 🎨 **Beautiful CLI** - Colored output for humans, JSON for bots\n- 💾 **Full audit trail** - Every change is logged\n- ⚡ **High performance** - Batch operations for bulk imports (1000 issues in ~950ms)\n- 🗜️ **Memory decay** - Semantic compaction gracefully reduces old closed issues\n\n## Installation\n\n### Homebrew (macOS/Linux)\n\n```bash\nbrew tap steveyegge/beads\nbrew install bd\n```\n\n**Why Homebrew?**\n- ✅ Simple one-command install\n- ✅ Automatic updates via `brew upgrade`\n- ✅ No need to install Go\n- ✅ Handles PATH setup automatically\n\n### Quick Install Script (All Platforms)\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/steveyegge/beads/main/install.sh | bash\n```\n\nThe installer will:\n- Detect your platform (macOS/Linux, amd64/arm64)\n- Install via `go install` if Go is available\n- Fall back to building from source if needed\n- Guide you through PATH setup if necessary\n\n### Manual ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:19.129645"
  },
  {
    "basic_info": {
      "name": "sidekick.nvim",
      "full_name": "folke/sidekick.nvim",
      "owner": "folke",
      "description": "Your Neovim AI sidekick",
      "url": "https://github.com/folke/sidekick.nvim",
      "clone_url": "https://github.com/folke/sidekick.nvim.git",
      "ssh_url": "git@github.com:folke/sidekick.nvim.git",
      "homepage": "",
      "created_at": "2025-09-26T10:26:48Z",
      "updated_at": "2025-10-18T01:39:29Z",
      "pushed_at": "2025-10-17T18:05:45Z"
    },
    "stats": {
      "stars": 1568,
      "forks": 37,
      "watchers": 1568,
      "open_issues": 5,
      "size": 439
    },
    "tech_info": {
      "language": "Lua",
      "languages": {
        "Lua": 204692,
        "Shell": 127
      },
      "license": "Apache License 2.0",
      "topics": [
        "claude-code",
        "codex-cli",
        "copilot",
        "copilot-cli",
        "gemini-cli",
        "neovim",
        "neovim-plugin",
        "nvim",
        "nvim-plugin"
      ]
    },
    "content": {
      "readme": "# 🤖 `sidekick.nvim`\n\n**sidekick.nvim** is your Neovim AI sidekick that integrates Copilot LSP's\n\"Next Edit Suggestions\" with a built-in terminal for any AI CLI.\nReview and apply diffs, chat with AI assistants, and streamline your coding,\nwithout leaving your editor.\n\n<img width=\"2311\" height=\"1396\" alt=\"image\" src=\"https://github.com/user-attachments/assets/63a33610-9a8e-45e2-bbd0-b7e3a4fde621\" />\n\n## ✨ Features\n\n- **🤖 Next Edit Suggestions (NES) powered by Copilot LSP**\n  - 🪄 **Automatic Suggestions**: Fetches suggestions automatically when you pause typing or move the cursor.\n  - 🎨 **Rich Diffs**: Visualizes changes with inline and block-level diffs, featuring Treesitter-based syntax highlighting with granular diffing down to the word or character level.\n  - 🧭 **Hunk-by-Hunk Navigation**: Jump through edits to review them one by one before applying.\n  - 📊 **Statusline Integration**: Shows Copilot LSP's status, request progress, and preview text in your statusline.\n\n- **💬 Integrated AI CLI Terminal**\n  - 🚀 **Direct Access to AI CLIs**: Interact with your favorite AI command-line tools without leaving Neovim.\n  - 📦 **Pre-configured for Popular Tools**: Out-of-the-box support for Claude, Gemini, Grok, Codex, Copilot CLI, and more.\n  - ✨ **Context-Aware Prompts**: Automatically include file content, cursor position, and diagnostics in your prompts.\n  - 📝 **Prompt Library**: A library of pre-defined prompts for common tasks like explaining code, fixing issues, or writing tests.\n  - 🔄 **Session Persistence**: Keep your CLI sessions alive with `tmux` and `zellij` integration.\n  - 📂 **Automatic File Watching**: Automatically reloads files in Neovim when they are modified by AI tools.\n\n- **🔌 Extensible and Customizable**\n  - ⚙️ **Flexible Configuration**: Fine-tune every aspect of the plugin to your liking.\n  - 🧩 **Plugin-Friendly API**: A rich API for integrating with other plugins and building custom workflows.\n  - 🎨 **Customizable UI**: Change the appearance of diffs, signs, and more.\n\n## 📋 Requirements\n\n- **Neovim** `>= 0.11.2` or newer\n- The official [copilot-language-server](https://github.com/github/copilot-language-server-release) LSP server,\n  enabled with `vim.lsp.enable`. Can be installed in multiple ways:\n  1. install using `npm` or your OS's package manager\n  2. install with [mason-lspconfig.nvim](https://github.com/mason-org/mason-lspconfig.nvim)\n  3. [copilot.lua](https://github.com/zbirenbaum/copilot.lua) and [copilot.vim](https://github.com/github/copilot.vim)\n     both bundle the LSP Server in their plugin.\n- A working `lsp/copilot.lua` configuration.\n  - **TIP:** Included in [nvim-lspconfig](https://github.com/neovim/nvim-lspconfig)\n- [snacks.nvim](https://github.com/folke/snacks.nvim) for better prompt/tool selection **_(optional)_**\n- [nvim-treesitter-textobjects](https://github.com/nvim-treesitter/nvim-treesitter-textobjects) **_(`main` branch)_** for `{function}` and `{class}` context variables **_(optional)_**\n- AI cli tools, such as Codex, Claude, Copilot, Gemini, … **_(optional)_**\n  see the [🤖 AI CLI Integration](#-ai-cli-integration) section for details.\n- [lsof](https://man7.org/linux/man-pages/man8/lsof.8.html) and [ps](https://man7.org/linux/man-pages/man1/ps.1.html) are used\n  on Unix-like systems to detect running AI CLI tool sessions. **_(optional, but recommended)_**\n\n## 🚀 Quick Start\n\n1. **Install** the plugin with your package manager (see below)\n2. **Configure Copilot LSP** - must be enabled with `vim.lsp.enable`\n3. **Check health**: `:checkhealth sidekick`\n4. **Sign in to Copilot**: `:LspCopilotSignIn`\n5. **Try it out**:\n   - Type some code and pause - watch for Next Edit Suggestions appearing\n   - Press `<Tab>` to navigate through or apply suggestions\n   - Use `<leader>aa` to open AI CLI tools\n\n> [!NOTE]\n> **New to Next Edit Suggestions?** Unlike inline completions, NES suggests entire refactorings or multi-line changes anywhere in your file - think of it as Copilot's \"big picture\" suggestions.\n\n## 📦 Installation\n\nInstall with your favorite manager. With [lazy.nvim](https://github.com/folke/lazy.nvim):\n\n<!-- setup_base:start -->\n\n```lua\n{\n  \"folke/sidekick.nvim\",\n  opts = {\n    -- add any options here\n    cli = {\n      mux = {\n        backend = \"zellij\",\n        enabled = true,\n      },\n    },\n  },\n  keys = {\n    {\n      \"<tab>\",\n      function()\n        -- if there is a next edit, jump to it, otherwise apply it if any\n        if not require(\"sidekick\").nes_jump_or_apply() then\n          return \"<Tab>\" -- fallback to normal tab\n        end\n      end,\n      expr = true,\n      desc = \"Goto/Apply Next Edit Suggestion\",\n    },\n    {\n      \"<c-.>\",\n      function() require(\"sidekick.cli\").toggle() end,\n      desc = \"Sidekick Toggle\",\n      mode = { \"n\", \"t\", \"i\", \"x\" },\n    },\n    {\n      \"<leader>aa\",\n      function() require(\"sidekick.cli\").toggle() end,\n      desc = \"Sidekick Toggle CLI\",\n    },\n    {\n      \"<leader>as\",\n      function() require(\"sidekick.cli\").select() end,\n ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:20.273497"
  },
  {
    "basic_info": {
      "name": "chatkit-js",
      "full_name": "openai/chatkit-js",
      "owner": "openai",
      "description": null,
      "url": "https://github.com/openai/chatkit-js",
      "clone_url": "https://github.com/openai/chatkit-js.git",
      "ssh_url": "org-14957082@github.com:openai/chatkit-js.git",
      "homepage": "https://openai.github.io/chatkit-js/",
      "created_at": "2025-10-04T21:00:32Z",
      "updated_at": "2025-10-17T21:28:50Z",
      "pushed_at": "2025-10-16T20:06:31Z"
    },
    "stats": {
      "stars": 1467,
      "forks": 93,
      "watchers": 1467,
      "open_issues": 24,
      "size": 92
    },
    "tech_info": {
      "language": "TypeScript",
      "languages": {
        "TypeScript": 35451,
        "MDX": 29409,
        "CSS": 17401,
        "Astro": 7436,
        "JavaScript": 1712
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "ChatKit is a batteries-included framework for building high-quality, AI-powered chat experiences. It’s designed for developers who want to add advanced conversational intelligence to their apps fast—with minimal setup and no reinventing the wheel. ChatKit delivers a complete, production-ready chat interface out of the box.\n\n**Key features include:**\n\n- **Deep UI customization** so that ChatKit feels like a first-class part of your app\n- **Built-in response streaming** for interactive, natural conversations\n- **Tool and workflow integration** for visualizing agentic actions and chain-of-thought reasoning\n- **Rich interactive widgets** rendered directly inside the chat\n- **Attachment handling** with support for file and image uploads\n- **Thread and message management** for organizing complex conversations\n- **Source annotations and entity tagging** for transparency and references\n\nSimply drop the ChatKit component into your app, configure a few options, and you're good to go.\n\n### What makes ChatKit different?\n\nChatKit is a framework-agnostic, drop-in chat solution.\nYou don’t need to build custom UIs, manage low-level chat state, or patch together various features yourself.\nJust add the ChatKit component, give it a client token, and customize the chat experience as needed, no extra work needed.\n\n## Quickstart\n\n1. Generate a client token on your server.\n\n   ```python\n   from fastapi import FastAPI\n   from pydantic import BaseModel\n   from openai import OpenAI\n   import os\n\n   app = FastAPI()\n   openai = OpenAI(api_key=os.environ[\"OPENAI_API_KEY\"])\n\n   @app.post(\"/api/chatkit/session\")\n   def create_chatkit_session():\n       session = openai.chatkit.sessions.create({\n         # ...\n       })\n       return { client_secret: session.client_secret }\n   ```\n\n2. Install the React bindings\n\n   ```bash\n   npm install @openai/chatkit-react\n   ```\n\n3. Add the ChatKit JS script to your page\n\n   ```html\n   <script\n     src=\"https://cdn.platform.openai.com/deployments/chatkit/chatkit.js\"\n     async\n   ></script>\n   ```\n\n4. Render ChatKit\n\n   ```tsx\n   import { ChatKit, useChatKit } from '@openai/chatkit-react';\n\n   export function MyChat() {\n     const { control } = useChatKit({\n       api: {\n         async getClientSecret(existing) {\n           if (existing) {\n             // implement session refresh\n           }\n\n           const res = await fetch('/api/chatkit/session', {\n             method: 'POST',\n             headers: {\n               'Content-Type': 'application/json',\n             },\n           });\n           const { client_secret } = await res.json();\n           return client_secret;\n         },\n       },\n     });\n\n     return <ChatKit control={control} className=\"h-[600px] w-[320px]\" />;\n   }\n   ```\n\n## See working examples\n\n- [Starter app](https://github.com/openai/openai-chatkit-starter-app) - Clone a repo to start with a fully working template\n- [Samples](https://github.com/openai/openai-chatkit-advanced-samples) - See working examples of ChatKit and get inspired\n\n## License\n\nThis project is licensed under the [Apache License 2.0](LICENSE).\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:21.400431"
  },
  {
    "basic_info": {
      "name": "openai-apps-sdk-examples",
      "full_name": "openai/openai-apps-sdk-examples",
      "owner": "openai",
      "description": "Example apps for the Apps SDK",
      "url": "https://github.com/openai/openai-apps-sdk-examples",
      "clone_url": "https://github.com/openai/openai-apps-sdk-examples.git",
      "ssh_url": "org-14957082@github.com:openai/openai-apps-sdk-examples.git",
      "homepage": null,
      "created_at": "2025-10-06T05:28:01Z",
      "updated_at": "2025-10-17T23:47:45Z",
      "pushed_at": "2025-10-17T17:25:23Z"
    },
    "stats": {
      "stars": 1459,
      "forks": 227,
      "watchers": 1459,
      "open_issues": 29,
      "size": 84
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 90170,
        "CSS": 64226,
        "TypeScript": 28497,
        "Python": 18700
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Apps SDK Examples Gallery\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)\n\nThis repository showcases example UI components to be used with the Apps SDK, as well as example MCP servers that expose a collection of components as tools.\nIt is meant to be used as a starting point and source of inspiration to build your own apps for ChatGPT.\n\n## MCP + Apps SDK overview\n\nThe Model Context Protocol (MCP) is an open specification for connecting large language model clients to external tools, data, and user interfaces. An MCP server exposes tools that a model can call during a conversation and returns results according to the tool contracts. Those results can include extra metadata—such as inline HTML—that the Apps SDK uses to render rich UI components (widgets) alongside assistant messages.\n\nWithin the Apps SDK, MCP keeps the server, model, and UI in sync. By standardizing the wire format, authentication, and metadata, it lets ChatGPT reason about your connector the same way it reasons about built-in tools. A minimal MCP integration for Apps SDK implements three capabilities:\n\n1. **List tools** – Your server advertises the tools it supports, including their JSON Schema input/output contracts and optional annotations (for example, `readOnlyHint`).\n2. **Call tools** – When a model selects a tool, it issues a `call_tool` request with arguments that match the user intent. Your server executes the action and returns structured content the model can parse.\n3. **Return widgets** – Alongside structured content, return embedded resources in the response metadata so the Apps SDK can render the interface inline in the Apps SDK client (ChatGPT).\n\nBecause the protocol is transport agnostic, you can host the server over Server-Sent Events or streaming HTTP—Apps SDK supports both.\n\nThe MCP servers in this demo highlight how each tool can light up widgets by combining structured payloads with `_meta.openai/outputTemplate` metadata returned from the MCP servers.\n\n## Repository structure\n\n- `src/` – Source for each widget example.\n- `assets/` – Generated HTML, JS, and CSS bundles after running the build step.\n- `pizzaz_server_node/` – MCP server implemented with the official TypeScript SDK.\n- `pizzaz_server_python/` – Python MCP server that returns the Pizzaz widgets.\n- `solar-system_server_python/` – Python MCP server for the 3D solar system widget.\n- `build-all.mts` – Vite build orchestrator that produces hashed bundles for every widget entrypoint.\n\n## Prerequisites\n\n- Node.js 18+\n- pnpm (recommended) or npm/yarn\n- Python 3.10+ (for the Python MCP server)\n\n## Install dependencies\n\nClone the repository and install the workspace dependencies:\n\n```bash\npnpm install\n```\n\n> Using npm or yarn? Install the root dependencies with your preferred client and adjust the commands below accordingly.\n\n## Build the components gallery\n\nThe components are bundled into standalone assets that the MCP servers serve as reusable UI resources.\n\n```bash\npnpm run build\n```\n\nThis command runs `build-all.mts`, producing versioned `.html`, `.js`, and `.css` files inside `assets/`. Each widget is wrapped with the CSS it needs so you can host the bundles directly or ship them with your own server.\n\nTo iterate on your components locally, you can also launch the Vite dev server:\n\n```bash\npnpm run dev\n```\n\n## Serve the static assets\n\nIf you want to preview the generated bundles without the MCP servers, start the static file server after running a build:\n\n```bash\npnpm run serve\n```\n\nThe assets are exposed at [`http://localhost:4444`](http://localhost:4444) with CORS enabled so that local tooling (including MCP inspectors) can fetch them.\n\n## Run the MCP servers\n\nThe repository ships several demo MCP servers that highlight different widget bundles:\n\n- **Pizzaz (Node & Python)** – pizza-inspired collection of tools and components\n- **Solar system (Python)** – 3D solar system viewer\n\nEvery tool response includes plain text content, structured JSON, and `_meta.openai/outputTemplate` metadata so the Apps SDK can hydrate the matching widget.\n\n### Pizzaz Node server\n\n```bash\ncd pizzaz_server_node\npnpm start\n```\n\n### Pizzaz Python server\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\npip install -r pizzaz_server_python/requirements.txt\nuvicorn pizzaz_server_python.main:app --port 8000\n```\n\n### Solar system Python server\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\npip install -r solar-system_server_python/requirements.txt\nuvicorn solar-system_server_python.main:app --port 8000\n```\n\nYou can reuse the same virtual environment for all Python servers—install the dependencies once and run whichever entry point you need.\n\n## Testing in ChatGPT\n\nTo add these apps to ChatGPT, enable [developer mode](https://platform.openai.com/docs/guides/developer-mode), and add your apps in Settings > Connectors.\n\nTo add your local server without deploying it, you can use a tool like [ngrok](https://ngrok.com/) to expose your local server to th",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:22.520547"
  },
  {
    "basic_info": {
      "name": "dexter",
      "full_name": "virattt/dexter",
      "owner": "virattt",
      "description": "An autonomous agent for deep financial research",
      "url": "https://github.com/virattt/dexter",
      "clone_url": "https://github.com/virattt/dexter.git",
      "ssh_url": "git@github.com:virattt/dexter.git",
      "homepage": null,
      "created_at": "2025-10-14T21:02:00Z",
      "updated_at": "2025-10-18T02:12:26Z",
      "pushed_at": "2025-10-18T00:35:08Z"
    },
    "stats": {
      "stars": 1399,
      "forks": 162,
      "watchers": 1399,
      "open_issues": 4,
      "size": 102
    },
    "tech_info": {
      "language": "Python",
      "languages": {
        "Python": 50952,
        "JavaScript": 228
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Dexter 🤖\n\nDexter is an autonomous financial research agent that thinks, plans, and learns as it works. It performs analysis using task planning, self-reflection, and real-time market data. Think Claude Code, but built specifically for financial research.\n\n\n<img width=\"979\" height=\"651\" alt=\"Screenshot 2025-10-14 at 6 12 35 PM\" src=\"https://github.com/user-attachments/assets/5a2859d4-53cf-4638-998a-15cef3c98038\" />\n\n## Overview\n\nDexter takes complex financial questions and turns them into clear, step-by-step research plans. It runs those tasks using live market data, checks its own work, and refines the results until it has a confident, data-backed answer.  \n\nIt’s not just another chatbot.  It’s an agent that plans ahead, verifies its progress, and keeps iterating until the job is done.\n\n**Key Capabilities:**\n- **Intelligent Task Planning**: Automatically decomposes complex queries into structured research steps\n- **Autonomous Execution**: Selects and executes the right tools to gather financial data\n- **Self-Validation**: Checks its own work and iterates until tasks are complete\n- **Real-Time Financial Data**: Access to income statements, balance sheets, and cash flow statements\n- **Safety Features**: Built-in loop detection and step limits to prevent runaway execution\n\n[![Twitter Follow](https://img.shields.io/twitter/follow/virattt?style=social)](https://twitter.com/virattt)\n\n## Quick Start\n\n### Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) package manager\n- OpenAI API key\n- Financial Datasets API key (get one at [financialdatasets.ai](https://financialdatasets.ai))\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/virattt/dexter.git\ncd dexter\n```\n\n2. Install dependencies with uv:\n```bash\nuv sync\n```\n\n3. Set up your environment variables:\n```bash\n# Copy the example environment file\ncp env.example .env\n\n# Edit .env and add your API keys\n# OPENAI_API_KEY=your-openai-api-key\n# FINANCIAL_DATASETS_API_KEY=your-financial-datasets-api-key\n```\n\n### Usage\n\nRun Dexter in interactive mode:\n```bash\nuv run dexter-agent\n```\n\n### Example Queries\n\nTry asking Dexter questions like:\n- \"What was Apple's revenue growth over the last 4 quarters?\"\n- \"Compare Microsoft and Google's operating margins for 2023\"\n- \"Analyze Tesla's cash flow trends over the past year\"\n- \"What is Amazon's debt-to-equity ratio based on recent financials?\"\n\nDexter will automatically:\n1. Break down your question into research tasks\n2. Fetch the necessary financial data\n3. Perform calculations and analysis\n4. Provide a comprehensive, data-rich answer\n\n## Architecture\n\nDexter uses a multi-agent architecture with specialized components:\n\n- **Planning Agent**: Analyzes queries and creates structured task lists\n- **Action Agent**: Selects appropriate tools and executes research steps\n- **Validation Agent**: Verifies task completion and data sufficiency\n- **Answer Agent**: Synthesizes findings into comprehensive responses\n\n## Project Structure\n\n```\ndexter/\n├── src/\n│   ├── dexter/\n│   │   ├── agent.py      # Main agent orchestration logic\n│   │   ├── model.py      # LLM interface\n│   │   ├── tools.py      # Financial data tools\n│   │   ├── prompts.py    # System prompts for each component\n│   │   ├── schemas.py    # Pydantic models\n│   │   ├── utils/        # Utility functions\n│   │   └── cli.py        # CLI entry point\n├── pyproject.toml\n└── uv.lock\n```\n\n## Configuration\n\nDexter supports configuration via the `Agent` class initialization:\n\n```python\nfrom dexter.agent import Agent\n\nagent = Agent(\n    max_steps=20,              # Global safety limit\n    max_steps_per_task=5       # Per-task iteration limit\n)\n```\n\n## How to Contribute\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n**Important**: Please keep your pull requests small and focused.  This will make it easier to review and merge.\n\n\n## License\n\nThis project is licensed under the MIT License.\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-18T02:15:23.645989"
  }
]