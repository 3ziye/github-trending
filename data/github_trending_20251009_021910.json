[
  {
    "basic_info": {
      "name": "free-sqlite",
      "full_name": "fjb040911/free-sqlite",
      "owner": "fjb040911",
      "description": "Free SQLite for VSCode.Support writing SQL statements",
      "url": "https://github.com/fjb040911/free-sqlite",
      "clone_url": "https://github.com/fjb040911/free-sqlite.git",
      "ssh_url": "git@github.com:fjb040911/free-sqlite.git",
      "homepage": null,
      "created_at": "2025-09-16T06:20:19Z",
      "updated_at": "2025-10-09T02:01:22Z",
      "pushed_at": "2025-09-18T06:54:35Z"
    },
    "stats": {
      "stars": 1120,
      "forks": 0,
      "watchers": 1120,
      "open_issues": 1,
      "size": 10083
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 58284,
        "TypeScript": 33986,
        "HTML": 2399,
        "CSS": 1455
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Free sqlite\n\nVSCode extension to explore and query SQLite databases.\nopen-source and free.\n\n## ✨ Features\n - 📃 Open any SQLite file - Simply click on .sqlite or .db files to open them instantly\n - 🛡 Table Explorer - Browse all tables in your database from an integrated sidebar\n - 🌈 Data Visualization - View table data in a clean, modern interface that adapts to your VS Code theme\n - 🖥 SQL automatically complete - SQL statement editor, Automatically complete SQL keywords, table names, and fields\n - ❌ SQL error info - Execute query error information output display\n - 📦 Query result export - The query results can be exported as Excel or CSV\n - ❤️ Favorites - Collect some of your most commonly used SQL statements\n\n## How to use\n\n### Install\nVSCode extension install!\n\n\n[Install free sqlite](https://marketplace.visualstudio.com/items?itemName=free-sqlite.free-sqlite)\n\n### Open database\nNow! Browse all tables in your database in the right panel\n\n\n![open](https://github.com/fjb040911/free-sqlite/blob/main/doc/open.gif?raw=true)\n\n### Multiple files\n![multiple](https://github.com/fjb040911/free-sqlite/blob/main/doc/multi.gif?raw=true)\n\n### SQL Editor\nAutomatically complete SQL keywords, table names, and fields\n\n\n![editor](https://github.com/fjb040911/free-sqlite/blob/main/doc/select.gif?raw=true)\n\n### SQL Query error output\nIf there is an error when running SQL, you can see the error log through the following channels\n\n\nTerminal>output>free sqlite\n\n\n![output](https://github.com/fjb040911/free-sqlite/blob/main/doc/oupput.png?raw=true)\n\n### Favorite\nQuickly execute or view your frequently used SQL\n\n\n![favorite](https://github.com/fjb040911/free-sqlite/blob/main/doc/favoites.gif?raw=true)\n\n### Export\n![export](https://github.com/fjb040911/free-sqlite/blob/main/doc/expot.gif?raw=true)\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:11.592818"
  },
  {
    "basic_info": {
      "name": "NCE",
      "full_name": "iChochy/NCE",
      "owner": "iChochy",
      "description": "《新概念英语》全四册在线课文朗读、单句点读",
      "url": "https://github.com/iChochy/NCE",
      "clone_url": "https://github.com/iChochy/NCE.git",
      "ssh_url": "git@github.com:iChochy/NCE.git",
      "homepage": "https://nce.ichochy.com/",
      "created_at": "2025-09-24T05:55:42Z",
      "updated_at": "2025-10-09T01:21:23Z",
      "pushed_at": "2025-09-28T14:24:48Z"
    },
    "stats": {
      "stars": 1075,
      "forks": 174,
      "watchers": 1075,
      "open_issues": 1,
      "size": 598186
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 7893,
        "CSS": 6961,
        "HTML": 6059
      },
      "license": "MIT License",
      "topics": [
        "english",
        "learn",
        "nce"
      ]
    },
    "content": {
      "readme": "# 新概念英语-全四册\n## New Concept English\n### 在线课文点读\n\n在线课文朗读，单句点读，随时随地在线学习。\n\n---\n\n## 📕 第一册：《First Things First》\n\n**目标：打基础，日常交流入门**\n\n* **内容概述**：\n\n  * 共144课，都是非常短的小对话和故事。\n  * 涉及**字母、音标、基础词汇、简单句型**。\n  * 场景包括：问候、介绍、买东西、问路、看医生、日常生活。\n* **语法重点**：\n\n  * 一般现在时、一般过去时、一般将来时的基本用法。\n  * be动词、名词单复数、冠词、简单疑问句、祈使句。\n* **词汇量**：约600词左右。\n* **学习重点**：\n\n  * 正确发音、掌握基础语法、能听懂并说出日常用语。\n* **适合人群**：\n\n  * 英语零基础到初级学习者。\n  * 需要建立语感，能开口说简单英文。\n\n---\n\n## 📘 第二册：《Practice and Progress》\n\n**目标：初步运用，听说读写同步提高**\n\n* **内容概述**：\n\n  * 共96课，每课一个短故事，逐渐增加难度。\n  * 情节有趣，加入了旅行、工作、社会生活的情景。\n* **语法重点**：\n\n  * 各种时态（现在完成时、过去完成时、将来时、过去进行时）。\n  * 被动语态、直接引语和间接引语、条件句、比较级和最高级。\n* **词汇量**：约1500词左右。\n* **学习重点**：\n\n  * 掌握基本语法体系，能写简单短文，能听懂慢速英语。\n  * 口语表达更流畅，能描述事件、讲故事。\n* **适合人群**：\n\n  * 有一定英语基础，想系统梳理语法、提高读写能力的人。\n\n---\n\n## 📙 第三册：《Developing Skills》\n\n**目标：语言运用能力进阶，理解真实语境**\n\n* **内容概述**：\n\n  * 共60课，每课一篇短文，题材更丰富（科技、历史、人物、故事）。\n  * 文章更长，句子更复杂，阅读量明显加大。\n* **语法重点**：\n\n  * 虚拟语气、各种复杂从句（定语从句、状语从句、名词性从句）。\n  * 非谓语动词（动词不定式、分词、动名词）的高级用法。\n* **词汇量**：约2500词左右。\n* **学习重点**：\n\n  * 阅读理解能力，扩大词汇量，掌握地道表达。\n  * 能复述文章、用英语讨论话题、写中等长度的文章。\n* **适合人群**：\n\n  * 已学完第二册，想提高综合能力、能读懂原版书或新闻的人。\n\n---\n\n## 📗 第四册：《Fluency in English》\n\n**目标：流利表达，学术/专业阅读能力**\n\n* **内容概述**：\n\n  * 共48课，每课一篇较长的文章，题材涵盖哲学、科学、艺术、历史。\n  * 语言地道、表达严谨，接近大学英语阅读难度。\n* **语法重点**：\n\n  * 巩固所有语法，重点是复杂结构、修辞、长难句分析。\n* **词汇量**：约3500-4000词。\n* **学习重点**：\n\n  * 提高逻辑思维和批判性阅读能力。\n  * 能写较长文章、报告，口语表达接近流利。\n* **适合人群**：\n\n  * 已有较强英语基础，想进一步提升到高级水平的人。\n  * 考研、雅思、托福备考的学习者。\n\n---\n\n## 🎯 总体学习路径建议\n\n1. **第一册**：打好语音、语法和口语基础。\n2. **第二册**：建立完整语法体系，提升听说读写的基本能力。\n3. **第三册**：重点在阅读、词汇和句型复杂度，培养复述和写作能力。\n4. **第四册**：进入英语原著阅读和学术表达层面，达到准母语水平。\n\n---\n\nSite：[http://nce.ichochy.com](http://nce.ichochy.com)\n\nBlog：[http://ichochy.com](http://ichochy.com)\n\n资源：https://github.com/tangx/New-Concept-English\n\n---\n\n## 最后\n>大量的学习，大量的研究  \n>不断地重复，不断的实践  \n>从而建立起自己稳定的内核  \n>在克服逆境的过程中爱上自己  \n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:12.765522"
  },
  {
    "basic_info": {
      "name": "ququ",
      "full_name": "yan5xu/ququ",
      "owner": "yan5xu",
      "description": "开源免费的 Wispr Flow 替代方案 | 集成FunASR本地模型和可配置大语言模型的下一代中文桌面语音工作流",
      "url": "https://github.com/yan5xu/ququ",
      "clone_url": "https://github.com/yan5xu/ququ.git",
      "ssh_url": "git@github.com:yan5xu/ququ.git",
      "homepage": "",
      "created_at": "2025-09-20T06:26:58Z",
      "updated_at": "2025-10-09T02:03:40Z",
      "pushed_at": "2025-10-08T04:41:18Z"
    },
    "stats": {
      "stars": 1066,
      "forks": 94,
      "watchers": 1066,
      "open_issues": 18,
      "size": 2138
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 336340,
        "Python": 25053,
        "CSS": 10784,
        "HTML": 2349,
        "TypeScript": 165
      },
      "license": "Other",
      "topics": [
        "ai-text-processing",
        "chinese-speech-recognition",
        "electron-app",
        "funasr",
        "local-processing",
        "open-source",
        "privacy-first",
        "speech-to-text",
        "voice-dictation",
        "wispr-flow-alternative"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n\n<!-- 在这里放置您的Logo图片 -->\n<!-- 例如: <img src=\"assets/logo.png\" width=\"150\" /> -->\n<br/>\n<br/>\n\n# 蛐蛐 (QuQu)\n\n**开源免费的 Wispr Flow 替代方案 | 为中文而生的下一代智能语音工作流**\n\n</div>\n\n<div align=\"center\">\n\n<!-- 徽章 (Badges) - 您可以后续替换为动态徽章服务 (如 shields.io) -->\n<img src=\"https://img.shields.io/badge/license-Apache_2.0-blue.svg\" alt=\"License\">\n<img src=\"https://img.shields.io/badge/platform-macOS%20%7C%20Windows%20%7C%20Linux-lightgrey\" alt=\"Platform\">\n<img src=\"https://img.shields.io/badge/release-v1.0.0-brightgreen\" alt=\"Release\">\n<img src=\"https://img.shields.io/badge/PRs-welcome-brightgreen.svg\" alt=\"PRs Welcome\">\n\n</div>\n\n<br/>\n\n> **厌倦了 Wispr Flow 的订阅费用？寻找开源免费的语音输入方案？来试试「蛐蛐」！**\n\n**蛐蛐 (QuQu)** 是 **Wispr Flow 的开源免费替代方案**，专为中文用户打造的注重隐私的桌面端语音输入与文本处理工具。与 Wispr Flow 不同，蛐蛐完全开源免费，数据本地处理，专为中文优化，支持国产AI模型。\n\n### 🆚 vs Wispr Flow：开源免费的替代方案\n\n| 核心对比 | 🎯 蛐蛐 (QuQu) | 💰 Wispr Flow |\n|---------|---------------|---------------|\n| **价格** | ✅ **完全免费** | ❌ $12/月订阅 |\n| **隐私** | ✅ **本地处理** | ❌ 云端处理 |\n| **中文** | ✅ **专为中文优化** | ⚠️ 通用支持 |\n| **AI模型** | ✅ **国产AI支持** | ❌ 仅国外模型 |\n\n想象一下，你可以像和朋友聊天一样写作。说的内容被实时、精准地转换成文字，口误和\"嗯、啊\"等废话被自动修正，甚至能根据你的要求，自动整理成邮件格式或代码片段。**这就是「蛐蛐」为你带来的体验 —— 而且完全免费！**\n\n---\n\n## ✨ 核心优势\n\n| 特性 | 蛐蛐 (QuQu) 的解决方案 |\n| :--- | :--- |\n| 🎯 **顶尖中文识别，隐私至上** | 内置阿里巴巴 **FunASR Paraformer** 模型，在您的电脑本地运行。这意味着它能听懂中文互联网的\"梗\"，也能保护您最私密的语音数据不被上传。 |\n| 💡 **会思考的\"两段式引擎\"** | 独创 **\"ASR精准识别 + LLM智能优化\"** 工作流。它不仅能转录，更能\"理解\"和\"重塑\"您的语言。**自动过滤口头禅**、**修正错误表述**（例如将\"周三开会，不对，是周四\"直接输出为\"周四开会\"），这些都只是基础操作。 |\n| 🌐 **为国内优化的开放AI生态** | 支持任何兼容OpenAI API的服务，并**优先适配国内顶尖模型** (如通义千问、Kimi等)。这意味着更快的响应速度、更低的费用和更好的合规性。 |\n| 🚀 **开发者与效率专家挚爱** | 能准确识别并格式化 `camelCase` 和 `snake_case` 等编程术语。通过自定义AI指令，更能实现**上下文感知**，根据您当前的应用（写代码、回邮件）智能调整输出格式。 |\n\n\n## 🎬 功能演示\n\n<!-- 在这里放置您的GIF演示图 -->\n<!-- 例如: <img src=\"assets/demo.gif\" /> -->\n<p align=\"center\"><i>(这里是应用的GIF演示图)</i></p>\n\n- **一键唤醒**: 全局快捷键 F2，随时随地开始记录。\n- **实时识别**: 本地 FunASR 引擎提供高精度中文识别。\n- **智能优化**: 连接您的AI模型，自动润色、纠错、总结。\n- **无缝粘贴**: 转换完成的文本自动粘贴到您当前光标位置。\n\n### 🚀 从 Wispr Flow 迁移？\n\n如果你正在使用 Wispr Flow 但希望**节省订阅费用**、**保护隐私数据**、**更好的中文支持**，那么蛐蛐就是你的完美选择！\n\n## 🚀 快速开始\n\n### 1. 环境要求\n- **Node.js 18+** 和 pnpm\n- **Python 3.8+** (用于运行本地FunASR服务)\n- **macOS 10.15+**, **Windows 10+**, 或 **Linux**\n\n### 2. 项目初始化\n\n#### 方案一：使用 uv (推荐) 🌟\n\n[uv](https://github.com/astral-sh/uv) 是现代化的 Python 包管理器，能自动管理 Python 版本和依赖，避免环境冲突：\n\n```bash\n# 1. 克隆项目\ngit clone https://github.com/yan5xu/ququ.git\ncd ququ\n\n# 2. 安装 Node.js 依赖\npnpm install\n\n# 3. 安装 uv (如果尚未安装)\n# macOS/Linux:\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n# Windows:\n# powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# 4. 初始化 Python 环境 (uv 会自动下载 Python 3.11 和所有依赖)\nuv sync\n\n# 5. 下载 FunASR 模型\nuv run python download_models.py\n\n# 6. 启动应用!\npnpm run dev\n```\n\n#### 方案二：使用系统 Python\n\n如果您更喜欢使用系统 Python 环境：\n\n```bash\n# 1. 克隆项目\ngit clone https://github.com/yan5xu/ququ.git\ncd ququ\n\n# 2. 安装 Node.js 依赖\npnpm install\n\n# 3. 创建虚拟环境 (推荐)\npython3 -m venv .venv\nsource .venv/bin/activate  # Linux/macOS\n# .venv\\Scripts\\activate   # Windows\n\n# 4. 安装 Python 依赖\npip install funasr modelscope torch torchaudio librosa numpy\n\n# 5. 下载 FunASR 模型\npython download_models.py\n\n# 6. 启动应用!\npnpm run dev\n```\n\n#### 方案三：使用嵌入式 Python 环境\n\n项目还支持完全隔离的嵌入式 Python 环境（主要用于生产构建）：\n\n```bash\n# 1-2. 同上克隆项目和安装 Node.js 依赖\n\n# 3. 准备嵌入式 Python 环境\npnpm run prepare:python\n\n# 4. 测试环境是否正常\npnpm run test:python\n\n# 5. 启动应用\npnpm run dev\n```\n\n### 3. 配置AI模型\n启动应用后，在 **设置页面** 中填入您的AI服务商提供的 **API Key**、**Base URL** 和 **模型名称**。支持通义千问、Kimi、智谱AI等国产模型，配置将自动保存在本地。\n\n### 4. 故障排除\n\n#### 常见初始化问题\n\n**问题**: `ModuleNotFoundError: No module named 'funasr'`\n```bash\n# 解决方案 1: 使用 uv (推荐)\nuv sync\nuv run python download_models.py\n\n# 解决方案 2: 重新安装依赖\npip install funasr modelscope torch torchaudio librosa numpy\n\n# 解决方案 3: 使用嵌入式环境\npnpm run prepare:python\n```\n\n**问题**: FunASR 模型下载失败或加载缓慢\n```bash\n# 检查网络连接，确保能访问 modelscope.cn\n# 如果在 macOS 上遇到 SSL 警告：\npip install \"urllib3<2.0\"\n\n# 手动下载模型：\npython download_models.py\n# 或使用 uv:\nuv run python download_models.py\n```\n\n**问题**: Python 版本不兼容\n```bash\n# 使用 uv 自动管理 Python 版本 (推荐)\nuv sync  # 会自动下载 Python 3.11\n\n# 或手动安装 Python 3.8+\n# 检查当前版本: python3 --version\n```\n\n#### 环境选择建议\n\n| 使用场景 | 推荐方案 | 优点 |\n|---------|---------|------|\n| **新用户/快速体验** | uv | 自动管理，无环境冲突 |\n| **开发者/自定义需求** | 系统 Python + 虚拟环境 | 灵活控制，便于调试 |\n| **生产部署** | 嵌入式环境 | 完全隔离，无外部依赖 |\n\n#### 其他常见问题\n\n- **权限问题**: 在某些系统上可能需要使用 `--user` 参数安装Python包\n- **网络问题**: 首次运行时需要下载FunASR模型，请确保网络连接正常\n- **模型路径**: 模型默认下载到 `~/.cache/modelscope/` 目录\n\n## 🛠️ 技术栈\n\n- **前端**: React 19, TypeScript, Tailwind CSS, shadcn/ui, Vite\n- **桌面端**: Electron\n- **语音技术 (本地)**: FunASR (Paraformer-large, FSMN-VAD, CT-Transformer)\n- **AI模型 (可配置)**: 兼容 OpenAI, Anthropic, 阿里云通义千问, Kimi 等\n- **数据库**: better-sqlite3\n\n## 🤝 参与贡献\n\n我们是一个开放和友好的社区，欢迎任何形式的贡献！\n\n### 📋 项目管理\n\n我们使用 GitHub Projects 来管理项目的开发进度和任务规划：\n\n- 📊 **项目看板**: [蛐蛐 开发看板](https://github.com/users/yan5xu/projects/2) - 查看当前开发状态、功能规划和进度跟踪\n- 🎯 **任务管理**: 所有功能开发、Bug修复和改进建议都在项目看板中进行跟踪\n- 🔄 **开发流程**: 从想法提出到功能发布的完整流程可视化\n\n### 如何参与\n\n- 🤔 **提建议**: 对产品有任何想法？欢迎到 [Issues](https://github.com/yan5xu/ququ/issues) 页面提出",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:13.890080"
  },
  {
    "basic_info": {
      "name": "openai-apps-sdk-examples",
      "full_name": "openai/openai-apps-sdk-examples",
      "owner": "openai",
      "description": "Example apps for the Apps SDK",
      "url": "https://github.com/openai/openai-apps-sdk-examples",
      "clone_url": "https://github.com/openai/openai-apps-sdk-examples.git",
      "ssh_url": "org-14957082@github.com:openai/openai-apps-sdk-examples.git",
      "homepage": null,
      "created_at": "2025-10-06T05:28:01Z",
      "updated_at": "2025-10-09T02:18:04Z",
      "pushed_at": "2025-10-08T18:45:49Z"
    },
    "stats": {
      "stars": 823,
      "forks": 97,
      "watchers": 823,
      "open_issues": 14,
      "size": 121
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 90208,
        "CSS": 64226,
        "TypeScript": 28354,
        "Python": 19614
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Apps SDK Examples Gallery\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)\n\nThis repository showcases example UI components to be used with the Apps SDK, as well as example MCP servers that expose a collection of components as tools.\nIt is meant to be used as a starting point and source of inspiration to build your own apps for ChatGPT.\n\n## MCP + Apps SDK overview\n\nThe Model Context Protocol (MCP) is an open specification for connecting large language model clients to external tools, data, and user interfaces. An MCP server exposes tools that a model can call during a conversation and returns results according to the tool contracts. Those results can include extra metadata—such as inline HTML—that the Apps SDK uses to render rich UI components (widgets) alongside assistant messages.\n\nWithin the Apps SDK, MCP keeps the server, model, and UI in sync. By standardizing the wire format, authentication, and metadata, it lets ChatGPT reason about your connector the same way it reasons about built-in tools. A minimal MCP integration for Apps SDK implements three capabilities:\n\n1. **List tools** – Your server advertises the tools it supports, including their JSON Schema input/output contracts and optional annotations (for example, `readOnlyHint`).\n2. **Call tools** – When a model selects a tool, it issues a `call_tool` request with arguments that match the user intent. Your server executes the action and returns structured content the model can parse.\n3. **Return widgets** – Alongside structured content, return embedded resources in the response metadata so the Apps SDK can render the interface inline in the Apps SDK client (ChatGPT).\n\nBecause the protocol is transport agnostic, you can host the server over Server-Sent Events or streaming HTTP—Apps SDK supports both.\n\nThe MCP servers in this demo highlight how each tool can light up widgets by combining structured payloads with `_meta.openai/outputTemplate` metadata returned from the MCP servers.\n\n## Repository structure\n\n- `src/` – Source for each widget example.\n- `assets/` – Generated HTML, JS, and CSS bundles after running the build step.\n- `pizzaz_server_node/` – MCP server implemented with the official TypeScript SDK.\n- `pizzaz_server_python/` – Python MCP server that returns the Pizzaz widgets.\n- `solar-system_server_python/` – Python MCP server for the 3D solar system widget.\n- `build-all.mts` – Vite build orchestrator that produces hashed bundles for every widget entrypoint.\n\n## Prerequisites\n\n- Node.js 18+\n- pnpm (recommended) or npm/yarn\n- Python 3.10+ (for the Python MCP server)\n\n## Install dependencies\n\nClone the repository and install the workspace dependencies:\n\n```bash\npnpm install\n```\n\n> Using npm or yarn? Install the root dependencies with your preferred client and adjust the commands below accordingly.\n\n## Build the components gallery\n\nThe components are bundled into standalone assets that the MCP servers serve as reusable UI resources.\n\n```bash\npnpm run build\n```\n\nThis command runs `build-all.mts`, producing versioned `.html`, `.js`, and `.css` files inside `assets/`. Each widget is wrapped with the CSS it needs so you can host the bundles directly or ship them with your own server.\n\nTo iterate locally, you can also launch the Vite dev server:\n\n```bash\npnpm run dev\n```\n\n## Serve the static assets\n\nIf you want to preview the generated bundles without the MCP servers, start the static file server after running a build:\n\n```bash\npnpm run serve\n```\n\nThe assets are exposed at [`http://localhost:4444`](http://localhost:4444) with CORS enabled so that local tooling (including MCP inspectors) can fetch them.\n\n## Run the MCP servers\n\nThe repository ships several demo MCP servers that highlight different widget bundles:\n\n- **Pizzaz (Node & Python)** – pizza-inspired collection of tools and components\n- **Solar system (Python)** – 3D solar system viewer\n\nEvery tool response includes plain text content, structured JSON, and `_meta.openai/outputTemplate` metadata so the Apps SDK can hydrate the matching widget.\n\n### Pizzaz Node server\n\n```bash\ncd pizzaz_server_node\npnpm start\n```\n\n### Pizzaz Python server\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\npip install -r pizzaz_server_python/requirements.txt\nuvicorn pizzaz_server_python.main:app --port 8000\n```\n\n### Solar system Python server\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\npip install -r solar-system_server_python/requirements.txt\nuvicorn solar-system_server_python.main:app --port 8000\n```\n\nYou can reuse the same virtual environment for all Python servers—install the dependencies once and run whichever entry point you need.\n\n## Testing in ChatGPT\n\nTo add these apps to ChatGPT, enable [developer mode](https://platform.openai.com/docs/guides/developer-mode), and add your apps in Settings > Connectors.\n\nTo add your local server without deploying it, you can use a tool like [ngrok](https://ngrok.com/) to expose your local server to the internet.\n\nFor ex",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:15.036592"
  },
  {
    "basic_info": {
      "name": "HeadlessX",
      "full_name": "saifyxpro/HeadlessX",
      "owner": "saifyxpro",
      "description": "A lightweight, self-hosted headless browser automation platform. Designed as an alternative to Browserless, built for speed, privacy, and scalability.",
      "url": "https://github.com/saifyxpro/HeadlessX",
      "clone_url": "https://github.com/saifyxpro/HeadlessX.git",
      "ssh_url": "git@github.com:saifyxpro/HeadlessX.git",
      "homepage": "https://headlessx.saify.me",
      "created_at": "2025-09-12T18:11:48Z",
      "updated_at": "2025-10-09T02:08:38Z",
      "pushed_at": "2025-10-08T17:59:48Z"
    },
    "stats": {
      "stars": 608,
      "forks": 88,
      "watchers": 608,
      "open_issues": 0,
      "size": 3761
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 937719,
        "TypeScript": 64817,
        "Shell": 45033,
        "CSS": 5079,
        "Dockerfile": 1857
      },
      "license": "MIT License",
      "topics": [
        "automation",
        "automation-api",
        "automation-platform",
        "browser-automation",
        "browser-testing",
        "browserless",
        "chrome-headless",
        "chromedriver",
        "container-automation",
        "data-extraction",
        "headless",
        "headless-chrome",
        "headless-service",
        "playwright",
        "playwright-automation",
        "puppeteer",
        "scraping-service",
        "web-automation",
        "web-scraping"
      ]
    },
    "content": {
      "readme": "# 🚀 HeadlessX v1.3.0\n\n**Advanced Anti-Detection Web Scraping API with Comprehensive Fingerprinting Control**\n\n<div align=\"center\">\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg?style=for-the-badge)](https://opensource.org/licenses/MIT)\n[![Version](https://img.shields.io/badge/Version-v1.3.0-blue.svg?style=for-the-badge)](https://github.com/saifyxpro/HeadlessX/releases)\n[![Node.js](https://img.shields.io/badge/Node.js-18%2B-success.svg?style=for-the-badge&logo=node.js)](https://nodejs.org/)\n[![Playwright](https://img.shields.io/badge/Playwright-Latest-orange.svg?style=for-the-badge&logo=playwright)](https://playwright.dev/)\n\n[![GitHub Stars](https://img.shields.io/github/stars/saifyxpro/HeadlessX?style=for-the-badge&logo=github)](https://github.com/saifyxpro/HeadlessX/stargazers)\n[![GitHub Forks](https://img.shields.io/github/forks/saifyxpro/HeadlessX?style=for-the-badge&logo=github)](https://github.com/saifyxpro/HeadlessX/network/members)\n[![Docker](https://img.shields.io/badge/Docker-Ready-blue.svg?style=for-the-badge&logo=docker)](#-docker-deployment)\n[![CI/CD](https://img.shields.io/github/actions/workflow/status/saifyxpro/HeadlessX/ci.yml?style=for-the-badge&logo=github-actions&label=CI%2FCD)](https://github.com/saifyxpro/HeadlessX/actions)\n\n[![Open Source](https://img.shields.io/badge/Open%20Source-100%25-brightgreen.svg?style=for-the-badge&logo=open-source-initiative)](https://github.com/saifyxpro/HeadlessX)\n[![Contributors](https://img.shields.io/github/contributors/saifyxpro/HeadlessX?style=for-the-badge&logo=github)](https://github.com/saifyxpro/HeadlessX/graphs/contributors)\n[![Issues](https://img.shields.io/github/issues/saifyxpro/HeadlessX?style=for-the-badge&logo=github)](https://github.com/saifyxpro/HeadlessX/issues)\n[![PRs Welcome](https://img.shields.io/badge/PRs-Welcome-brightgreen.svg?style=for-the-badge&logo=github)](http://makeapullrequest.com)\n\n</div>\n\n<div align=\"center\">\n\n![HeadlessX Demo](assets/main.gif)\n\n</div>\n\n> 🎯 **Unified Solution**: Website + API on a single domain  \n> 🛡️ **Advanced Anti-Detection**: Canvas/WebGL/Audio spoofing, behavioral simulation  \n> 🧠 **Human-like Behavior**: Bezier mouse movements, keyboard dynamics, natural scrolling  \n> 🚀 **Deploy Anywhere**: Docker, Node.js+PM2, or Development\n\n---\n\n<div align=\"center\">\n\n## 🗺️ **What's Coming Next?**\n\n### 🚀 **HeadlessX v2.0** - Full-Stack AI-Powered Platform\n*The future of intelligent web scraping is here*\n\n[![Roadmap](https://img.shields.io/badge/🗺️_View_Full_Roadmap-v2.0-purple.svg?style=for-the-badge)](./docs/roadmap-v2.md)\n\n**🎯 Revolutionary Features Coming:**\n- 🤖 **AI-Powered Admin Panel** - Intelligent task management & automation\n- 🎨 **Modern React Frontend** - Sleek, responsive dashboard interface  \n- 🧠 **Smart Automation** - AI-driven scraping strategies & optimization\n- 📊 **Advanced Analytics** - Real-time insights & performance metrics\n- 🔄 **Workflow Builder** - Visual scraping pipeline creation\n- 🎛️ **Enterprise Controls** - Advanced user management & permissions\n\n*Transform your web scraping experience with the next generation of HeadlessX*\n\n</div>\n\n---\n\n## ✨ v1.3.0 Key Features\n\n### 🛡️ **Advanced Anti-Detection Engine**\n- **Canvas Fingerprinting Control** - Dynamic noise injection with consistent seeds\n- **WebGL Spoofing** - GPU vendor/model spoofing with realistic profiles\n- **Audio Context Manipulation** - Hardware audio fingerprint database\n- **WebRTC Leak Prevention** - Complete IP leak protection\n- **Hardware Fingerprint Spoofing** - CPU, memory, and performance masking\n\n### 🧠 **Human-like Behavioral Simulation**\n- **Bezier Mouse Movement** - Natural acceleration and deceleration patterns\n- **Keyboard Dynamics** - Realistic dwell time and flight time variations\n- **Natural Scroll Patterns** - Reader, scanner, browser behavioral profiles\n- **Attention Model Simulation** - Human-like focus and interaction patterns\n- **Micro-movement Injection** - Sub-pixel accuracy for maximum realism\n\n### 🌐 **WAF Bypass Capabilities**\n- **Cloudflare Bypass** - Advanced challenge solving and TLS fingerprinting\n- **DataDome Evasion** - Resource blocking and behavioral pattern matching\n- **Incapsula/Akamai** - Generic WAF bypass with adaptive techniques\n- **HTTP/2 Fingerprinting** - Stream prioritization and header ordering\n\n### 📊 **Comprehensive Device Profiles**\n- **50+ Chrome Profiles** - Desktop, mobile, and tablet configurations\n- **Hardware Consistency** - CPU, GPU, memory, and sensor correlation\n- **Geolocation Intelligence** - Timezone, language, and locale matching\n- **Profile Validation** - Real-time consistency checking and scoring\n\n---\n\n\n**Choose your deployment:**\n\n| Method | Command | Best For |\n|--------|---------|----------|\n| 🐳 **Docker** | `docker-compose up -d` | Production, easy deployment |\n| 🔧 **Auto Setup** | `chmod +x scripts/setup.sh && sudo ./scripts/setup.sh` | VPS/Server with full control |\n| 💻 **Development** | `npm install && npm start` | Local development, testing |\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:16.196901"
  },
  {
    "basic_info": {
      "name": "Auto-deploy-sap-and-keepalive",
      "full_name": "eooce/Auto-deploy-sap-and-keepalive",
      "owner": "eooce",
      "description": "Auto deploy sap and keepalive",
      "url": "https://github.com/eooce/Auto-deploy-sap-and-keepalive",
      "clone_url": "https://github.com/eooce/Auto-deploy-sap-and-keepalive.git",
      "ssh_url": "git@github.com:eooce/Auto-deploy-sap-and-keepalive.git",
      "homepage": "https://keepalive-sap.eooce.xx.kg",
      "created_at": "2025-09-15T09:57:24Z",
      "updated_at": "2025-10-09T02:06:30Z",
      "pushed_at": "2025-10-06T16:31:32Z"
    },
    "stats": {
      "stars": 477,
      "forks": 1775,
      "watchers": 477,
      "open_issues": 1,
      "size": 108
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 21125,
        "Shell": 7647
      },
      "license": "Apache License 2.0",
      "topics": [
        "sap",
        "trojan",
        "vless-ws-tls",
        "vmess",
        "vmess-ws-tls"
      ]
    },
    "content": {
      "readme": "# Auto-SAP应用部署说明文档\n\n## 概述\n\n本项目是自动部署argo隧道或直连节点到SAP Cloud平台，试用版提供完美的自动保活的方案,并适配企业版部署，企业版无需保活\n- 视频教程：https://www.youtube.com/watch?v=MU_ySjg98F8\n- telegram交流反馈群组：https://t.me/eooceu\n\n### 前置要求\n* GitHub 账户：需要有一个 GitHub 账户来创建仓库和设置工作流\n* SAP Cloud 账户：需要有 SAP Cloud 有效账户,点此注册：https://www.sap.com\n\n## 部署步骤\n\n1. Fork本仓库\n\n2. 在Actions菜单允许 `I understand my workflows, go ahead and enable them` 按钮\n\n3. 在 GitHub 仓库中设置以下 secrets（Settings → Secrets and variables → Actions → New repository secret）：\n- `EMAIL`: SAP(试用版或企业版)登录邮箱(必填)\n- `PASSWORD`: SAP(试用版或企业版)登录密码(必填)\n\n4. **设置Docker容器环境变量(也是在secrets里设置)**\n   - 使用固定隧道token部署，请在cloudflare里设置端口为8001\n   - 设置基础环境变量：\n     - UUID(节点uuid),如果开启了哪吒v1,部署完一个之后一定要修改UUID,否则agnet会被覆盖\n     - ARGO_DOMAIN(固定隧道域名,未设置将使用临时隧道),使用直连镜像时没有此变量\n     - ARGO_AUTH(固定隧道json或token,未设置将使用临时隧道),使用直连镜像时没有此变量\n     - SUB_PATH(订阅token,未设置默认是sub)\n   - 可选环境变量\n     - ARGO_PORT(自定义argo隧道端口,不设置默认为8001)\n     - NEZHA_SERVER(v1形式: nezha.xxx.com:8008  v0形式：nezha.xxx.com)\n     - NEZHA_PORT(V1哪吒没有这个)\n     - NEZHA_KEY(v1的NZ_CLIENT_SECRET或v0的agent密钥)\n     - CFIP(优选域名或优选ip),使用直连镜像时没有此变量\n     - CFPORT(优选域名或优选ip对应端口),使用直连镜像时没有此变量\n     - DOCKER_IMAGE(使用的docker镜像),默认使用argo隧道CDN\n\n6. **开始部署**\n* 试用版第二区域和企业版创建区域后,请一定要创建一个空间,名称随意,否则无法运行\n* 在GitHub仓库的Actions页面找到\"自动部署代理到SAP\"工作流\n* 点击\"Run workflow\"按钮\n* 根据需要选择或填写以下参数：\n   - type: 选择部署类型(Argo隧道CDN/ws直连/xhttp直连)默认Argo隧道\n   - region: 选择部署区域（SG(free)和US(free)为试用版,其他为企业版，请选择和开设的平台对应,aws,gcp,azure）\n   - app_name: (可选)指定应用名称,留空随机生成\n* 点击绿色的\"Run workflow\"按钮开始部署\n\n6. **获取节点信息**\n* 点开运行的actions，点击`详细部署信息` 查看服务链接，访问域名显示Hello world说明正常\n* 订阅： 域名/$SUB_PATH    SUB_PATH变量没设置默认是sub  即订阅为：域名/sub\n\n\n## 保活(选择其中一种即可)\n### vps或NAT小鸡保活\n- 推荐使用keep.sh在vps或nat小鸡上精准保活，下载keep.sh文件到本地或vps上，在开头添加必要的环境变量和保活url然后执行`bash keep.sh`即可\n1. 下载文件到vps或本地\n```bash\nwget https://raw.githubusercontent.com/eooce/Auto-deploy-sap-and-keepalive/refs/heads/main/keep.sh && chmod +x keep.sh\n```\n2. 修改keep.sh开头4-8行中的变量和保活url\n3. `bash keep.sh`运行即可\n\n\n### Github Actions保活\n* actions保活可能存在时间误差，建议根据前两天的情况进行适当调整`自动保活SAP.yml`里的cron时间\n\n\n### Cloudflare workers保活\n1. 登录你的Cloudflare账户 [Cloudflare Dashboard](https://dash.cloudflare.com)\n2. 点击 `Workers and pages`创建一个workers，编辑代码，全选`_worker-keep.js`文件里的代码粘贴到workers中\n3. 在开头添加登录email和登录密码(telegram通知配置可选)、项目URL和项目名称，右上角点击部署\n4. 部署成功后返回到该worker设置中选择添加触发事件，添加cron触发器--cron表达式，设置为：`*/2 0 * * *` 保存，意思是北京时间早上8-9点每2分钟检查一次\n\n\n## 注意事项\n\n1. 确保所有必需的GitHub Secrets已正确配置\n2. 多区域部署需先开通权限，确保US区域有内存\n3. 试用版第二区域和企业版创建区域后,请一定要创建一个空间,名称随意,否则无法运行\n4. 部署区域（SG(free)和US(free)为试用版,其他为企业版，请选择和开设的平台对应,aws,gcp,azure\n5. 建议设置SUB_PATH订阅token,防止节点泄露\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:17.331654"
  },
  {
    "basic_info": {
      "name": "danmu_api",
      "full_name": "huangxd-/danmu_api",
      "owner": "huangxd-",
      "description": "一个人人都能部署的基于 js 的弹幕 API 服务器，支持爱优腾芒哔人韩巴弹幕直接获取，兼容弹弹play的搜索、详情查询和弹幕获取接口，并提供日志记录，支持vercel/cloudflare/docker/claw等部署方式，不用提前下载弹幕，没有nas或小鸡也能一键部署。",
      "url": "https://github.com/huangxd-/danmu_api",
      "clone_url": "https://github.com/huangxd-/danmu_api.git",
      "ssh_url": "git@github.com:huangxd-/danmu_api.git",
      "homepage": "https://danmuapi.vercel.app",
      "created_at": "2025-09-09T13:43:21Z",
      "updated_at": "2025-10-09T01:06:26Z",
      "pushed_at": "2025-10-08T14:40:59Z"
    },
    "stats": {
      "stars": 448,
      "forks": 472,
      "watchers": 448,
      "open_issues": 0,
      "size": 339
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 179133,
        "Dockerfile": 417
      },
      "license": "GNU Affero General Public License v3.0",
      "topics": [
        "anime",
        "api",
        "danmu",
        "danmuku",
        "server"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <img src=\"https://i.mji.rip/2025/09/27/eedc7b701c0fa5c1f7c175b22f441ad9.jpeg\" alt=\"Clash\" width=\"128\" style=\"border-radius: 16px;\" />\n</div>\n\n<h2 align=\"center\">\nLogVar 弹幕 API 服务器\n</h2>\n\n[![GitHub](https://img.shields.io/badge/-GitHub-181717?logo=github)](https://github.com/huangxd-/damnu_api)\n![GitHub forks](https://img.shields.io/github/forks/huangxd-/danmu_api)\n![GitHub Repo stars](https://img.shields.io/github/stars/huangxd-/danmu_api)\n![GitHub License](https://img.shields.io/github/license/huangxd-/danmu_api)\n![Docker Image Version](https://img.shields.io/docker/v/logvar/danmu-api?sort=semver)\n![Docker Pulls](https://img.shields.io/docker/pulls/logvar/danmu-api)\n[![telegram](https://img.shields.io/static/v1?label=telegram&message=telegram_channel&color=blue)](https://t.me/logvar_danmu_channel)\n[![telegram](https://img.shields.io/static/v1?label=telegram&message=telegram_group&color=blue)](https://t.me/logvar_danmu_group)\n\n---\n\n一个人人都能部署的基于 js 的弹幕 API 服务器，支持爱优腾芒哔人韩巴弹幕直接获取，兼容弹弹play的搜索、详情查询和弹幕获取接口，并提供日志记录，支持vercel/cloudflare/docker/claw等部署方式，不用提前下载弹幕，没有nas或小鸡也能一键部署。\n\n本项目仅为个人爱好开发，代码开源。如有任何侵权行为，请联系本人删除。\n\n有问题提issue或 [私信机器人](https://t.me/ddjdd_bot) 都ok。\n\n新加了 [tg频道](https://t.me/logvar_danmu_channel) ，方便发送更新通知，以及群组，太多人私信咨询了，索性增加一个 [互助群](https://t.me/logvar_danmu_group) ，大家有问题可以在群里求助。\n\n> 请不要在国内媒体平台宣传本项目！\n\n## 功能\n- **API 接口**：\n  - `GET /api/v2/search/anime?keyword=${queryTitle}`：根据关键字搜索动漫。\n  - `POST /api/v2/match`：根据关键字匹配动漫，用于自动匹配。（目前已支持在match接口中通过@语法动态指定平台优先级，如`赴山海 S01E28 @qiyi`）\n  - `GET /api/v2/search/episodes`：根据关键词搜索所有匹配的剧集信息。\n  - `GET /api/v2/bangumi/:animeId`：获取指定动漫的详细信息。\n  - `GET /api/v2/comment/:commentId?withRelated=true&chConvert=1`：获取指定弹幕评论，支持返回相关评论和字符转换。\n  - `GET /api/logs`：获取最近的日志（最多 500 行，格式为 `[时间戳] 级别: 消息`）。\n- **日志记录**：捕获 `console.log`（info 级别）和 `console.error`（error 级别），JSON 内容格式化输出。\n- **部署支持**：支持本地运行、Docker 容器化、Vercel 一键部署、Cloudflare 一键部署和 Docker 一键启动。\n\n## 前置条件\n- Node.js（v18.0.0 或更高版本；理论兼容更低版本，请自行测试）\n- npm\n- Docker（可选，用于容器化部署）\n\n## 本地运行\n1. **克隆仓库**：\n   ```bash\n   git clone <仓库地址>\n   cd <项目目录>\n   ```\n\n2. **安装依赖**：\n   ```bash\n   npm install\n   ```\n\n3. **启动服务器**：\n   ```bash\n   npm start\n   ```\n   服务器将在 `http://{ip}:9321` 运行，默认token是`87654321`。\n   或者使用下面的命令\n   ```bash\n   # 启动\n   node ./danmu_api/server.js\n   # 测试\n   node --test ./danmu_api/worker.test.js\n   ```\n\n4. **测试 API**：\n   使用 Postman 或 curl 测试：\n   - `GET http://{ip}:9321/87654321`\n   - `GET http://{ip}:9321/87654321/api/v2/search/anime?keyword=生万物`\n   - `POST http://{ip}:9321/87654321/api/v2/api/v2/match`\n   - `GET http://{ip}:9321/87654321/api/v2/search/episodes?anime=生万物`\n   - `GET http://{ip}:9321/87654321/api/v2/bangumi/1`\n   - `GET http://{ip}:9321/87654321/api/v2/comment/1?withRelated=true&chConvert=1`\n   - `GET http://{ip}:9321/87654321/api/logs`\n\n## 使用 Docker 运行\n1. **构建 Docker 镜像**：\n   ```bash\n   docker build -t danmu-api .\n   ```\n\n2. **运行容器**：\n   ```bash\n   docker run -d -p 9321:9321 --name danmu-api -e TOKEN=87654321 danmu-api\n   ```\n   - 使用`-e TOKEN=87654321`设置`TOKEN`环境变量，覆盖Dockerfile中的默认值。\n\n3. **测试 API**：\n   使用 `http://{ip}:9321/{TOKEN}` 访问上述 API 接口。\n\n## Docker 一键启动 【推荐】\n1. **拉取镜像**：\n   ```bash\n   docker pull logvar/danmu-api:latest\n   ```\n\n2. **运行容器**：\n   ```bash\n   docker run -d -p 9321:9321 --name danmu-api -e TOKEN=87654321 logvar/danmu-api:latest\n   ```\n   - 使用`-e TOKEN=87654321`设置`TOKEN`环境变量。\n\n   ```yaml\n   services:\n     danmu-api:\n       image: logvar/danmu-api:latest\n       container_name: danmu-api\n       ports:\n         - \"9321:9321\"\n       environment:\n         - TOKEN=87654321  # 请将 87654321 替换为你想自定义的 Token 值\n       restart: unless-stopped    # 可选配置，容器退出时自动重启（非必需，可根据需求删除）\n   ```\n   - 或使用docker compose部署。\n   ```yaml\n   services:\n     watchtower:\n       image: containrrr/watchtower\n       container_name: watchtower-gx\n       restart: always\n       volumes:\n         - /var/run/docker.sock:/var/run/docker.sock\n       environment:\n         - TZ=Asia/Shanghai  # 保持时区正确\n       command:\n         - --cleanup         # 更新后清理旧镜像\n         - --interval        # 间隔参数\n         - \"12600\"           # 30分钟（1800秒），适合测试\n         - danmu-api         # 监控的目标容器名\n   ```\n   - 可以使用watchtower监控有新版本自动更新。\n\n3. **测试 API**：\n   使用 `http://{ip}:9321/{TOKEN}` 访问上述 API 接口。\n\n## 部署到 Vercel 【推荐】\n\n### 一键部署\n点击以下按钮即可将项目快速部署到 Vercel：\n\n[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https://github.com/huangxd-/danmu_api&project-name=danmu_api&repository-name=danmu_api)\n\n**注意**：请将按钮链接中的 `https://github.com/huangxd-/danmu_api` 替换为你的实际 Git 仓库地址。编辑 `README.md` 并更新链接后，推送到仓库，点击按钮即可自动克隆和部署。\n- **设置环境变量**：部署后，在 Vercel 仪表板中：\n  1. 转到你的项目设置。\n  2. 在“Environment Variables”部分添加 `TOKEN` 变量，输入你的 API 令牌值。\n  3. 保存更改并重新部署。\n- 示例请求：`https://{your_domian}.vercel.app/87654321/api/v2/search/anime?keyword=子夜归`\n\n### 优化点\n- Settings > Functions > Advanced Setting > Function Region 切换为 Hong Kong，能提高访问速度，体验更优\n  > hk有可能访问不了360或其他源，可以尝试切其他region，如新加坡等\n- vercel在国内被墙，请配合代理使用或绑定自定义域名\n\n## 部署到 腾讯云 edgeone pages\n\n### 一键部署\n[![使用 Edge",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:18.471596"
  },
  {
    "basic_info": {
      "name": "claudesidian",
      "full_name": "heyitsnoah/claudesidian",
      "owner": "heyitsnoah",
      "description": null,
      "url": "https://github.com/heyitsnoah/claudesidian",
      "clone_url": "https://github.com/heyitsnoah/claudesidian.git",
      "ssh_url": "git@github.com:heyitsnoah/claudesidian.git",
      "homepage": null,
      "created_at": "2025-09-12T00:40:48Z",
      "updated_at": "2025-10-09T01:33:19Z",
      "pushed_at": "2025-10-07T16:52:15Z"
    },
    "stats": {
      "stars": 402,
      "forks": 28,
      "watchers": 402,
      "open_issues": 2,
      "size": 345
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 36931,
        "Shell": 9681
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Claudesidian: Claude Code + Obsidian Starter Kit\n\nTurn your Obsidian vault into an AI-powered second brain using Claude Code.\n\n## What is this?\n\nThis is a pre-configured Obsidian vault structure designed to work seamlessly\nwith Claude Code, enabling you to:\n\n- Use AI as a thinking partner, not just a writing assistant\n- Organize knowledge using the PARA method\n- Maintain version control with Git\n- Access your vault from anywhere (including mobile)\n\n## Quick Start\n\n### 1. Get the Starter Kit\n\n**Option A: Clone with Git**\n\n```bash\n# Clone with your preferred folder name (replace 'my-vault' with any name you like)\ngit clone https://github.com/heyitsnoah/claudesidian.git my-vault\ncd my-vault\n\n# Examples:\n# git clone https://github.com/heyitsnoah/claudesidian.git obsidian-notes\n# git clone https://github.com/heyitsnoah/claudesidian.git knowledge-base\n# git clone https://github.com/heyitsnoah/claudesidian.git second-brain\n```\n\n**Option B: Download ZIP (no Git required)**\n\n1. Click \"Code\" → \"Download ZIP\" on GitHub\n2. Extract to your desired location\n3. Open the folder in Claude Code\n\n### 2. Run the Setup Wizard\n\n```bash\n# Start Claude Code in the directory\nclaude\n\n# Run the interactive setup wizard (in Claude Code)\n/init-bootstrap\n```\n\nThis will:\n\n- Install dependencies automatically\n- Disconnect from the original claudesidian repository\n- **Intelligently analyze** your existing vault structure and patterns\n- **Import your existing Obsidian vault** safely to OLD_VAULT/ (if you have one)\n- **Research your public work** for personalized context (with your permission)\n- Ask you about your workflow preferences\n- Create a personalized CLAUDE.md configuration\n- Set up your folder structure\n- Optionally configure Gemini Vision for image/video analysis\n- Optionally configure Firecrawl for web research\n- Initialize Git for version control\n\n### 3. Open in Obsidian (Optional but Recommended)\n\n- Download [Obsidian](https://obsidian.md)\n- Open vault from the claudesidian folder\n- This gives you a visual interface alongside Claude Code\n\n### 4. Your First Session\n\nTell Claude Code:\n\n```\nI'm starting a new project about [topic].\nI'm in thinking mode, not writing mode.\nPlease search my vault for any relevant existing notes,\nthen help me explore this topic by asking questions.\n```\n\nOr use one of the pre-configured commands (in Claude Code):\n\n```\n/thinking-partner   # For collaborative exploration\n/daily-review       # For end-of-day reflection\n/research-assistant # For deep dives into topics\n```\n\n## Folder Structure\n\n```\nclaudesidian/\n├── 00_Inbox/           # Temporary capture point for new ideas\n├── 01_Projects/        # Active, time-bound initiatives\n├── 02_Areas/           # Ongoing responsibilities\n├── 03_Resources/       # Reference materials and knowledge base\n├── 04_Archive/         # Completed projects and inactive items\n├── 05_Attachments/     # Images, PDFs, and other files\n├── 06_Metadata/        # Vault configuration and templates\n│   ├── Reference/      # Documentation and guides\n│   └── Templates/      # Reusable note templates\n└── .scripts/           # Helper scripts for automation\n```\n\n## Key Concepts\n\n### Thinking Mode vs Writing Mode\n\n**Thinking Mode** (Research & Exploration):\n\n- Claude asks questions to understand your goals\n- Searches existing notes for relevant content\n- Helps make connections between ideas\n- Maintains a log of insights and progress\n\n**Writing Mode** (Content Creation):\n\n- Generates drafts based on your research\n- Helps structure and edit content\n- Creates final deliverables\n\n### The PARA Method\n\n**Projects**: Have a deadline and specific outcome\n\n- Example: \"Q4 2025 Marketing Strategy\"\n- Create a folder in `01_Projects/`\n\n**Areas**: Ongoing without an end date\n\n- Example: \"Health\", \"Finances\", \"Team Management\"\n- Lives in `02_Areas/`\n\n**Resources**: Topics of ongoing interest\n\n- Example: \"AI Research\", \"Writing Tips\"\n- Store in `03_Resources/`\n\n**Archive**: Inactive items\n\n- Completed projects with their outputs\n- Old notes no longer relevant\n\n## Claude Code Commands\n\nPre-configured AI assistants ready to use:\n\n- `thinking-partner` - Explore ideas through questions\n- `inbox-processor` - Organize your captures\n- `research-assistant` - Deep dive into topics\n- `daily-review` - End of day reflection\n- `weekly-synthesis` - Find patterns in your week\n- `create-command` - Build new custom commands\n- `de-ai-ify` - Remove AI writing patterns from text\n- `upgrade` - Update to the latest claudesidian version\n- `init-bootstrap` - Re-run the setup wizard\n- `install-claudesidian-command` - Install shell command to launch vault from\n  anywhere\n\nRun with: `/[command-name]` in Claude Code\n\n### Staying Updated with `/upgrade`\n\nClaudesidian automatically checks for updates when you start Claude Code and\nwill remind you to run `/upgrade` when new features are available.\n\nThe upgrade command intelligently merges new features while preserving your\ncustomizations:\n\n```bash\n# Preview what would be updated (recom",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:19.637567"
  },
  {
    "basic_info": {
      "name": "devtools-debugger-mcp",
      "full_name": "ScriptedAlchemy/devtools-debugger-mcp",
      "owner": "ScriptedAlchemy",
      "description": "An MCP server exposing full Chrome DevTools Protocol debugging: breakpoints, step/run, call stacks, eval, and source maps.",
      "url": "https://github.com/ScriptedAlchemy/devtools-debugger-mcp",
      "clone_url": "https://github.com/ScriptedAlchemy/devtools-debugger-mcp.git",
      "ssh_url": "git@github.com:ScriptedAlchemy/devtools-debugger-mcp.git",
      "homepage": null,
      "created_at": "2025-09-12T04:04:46Z",
      "updated_at": "2025-10-04T15:51:45Z",
      "pushed_at": "2025-10-02T19:59:07Z"
    },
    "stats": {
      "stars": 327,
      "forks": 18,
      "watchers": 327,
      "open_issues": 2,
      "size": 88
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 44665,
        "TypeScript": 25033
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Node.js Debugger MCP\n\nAn MCP server that provides comprehensive Node.js debugging capabilities using the Chrome DevTools Protocol. This server enables AI assistants to debug Node.js applications with full access to breakpoints, stepping, variable inspection, call stacks, expression evaluation, and source maps.\n\n## Why use this MCP server?\nThis MCP server is useful when you need AI assistance with debugging Node.js applications. It provides programmatic access to all the debugging features you'd find in Chrome DevTools or VS Code, allowing AI assistants to help you set breakpoints, inspect variables, step through code, and analyze runtime behavior. \n\n## Features\n\n- **Full Node.js debugger**: Set breakpoints, conditional breakpoints, logpoints, and pause-on-exceptions\n- **Stepping controls**: Step over/into/out, continue to location, restart frame\n- **Variable inspection**: Explore locals/closure scopes, `this` preview, and drill down into object properties\n- **Expression evaluation**: Evaluate JavaScript expressions in the current call frame with console output capture\n- **Call stack analysis**: Inspect call stacks and pause-state information\n- **Source map support**: Debug TypeScript and other transpiled code with full source map support\n- **Console monitoring**: Capture and review console output during debugging sessions\n\n## Installation\n\n```bash\nnpm install devtools-debugger-mcp\n```\n\n## Configuration\n\nAdd the server to your MCP settings configuration:\n\n```json\n{\n  \"devtools-debugger-mcp\": {\n    \"command\": \"node\",\n    \"args\": [\"path/to/devtools-debugger-mcp/dist/index.js\"]\n  }\n}\n```\n\nAlternatively, if installed globally, you can use the CLI binary:\n\n```json\n{\n  \"devtools-debugger-mcp\": {\n    \"command\": \"devtools-debugger-mcp\"\n  }\n}\n```\n\n## Node.js Debugging\n\nThis MCP server can debug Node.js programs by launching your script with the built‑in inspector (`--inspect-brk=0`) and speaking the Chrome DevTools Protocol (CDP).\n\nHow it works\n- `start_node_debug` spawns `node --inspect-brk=0 your-script.js`, waits for the inspector WebSocket, attaches, and returns the initial pause (first line) with a `pauseId` and top call frame.\n- You can then set breakpoints (by file path or URL regex), choose pause-on-exceptions, and resume/step. At each pause, tools can inspect scopes, evaluate expressions, and read console output captured since the last step/resume.\n- When the process exits, the server cleans up the CDP session and resets its state.\n\nQuickstart (from an MCP-enabled client)\n1) Start a debug session\n```json\n{ \"tool\": \"start_node_debug\", \"params\": { \"scriptPath\": \"/absolute/path/to/app.js\" } }\n```\n2) Set a breakpoint (file path + 1-based line)\n```json\n{ \"tool\": \"set_breakpoint\", \"params\": { \"filePath\": \"/absolute/path/to/app.js\", \"line\": 42 } }\n```\n3) Run to next pause (optionally include console/stack)\n```json\n{ \"tool\": \"resume_execution\", \"params\": { \"includeConsole\": true, \"includeStack\": true } }\n```\n4) Inspect at a pause\n```json\n{ \"tool\": \"inspect_scopes\", \"params\": { \"maxProps\": 15 } }\n{ \"tool\": \"evaluate_expression\", \"params\": { \"expr\": \"user.name\" } }\n```\n5) Step\n```json\n{ \"tool\": \"step_over\" }\n{ \"tool\": \"step_into\" }\n{ \"tool\": \"step_out\" }\n```\n6) Finish\n```json\n{ \"tool\": \"stop_debug_session\" }\n```\n\nNode.js tool reference (summary)\n- `start_node_debug({ scriptPath, format? })` — Launches Node with inspector and returns initial pause.\n- `set_breakpoint({ filePath, line })` — Breakpoint by file path (1-based line).\n- `set_breakpoint_condition({ filePath?, urlRegex?, line, column?, condition, format? })` — Conditional breakpoint or by URL regex.\n- `add_logpoint({ filePath?, urlRegex?, line, column?, message, format? })` — Logpoint via conditional breakpoint that logs and returns `false`.\n- `set_exception_breakpoints({ state })` — `none | uncaught | all`.\n- `blackbox_scripts({ patterns })` — Ignore frames from matching script URLs.\n- `list_scripts()` / `get_script_source({ scriptId? | url? })` — Discover and fetch script sources.\n- `continue_to_location({ filePath, line, column? })` — Run until a specific source location.\n- `restart_frame({ frameIndex, pauseId?, format? })` — Re-run the selected frame.\n- `resume_execution({ includeScopes?, includeStack?, includeConsole?, format? })` — Continue to next pause or exit.\n- `step_over|step_into|step_out({ includeScopes?, includeStack?, includeConsole?, format? })` — Stepping with optional context in the result.\n- `evaluate_expression({ expr, pauseId?, frameIndex?, returnByValue?, format? })` — Evaluate in a paused frame; defaults to top frame.\n- `inspect_scopes({ maxProps?, pauseId?, frameIndex?, includeThisPreview?, format? })` — Locals/closures and `this` summary.\n- `get_object_properties({ objectId, maxProps?, format? })` — Drill into object previews.\n- `list_call_stack({ depth?, pauseId?, includeThis?, format? })` — Top N frames summary.\n- `get_pause_info({ pauseId?, format? })` — Pause reason/location summary.\n- `read_console({ format? })` — Console message",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:20.778661"
  },
  {
    "basic_info": {
      "name": "PatchMon",
      "full_name": "PatchMon/PatchMon",
      "owner": "PatchMon",
      "description": "Linux Patch Monitoring Automation Platform",
      "url": "https://github.com/PatchMon/PatchMon",
      "clone_url": "https://github.com/PatchMon/PatchMon.git",
      "ssh_url": "git@github.com:PatchMon/PatchMon.git",
      "homepage": "https://patchmon.net",
      "created_at": "2025-09-16T13:23:41Z",
      "updated_at": "2025-10-08T23:25:37Z",
      "pushed_at": "2025-10-08T17:55:52Z"
    },
    "stats": {
      "stars": 325,
      "forks": 16,
      "watchers": 325,
      "open_issues": 44,
      "size": 1384
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 1046119,
        "Shell": 151736,
        "PLpgSQL": 3738,
        "CSS": 3164,
        "Dockerfile": 2796,
        "HTML": 702
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "apt",
        "apt-get",
        "centos",
        "debian",
        "dnf",
        "docker",
        "linux",
        "node",
        "redhat",
        "ubuntu",
        "updates",
        "yum"
      ]
    },
    "content": {
      "readme": "# PatchMon - Linux Patch Monitoring made Simple\n\n[![Website](https://img.shields.io/badge/Website-patchmon.net-blue?style=for-the-badge)](https://patchmon.net)\n[![Discord](https://img.shields.io/badge/Discord-Join%20Server-blue?style=for-the-badge&logo=discord)](https://patchmon.net/discord)\n[![GitHub](https://img.shields.io/badge/GitHub-Repository-black?style=for-the-badge&logo=github)](https://github.com/9technologygroup/patchmon.net)\n[![Roadmap](https://img.shields.io/badge/Roadmap-View%20Progress-green?style=for-the-badge&logo=github)](https://github.com/users/9technologygroup/projects/1)\n[![Documentation](https://img.shields.io/badge/Documentation-docs.patchmon.net-blue?style=for-the-badge&logo=book)](https://docs.patchmon.net/)\n\n---\n\n## Please STAR this repo :D\n\n## Purpose\n\nPatchMon provides centralized patch management across diverse server environments. Agents communicate outbound-only to the PatchMon server, eliminating inbound ports on monitored hosts while delivering comprehensive visibility and safe automation.\n\n![Dashboard Screenshot](https://raw.githubusercontent.com/PatchMon/PatchMon/main/dashboard.jpeg)\n\n## Features\n\n### Dashboard\n- Customisable dashboard with per‑user card layout and ordering\n\n### Users & Authentication\n- Multi-user accounts (admin and standard users)\n- Roles, Permissions & RBAC\n\n### Hosts & Inventory\n- Host inventory/groups with key attributes and OS details\n- Host grouping (create and manage host groups)\n\n### Packages & Updates\n- Package inventory across hosts\n- Outdated packages overview and counts\n- Repositories per host tracking\n\n### Agent & Data Collection\n- Agent version management and script content stored in DB\n\n### Settings & Configuration\n- Server URL/protocol/host/port\n- Signup toggle and default user role selection\n\n### API & Integrations\n- REST API under `/api/v1` with JWT auth\n- **Proxmox LXC Auto-Enrollment** - Automatically discover and enroll LXC containers from Proxmox hosts ([Documentation](PROXMOX_AUTO_ENROLLMENT.md))\n\n### Security\n- Rate limiting for general, auth, and agent endpoints\n- Outbound‑only agent model reduces attack surface\n\n### Deployment & Operations\n- Docker installation & One‑line self‑host installer (Ubuntu/Debian)\n- systemd service for backend lifecycle\n- nginx vhost for frontend + API proxy; optional Let’s Encrypt integration\n\n\n## Getting Started\n\n### PatchMon Cloud (coming soon)\n\nManaged, zero-maintenance PatchMon hosting. Stay tuned.\n\n### Self-hosted Installation\n\n#### Docker (preferred)\n\nFor getting started with Docker, see the [Docker documentation](https://github.com/PatchMon/PatchMon/blob/main/docker/README.md)\n\n#### Native Install (advanced/non-docker)\n\nRun on a clean Ubuntu/Debian server with internet access:\n\n#### Debian:\n```bash\napt update -y\napt upgrade -y\napt install curl -y\n```\n\n#### Ubuntu:\n```bash\napt-get update -y\napt-get upgrade -y\napt install curl -y\n```\n\n#### Script\n```bash\ncurl -fsSL -o setup.sh https://raw.githubusercontent.com/PatchMon/PatchMon/refs/heads/main/setup.sh && chmod +x setup.sh && bash setup.sh\n```\n\n#### Minimum specs for building : #####\nCPU : 2 vCPU\nRAM : 2GB\nDisk : 15GB\n\nDuring setup you’ll be asked:\n- Domain/IP: public DNS or local IP (default: `patchmon.internal`)\n- SSL/HTTPS: `y` for public deployments with a public IP, `n` for internal networks\n- Email: only if SSL is enabled (for Let’s Encrypt)\n- Git Branch: default is `main` (press Enter)\n\nThe script will:\n- Install prerequisites (Node.js, PostgreSQL, nginx)\n- Clone the repo, install dependencies, build the frontend, run migrations\n- Create a systemd service and nginx site vhost config\n- Start the service and write a consolidated info file at:\n  - `/opt/<your-domain>/deployment-info.txt`\n  - Copies the full installer log to `/opt/<your-domain>/patchmon-install.log` from /var/log/patchmon-install.log\n\nAfter installation:\n- Visit `http(s)://<your-domain>` and complete first-time admin setup\n- See all useful info in `deployment-info.txt`\n\n## Forcing updates after host package changes\nShould you perform a manual package update on your host and wish to see the results reflected in PatchMon quicker than the usual scheduled update, you can trigger the process manually by running:\n```bash\n/usr/local/bin/patchmon-agent.sh update\n```\n\nThis will send the results immediately to PatchMon.\n\n## Communication Model\n\n- Outbound-only agents: servers initiate communication to PatchMon\n- No inbound connections required on monitored servers\n- Secure server-side API with JWT authentication and rate limiting\n\n## Architecture\n\n- Backend: Node.js/Express + Prisma + PostgreSQL\n- Frontend: Vite + React\n- Reverse proxy: nginx\n- Database: PostgreSQL\n- System service: systemd-managed backend\n\n```mermaid\nflowchart LR\n    A[End Users / Browser<br>Admin UI / Frontend] -- HTTPS --> B[nginx<br>serve FE, proxy API]\n    B -- HTTP --> C[\"Backend<br>(Node/Express)<br>/api, auth, Prisma\"]\n    C -- TCP --> D[PostgreSQL<br>Database]\n\n    E[\"Agents on your servers (Outbound Only)\"] --",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:21.924936"
  },
  {
    "basic_info": {
      "name": "snippets-vless-reverse-proxy",
      "full_name": "neibcn/snippets-vless-reverse-proxy",
      "owner": "neibcn",
      "description": null,
      "url": "https://github.com/neibcn/snippets-vless-reverse-proxy",
      "clone_url": "https://github.com/neibcn/snippets-vless-reverse-proxy.git",
      "ssh_url": "git@github.com:neibcn/snippets-vless-reverse-proxy.git",
      "homepage": null,
      "created_at": "2025-09-13T03:54:34Z",
      "updated_at": "2025-10-07T15:10:43Z",
      "pushed_at": "2025-09-13T04:37:09Z"
    },
    "stats": {
      "stars": 311,
      "forks": 319,
      "watchers": 311,
      "open_issues": 0,
      "size": 0
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 438
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:23.056042"
  },
  {
    "basic_info": {
      "name": "lokus",
      "full_name": "lokus-ai/lokus",
      "owner": "lokus-ai",
      "description": "Lokus - A modern, intuitive note-taking application with powerful editing capabilities",
      "url": "https://github.com/lokus-ai/lokus",
      "clone_url": "https://github.com/lokus-ai/lokus.git",
      "ssh_url": "git@github.com:lokus-ai/lokus.git",
      "homepage": "https://lokusmd.com",
      "created_at": "2025-09-13T05:58:38Z",
      "updated_at": "2025-10-09T02:12:00Z",
      "pushed_at": "2025-10-08T19:42:18Z"
    },
    "stats": {
      "stars": 252,
      "forks": 19,
      "watchers": 252,
      "open_issues": 42,
      "size": 58020
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 4650864,
        "TypeScript": 544271,
        "Rust": 384520,
        "CSS": 102031,
        "Shell": 12379,
        "Batchfile": 1020,
        "PowerShell": 982,
        "HTML": 815
      },
      "license": "MIT License",
      "topics": [
        "markdown",
        "notes",
        "open-source",
        "rust",
        "tauri"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n\n![Lokus Logo](assets/lokus-logo.svg)\n\n# Lokus\n\n**A lightning-fast, privacy-first knowledge management system built with Tauri and React**\n\n*Why settle for 10+ plugins when you can have everything built-in?*\n\n[![GitHub Stars](https://img.shields.io/github/stars/lokus-ai/lokus?style=social)](https://github.com/lokus-ai/lokus/stargazers)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](CONTRIBUTING.md)\n[![Discord](https://img.shields.io/badge/Discord-Join%20Us-7289DA?logo=discord&logoColor=white)](https://discord.gg/lokus)\n\n[🚀 Quick Start](#-quick-start) • [✨ Features](#-features) • [📸 Screenshots](#-screenshots) • [🗺️ Roadmap](#️-roadmap) • [🤝 Contributing](#-contributing)\n\n</div>\n\n---\n\n## 🎯 Why Lokus?\n\nBuilt by an Obsidian user who got tired of plugin dependencies. Lokus gives you **everything you need out of the box**:\n\n| Obsidian | Lokus |\n|----------|-------|\n| ❌ Requires Dataview plugin | ✅ Built-in database views |\n| ❌ Basic graph view | ✅ 2D/3D interactive graphs |\n| ❌ Canvas via plugin | ✅ Infinite canvas built-in |\n| ❌ $10/month for sync | ✅ Free sync via your cloud |\n| ⚡ ~100MB download | ⚡ ~10MB download |\n| 🐌 Electron-based | 🚀 Rust-powered (Tauri) |\n\n---\n\n## 📸 Screenshots\n\n<div align=\"center\">\n\n### 📝 Rich Markdown Editor with Real-time Preview\n![Editor View](assets/screenshots/screenshot-1.png)\n\n### 🕸️ 3D Knowledge Graph Visualization\n![Graph View](assets/screenshots/screenshot-2.png)\n\n### 📊 Bases - Notion-like Database Views\n![Bases Database](assets/screenshots/screenshot-3.png)\n\n### 🎨 Interactive Graph Navigation\n![Graph View 2](assets/screenshots/screenshot-4.png)\n\n### ✍️ Advanced Markdown Editing\n![Markdown Editing](assets/screenshots/screenshot-5.png)\n\n</div>\n\n---\n\n## ✨ Features\n\n### 📝 **Core Writing**\n- **Rich Markdown Editor** - Full GitHub Flavored Markdown support\n- **Wiki Links** - Bidirectional linking with `[[Note Name]]` syntax\n- **LaTeX Math** - Inline `$x^2$` and block `$$E=mc^2$$` equations\n- **Code Blocks** - Syntax highlighting for 100+ languages\n- **Tables** - Sortable, resizable tables with CSV export\n- **Task Lists** - `- [ ]` checkbox support with progress tracking\n\n### 📊 **Database Views (Bases)**\n- **Notion-like Tables** - Sort, filter, and group your notes\n- **Multiple Views** - Table, Gallery, Calendar (coming soon)\n- **Custom Properties** - Add metadata without frontmatter\n- **Smart Filters** - Query notes by tags, dates, properties\n- **Auto-create** - Default \"All Notes\" base on first use\n\n### 🕸️ **Knowledge Graph**\n- **2D & 3D Graphs** - Toggle between flat and spatial views\n- **Interactive Navigation** - Click nodes to open notes\n- **Link Strength** - Visual weight based on connections\n- **Filter by Tags** - Focus on specific topics\n- **Export** - Save graph as PNG/SVG\n\n### 🎨 **Customization**\n- **Theme Editor** - Real-time theme customization\n- **Dark/Light Mode** - With custom color schemes\n- **Font Control** - Choose your preferred fonts\n- **Layout Options** - Sidebar positions, panel sizes\n\n### 📧 **Gmail Integration**\n- **Import Emails** - Save emails as markdown notes\n- **Send from Notes** - Compose emails in markdown\n- **Attachment Support** - Keep email attachments\n- **Thread Tracking** - Maintain email context\n\n### 🚀 **Performance**\n- **Rust Backend** - Native performance with Tauri\n- **Instant Search** - Fast full-text search\n- **Small Footprint** - ~10MB vs Obsidian's ~100MB\n- **Quick Launch** - Sub-second startup time\n- **Local-First** - All data stays on your device\n\n### 🔌 **Extensibility**\n- **Plugin System** - VS Code-like extension API\n- **Hot Reload** - Develop plugins without restart\n- **Custom Commands** - Add keyboard shortcuts\n- **Editor Extensions** - Create custom markdown syntax\n\n---\n\n## 🚀 Quick Start\n\n### 📦 Download Pre-built Binaries\n\n**macOS** (Apple Silicon & Intel)\n```bash\n# Download latest .dmg from releases\n# Or install via Homebrew (coming soon)\n```\n\n**Windows**\n```bash\n# Download installer from releases\n# Portable version available\n```\n\n**Linux**\n```bash\n# AppImage (universal)\nwget https://github.com/lokus-ai/lokus/releases/latest/download/lokus.AppImage\nchmod +x lokus.AppImage\n./lokus.AppImage\n\n# Flatpak (coming soon)\n```\n\n### 🛠️ Build from Source\n\n**Prerequisites**\n- [Node.js](https://nodejs.org/) v18+\n- [Rust](https://rustup.rs/) (latest stable)\n\n```bash\n# Clone the repository\ngit clone https://github.com/lokus-ai/lokus.git\ncd lokus\n\n# Install dependencies\nnpm install\n\n# Run in development mode\nnpm run tauri dev\n\n# Build for production\nnpm run tauri build\n```\n\n---\n\n## 🗺️ Roadmap\n\n### ✅ **v1.0 - Current** (Released)\n- [x] Rich markdown editor\n- [x] Wiki links & backlinks\n- [x] 2D/3D knowledge graph\n- [x] Database views (Bases)\n- [x] Theme customization\n- [x] Gmail integration\n- [x] Plugin system\n\n### 🚧 **v1.1 - Next** (In Progress)\n- [ ] Mobile apps (iOS & Android)\n- [ ] Calendar ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:24.177607"
  },
  {
    "basic_info": {
      "name": "CF-Workers-BPSUB",
      "full_name": "cmliu/CF-Workers-BPSUB",
      "owner": "cmliu",
      "description": "Snipaste 节点订阅生成器",
      "url": "https://github.com/cmliu/CF-Workers-BPSUB",
      "clone_url": "https://github.com/cmliu/CF-Workers-BPSUB.git",
      "ssh_url": "git@github.com:cmliu/CF-Workers-BPSUB.git",
      "homepage": "https://BP.SUB.CMLiussss.net",
      "created_at": "2025-09-09T04:42:47Z",
      "updated_at": "2025-10-08T21:19:12Z",
      "pushed_at": "2025-10-07T10:54:53Z"
    },
    "stats": {
      "stars": 224,
      "forks": 229,
      "watchers": 224,
      "open_issues": 0,
      "size": 468
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 328105
      },
      "license": "GNU General Public License v3.0",
      "topics": []
    },
    "content": {
      "readme": "# 🚀 BPSUB - Cloudflare Snipaste 订阅生成器\n![bpsub](./bpsub.jpg)\n\n[![Cloudflare Workers](https://img.shields.io/badge/Cloudflare-Workers-orange)](https://workers.cloudflare.com/)\n[![Telegram](https://img.shields.io/badge/Telegram-@bestip_one-blue)](https://t.me/bestip_one)\n\n> **一个运行在 Cloudflare Workers 上的 Snipaste 订阅生成器，专为白嫖哥节点服务优化**\n\n## ✨ 项目简介\n\nCF-Workers-BPSUB 是一个基于 Cloudflare Workers 的轻量级 VLESS 代理订阅生成器。它能够：\n\n- 🌐 **智能节点管理**：自动获取白嫖哥提供的高质量节点\n- 🔄 **多格式支持**：支持生成 Clash、SingBox、V2Ray 等多种客户端格式\n- 📱 **用户友好**：提供美观的 Web 界面和二维码分享功能  \n- ⚡ **高性能**：基于 Cloudflare 全球 CDN，响应速度极快\n- 🛡️ **安全稳定**：支持 TLS 加密和多种传输协议\n\n## 🎯 核心功能\n\n### 订阅生成\n- **智能优选IP**：支持自定义优选IP列表，提升连接质量\n- **批量节点**：一键获取多个高质量节点\n- **格式转换**：自动适配不同客户端的订阅格式\n\n### 高级配置\n- **代理IP设置**：自定义代理IP，优化网络路径\n- **订阅转换**：集成订阅转换服务，支持规则分流\n- **环境变量**：通过环境变量灵活配置各项参数\n\n### 用户体验\n- **响应式界面**：适配桌面和移动设备\n- **一键复制**：快速复制订阅链接\n- **二维码生成**：手机扫码快速导入\n\n## 🚀 快速开始\n\n### 1. 部署到 Cloudflare Workers\n1. 访问 [Cloudflare Workers 控制台](https://dash.cloudflare.com/workers)\n2. 创建新的 Worker\n3. 复制 `_worker.js` 中的代码到 Worker 编辑器\n4. 保存并部署\n\n### 2. 配置环境变量（可选）\n\n在 Cloudflare Workers 控制台的「设置」→「变量」中添加：\n\n| 变量名 | 说明 |  示例 |\n|--------|------|---------------|\n| `HOST` | 可内置白嫖反代HOST，多元素使用`换行`或`,`做间隔 | `baipiao.cmliussss.abrdns.com` |\n| `SUBAPI` | 订阅转换后端地址 | `SUBAPI.CMLiussss.net` |\n| `SUBCONFIG` | 订阅转换配置文件 | `https://example.com/config.ini` |\n| `PROXYIP` | 默认代理IP地址 |  `proxyip.fxxk.dedyn.io:443` |\n| `ADD` | 默认优选IP列表（支持直接填写`ADDAPI`），多元素使用`换行`或`,`做间隔 | `1.1.1.1:443#CF`,`8.8.8.8:443#Google` |\n| `SUBNAME` | 订阅文件名称 |  `BPSUB` |\n| `PS` | 节点备注后缀 | `感谢白嫖哥` |\n\n## 📖 使用指南\n\n### 基础使用\n\n1. **访问 Web 界面**\n   ```\n   https://your-worker.your-subdomain.workers.dev/\n   ```\n\n2. **生成订阅链接**\n   - 在界面中配置优选IP列表\n   - 设置代理参数（可选）\n   - 点击「生成订阅链接」\n\n3. **导入客户端**\n   - 复制生成的订阅链接\n   - 在代理客户端中添加订阅\n   - 或扫描二维码快速导入\n\n### API 使用\n\n#### 获取订阅\n```bash\n# 基础订阅（Base64编码）\ncurl \"https://your-worker.workers.dev/sub\"\n\n# 自定义优选IP\ncurl \"https://your-worker.workers.dev/sub?ips=1.1.1.1:443#CF|8.8.8.8:443#Google\"\n\n# 设置代理IP  \ncurl \"https://your-worker.workers.dev/sub?proxyip=cdn.example.com:443\"\n\n# Clash 格式（需要 UA 包含 clash）\ncurl -H \"User-Agent: clash\" \"https://your-worker.workers.dev/sub\"\n```\n\n#### 获取节点数据\n```bash\n# 查看原始节点数据\ncurl \"https://your-worker.workers.dev/uuid.json\"\n```\n\n### 高级配置\n\n#### 优选IP格式\n```\n# 基本格式\n域名或IP:端口#备注\n\n# 示例\nvisa.cn#优选域名\n127.0.0.1:1234#本地测试  \n[2606:4700::]:2053#IPv6地址\n\n# API 格式（自动获取IP列表）\nhttps://example.com/api/ips.txt\n```\n\n#### SOCKS5 代理\n```bash\n# 单个节点使用 SOCKS5\ncurl \"https://your-worker.workers.dev/sub?socks5=127.0.0.1:1080\"\n\n# 全局 SOCKS5 代理\ncurl \"https://your-worker.workers.dev/sub?socks5=127.0.0.1:1080&global=true\"\n```\n\n## 🛠️ 开发指南\n\n### 本地开发\n\n```bash\n# 安装依赖\nnpm install\n\n# 启动开发服务器\nnpm run dev\n\n# 本地访问\n# http://localhost:8787\n```\n\n### 项目结构\n\n```\nCF-Workers-BPSUB/\n├── _worker.js          # 主要业务逻辑\n├── package.json        # 项目配置和依赖\n├── wrangler.toml       # Wrangler 配置文件\n└── README.md          # 项目文档\n```\n\n### 核心模块\n\n- **订阅生成**：处理 VLESS 链接生成和格式转换\n- **节点获取**：从白嫖哥 API 获取可用节点信息\n- **优选IP处理**：解析和管理用户自定义的优选IP列表\n- **Web界面**：提供用户友好的配置和管理界面\n\n## 📋 客户端兼容性\n\n### 完全支持\n- ✅ **V2Ray** / V2RayN / V2RayNG\n- ✅ **Clash** / Clash for Windows / ClashX\n- ✅ **SingBox** / SFI\n- ✅ **Shadowrocket** (iOS)\n\n### 自动识别\n程序会根据客户端 User-Agent 自动选择最佳订阅格式：\n- `clash` → Clash 格式\n- `sing-box` → SingBox 格式  \n- `v2ray` → V2Ray 格式\n- 其他 → 自动检测\n\n## 🔧 故障排除\n\n### 常见问题\n\n**Q: 订阅链接无法访问？**\nA: 检查 Worker 域名是否正确，确认服务已成功部署\n\n**Q: 节点连接失败？**  \nA: 尝试更换优选IP，或检查本地网络环境\n\n**Q: 订阅转换失败？**\nA: 检查 `SUBAPI` 环境变量是否配置正确\n\n**Q: 如何自定义节点备注？**\nA: 设置 `PS` 环境变量，或在优选IP中使用 `#备注` 格式\n\n### 调试技巧\n\n1. **查看节点数据**：访问 `/uuid.json` 端点\n2. **检查环境变量**：在 Workers 控制台确认配置\n3. **使用开发模式**：`npm run dev` 本地调试\n\n## 🤝 贡献指南\n\n欢迎提交 Issue 和 Pull Request！\n\n1. Fork 本仓库\n2. 创建特性分支：`git checkout -b feature/amazing-feature`\n3. 提交更改：`git commit -m 'Add amazing feature'`\n4. 推送分支：`git push origin feature/amazing-feature`\n5. 提交 Pull Request\n\n## 📞 支持与反馈\n\n- 🐛 **Bug 报告**：[GitHub Issues](https://github.com/cmliu/CF-Workers-BPSUB/issues)\n- 💡 **功能建议**：[GitHub Discussions](https://github.com/cmliu/CF-Workers-BPSUB/discussions)  \n- 📢 **交流群组**：[白嫖哥频道](https://t.me/bestip_one)\n\n## 🙏 致谢\n- [zizifn](https://github.com/zizifn/edgetunnel)：祖师爷\n- **[白嫖哥](https://t.me/bestip_one)**：提供高质量的免费节点服务\n- ~~fftk~~：不愿透露姓名的大佬\n- [肥羊短链](https://suburl.v1.mk/)：感谢提供免费短链服务\n- [Mingyu](https://github.com/ymyuuu/workers-vless)：ws+xhttp代码\n- [ca110us](https://github.com/ca110us/epeius)：trojan代码\n- [Alexandre Kojève](https://t.me/Enkelte_notif/784)：stallTCP优化\n- @houyiTFG：天书作者",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:25.319582"
  },
  {
    "basic_info": {
      "name": "maxheadbox",
      "full_name": "syxanash/maxheadbox",
      "owner": "syxanash",
      "description": "Tiny truly local voice-activated LLM Agent that runs on a Raspberry Pi",
      "url": "https://github.com/syxanash/maxheadbox",
      "clone_url": "https://github.com/syxanash/maxheadbox.git",
      "ssh_url": "git@github.com:syxanash/maxheadbox.git",
      "homepage": "",
      "created_at": "2025-09-21T09:46:21Z",
      "updated_at": "2025-10-08T02:28:16Z",
      "pushed_at": "2025-10-06T21:54:23Z"
    },
    "stats": {
      "stars": 204,
      "forks": 31,
      "watchers": 204,
      "open_issues": 1,
      "size": 49286
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 36944,
        "Ruby": 16232,
        "CSS": 4031,
        "Python": 2225,
        "HTML": 334
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "agent",
        "agentic-ai",
        "gemma3",
        "llm",
        "qwen3",
        "raspberry-pi",
        "raspberry-pi-5"
      ]
    },
    "content": {
      "readme": "# Max Headbox\n\n<p>\n  <img src=\"readme_assets/animated.gif\" alt=\"max animated face\" height=\"200\"/>\n  <img src=\"readme_assets/thinking.png\" alt=\"max thinking\" height=\"170\"/>\n</p>\n<p>\n  <img src=\"readme_assets/tools.png\" alt=\"max using tools\" height=\"180\"/>\n  <img src=\"readme_assets/sleeping.png\" alt=\"max sleeping\" height=\"180\"/>\n</p>\n\nMax Headbox is an open-source voice-activated LLM Agent designed to run on a Raspberry Pi. It can be configured to execute a variety of tools and perform actions.\n\n![blog](https://raw.githubusercontent.com/syxanash/awesome-web-desktops/refs/heads/main/assets/notebook.png) Read my [blog post](https://blog.simone.computer/an-agent-desktoy) about this project!\n\n## Hardware Requirements\n\nTo get Max Headbox up and running, you'll need the following hardware:\n\n* [Raspberry Pi 5](https://www.raspberrypi.com/products/raspberry-pi-5/) (tested on a 16GB and 8GB model)\n* A _microphone_ is necessary for voice commands. (I've used [this one](https://www.amazon.com/dp/B071WH7FC6) from Amazon)\n* [GeeekPi](https://www.amazon.com/dp/B0D7VDWBBC) Screen, Case, and Cooler: This all-in-one bundle from Amazon provides a screen, a protective case, and an active cooler to keep your Raspberry Pi running smoothly. (This bundle is optional but definitley use an active cooler!)\n\nIf you don't want to replicate the exact box form factor, you can still run it anywhere you want, just make sure you have about 6GB available to run the LLMs.\n\n## Software Requirements\n\nEnsure you have the following software installed before proceeding with the setup:\n\n* Ruby 3.3.0\n* Node 22\n* Python 3\n* Ollama\n\n## Setup and Installation\n\nFollow these steps to get Max Headbox set up and ready to run.\n\n### 1. Clone the repository\n\n```sh\ngit clone https://github.com/syxanash/maxheadbox.git\ncd maxheadbox\n```\n\n### 2. Install Node dependencies\n\n```sh\nnvm use\nnpm install\n```\n\n### 3. Install backend dependencies\n\nNavigate to the `backend/` directory and install the required Ruby and Python packages.\n\n```sh\ncd backend/\nbundle install\npip3 install -r requirements.txt\n```\n\n### 4. Set up Ollama\n\nAfter [installing Ollama](https://ollama.com/download/linux), pull the necessary language models:\n\n```sh\nollama pull gemma3:1b\nollama pull qwen3:1.7b\n```\n\nIn the settings select expose Ollama to the network:\n\n```\nsudo systemctl edit ollama.service\n```\n\nEnter the following conf:\n```\n[Service]\n\nEnvironment=\"OLLAMA_HOST=0.0.0.0\"\n```\n\nand then restart with: `sudo systemctl daemon-reload && sudo systemctl restart ollama`\n\n## Configure\n\nBefore starting the app, you need to configure the following variables in your `.env` file:\n\n```sh\nVITE_BACKEND_URL=http://192.168.0.1:4567\nVITE_WEBSOCKET_URL=ws://192.168.0.1:4567\nVITE_OLLAMA_URL=http://192.168.0.1:11434\n```\n\nThe first two variables use the same address since the WebSocket app also runs on Sinatra. If your Ollama instance is running on a different device, you'll need to specify its network address.\n\nBy default the recording directory is `/dev/shm/whisper_recordings` if you're developing and running the project on a different OS you can change this in your env file e.g.\n\n```\nRECORDINGS_DIR=\"~/Desktop/whisper_recordings\"\n```\n\n## Usage\n\nTo start the Max Headbox agent, run the following command from the root of the project directory:\n\n```sh\nnpm run start-prod\n```\n\nYou should now be able to see the app running on localhost.\nFor development instead run:\n\n```sh\nnpm run start-dev\n```\n\n## Creating Tools\n\nCreating tools is as simple as making a JavaScript module in `src/tools/` that exports an object with four properties: the tool's **name**, the **parameters** passed to the function, a **describe** field, and the function's main **execution** body.\nSome frontend tools may require backend API handlers to fetch information from the Pi hardware (since the frontend cannot query it directly) and expose it via REST. I created a folder in `backend/notions/` where I placed all these Ruby Sinatra routes.\n\nTake a look at what's already there to have an idea.\nThe tools with the `.txt` extension are provided for reference. If you want to import them into the agent, just rename the extension to `.js` or `.rb` for the backend ones.\n\n## Flow Diagram\n\n![flow chart](readme_assets/max-diagram.png)\n\n## Credits and Acknowledgments\n\nThis project wouldn't be possible without the following open-source projects and resources:\n\n* The voice activation was achieved using [Vosk](https://github.com/alphacep/vosk-api).\n* [faster-whisper](https://github.com/SYSTRAN/faster-whisper): Used for efficient and accurate voice transcription. For a detailed guide on setting it up locally, check out this [this tutorial](https://www.youtube.com/watch?v=3yLFWpKKbe8)!\n* The animated character in the UI was created by slightly modifying Microsoft's beautiful [Fluent Emoji](https://github.com/microsoft/fluentui-emoji) set.\n\n## FAQ\n\n### Why Ruby + Python?\n\nYes, I know, I should've made the whole backend layer in Python. It would've made more sense, but I didn't ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:26.487562"
  },
  {
    "basic_info": {
      "name": "Ai-Review",
      "full_name": "NeuroDong/Ai-Review",
      "owner": "NeuroDong",
      "description": "Large language model review prompts",
      "url": "https://github.com/NeuroDong/Ai-Review",
      "clone_url": "https://github.com/NeuroDong/Ai-Review.git",
      "ssh_url": "git@github.com:NeuroDong/Ai-Review.git",
      "homepage": null,
      "created_at": "2025-09-13T09:19:34Z",
      "updated_at": "2025-10-09T01:27:57Z",
      "pushed_at": "2025-10-08T14:12:31Z"
    },
    "stats": {
      "stars": 202,
      "forks": 21,
      "watchers": 202,
      "open_issues": 1,
      "size": 40853
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 34344,
        "HTML": 3369,
        "CSS": 969
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "[![Web demo](https://img.shields.io/badge/Web%20demo-Open-blue?logo=google-chrome)](https://neurodong.github.io/Ai-Review/)&nbsp;&nbsp;&nbsp;&nbsp;[![Prompt Engineering](https://img.shields.io/badge/Prompt%20Engineering-Enabled-brightgreen)](https://github.com/dair-ai/Prompt-Engineering-Guide)&nbsp;&nbsp;&nbsp;&nbsp;[![JavaScript](https://img.shields.io/badge/JavaScript-ES6-yellow?logo=javascript&logoColor=white)](#)&nbsp;&nbsp;&nbsp;&nbsp;[![HTML5](https://img.shields.io/badge/HTML5-5-orange?logo=html5&logoColor=white)](#)&nbsp;&nbsp;&nbsp;&nbsp;[![CSS3](https://img.shields.io/badge/CSS3-3-blue?logo=css3&logoColor=white)](#)\n\n<img src=\"https://github.com/NeuroDong/Ai-Review/blob/main/Logo.png\" width=\"100%\">\n\n[中文](README_CH.md)\n# About Ai-Review\nThis repository is dedicated to using AI to optimize paper writing and submission preparation, making it easier for researchers to check the strengths, weaknesses, and improvement suggestions of manuscripts.\n\nClick [here](https://neurodong.github.io/Ai-Review/) for a quick usage on web page. The following figure is a usage preview. \n\n<p align=\"center\">\n\t<img src=\"Show.gif\" alt=\"Usage Preview\" width=\"800\" />\n</p>\n\n# Continuous Update\nThis repository will be updated continuously for a long time. Welcome to use this repository, raise issues, and push requests to help optimize this template to help better community members' papers get accepted.\n\n# Review effect\nPlease see: [Review example of \"Deep Residual Learning for Image Recognition\"](Examples/Ai_review_in_Deep_Residual_Learning_for_Image_Recognition.pdf).\n\n# Updates & News\n- **[06/10/2025]** The web version adds \"Quick Try\" (no need for users to set up API), and also allows users to set up Deepseek API.\n- **[02/10/2025]** Updated the function of using Ai Review on the web page.\n- **[20/09/2025]** Added math symbol and formula checks to enforce vulnerabilities.\n- **[14/09/2025]** Added a review example in \"Deep Residual Learning for Image Recognition\".\n- **[14/09/2025]** Optimize Prompt so that Ai generates more detailed Strengths, Weaknesses, and Suggestions in the form of a secondary list.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:27.614583"
  },
  {
    "basic_info": {
      "name": "cc-cli",
      "full_name": "cjh-store/cc-cli",
      "owner": "cjh-store",
      "description": "claude code工具集合",
      "url": "https://github.com/cjh-store/cc-cli",
      "clone_url": "https://github.com/cjh-store/cc-cli.git",
      "ssh_url": "git@github.com:cjh-store/cc-cli.git",
      "homepage": null,
      "created_at": "2025-09-21T05:55:01Z",
      "updated_at": "2025-10-09T01:19:29Z",
      "pushed_at": "2025-10-08T09:45:56Z"
    },
    "stats": {
      "stars": 197,
      "forks": 14,
      "watchers": 197,
      "open_issues": 1,
      "size": 350
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 186051
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# CC CLI - Claude Code 配置管理工具\n\n**Language**: [中文](README.md) | [English](README_EN.md)\n\n[![NPM版本](https://img.shields.io/npm/v/@cjh0/cc-cli.svg)](https://www.npmjs.com/package/@cjh0/cc-cli)\n[![下载量](https://img.shields.io/npm/dm/@cjh0/cc-cli.svg)](https://www.npmjs.com/package/@cjh0/cc-cli)\n![License](https://img.shields.io/badge/license-MIT-green.svg)\n\n一键切换 claude code / codex 配置的命令行工具。支持多站点、多 Token 管理，智能合并配置，WebDAV 云端备份，无需手动修改配置文件。\n\n## 📸 界面预览\n\n![配置切换界面](https://qm-cloud.oss-cn-chengdu.aliyuncs.com/test/otherType/PixPin_2025-09-30_08-42-40.png)\n\n## 📑 目录\n\n- [✨ 核心功能](#-核心功能)\n- [📦 安装使用](#-安装使用)\n- [🚀 使用方法](#-使用方法)\n- [📋 配置文件说明](#-配置文件说明)\n\n## ✨ 核心功能\n\n- 🔄 **一键切换** - 快速切换不同的 API 站点和 Token\n- 📋 **配置管理** - 查看、添加、删除 API 配置\n- 🔗 **智能合并** - 自动与 Claude Code 配置文件同步\n- ⚙️ **完整支持** - 支持所有 Claude Code 配置项\n- 💻 **Codex 支持** - 管理 Claude Code Codex 配置（仅支持 Claude 模型），支持开启/关闭 YOLO 模式\n- 🚀 **YOLO 模式** - 为 Claude Code API 和 Codex 提供最宽松配置模式，无条件批准所有工具使用请求\n- ☁️ **WebDAV 备份** - 支持配置文件云端备份与恢复（坚果云、其他标准 WebDAV 等）\n  - **CC-CLI 配置备份** - 📁.cc-cli 下 api_config.json 等等\n  - **Claude Code 配置备份** - 📄 settings.json 📄 CLAUDE.md 📁 agents/ 📁 commands/\n  - **Codex 备份** - 📄 config.toml 📄 auth.json 📄 AGENTS.md\n\n## 📦 安装使用\n\n```bash\n# 全局安装\nnpm install -g @cjh0/cc-cli\n```\n\n## 🚀 使用方法\n\n### 主要命令\n\n```bash\n# 启动交互式界面\ncc\n# 如果遇到命令冲突，使用备用命令\ncc-cli\n\n# Claude配置管理\ncc api\n\n# 快速切换 API 配置\ncc apiuse\n\n# 查看当前状态\ncc status\n\n# 查看帮助\ncc --help\n```\n\n**⚠️ 命令冲突解决**：如果遇到 `clang: error` 错误，说明 `cc` 命令与系统的 C 编译器冲突，请使用 `cc-cli` 命令\n\n## 📋 配置文件说明\n\n### 智能配置合并\n\n工具会自动将你选择的 API 配置与现有的 Claude Code/codex 设置合并，保留所有原有配置项，只更新 API 相关设置。\n\n### 配置格式示例\n\n```json\n{\n  \"sites\": {\n    \"XX公益站\": {\n      \"url\": \"https://api.example.com\",\n      \"description\": \"同时支持Claude Code和Codex\",\n      \"claude\": {\n        \"env\": {\n          \"ANTHROPIC_BASE_URL\": \"https://api.example.com\",\n          \"ANTHROPIC_AUTH_TOKEN\": {\n            \"主力Token\": \"sk-xxxxxxxxxxxxxx\",\n            \"备用Token\": \"sk-yyyyyyyyyyyyyy\"\n          }\n        }\n      },\n      \"codex\": {\n        \"OPENAI_API_KEY\": \"sk-xxxxxxxxxxxxxx\",\n        \"model\": \"gpt-5\",\n        \"model_reasoning_effort\": \"high\",\n        \"model_providers\": {\n          \"duckcoding\": {\n            \"name\": \"duckcoding\",\n            \"base_url\": \"https://jp.duckcoding.com/v1\"\n          }\n        }\n      }\n    },\n    // 具体看注释\n    \"XX公益站2\": {\n      \"url\": \"https://api.demo.com\", // （可选）站点的地址 免得忘记公益站点，后期会支持一键打开\n      \"description\": \"仅支持Claude Code API\", // 随意 可不填\n      // Claude Code API配置（最简配置，兼容官方大部分配置，会覆盖配置文件）\n      \"claude\": {\n        \"env\": {\n          \"ANTHROPIC_BASE_URL\": \"https://api.demo.com\",\n          // Token支持两种格式：\n          // 1. 对象格式（支持多个token）\n          \"ANTHROPIC_AUTH_TOKEN\": {\n            \"Token1\": \"sk-aaaaaaaaaaaaaaa\",\n            \"Token2\": \"sk-bbbbbbbbbbbbbbb\"\n          }\n          // 2. 字符串格式（单个token，自动命名为\"默认Token\"）\n          // \"ANTHROPIC_AUTH_TOKEN\": \"sk-xxxxxxxxxxxxxx\"\n        }\n      },\n      // Codex API配置(最简配置，兼容官方大部分配置)\n      \"codex\": {\n        // API Key同样支持两种格式：\n        // 1. 对象格式（支持多个API Key）\n        \"OPENAI_API_KEY\": {\n          \"主要Key\": \"sk-xxxxxxxxxxxxxx\",\n          \"测试Key\": \"sk-zzzzzzzzzzzzzzz\"\n        },\n        // 2. 字符串格式（单个API Key，自动命名为\"默认API Key\"）\n        // \"OPENAI_API_KEY\": \"sk-xxxxxxxxxxxxxx\",\n        \"model\": \"gpt-5-code\", // 使用Claude模型\n        \"model_reasoning_effort\": \"medium\", // 推理强度：low/medium/high\n        \"model_providers\": {\n          \"custom_provider\": {\n            \"name\": \"custom_provider\",\n            \"base_url\": \"https://api.demo.com/v1\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n## 🔄 工作原理\n\n### WebDAV 备份功能\n\n支持将配置文件备份到云端存储，确保配置安全：\n\n#### 支持的 WebDAV 服务\n\n- **坚果云** - `https://dav.jianguoyun.com/dav/`\n- **其他 WebDAV 服务** - 任何标准 WebDAV 协议服务\n\n#### 备份内容\n\n- **CC-CLI 配置** - 📁.cc-cli 下 api_config.json 等等\n- **Claude Code 配置** - 📄 settings.json 📄 CLAUDE.md 📁 agents/ 📁 commands/\n- **Codex 配置** - 📄 config.toml 📄 auth.json 📄 AGENTS.md\n\n#### 功能特性\n\n- 🔐 **安全认证** - 支持用户名密码认证\n- 📦 **选择性备份** - 可选择备份特定配置类别\n- 🕒 **自动清理** - 自动保留最新 5 个备份文件\n- 🔄 **完整恢复** - 支持选择备份文件和配置类别恢复\n- 📊 **状态监控** - 实时显示备份状态和云端连接情况\n\n## ⭐ Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=cjh-store/cc&type=Date)](https://star-history.com/#cjh-store/cc&Date)\n\n---\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:28.765572"
  },
  {
    "basic_info": {
      "name": "aspipes",
      "full_name": "irony/aspipes",
      "owner": "irony",
      "description": null,
      "url": "https://github.com/irony/aspipes",
      "clone_url": "https://github.com/irony/aspipes.git",
      "ssh_url": "git@github.com:irony/aspipes.git",
      "homepage": null,
      "created_at": "2025-10-04T06:57:00Z",
      "updated_at": "2025-10-09T00:20:38Z",
      "pushed_at": "2025-10-08T20:32:54Z"
    },
    "stats": {
      "stars": 167,
      "forks": 2,
      "watchers": 167,
      "open_issues": 1,
      "size": 64
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 37463
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# asPipes: working pipelines today in pure JavaScript\n\n## 1 Summary\n\nasPipes is an experimental runtime abstraction that models the semantics of the proposed |> pipeline operator, implemented entirely in standard JavaScript (ES2020+).\nIt demonstrates that pipeline-style composition can be expressed using the existing coercion semantics of the bitwise OR operator (|) and Symbol.toPrimitive.\n\nThe implementation is small (<50 lines) and supports both synchronous and asynchronous evaluation with a familiar syntax:\n\n```javascript\nconst greeting = pipe('hello');\n\ngreeting \n  | upper \n  | ex('!!!');\n\nawait greeting.run(); // → \"HELLO!!!\"\n```\n\n## Installation\n\n```bash\nnpm install aspipes\n```\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n```\n\n⸻\n\n## 2 Motivation\n\nThe pipeline operator proposal (tc39/proposal-pipeline-operator) has been under discussion for several years, exploring multiple variants (F#, Smart, Hack, etc.).\nThe asPipes experiment aims to:\n\n- prototype F#-style semantics directly in today’s JavaScript;\n- study ergonomics and readability in real-world code;\n- show that deferred, referentially transparent composition can be achieved without syntax extensions; and\n- inform the design conversation with practical, user-level feedback.\n\n⸻\n\n## 3 Design Goals\n\n- ✅ Composable — each transformation behaves like a unary function of the previous result.\n- ✅ Deferred — no execution until .run() is called.\n- ✅ Async-safe — promises and async functions are first-class citizens.\n- ✅ Stateless — no global mutation; every pipeline owns its own context.\n- ✅ Ergonomic — visually aligns with the future |> operator.\n\n⸻\n\n## 4 Core API\n\n### Installation and Import\n\n```bash\nnpm install aspipes\n```\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n```\n\n### createAsPipes()\n\nCreates an isolated pipeline environment and returns:\n\n```javascript\n{\n  pipe, // begin a pipeline\n  asPipe // lift a function into a pipeable form\n}\n```\n\npipe(initialValue)\n\nBegins a new pipeline with initialValue.\nThe returned object intercepts | operations via Symbol.toPrimitive.\nCall .run() to evaluate and retrieve the final result (async).\n\nasPipe(fn)\n\nWraps a function fn so that it can be used in a pipeline:\n\n```javascript\nconst upper = asPipe((s) => s.toUpperCase());\nconst ex = asPipe((s, mark = '!') => s + mark);\n```\n\nPipeable functions can also be called with arguments:\n\n```javascript\npipe('hello') \n  | upper \n  | ex('!!!');\n```\n\n.run()\n\nEvaluates the accumulated transformations sequentially, returning a Promise of the final value.\n\n## 5 Examples\n\n**A. String pipeline**\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\nconst upper = asPipe((s) => s.toUpperCase());\nconst ex = asPipe((s, mark = '!') => s + mark);\n\nconst greeting = pipe('hello');\ngreeting \n  | upper \n  | ex('!!!');\n  \nconsole.log(await greeting.run()); // \"HELLO!!!\"\n```\n\n**B. Numeric pipeline**\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\nconst inc = asPipe((x) => x + 1);\nconst mul = asPipe((x, k) => x * k);\n\nconst calc = pipe(3);\ncalc \n  | inc \n  | mul(10);\n\nconsole.log(await calc.run()); // 40\n```\n\n**C. Async composition (LLM API call)**\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\nconst postJson = asPipe((url, body, headers = {}) =>\n  fetch(url, {\n    method: 'POST',\n    headers: { 'content-type': 'application/json', ...headers },\n    body: JSON.stringify(body),\n  }),\n);\nconst toJson = asPipe((r) => r.json());\nconst pick = asPipe((o, ...keys) => keys.reduce((a, k) => a?.[k], o));\nconst trim = asPipe((s) => (typeof s === 'string' ? s.trim() : s));\n\nconst ENDPOINT = 'https://api.berget.ai/v1/chat/completions';\nconst BODY = {\n  model: 'gpt-oss',\n  messages: [\n    { role: 'system', content: 'Reply briefly.' },\n    { role: 'user', content: 'Write a haiku about mountains.' },\n  ],\n};\n\nconst haiku = pipe(ENDPOINT);\nhaiku \n| postJson(BODY) \n| toJson \n| pick('choices', 0, 'message', 'content') \n| trim;\nconsole.log(await haiku.run());\n```\n\n**D. Composable pipes (Higher-Order Pipes)**\n\nPipes can be composed into reusable, named higher-order pipes by wrapping them with `asPipe`. The implementation automatically detects and executes pipeline expressions, enabling clean, direct syntax:\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\n// Assume postJson, toJson, pick, trim are defined (see example C)\n\n// Create reusable bot operations\nconst askBot = asPipe((question) => {\n  const p = pipe('https://api.berget.ai/v1/chat/completions');\n  p \n  | postJson({\n      model: 'gpt-oss',\n      messages: [{ role: 'user', content: question }],\n    }) \n  | toJson \n  | pick('choices', 0, 'message', 'content') \n  | trim;\n  return p;\n});\n\nconst summarize = asPipe((text) => {\n  const p = pipe('https://api.berget.ai/v1/chat/completions');\n  p \n  | postJson({\n      model: 'gpt-oss',\n      messag",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:29.899671"
  },
  {
    "basic_info": {
      "name": "NCE-Flow",
      "full_name": "luzhenhua/NCE-Flow",
      "owner": "luzhenhua",
      "description": "新概念英语在线点读，点句即读、连续播放，支持 EN / EN+CN / CN。",
      "url": "https://github.com/luzhenhua/NCE-Flow",
      "clone_url": "https://github.com/luzhenhua/NCE-Flow.git",
      "ssh_url": "git@github.com:luzhenhua/NCE-Flow.git",
      "homepage": "https://nce.luzhenhua.cn",
      "created_at": "2025-10-07T06:14:22Z",
      "updated_at": "2025-10-09T02:17:42Z",
      "pushed_at": "2025-10-08T05:27:54Z"
    },
    "stats": {
      "stars": 166,
      "forks": 52,
      "watchers": 166,
      "open_issues": 2,
      "size": 940
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 12151,
        "CSS": 7401,
        "HTML": 6811
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "<div align=\"center\">\n\n# NCE Flow\n\nTap any sentence, keep reading.  \n简约 · 高效 · 专注的新概念英语在线点读（NCE1–NCE4）。\n\n</div>\n\n## ✨ 特性\n\n- 句子级点读：点击任一句，从该句开始连续播放，自动高亮并居中\n- 语言视图：EN / EN+CN / CN 三态切换（持久化保存）\n- 现代 UI：Apple 风格、浅深色自适应、顺滑过渡\n- 零依赖：纯静态 HTML/CSS/JS，可直接 GitHub Pages 部署\n- LRC 兼容：支持 `英文|中文` 同行，或“同时间戳上下两行”堆叠格式\n- 批量翻译：内置 `translate_lrc.py`，可将纯英文 LRC 转双语（可原地写回）\n\n## 🗂 目录结构\n\n```\nassets/          # 样式与脚本（styles.css, app.js, lesson.js）\nindex.html       # 首页（书目 + 课程列表）\nlesson.html      # 课文点读页\nstatic/data.json # 书目与课程元数据\nNCE1..NCE4/      # 音频与 LRC 资源（文件名与 data.json 一致）\n```\n\n## ⬇️ 获取完整代码\n\n请通过下述任一方式获取项目，以确保音频（mp3）完整：\n\n- 推荐：`git clone https://github.com/luzhenhua/NCE-Flow.git`\n- 或从 Releases 页面下载打包好的压缩包（含完整音频）：https://github.com/luzhenhua/NCE-Flow/releases\n\n注意：不要使用 GitHub 页面右上角的 “Code → Download ZIP”。该 ZIP 可能不包含完整的 mp3（或仅为指针文件），会导致页面无声音。\n\n## 🚀 本地运行\n\n建议使用本地静态服务器（避免浏览器对 file:// 的 fetch 限制）：\n\n```\npython3 -m http.server 8080\n# 访问 http://localhost:8080\n```\n\n或直接将仓库部署到 GitHub Pages（默认入口为根目录的 `index.html`）。\n\n## 🌐 演示与部署\n\n- 演示站托管：部署在 腾讯云 EdgeOne（静态托管）。\n- 项目为纯静态站点，理论上支持任意静态平台：Vercel、Cloudflare Pages、GitHub Pages 等。\n- 部署要点：确保静态资源完整上传（尤其是 `NCE1..NCE4/` 下的 mp3 与 lrc），入口指向 `index.html`。\n\n## 🎧 LRC 规范（本项目兼容两种）\n\n1) 同行双语（推荐）\n\n```\n[mm:ss.xx]English sentence | 中文译文\n```\n\n2) 上下两行（同时间戳）\n\n```\n[mm:ss.xx]English sentence\n[mm:ss.xx]中文译文\n```\n\n> 播放端自动识别两种格式；连续播放的分段时长会自动兜底（避免极短句抖动）。\n\n\n## 🙏 致谢\n\n- 原项目与灵感来源：iChochy/NCE（https://github.com/iChochy/NCE）\n\n  在此对原作者和社区表达感谢。\n\n- 首页整合书目与课程列表；\n- 课文页支持 EN/EN+CN/CN 三态语言视图；\n- 句子级点读 + 连续播放；\n- 视觉与动效统一（浅/深色自适应）。\n\n- 感谢贡献：\n  - https://github.com/reaishijie 提交的 PR（播放速度控制与持久化）：\n    https://github.com/luzhenhua/NCE-Flow/pull/3\n\n## 📄 协议\n\n本仓库代码遵循仓库内 LICENSE 文件所述协议。音频与文本内容版权归原权利人所有，仅用于学习研究，请勿转载或商用。\n\n---\n\n如有侵权，请联系：openai.luzhenhua@gmail.com，我们将尽快处理。\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:31.042886"
  },
  {
    "basic_info": {
      "name": "env_guard",
      "full_name": "bingcicle/env_guard",
      "owner": "bingcicle",
      "description": "env_guard",
      "url": "https://github.com/bingcicle/env_guard",
      "clone_url": "https://github.com/bingcicle/env_guard.git",
      "ssh_url": "git@github.com:bingcicle/env_guard.git",
      "homepage": null,
      "created_at": "2025-09-29T15:04:09Z",
      "updated_at": "2025-10-08T01:04:18Z",
      "pushed_at": "2025-09-29T15:06:15Z"
    },
    "stats": {
      "stars": 151,
      "forks": 0,
      "watchers": 151,
      "open_issues": 0,
      "size": 5
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 2102
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# env-guard\nSimple `.env` linter: detects duplicates, empty values, invalid key names, and diffs against `.env.example`.\n\n## Install & Use\n```bash\nnpm i -g .\nenv-guard --file .env --example .env.example\n```\nExits with code 1 on problems; prints “env-guard: OK” otherwise.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:32.263890"
  },
  {
    "basic_info": {
      "name": "shovel-heroes",
      "full_name": "shovel-heroes-org/shovel-heroes",
      "owner": "shovel-heroes-org",
      "description": "鏟子英雄",
      "url": "https://github.com/shovel-heroes-org/shovel-heroes",
      "clone_url": "https://github.com/shovel-heroes-org/shovel-heroes.git",
      "ssh_url": "git@github.com:shovel-heroes-org/shovel-heroes.git",
      "homepage": null,
      "created_at": "2025-10-01T11:29:17Z",
      "updated_at": "2025-10-08T10:38:19Z",
      "pushed_at": "2025-10-07T01:01:16Z"
    },
    "stats": {
      "stars": 132,
      "forks": 43,
      "watchers": 132,
      "open_issues": 28,
      "size": 530
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 435857,
        "TypeScript": 177852,
        "Shell": 4932,
        "CSS": 3897,
        "HTML": 398
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Shovel-Heros\n\n前端：Vite + React + Tailwind  \n後端：Fastify (Node.js) + PostgreSQL  \nAPI 規格：OpenAPI 3.1 (`api-spec/openapi.yaml`)\n\n目前支援兩種模式：\n1. Base44 SDK (預設)\n2. 自建 REST Backend (`packages/backend`)：設定 `VITE_USE_REST=true`\n\n---\n## 其他文件\n- [貢獻指南（Contributing Guide）](docs/CONTRIBUTING.md)\n- [安全政策（Security Policy）](docs/SECURITY.md)\n- [AGENTS.md](docs/AGENTS.md)\n\n## 目錄結構概覽\n\n```\napi-spec/                # OpenAPI 規格與 bundle 輸出\npackages/\n  backend/               # Fastify 後端\n  shared-types/          # OpenAPI 產出的共用 TS 型別\nsrc/                     # 前端 React 原始碼\n```\n\n---\n\n## 快速開始 (前端 + 後端)\n\n```bash\nnpm install                 # 安裝依賴\ndocker compose up -d db     # 啟動 Postgres (背景)\nnpm run dev:api             # 啟動後端 (Fastify)\nnpm run dev                 # 另開終端啟動前端\n```\n\n切換到 REST：建立 `.env` 或 `.env.local`：\n\n```\nVITE_USE_REST=true\nVITE_API_BASE=http://localhost:8787\n```\n\n> 後端若 8787 被占用會往上遞增（8788 / 8789 ...）請同步調整 `VITE_API_BASE`。\n\n---\n\n## 後端環境變數\n\n根目錄或 `packages/backend/.env` 任一可被 dotenv 讀取：\n\n```\nDATABASE_URL=postgres://postgres:postgres@localhost:5432/shovelheroes\nPORT=8787\nVITE_API_BASE=http://localhost:8787\nVITE_USE_REST=true\n```\n\n健康檢查：`GET /healthz` 回傳 `{ status, db }`。\n\n---\n\n## Backend 結構\n\n```\npackages/backend/src/\n  index.ts                     # Fastify 啟動與 plugin 註冊\n  lib/\n    db.ts                      # pg 連線池 + decorator\n    db-init.ts                 # 啟動時建表 (暫代 migrations)\n  modules/\n    disaster-areas/repo.ts     # 資料層 (其餘資源暫於 routes 直接操作)\n  routes/\n    disaster-areas.ts\n    grids.ts\n    volunteer-registrations.ts\n    supply-donations.ts\n    grid-discussions.ts\n    announcements.ts\n    users.ts\n    functions.ts\n    legacy.ts\n```\n\n> 目前僅 `disaster-areas` 使用 repo pattern；其餘後續可抽出 service/repo 分層。\n\n---\n\n## OpenAPI / 型別 / 文件\n\n規格檔：`api-spec/openapi.yaml`\n\n指令：\n```bash\nnpm run openapi:lint      # Spectral 驗證\nnpm run openapi:preview   # Redoc 預覽 (熱更新)\nnpm run openapi:bundle    # 輸出 bundle 版\nnpm run types:openapi     # 產生 TS 型別 → packages/shared-types/src/openapi.ts\n```\n\n引用方式：\n```ts\nimport type { components } from 'shovel-shared-types/src/openapi';\ntype Grid = components['schemas']['Grid'];\n```\n\n---\n\n## REST 模式（取代 Base44 SDK）\n\nREST 實作檔：\n\n- `src/api/rest/client.js`\n- `src/api/rest/entities.js`\n- `src/api/rest/functions.js`\n- `src/api/rest/index.js` (依 `VITE_USE_REST` 切換)\n\n將：\n```ts\nimport { Grid } from '@/api/entities';\n```\n改為：\n```ts\nimport { Grid } from '@/api/rest';\n```\n即可使用自建後端。若 `VITE_USE_REST !== 'true'` 仍回退 Base44。\n\n> `functions.js` 若要完全移除 Base44 依賴，需再 re-export REST 實作。\n\n---\n\n## 已實作 API 對照\n\n| 資源 | 動作 | 狀態 |\n|------|------|------|\n| disaster-areas | list/create/get/update/delete | Done |\n| grids | list/create/get/update/delete | Done |\n| volunteer-registrations | list/create/delete | Done |\n| supply-donations | list/create | Done |\n| grid-discussions | list/create | Done |\n| announcements | list/create | Done |\n| users | list | Done |\n| me | get | Done (stub auth) |\n| functions | csv export/import/template/fix/proxy | Done |\n| legacy | sync / roster | Done |\n| volunteers | list | Pending |\n\n尚未：`GET /volunteers`（需彙總 user + 報名統計）。\n\n---\n\n## 後續改進建議 & 工作清單\n\n1. Pagination：套用 `limit/offset` 至所有 list endpoints。\n2. 統一錯誤：建立 `replyError(code,message,status)` 並對齊 OpenAPI `components.responses`。\n3. 權限 / bearerAuth：JWT parsing + role 授權中介層。\n4. Migrations：導入 `node-pg-migrate` / `drizzle`；移除啟動建表。\n5. OpenAPI 型別整合：減少手寫 Zod，或產生 Zod schema。\n6. CSV 匯入強化：錯誤報告 / 重複檢測 / UPSERT。\n7. Volunteers endpoint：JOIN volunteer_registrations + users，電話遮罩。\n8. 日誌 / Observability：request id、pino-pretty、OpenTelemetry。\n9. 安全：rate limit、Helmet、欄位長度限制、CORS 白名單。\n10. 測試：Vitest + supertest CRUD / 匯入匯出測試。\n\nTODO Snapshot:\n```\n- [ ] GET /volunteers\n- [ ] 分頁參數應用\n- [ ] 統一錯誤格式 middleware\n- [ ] JWT 驗證 / user context\n- [ ] Migration 系統導入\n- [ ] 型別對齊（OpenAPI → code）\n- [ ] CSV 匯入強化\n- [ ] 基本測試覆蓋\n```\n\n---\n\n## Docker / 資料庫操作\n\n啟動：\n```bash\ndocker compose up -d db\n```\n重置：\n```bash\ndocker compose down -v && docker compose up -d db\n```\n\n---\n\n## FAQ\n\n**Q: `DATABASE_URL not set`?**  \nA: 確認 `.env` 內容與位置，重啟後端。\n\n**Q: Port 被占用?**  \nA: 服務自動遞增；需固定 8787：`lsof -i :8787` 查 PID。\n\n**Q: /me 401?**  \nA: 加 `Authorization: Bearer anything` 目前 stub 回假資料。\n\n**Q: 重新產生型別?**  \nA: `npm run types:openapi`。\n\n**Q: 切換 REST 模式?**  \nA: `.env` 設 `VITE_USE_REST=true` 並設定 `VITE_API_BASE`。\n\n---\n\n## 部署 (AWS EKS)\n\n本專案使用 GitHub Actions 自動部署至 AWS EKS (Elastic Kubernetes Service)。\n\n### 部署架構\n\n- **前端**: React + Nginx (容器化部署)\n- **後端**: Fastify (容器化部署)\n- **資料庫**: AWS RDS PostgreSQL\n- **負載平衡**: AWS Application Load Balancer (ALB)\n- **容器註冊**: Amazon ECR\n- **編排工具**: Kubernetes + Kustomize\n\n### 快速部署\n\n**自動部署**:\n```bash\n# 推送至 main 分支即觸發自動部署\ngit push origin main\n```\n\n**手動部署特定版本**:\n```bash\n# GitHub Actions → Deploy to EKS → Run workflow\n# 輸入 image_tag (例如: v1.0.0)\n```\n\n### 本地建置 Docker 映像檔\n\n```bash\n# 建置兩個映像檔\n./build.sh -t v1.0.0 -e staging\n\n# 僅建置後端\n./build.sh -b -t v1.0.0 -e staging\n\n# 僅建置前端\n./build.sh -f -t v1.0.0 -e staging\n\n# 建置並推送至 ECR\n./build.sh -t v1.0.0 -e staging -p --ecr-registry <ECR_URL>\n```\n\n### 部署文件\n\n- **[部署手冊 (Deployment R",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-09T02:19:33.417419"
  }
]