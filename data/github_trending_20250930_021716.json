[
  {
    "basic_info": {
      "name": "cagent",
      "full_name": "docker/cagent",
      "owner": "docker",
      "description": "Agent Builder and Runtime by Docker Engineering",
      "url": "https://github.com/docker/cagent",
      "clone_url": "https://github.com/docker/cagent.git",
      "ssh_url": "git@github.com:docker/cagent.git",
      "homepage": "",
      "created_at": "2025-09-01T12:14:45Z",
      "updated_at": "2025-09-29T22:09:32Z",
      "pushed_at": "2025-09-29T20:44:43Z"
    },
    "stats": {
      "stars": 1226,
      "forks": 115,
      "watchers": 1226,
      "open_issues": 47,
      "size": 12470
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 804827,
        "Dockerfile": 2127
      },
      "license": "Apache License 2.0",
      "topics": [
        "agents",
        "ai"
      ]
    },
    "content": {
      "readme": "# ü§ñ `cagent` ü§ñ\n\n> A powerful, easy to use, customizable multi-agent runtime that orchestrates AI agents with\n> specialized capabilities and tools, and the interactions between agents.\n\n![cagent in action](docs/assets/cagent-run.gif)\n\n## ‚ú® What is `cagent`? ‚ú®\n\n`cagent` lets you create and run intelligent AI agents, where each agent has\nspecialized knowledge, tools, and capabilities.\n\nThink of it as allowing you to quickly build, share and run a team of virtual experts that\ncollaborate to solve complex problems for you.\n\nAnd it's dead easy to use!\n\n‚ö†Ô∏è Note: `cagent` is in active development, **breaking changes are to be expected** ‚ö†Ô∏è\n\n### Your First Agent\n\nExample [basic_agent.yaml](/examples/basic_agent.yaml):\n\nCreating agents with cagent is very simple. They are described in a short yaml file, like this one:\n\n```yaml\nagents:\n  root:\n    model: openai/gpt-5-mini\n    description: A helpful AI assistant\n    instruction: |\n      You are a knowledgeable assistant that helps users with various tasks.\n      Be helpful, accurate, and concise in your responses.\n```\n\nRun it in a terminal with `cagent run basic_agent.yaml`.\n\nMany more examples can be found [here](/examples/README.md)!\n\n### Improving an agent with MCP tools\n\n`cagent` supports MCP servers, enabling agents to use a wide variety of external tools and services.\n\nIt supports three transport types: `stdio`, `http` and `sse`.\n\nGiving an agent access to tools via MCP is a quick way to greatly improve its capabilities, the quality of its results and its general useful-ness.\n\nGet started quickly with the [Docker MCP Toolkit](https://docs.docker.com/ai/mcp-catalog-and-toolkit/toolkit/) and [catalog](https://docs.docker.com/ai/mcp-catalog-and-toolkit/catalog/)\n\nHere, we're giving the same basic agent from the example above access to a **containerized** `duckduckgo` mcp server and it's tools by using Docker's MCP Gateway:\n\n```yaml\nversion: \"2\"\n\nagents:\n  root:\n    model: openai/gpt-5-mini\n    description: A helpful AI assistant\n    instruction: |\n      You are a knowledgeable assistant that helps users with various tasks.\n      Be helpful, accurate, and concise in your responses.\n    toolsets:\n      - type: mcp\n        ref: docker:duckduckgo # stdio transport\n```\n\nWhen using a containerized server via the Docker MCP gateway, you can configure any required settings/secrets/authentication using the [Docker MCP Toolkit](https://docs.docker.com/ai/mcp-catalog-and-toolkit/toolkit/#example-use-the-github-official-mcp-server) in Docker Desktop.\n\nAside from the containerized MCP severs the Docker MCP Gateway provides, any standard MCP server can be used with cagent!\n\nHere's an example similar to the above but adding `read_file` and `write_file` tools from the `rust-mcp-filesystem` MCP server:\n\n```yaml\nversion: \"2\"\n\nagents:\n  root:\n    model: openai/gpt-5-mini\n    description: A helpful AI assistant\n    instruction: |\n      You are a knowledgeable assistant that helps users with various tasks.\n      Be helpful, accurate, and concise in your responses. Write your search results to disk.\n    toolsets:\n      - type: mcp\n        ref: docker:duckduckgo\n      - type: mcp\n        command: rust-mcp-filesystem # installed with `cargo install rust-mcp-filesystem`\n        args: [\"--allow-write\", \".\"]\n        tools: [\"read_file\", \"write_file\"] # Optional: specific tools only\n        env:\n          - \"RUST_LOG=debug\"\n```\n\nSee [the USAGE docs](./docs/USAGE.md#tool-configuration) for more detailed information and examples\n\n### üéØ Key Features\n\n- **üèóÔ∏è Multi-agent architecture** - Create specialized agents for different domains.\n- **üîß Rich tool ecosystem** - Agents can use external tools and APIs via the MCP protocol.\n- **üîÑ Smart delegation** - Agents can automatically route tasks to the most suitable specialist.\n- **üìù YAML configuration** - Declarative model and agent configuration.\n- **üí≠ Advanced reasoning** - Built-in \"think\", \"todo\" and \"memory\" tools for complex problem-solving.\n- **üåê Multiple AI providers** - Support for OpenAI, Anthropic, Gemini and [Docker Model Runner](https://docs.docker.com/ai/model-runner/).\n\n## üöÄ Quick Start üöÄ\n\n### Installation\n\n[Prebuilt binaries](https://github.com/docker/cagent/releases) for Windows, macOS and Linux can be found on the releases page of the [project's GitHub repository](https://github.com/docker/cagent/releases)\n\nOnce you've downloaded the appropriate binary for your platform, you may need to give it executable permissions.\nOn macOS and Linux, this is done with the following command:\n\n```sh\n# linux amd64 build example\nchmod +x /path/to/downloads/cagent-linux-amd64\n```\n\nYou can then rename the binary to `cagent` and configure your `PATH` to be able to find it (configuration varies by platform).\n\n### **Set your API keys**\n\nBased on the models you configure your agents to use, you will need to set the corresponding provider API key accordingly,\nall theses keys are optional, you will likely need at least one of these, though:\n\n```bash\n# For OpenAI",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:17.234015"
  },
  {
    "basic_info": {
      "name": "oq",
      "full_name": "plutov/oq",
      "owner": "plutov",
      "description": "Terminal OpenAPI Spec viewer",
      "url": "https://github.com/plutov/oq",
      "clone_url": "https://github.com/plutov/oq.git",
      "ssh_url": "git@github.com:plutov/oq.git",
      "homepage": "",
      "created_at": "2025-09-12T14:04:46Z",
      "updated_at": "2025-09-29T08:50:26Z",
      "pushed_at": "2025-09-24T09:37:18Z"
    },
    "stats": {
      "stars": 704,
      "forks": 12,
      "watchers": 704,
      "open_issues": 5,
      "size": 1938
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 47818
      },
      "license": "MIT License",
      "topics": [
        "hacktoberfest"
      ]
    },
    "content": {
      "readme": "# oq - a terminal-based OpenAPI Spec (OAS) viewer\n\n<p align=\"center\"><img src=\"preview.gif\" width=\"500\" alt=\"oq preview\"></p>\n\n## Usage\n\n```bash\noq openapi.yaml\n# or\ncat openapi.yaml | oq\n# or\ncurl https://api.example.com/openapi.json | oq\n```\n\n### Keyboard Shortcuts\n\nPress `?` to see the help screen with all available keyboard shortcuts.\n\n## OpenAPI Support\n\n`oq` supports all 3.* OpenAPI specification versions:\n\n- 3.0\n- 3.1\n- 3.2\n\nBoth JSON and YAML formats are supported.\n\nNote: `oq` uses the [libopenapi](https://github.com/pb33f/libopenapi) library as it supports all OpenAPI versions and is actively maintained.\n\n## Installation\n\nUsing go install:\n\n```bash\ngo install github.com/plutov/oq@latest\n```\n\n<details>\n<summary>Package managers</summary>\n\nUsing Homebrew (macOS/Linux):\n\n```bash\nbrew install plutov/tap/oq\n```\n\nArch Linux (AUR):\n\n```bash\nyay -S oq-openapi-viewer-git\n```\n\n</details>\n\nYou can also download the compiled binaries from the Releases page.\n\n### From source\n\n```bash\ngit clone git@github.com:plutov/oq.git\ncd oq\ngo build -o oq .\n```\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit issues and pull requests.\n\nWhen contributing:\n\n1. Ensure tests pass: `go test -v`\n2. Test all supported OpenAPI versions (3.0, 3.1, 3.2)\n3. If the UI changes, make sure to run `vhs preview.tape` to generate a new preview GIF\n4. Try to extend test coverage by introducing new example OpenAPI specs in the `examples` folder\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:18.501421"
  },
  {
    "basic_info": {
      "name": "pgmcp",
      "full_name": "subnetmarco/pgmcp",
      "owner": "subnetmarco",
      "description": "An MCP server to query any Postgres database in natural language.",
      "url": "https://github.com/subnetmarco/pgmcp",
      "clone_url": "https://github.com/subnetmarco/pgmcp.git",
      "ssh_url": "git@github.com:subnetmarco/pgmcp.git",
      "homepage": "",
      "created_at": "2025-09-16T19:45:03Z",
      "updated_at": "2025-09-29T12:45:46Z",
      "pushed_at": "2025-09-25T18:19:25Z"
    },
    "stats": {
      "stars": 470,
      "forks": 47,
      "watchers": 470,
      "open_issues": 2,
      "size": 90
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 146324,
        "Shell": 4707,
        "Dockerfile": 259
      },
      "license": "Other",
      "topics": [
        "agent",
        "agentic-ai",
        "ai",
        "analytics",
        "artificial-intelligence",
        "data-analysis",
        "database",
        "kong",
        "mcp",
        "mcp-server",
        "postgres",
        "postgresql"
      ]
    },
    "content": {
      "readme": "[![ci](https://github.com/subnetmarco/pgmcp/actions/workflows/ci.yml/badge.svg)](https://github.com/subnetmarco/pgmcp/actions/workflows/ci.yml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/subnetmarco/pgmcp)](https://goreportcard.com/report/github.com/subnetmarco/pgmcp)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n# PGMCP - PostgreSQL Model Context Protocol Server\n\nPGMCP connects AI assistants to **any PostgreSQL database** through natural language queries. Ask questions in plain English and get structured SQL results with automatic streaming and robust error handling.\n\n**Works with**: Cursor, Claude Desktop, VS Code extensions, and any [MCP-compatible client](https://modelcontextprotocol.io/)\n\n## Quick Start\n\nPGMCP connects to **your existing PostgreSQL database** and makes it accessible to AI assistants through natural language queries.\n\n### Prerequisites\n- PostgreSQL database (existing database with your schema)\n- OpenAI API key (optional, for AI-powered SQL generation)\n\n### Basic Usage\n\n```bash\n# Set up environment variables\nexport DATABASE_URL=\"postgres://user:password@localhost:5432/your-existing-db\"\nexport OPENAI_API_KEY=\"your-api-key\"  # Optional\n\n# Run server (using pre-compiled binary)\n./pgmcp-server\n\n# Test with client in another terminal\n./pgmcp-client -ask \"What tables do I have?\" -format table\n./pgmcp-client -ask \"Who is the customer that has placed the most orders?\" -format table\n./pgmcp-client -search \"john\" -format table\n```\n\nHere is how it works:\n\n```\nüë§ User / AI Assistant\n         ‚îÇ\n         ‚îÇ \"Who are the top customers?\"\n         ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                    Any MCP Client                           ‚îÇ\n‚îÇ                                                             ‚îÇ\n‚îÇ  PGMCP CLI  ‚îÇ  Cursor  ‚îÇ  Claude Desktop  ‚îÇ  VS Code  ‚îÇ ... ‚îÇ\n‚îÇ  JSON/CSV   ‚îÇ  Chat    ‚îÇ  AI Assistant    ‚îÇ  Editor   ‚îÇ     ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n         ‚îÇ\n         ‚îÇ Streamable HTTP / MCP Protocol\n         ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                    PGMCP Server                             ‚îÇ\n‚îÇ                                                             ‚îÇ\n‚îÇ  üîí Security    üß† AI Engine      üåä Streaming               ‚îÇ\n‚îÇ  ‚Ä¢ Input Valid  ‚Ä¢ Schema Cache    ‚Ä¢ Auto-Pagination         ‚îÇ\n‚îÇ  ‚Ä¢ Audit Log    ‚Ä¢ OpenAI API      ‚Ä¢ Memory Management       ‚îÇ\n‚îÇ  ‚Ä¢ SQL Guard    ‚Ä¢ Error Recovery  ‚Ä¢ Connection Pool         ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n         ‚îÇ\n         ‚îÇ Read-Only SQL Queries\n         ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                Your PostgreSQL Database                     ‚îÇ\n‚îÇ                                                             ‚îÇ\n‚îÇ  Any Schema: E-commerce, Analytics, CRM, etc.               ‚îÇ\n‚îÇ  Tables ‚Ä¢ Views ‚Ä¢ Indexes ‚Ä¢ Functions                       ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nExternal AI Services:\nOpenAI API ‚Ä¢ Anthropic ‚Ä¢ Local LLMs (Ollama, etc.)\n\nKey Benefits:\n‚úÖ Works with ANY PostgreSQL database (no assumptions about schema)\n‚úÖ No schema modifications required  \n‚úÖ Read-only access (100% safe)\n‚úÖ Automatic streaming for large results\n‚úÖ Intelligent query understanding (singular vs plural)\n‚úÖ Robust error handling (graceful AI failure recovery)\n‚úÖ PostgreSQL case sensitivity support (mixed-case tables)\n‚úÖ Production-ready security and performance\n‚úÖ Universal database compatibility\n‚úÖ Multiple output formats (table, JSON, CSV)\n‚úÖ Free-text search across all columns\n‚úÖ Authentication support\n‚úÖ Comprehensive testing suite\n```\n\n## Features\n\n- **Natural Language to SQL**: Ask questions in plain English\n- **Automatic Streaming**: Handles large result sets automatically  \n- **Safe Read-Only Access**: Prevents any write operations\n- **Text Search**: Search across all text columns\n- **Multiple Output Formats**: Table, JSON, and CSV\n- **PostgreSQL Case Sensitivity**: Handles mixed-case table names correctly\n- **Universal Compatibility**: Works with any PostgreSQL database\n\n### Environment Variables\n\n**Required:**\n- `DATABASE_URL`: PostgreSQL connection string to your existing database\n\n**Optional:**\n- `OPENAI_API_KEY`: OpenAI API key for AI-powered SQL generation\n- `OPENAI_MODEL`: Model to use (default: \"gpt-4o-mini\")\n- `HTTP_ADDR`: Server address (default: \":8080\")\n- `HTTP_PATH`: MCP endpoint path (default: \"/mcp\")\n- `AUTH_BEARER`: Bearer token for authentication\n\n## Installation\n\n### Download Pre-compiled Binaries\n\n1. Go to [GitHub Releases](https://github.com/subnetmarco/pgmcp/releases)\n2. Download the binary for your platform (Linux, macOS, Windows)\n3. Extract and run:\n\n```bash\n# Example for macOS/Linux\ntar xzf pgmcp_*.tar.gz\ncd pgmcp_*\n./pgmcp-server\n```\n\n### Alternative Options\n\n```bash\n# Homebrew (macOS/Linux) - Available after first release\nbrew tap subnetmarco/homebrew-tap\nbrew inst",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:19.785776"
  },
  {
    "basic_info": {
      "name": "blades",
      "full_name": "go-kratos/blades",
      "owner": "go-kratos",
      "description": "Blades is a Go-based multimodal AI Agent framework.",
      "url": "https://github.com/go-kratos/blades",
      "clone_url": "https://github.com/go-kratos/blades.git",
      "ssh_url": "git@github.com:go-kratos/blades.git",
      "homepage": "",
      "created_at": "2025-09-15T16:43:22Z",
      "updated_at": "2025-09-30T02:16:41Z",
      "pushed_at": "2025-09-29T09:48:55Z"
    },
    "stats": {
      "stars": 439,
      "forks": 43,
      "watchers": 439,
      "open_issues": 24,
      "size": 537
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 56651
      },
      "license": "MIT License",
      "topics": [
        "agent",
        "agentic-framework",
        "agentic-workflow",
        "ai",
        "golang",
        "workflow"
      ]
    },
    "content": {
      "readme": "## Blades\nBlades is a multimodal AI Agent framework in Go, supporting custom models, tools, memory, middleware, and more. It is well-suited for multi-turn conversations, chain reasoning, and structured output.\n> The name comes from the game God of War, set in Greek mythology, which tells the story of Kratos, who becomes a god of war and embarks on a divine slaughter. Blades are Kratos's iconic weapons.\n\n## Architecture Design\nBlades leverages the characteristics of Go to provide a flexible and efficient AI Agent solution. Its core lies in achieving high decoupling and extensibility through a unified interface and pluggable components. The overall architecture is as follows:\n![architecture](./docs/images/architecture.png)\n\n- **Go Idiomatic**: Built entirely in the Go way, the code style and user experience make Go developers feel at home.\n- **Easy to Use**: Through concise code, define an AI Agent and quickly deliver requirements, making complex logic clear, easy to manage, and maintain.\n- **Middleware Ecosystem**: Drawing inspiration from Kratos‚Äôs middleware design philosophy, features like Observability, Guardrails, and others can be easily integrated into the AI Agent.\n- **Highly Extensible**: Through a unified interface and pluggable components, achieve high decoupling and extensibility, making it easy to integrate different LLM models and external tools.\n\n## Core Concepts\nThe Blades framework achieves its powerful functionality and flexibility through a series of well-designed core components. These components work together to build the intelligent behavior of the Agent:\n\n* **Agent (Intelligent Entity)**: The core unit that executes tasks, capable of invoking models and tools.\n* **Prompt (Prompt Text)**: A templated text used to interact with LLMs, supporting dynamic variable substitution and complex context construction.\n* **Chain (Chain)**: Links multiple Agents or other Chains to form complex workflows.\n* **ModelProvider (Model)**: A pluggable LLM interface, allowing you to easily switch and integrate different language model services (such as OpenAI).\n* **Tool (Tool)**: External capabilities that the Agent can use, such as calling APIs, querying databases, accessing file systems, etc.\n* **Memory (Memory)**: Provides short-term or long-term memory capabilities for the Agent, enabling context-aware continuous conversations.\n* **Middleware (Middleware)**: Similar to middleware in web frameworks, it can implement cross-cutting control over the Agent.\n\n### Runner\n`Runner` is the most core interface in the Blades framework, defining the basic behavior of all executable components. Its design aims to provide a unified execution paradigm, achieving **decoupling, standardization, and high composability** of various functional modules within the framework through the `Run` and `RunStream` methods. Components such as `Agent`, `Chain`, and `ModelProvider` all implement this interface, unifying their execution logic and allowing different components to be flexibly combined like LEGO bricks to build complex AI Agents.\n\n```go\n// Runner represents an entity that can process prompts and generate responses.\ntype Runner interface {\n    // Run performs a synchronous, non-streaming operation, returning a complete Generation result.\n    Run(context.Context, *Prompt, ...ModelOption) (*Generation, error)\n    // RunStream performs an asynchronous, streaming operation, returning a Streamer for receiving Generation results step by step.\n    RunStream(context.Context, *Prompt, ...ModelOption) (Streamer[*Generation], error)\n}\n```\n![runner](docs/images/runner.png)\n\n### ModelProvider\n`ModelProvider` is the core abstraction layer in the `Blades` framework for interacting with underlying large language models (LLMs). Its design goal is to achieve **decoupling and extensibility** through a unified interface, separating the framework's core logic from the implementation details of specific models (such as OpenAI, DeepSeek, Gemini, etc.). It acts as an adapter, responsible for converting standardized requests within the framework into the format required by the native API of the model and converting the model's response back into the framework's standard format, thus allowing developers to easily switch and integrate different LLMs.\n\n```go\ntype ModelProvider interface {\n    // Generate performs a complete generation request and returns the result at once. Suitable for scenarios where real-time feedback is not needed.\n    Generate(context.Context, *ModelRequest, ...ModelOption) (*ModelResponse, error)\n    // NewStream initiates a streaming request. This method immediately returns a Streamer object, through which the caller can receive the generated content from the model step by step, suitable for building real-time, typewriter-effect conversation applications.\n    NewStream(context.Context, *ModelRequest, ...ModelOption) (Streamer[*ModelResponse], error)\n}\n```\n![ModelProvider](./docs/images/model.png)\n\n### Agent\n`Agent` is the core or",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:21.074260"
  },
  {
    "basic_info": {
      "name": "sshm",
      "full_name": "Gu1llaum-3/sshm",
      "owner": "Gu1llaum-3",
      "description": "SSHM is a beautiful command-line tool that transforms how you manage and connect to your SSH hosts. Built with Go and featuring an intuitive TUI interface, it makes SSH connection management effortless and enjoyable.",
      "url": "https://github.com/Gu1llaum-3/sshm",
      "clone_url": "https://github.com/Gu1llaum-3/sshm.git",
      "ssh_url": "git@github.com:Gu1llaum-3/sshm.git",
      "homepage": null,
      "created_at": "2025-08-31T20:56:25Z",
      "updated_at": "2025-09-29T21:39:54Z",
      "pushed_at": "2025-09-17T13:24:40Z"
    },
    "stats": {
      "stars": 389,
      "forks": 28,
      "watchers": 389,
      "open_issues": 6,
      "size": 1618
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 232812,
        "Shell": 6353,
        "PowerShell": 4562,
        "Makefile": 1043
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "\n\n<p align=\"center\">\n    <img src=\"images/logo.png\" alt=\"SSHM Logo\" width=\"120\" />\n</p>\n\n# üöÄ SSHM - SSH Manager\n\n[![Go](https://img.shields.io/badge/Go-1.23+-00ADD8?style=for-the-badge&logo=go)](https://golang.org/)\n[![Release](https://img.shields.io/github/v/release/Gu1llaum-3/sshm?style=for-the-badge)](https://github.com/Gu1llaum-3/sshm/releases)\n[![License](https://img.shields.io/github/license/Gu1llaum-3/sshm?style=for-the-badge)](LICENSE)\n[![Platform](https://img.shields.io/badge/platform-Linux%20%7C%20macOS%20%7C%20Windows-lightgrey?style=for-the-badge)](https://github.com/Gu1llaum-3/sshm/releases)\n\n> **A modern, interactive SSH Manager for your terminal** üî•\n\nSSHM is a beautiful command-line tool that transforms how you manage and connect to your SSH hosts. Built with Go and featuring an intuitive TUI interface, it makes SSH connection management effortless and enjoyable.\n\n<p align=\"center\">\n    <a href=\"images/sshm.gif\" target=\"_blank\">\n        <img src=\"images/sshm.gif\" alt=\"Demo SSHM Terminal\" width=\"800\" />\n    </a>\n    <br>\n    <em>üñ±Ô∏è Click on the image to view in full size</em>\n</p>\n\n## ‚ú® Features\n\n### üöÄ **Core Capabilities**\n- **üé® Beautiful TUI Interface** - Navigate your SSH hosts with an elegant, interactive terminal UI\n- **‚ö° Quick Connect** - Connect to any host instantly through the TUI or the CLI with `sshm <host>`\n- **üîÑ Port Forwarding** - Easy setup for Local, Remote, and Dynamic (SOCKS) forwarding with history persistence\n- **üìù Easy Management** - Add, edit, move, and manage SSH configurations seamlessly\n- **üè∑Ô∏è Tag Support** - Organize your hosts with custom tags for better categorization\n- **üîç Smart Search** - Find hosts quickly with built-in filtering and search\n- **üìù Real-time Status** - Live SSH connectivity indicators with asynchronous ping checks and color-coded status\n- **üîî Smart Updates** - Automatic version checking with update notifications\n- **üìà Connection History** - Track your SSH connections with last login timestamps\n\n### üõ†Ô∏è **Technical Features**\n- **üîí Secure** - Works directly with your existing `~/.ssh/config` file\n- **üìÅ Custom Config Support** - Use any SSH configuration file with the `-c` flag\n- **üìÇ SSH Include Support** - Full support for SSH Include directives to organize configurations across multiple files\n- **‚öôÔ∏è SSH Options Support** - Add any SSH configuration option through intuitive forms\n- **üîÑ Automatic Conversion** - Seamlessly converts between command-line and config formats\n- **üîÑ Automatic Backups** - Backup configurations automatically before changes\n- **‚úÖ Validation** - Prevent configuration errors with built-in validation\n- **üîó ProxyJump Support** - Secure connection tunneling through bastion hosts\n- **‚å®Ô∏è Keyboard Shortcuts** - Power user navigation with vim-like shortcuts\n- **üåê Cross-platform** - Supports Linux, macOS (Intel & Apple Silicon), and Windows\n- **‚ö° Lightweight** - Single binary with no dependencies, zero configuration required\n\n## üöÄ Quick Start\n\n### Installation\n\n**Homebrew (Recommended for macOS):**\n```bash\nbrew install Gu1llaum-3/sshm/sshm\n```\n\n**Unix/Linux/macOS (One-line install):**\n```bash\ncurl -sSL https://raw.githubusercontent.com/Gu1llaum-3/sshm/main/install/unix.sh | bash\n```\n\n**Windows (PowerShell):**\n```powershell\nirm https://raw.githubusercontent.com/Gu1llaum-3/sshm/main/install/windows.ps1 | iex\n```\n\n**Alternative methods:**\n\n*Linux/macOS:*\n```bash\n# Download specific release\nwget https://github.com/Gu1llaum-3/sshm/releases/latest/download/sshm-linux-amd64.tar.gz\n\n# Extract and install\ntar -xzf sshm-linux-amd64.tar.gz\nsudo mv sshm-linux-amd64 /usr/local/bin/sshm\n```\n\n*Windows:*\n```powershell\n# Download and extract\nInvoke-WebRequest -Uri \"https://github.com/Gu1llaum-3/sshm/releases/latest/download/sshm-windows-amd64.zip\" -OutFile \"sshm-windows-amd64.zip\"\nExpand-Archive sshm-windows-amd64.zip -DestinationPath C:\\tools\\\n# Add C:\\tools to your PATH environment variable\n```\n\n## üìñ Usage\n\n### Interactive Mode\n\nLaunch SSHM without arguments to enter the beautiful TUI interface:\n\n```bash\nsshm\n```\n\n**Navigation:**\n- `‚Üë/‚Üì` or `j/k` - Navigate hosts\n- `Enter` - Connect to selected host\n- `a` - Add new host\n- `e` - Edit selected host\n- `d` - Delete selected host\n- `m` - Move host to another config file (requires SSH Include directives)\n- `f` - Port forwarding setup\n- `q` - Quit\n- `/` - Search/filter hosts\n\n**Real-time Status Indicators:**\n- üü¢ **Online** - Host is reachable via SSH\n- üü° **Connecting** - Currently checking host connectivity\n- üî¥ **Offline** - Host is unreachable or SSH connection failed\n- ‚ö´ **Unknown** - Connectivity status not yet determined\n\n**Sorting & Filtering:**\n- `s` - Switch between sorting modes (name ‚Üî last login)\n- `n` - Sort by **name** (alphabetical)\n- `r` - Sort by **recent** (last login time)\n- `Tab` - Cycle between filtering modes\n- Filter by **name** (default) - Search through host names\n- Filter by **last login** - Sort and filter by most recently used connections\n\nThe interactive forms will guide you through",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:22.382694"
  },
  {
    "basic_info": {
      "name": "better-curl-saul",
      "full_name": "DeprecatedLuar/better-curl-saul",
      "owner": "DeprecatedLuar",
      "description": "Did you know you have rights? The FOSS says you do... Better Curl Saul is my homemade CLI 'http client' to make api reusability simple.",
      "url": "https://github.com/DeprecatedLuar/better-curl-saul",
      "clone_url": "https://github.com/DeprecatedLuar/better-curl-saul.git",
      "ssh_url": "git@github.com:DeprecatedLuar/better-curl-saul.git",
      "homepage": "",
      "created_at": "2025-09-18T09:00:50Z",
      "updated_at": "2025-09-29T20:35:57Z",
      "pushed_at": "2025-09-29T20:35:54Z"
    },
    "stats": {
      "stars": 210,
      "forks": 4,
      "watchers": 210,
      "open_issues": 2,
      "size": 138462
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 130742,
        "Shell": 6284,
        "HTML": 3925
      },
      "license": "MIT License",
      "topics": [
        "api",
        "api-client",
        "cli-tool",
        "curl",
        "curl-commands",
        "golang",
        "http",
        "http-client",
        "http-requests",
        "linux",
        "macos",
        "windows"
      ]
    },
    "content": {
      "readme": "<h3 align=\"center\">When HTTP gets complicated...</h3>\n<p align=\"center\">\n  <img src=\"other/assets/saul-logo (1).png\" width=\"600\"/>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/DeprecatedLuar/better-curl-saul/stargazers\">\n    <img src=\"https://img.shields.io/github/stars/DeprecatedLuar/better-curl-saul?style=for-the-badge&logo=github&color=1f6feb&logoColor=white&labelColor=black\"/>\n  </a>\n  <a href=\"https://github.com/DeprecatedLuar/better-curl-saul/releases\">\n    <img src=\"https://img.shields.io/github/v/release/DeprecatedLuar/better-curl-saul?style=for-the-badge&logo=go&color=00ADD8&logoColor=white&labelColor=black\"/>\n  </a>\n  <a href=\"https://github.com/DeprecatedLuar/better-curl-saul/blob/main/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/DeprecatedLuar/better-curl-saul?style=for-the-badge&color=green&labelColor=black\"/>\n  </a>\n  <a href=\"https://deprecatedluar.github.io/better-curl-saul/\">\n    <img src=\"https://img.shields.io/badge/Leave_a_Comment-üí¨-orange?style=for-the-badge&logo=github&logoColor=white&labelColor=black\"/>\n  </a>\n</p>\n\n---\n\n**v0.3.0 Try out the new curl import/exporting**: `saul myapi set --raw` and `saul myapi get --raw` \n\n<p align=\"center\">\n  <img src=\"other/assets/saul-catboy-final.png\" width=\"700\"/>\n</p>\n\n## **In a nutshell,** this is... not my favorite UX:\n```bash\ncurl -X POST \"https://company.atlassian.net/rest/api/3/issue\" \\\n  -H \"Authorization: Basic $(echo -n 'user@company.com:api-token-here' | base64)\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  -H \"X-Atlassian-Token: no-check\" \\\n  -d '{\n    \"fields\": {\n      \"project\": {\"key\": \"PROJ\"},\n      \"summary\": \"API Bug: Users can'\\''t login after deployment\",\n      \"description\": \"Steps:\\n1. Deploy v2.1.0\\n2. Try login\\n3. Gets 500 error\\n\\nExpected: Login works\\nActual: Server error\",\n      \"issuetype\": {\"name\": \"Bug\"},\n      \"priority\": {\"name\": \"High\"},\n      \"assignee\": {\"accountId\": \"123456:abcd-efgh-ijkl\"},\n      \"labels\": [\"api\", \"login\", \"production\"],\n      \"customfield_10001\": \"2024-01-15\",\n      \"customfield_10002\": {\"value\": \"Backend Team\"}\n    }\n  }'\n```\n\n<h1 align=\"center\">‚îÄ‚îÄ Try this instead ‚îÄ‚îÄ</h1 align=\"center\">\n\n<p align=\"center\">\n  <img src=\"other/assets/demo.gif\" alt=\"Better-Curl Demo\" width=\"800\"/>\n</p>\n\n---\n\n## The nice features you've never seen before\n\n- **Workspace-based** - Each API gets its own organized folder (reusable)\n- **Inline editor** - the `edit` command for any given field also supports `$EDITOR`\n- **Smart variables** - `{@token}` persists,`{?name}` prompts every time\n- **Response filtering** - Show only the fields you care about\n- **Git-friendly** - TOML files version control beautifully\n- **Unix composable** - Script it, pipe it, shell it\n- **TOML converter** - JSON gets reorganized into TOML for readability\n- **Saul Goodman** - It has Saul Goodman on it.\n  \n<img src=\"other/assets/saul-hd-wide.png\" width=\"1000\"/>\n\n\n<h1 align=\"center\">‚îÄ‚îÄ‚îÄ Installation ‚îÄ‚îÄ‚îÄ</h1 align=\"center\">\n\n**Supports:** Linux, macOS, Windows (I hope)\n\n### One-Liner (if you have bash)\n```bash\ncurl -sSL https://raw.githubusercontent.com/DeprecatedLuar/better-curl-saul/main/install.sh | bash\n```\n\n<details>\n<summary>Other Install Methods</summary>\n\n<br>\n\n**Manual Install**\n1. Download binary for your OS from [releases](https://github.com/DeprecatedLuar/better-curl-saul/releases)\n2. Make executable: `chmod +x saul-*`\n3. Move to PATH: `sudo mv saul-* /usr/local/bin/saul`\n\n**From Source** (for try-harders)\n```bash\ngit clone https://github.com/DeprecatedLuar/better-curl-saul.git\ncd better-curl-saul\n./other/install-local.sh  # Local development build\n```\n\n**In case you already have Saul** (basically gambling at this point)\n```bash\nsaul set url https://raw.githubusercontent.com/DeprecatedLuar/better-curl-saul/main/install.sh && saul call --raw | bash #(maybe works, who knows)\n```\n>[!NOTE]\n> Quick install auto-detects your system and downloads binaries or builds from source as fallback. \n> Windows users: I don't know powershell I expect you to have bash üëç\n\n</details>\n\n<br>\n\n<a href=\"https://deprecatedluar.github.io/better-curl-saul/\"><img src=\"other/assets/comments.png\" width=\"800\"/></a>\n\n\n---\n\n\n## Tutorials\n\n<details>\n<summary>Quick Start</summary>\n\n```bash\n# Create a test workspace\nsaul demo set url https://jsonplaceholder.typicode.com/posts/1\nsaul demo set method GET\nsaul demo call\n\n# Try with variables\nsaul api set url https://httpbin.org/post\nsaul api set method POST\nsaul api set body name={@your_name} message=\"{?message}\" --call\n\n# Oh... yeah, for nesting just use dot notation like obj.field=idk\n# Changing hard-variables try the flag -v upon call or set variables name=value\n```\n\n</details>\n\n\n<details><summary>Core Commands</summary>\n<br>\n\nAlright so you can:\n\n```set```, ```get```, ```edit```, ```rm``` \n <br>your<br>\n```body```, ```header```, ```query```, ```request```, ```history``` or maybe even\n```response```\n<br>also<br> \n```url```, ```method```, ```timeout```, ```histor",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:23.672368"
  },
  {
    "basic_info": {
      "name": "OpenAI-Compatible-API-Proxy-for-Z",
      "full_name": "kbykb/OpenAI-Compatible-API-Proxy-for-Z",
      "owner": "kbykb",
      "description": "ËøôÊòØ‰∏Ä‰∏™‰∏∫ Zai Êèê‰æõ OpenAI API ÂÖºÂÆπÊé•Âè£ÁöÑ‰ª£ÁêÜÊúçÂä°ÔºåÂÖÅËÆ∏ÂºÄÂèëËÄÖÈÄöËøáÊ†áÂáÜÁöÑ OpenAI API Ê†ºÂºèËÆøÈóÆ Zai ÁöÑ GLM-4.5 Ê®°Âûã„ÄÇ",
      "url": "https://github.com/kbykb/OpenAI-Compatible-API-Proxy-for-Z",
      "clone_url": "https://github.com/kbykb/OpenAI-Compatible-API-Proxy-for-Z.git",
      "ssh_url": "git@github.com:kbykb/OpenAI-Compatible-API-Proxy-for-Z.git",
      "homepage": null,
      "created_at": "2025-09-01T04:58:29Z",
      "updated_at": "2025-09-28T17:21:37Z",
      "pushed_at": "2025-09-01T06:53:25Z"
    },
    "stats": {
      "stars": 180,
      "forks": 126,
      "watchers": 180,
      "open_issues": 1,
      "size": 33
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 20363,
        "Dockerfile": 266
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# OpenAIÂÖºÂÆπAPI‰ª£ÁêÜ for Z.ai GLM-4.5\n\nËøôÊòØ‰∏Ä‰∏™‰∏∫Z.ai GLM-4.5Ê®°ÂûãÊèê‰æõOpenAIÂÖºÂÆπAPIÊé•Âè£ÁöÑ‰ª£ÁêÜÊúçÂä°Âô®„ÄÇ\n\n## RenderÈÉ®ÁΩ≤\n\n1. ForkËøô‰∏™‰ªìÂ∫ìÂà∞‰Ω†ÁöÑGitHubË¥¶Êà∑\n\n2. Âú®Render‰∏äÂàõÂª∫Êñ∞ÁöÑWeb ServiceÔºö\n   - ËøûÊé•‰Ω†ÁöÑGitHub‰ªìÂ∫ì\n   - ÈÄâÊã©Docker‰Ωú‰∏∫ÁéØÂ¢É\n   - ËÆæÁΩÆ‰ª•‰∏ãÁéØÂ¢ÉÂèòÈáèÔºö\n   - `UPSTREAM_TOKEN`: Z.ai ÁöÑËÆøÈóÆ‰ª§Áâå (ÂøÖÈúÄ)\n   - `DEFAULT_KEY`: ÂÆ¢Êà∑Á´ØAPIÂØÜÈí• (ÂèØÈÄâÔºåÈªòËÆ§: sk-your-key)\n   - `MODEL_NAME`: ÊòæÁ§∫ÁöÑÊ®°ÂûãÂêçÁß∞ (ÂèØÈÄâÔºåÈªòËÆ§: GLM-4.5)\n\n   - `PORT`: ÊúçÂä°ÁõëÂê¨Á´ØÂè£ (Render‰ºöËá™Âä®ËÆæÁΩÆ)\n\n3. ÈÉ®ÁΩ≤ÂÆåÊàêÂêéÔºå‰ΩøÁî®RenderÊèê‰æõÁöÑURL‰Ωú‰∏∫OpenAI APIÁöÑbase_url\n\n## ‰ΩøÁî®Á§∫‰æã\n\n```python\nimport openai\n\nclient = openai.OpenAI(\n    api_key=\"your-api-key\",  # ÂØπÂ∫î DEFAULT_KEY\n    base_url=\"https://your-app.onrender.com/v1\"\n)\n\nresponse = client.chat.completions.create(\n    model=\"GLM-4.5\",\n    messages=[{\"role\": \"user\", \"content\": \"‰Ω†Â•Ω\"}],\n    stream=True\n)\n\nfor chunk in response:\n    print(chunk.choices[0].delta.content or \"\", end=\"\")\n```\n\n## Ë¥°ÁåÆÊåáÂçó\n\nÊ¨¢ËøéÊèê‰∫§ Issue Âíå Pull RequestÔºÅËØ∑Á°Æ‰øùÔºö\n\n1. ‰ª£Á†ÅÁ¨¶Âêà Go ÁöÑ‰ª£Á†ÅÈ£éÊ†º\n2. Êèê‰∫§ÂâçËøêË°åÊµãËØï\n3. Êõ¥Êñ∞Áõ∏ÂÖ≥ÊñáÊ°£\n\n## ËÆ∏ÂèØËØÅ\n\nLICENSE\n\n## ÂÖçË¥£Â£∞Êòé\n\nÊú¨È°πÁõÆ‰∏é Z.ai ÂÆòÊñπÊó†ÂÖ≥Ôºå‰ΩøÁî®ÂâçËØ∑Á°Æ‰øùÈÅµÂÆà Z.ai ÁöÑÊúçÂä°Êù°Ê¨æ„ÄÇ",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:24.965506"
  },
  {
    "basic_info": {
      "name": "tsidp",
      "full_name": "tailscale/tsidp",
      "owner": "tailscale",
      "description": "A simple OIDC / OAuth Identity Provider (IdP) server for your tailnet.",
      "url": "https://github.com/tailscale/tsidp",
      "clone_url": "https://github.com/tailscale/tsidp.git",
      "ssh_url": "git@github.com:tailscale/tsidp.git",
      "homepage": "",
      "created_at": "2025-09-05T16:49:35Z",
      "updated_at": "2025-09-29T18:21:04Z",
      "pushed_at": "2025-09-29T23:07:33Z"
    },
    "stats": {
      "stars": 142,
      "forks": 6,
      "watchers": 142,
      "open_issues": 15,
      "size": 2331
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 261239,
        "HTML": 10611,
        "CSS": 8416,
        "Nix": 5495,
        "Shell": 1092,
        "Dockerfile": 1019,
        "Makefile": 566
      },
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "topics": [
        "idp",
        "mcp",
        "oauth",
        "oauth2",
        "oidc",
        "tailscale"
      ]
    },
    "content": {
      "readme": "# `tsidp` - Tailscale OpenID Connect (OIDC) Identity Provider\n\n> [!CAUTION]\n> This is an experimental update of tsidp. It is under active development and may experience breaking changes.\n\n[![status: community project](https://img.shields.io/badge/status-community_project-blue)](https://tailscale.com/kb/1531/community-projects)\n\n`tsidp` is an OIDC / OAuth Identity Provider (IdP) server that integrates with your Tailscale network. It allows you to use Tailscale identities for authentication into applications that support OpenID Connect as well as authenticated MCP client / server connections.\n\n## Prerequisites\n\n- A Tailscale network (tailnet) with magicDNS and HTTPS enabled\n- A Tailscale authentication key from your tailnet\n- (Recommended) Docker installed on your system\n- Ability to set an Application capability grant\n\n## Running tsidp\n\n### (Recommended) Using the pre-built image\n\nDocker images are automatically published on when releases are tagged.\n\n```bash\n# to use the latest image\n$ docker pull ghcr.io/tailscale/tsidp:latest\n\n# to use a specific release version\n$ docker pull ghcr.io/tailscale/tsidp:v0.0.2\n```\n\nRunning a tsidp container:\n\n> [!TIP]\n> Replace `YOUR_TAILSCALE_AUTHKEY` with your Tailscale authentication key in the following commands:\n>\n> Use an existing auth key or create a new auth key in the [Tailscale dashboard](https://login.tailscale.com/admin/settings/keys). Ensure you select an existing [tag](https://tailscale.com/kb/1068/tags) or create a new one.\n\n```bash\n# Run tsidp with a persistent volume to store state\ndocker run -d \\\n  --name tsidp \\\n  -p 443:443 \\\n  -v tsidp-data:/data \\\n  -e TAILSCALE_USE_WIP_CODE=1 \\\n  -e TS_STATE_DIR=/data \\\n  -e TS_HOSTNAME=idp \\\n  -e TSIDP_ENABLE_STS=1 \\\n  ghcr.io/tailscale/tsidp:latest\n```\n\nVisit `https://idp.yourtailnet.ts.net` to confirm the service is running.\n\n> [!NOTE]\n> If you're running tsidp for the first time it may take a few minutes for the TLS certificate to generate. You may not be able to access the service until the certificate is ready.\n\n### Other Ways to Build and Run\n\n<details>\n<summary>Building your own container</summary>\n\n```bash\n$ make docker-image\n```\n\n</details>\n\n<details>\n<summary>Using Go directly</summary>\n\nIf you'd like to build tsidp and / or run it directly you can do the following:\n\n```bash\n# Clone the Tailscale repository\n$ git clone https://github.com/tailscale/tsidp.git\n$ cd tsidp\n\n# run with default values for flags\n$ TAILSCALE_USE_WIP_CODE=1 TS_AUTHKEY={YOUR_TAILSCALE_AUTHKEY} TSNET_FORCE_LOGIN=1 go run .\n```\n\n</details>\n\n## Setting an Application Capability Grant\n\n> [!IMPORTANT]\n> Access to the admin UI and dynamic client registration endpoints are **denied** by default.\n\nTo access the admin UI and dynamic client registration endpoints an [Application capability grant](https://tailscale.com/kb/1537/grants-app-capabilities) must be set in the the [Tailscale console](https://login.tailscale.com/admin/acls/).\n\nThis is a permissive grant that is suitable for testing purposes:\n\n```json\n\"grants\": [\n  {\n    \"src\": [\"*\"],\n    \"dst\": [\"*\"],\n    \"app\": {\n      \"tailscale.com/cap/tsidp\": [\n        {\n          // allow access to UI\n          \"allow_admin_ui\": true,\n\n          // allow dynamic client registration\n          \"allow_dcr\": true,\n\n          // Secure Token Service (STS) controls\n          \"users\":     [\"*\"],\n          \"resources\": [\"*\"],\n        },\n      ],\n    },\n  },\n],\n```\n\n## tsidp Configuration Options\n\nThe `tsidp-server` is configured by several command-line flags:\n\n| Flag                    | Description                                                                                        | Default  |\n| ----------------------- | -------------------------------------------------------------------------------------------------- | -------- |\n| `-dir <path>`           | Directory path to save tsnet and tsidp state. Recommend to be set.                                 | `\"\"`     |\n| `-hostname <hostname>`  | hostname on tailnet. Will become `<hostname>.your-tailnet.ts.net`                                  | `idp`    |\n| `-port <port>`          | Port to listen on                                                                                  | `443`    |\n| `-local-port <port>`    | Listen on `localhost:<port>`. Useful for testing                                                   | disabled |\n| `-use-local-tailscaled` | Use local tailscaled instead of tsnet                                                              | `false`  |\n| `-funnel`               | Use Tailscale Funnel to make tsidp available on the public internet so it works with SaaS products | disabled |\n| `-enable-sts`           | Enable OAuth token exchange using RFC 8693                                                         | disabled |\n| `-log <level>`          | Set logging level: `debug`, `info`, `warn`, `error`                                                | `info`   |\n| `-debug-all-requests`   | For development. Prints all requests and respons",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:26.230181"
  },
  {
    "basic_info": {
      "name": "ZtoApi",
      "full_name": "libaxuan/ZtoApi",
      "owner": "libaxuan",
      "description": "‰ΩõÊ≥ïGLM-4.5 For Kilo CODE„ÄÅRoo Code",
      "url": "https://github.com/libaxuan/ZtoApi",
      "clone_url": "https://github.com/libaxuan/ZtoApi.git",
      "ssh_url": "git@github.com:libaxuan/ZtoApi.git",
      "homepage": "",
      "created_at": "2025-09-02T05:48:02Z",
      "updated_at": "2025-09-29T07:13:34Z",
      "pushed_at": "2025-09-05T08:41:17Z"
    },
    "stats": {
      "stars": 134,
      "forks": 65,
      "watchers": 134,
      "open_issues": 2,
      "size": 60
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 56328,
        "Batchfile": 2623,
        "Shell": 2163,
        "Dockerfile": 442
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# OpenAIÂÖºÂÆπAPI‰ª£ÁêÜ for Z.ai GLM-4.5\n\nËøôÊòØ‰∏Ä‰∏™‰∏∫Z.ai GLM-4.5Ê®°ÂûãÊèê‰æõOpenAIÂÖºÂÆπAPIÊé•Âè£ÁöÑ‰ª£ÁêÜÊúçÂä°Âô®„ÄÇÂÆÉÂÖÅËÆ∏‰Ω†‰ΩøÁî®Ê†áÂáÜÁöÑOpenAI APIÊ†ºÂºè‰∏éZ.aiÁöÑGLM-4.5Ê®°ÂûãËøõË°å‰∫§‰∫íÔºåÊîØÊåÅÊµÅÂºèÂíåÈùûÊµÅÂºèÂìçÂ∫î„ÄÇ\n\n> **Ê≥®ÊÑè**: Êú¨È°πÁõÆÊù•Ëá™fork  [OpenAI-Compatible-API-Proxy-for-Z](https://github.com/kbykb/OpenAI-Compatible-API-Proxy-for-Z)‰∫åÊ¨°ÂºÄÂèë\n\n\n## ‚ú® ‰∏ªË¶ÅÂäüËÉΩ\n\n- üîÑ **OpenAI APIÂÖºÂÆπ**: ÂÆåÂÖ®ÂÖºÂÆπOpenAIÁöÑAPIÊ†ºÂºèÔºåÊó†ÈúÄ‰øÆÊîπÂÆ¢Êà∑Á´Ø‰ª£Á†Å\n- üåä **ÊµÅÂºèÂìçÂ∫îÊîØÊåÅ**: ÊîØÊåÅÂÆûÊó∂ÊµÅÂºèËæìÂá∫ÔºåÊèê‰æõÊõ¥Â•ΩÁöÑÁî®Êà∑‰ΩìÈ™å\n- üîê **Ë∫´‰ªΩÈ™åËØÅ**: ÊîØÊåÅAPIÂØÜÈí•È™åËØÅÔºåÁ°Æ‰øùÊúçÂä°ÂÆâÂÖ®\n- üõ†Ô∏è **ÁÅµÊ¥ªÈÖçÁΩÆ**: ÈÄöËøáÁéØÂ¢ÉÂèòÈáèËøõË°åÁÅµÊ¥ªÈÖçÁΩÆ\n- üê≥ **DockerÊîØÊåÅ**: Êèê‰æõDockerÈïúÂÉèÔºå‰æø‰∫éÈÉ®ÁΩ≤\n- üåç **CORSÊîØÊåÅ**: ÊîØÊåÅË∑®ÂüüËØ∑Ê±ÇÔºå‰æø‰∫éÂâçÁ´ØÈõÜÊàê\n- üìù **ÊÄùËÄÉËøáÁ®ãÂ±ïÁ§∫**: Êô∫ËÉΩÂ§ÑÁêÜÂπ∂Â±ïÁ§∫Ê®°ÂûãÁöÑÊÄùËÄÉËøáÁ®ã\n- üìä **ÂÆûÊó∂ÁõëÊéß‰ª™Ë°®Êùø**: Êèê‰æõWeb‰ª™Ë°®ÊùøÔºåÂÆûÊó∂ÊòæÁ§∫APIËΩ¨ÂèëÊÉÖÂÜµÂíåÁªüËÆ°‰ø°ÊÅØ\n\n## üöÄ Âø´ÈÄüÂºÄÂßã\n\n### ÁéØÂ¢ÉË¶ÅÊ±Ç\n\n- Go 1.23 ÊàñÊõ¥È´òÁâàÊú¨\n- Z.ai ÁöÑËÆøÈóÆ‰ª§Áâå\n\n### Êú¨Âú∞ÈÉ®ÁΩ≤\n\n1. **ÂÖãÈöÜ‰ªìÂ∫ì**\n   ```bash\n   git clone https://github.com/your-username/ZtoApi.git\n   cd ZtoApi\n   ```\n\n2. **ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáè**\n   ```bash\n   cp config.env .env.local\n   # ÁºñËæë .env.local Êñá‰ª∂ÔºåËÆæÁΩÆ‰Ω†ÁöÑ ZAI_TOKEN\n   ```\n\n3. **ÂêØÂä®ÊúçÂä°**\n   ```bash\n   # ‰ΩøÁî®ÂêØÂä®ËÑöÊú¨ÔºàÊé®ËçêÔºâ\n   ./start.sh\n   \n   # ÊàñÁõ¥Êé•ËøêË°å\n   go run main.go\n   ```\n\n4. **ÊµãËØïÊúçÂä°**\n    ```bash\n    curl http://localhost:9090/v1/models\n    ```\n\n5. **ËÆøÈóÆAPIÊñáÊ°£**\n\n   ÂêØÂä®ÊúçÂä°ÂêéÔºåÂèØ‰ª•ÈÄöËøáÊµèËßàÂô®ËÆøÈóÆ‰ª•‰∏ãÂú∞ÂùÄÊü•ÁúãÂÆåÊï¥ÁöÑAPIÊñáÊ°£Ôºö\n    ```\n    http://localhost:9090/docs\n    ```\n\n   APIÊñáÊ°£Êèê‰æõ‰∫Ü‰ª•‰∏ãÂäüËÉΩÔºö\n    - ËØ¶ÁªÜÁöÑAPIÁ´ØÁÇπËØ¥Êòé\n    - ËØ∑Ê±ÇÂèÇÊï∞ÂíåÂìçÂ∫îÊ†ºÂºè\n    - Â§öÁßçÁºñÁ®ãËØ≠Ë®ÄÁöÑ‰ΩøÁî®Á§∫‰æãÔºàPython„ÄÅcURL„ÄÅJavaScriptÔºâ\n    - ÈîôËØØÂ§ÑÁêÜËØ¥Êòé\n\n5. **ËÆøÈóÆDashboard**\n\n   ÂêØÂä®ÊúçÂä°ÂêéÔºåÂèØ‰ª•ÈÄöËøáÊµèËßàÂô®ËÆøÈóÆ‰ª•‰∏ãÂú∞ÂùÄÊü•ÁúãÂÆûÊó∂ÁõëÊéß‰ª™Ë°®ÊùøÔºö\n   ```\n   http://localhost:9090/dashboard\n   ```\n\n   DashboardÊèê‰æõ‰∫Ü‰ª•‰∏ãÂäüËÉΩÔºö\n    - ÂÆûÊó∂ÊòæÁ§∫APIËØ∑Ê±ÇÁªüËÆ°‰ø°ÊÅØÔºàÊÄªËØ∑Ê±ÇÊï∞„ÄÅÊàêÂäüËØ∑Ê±ÇÊï∞„ÄÅÂ§±Ë¥•ËØ∑Ê±ÇÊï∞„ÄÅÂπ≥ÂùáÂìçÂ∫îÊó∂Èó¥Ôºâ\n    - ÊòæÁ§∫ÊúÄËøë100Êù°ËØ∑Ê±ÇÁöÑËØ¶ÁªÜ‰ø°ÊÅØÔºàÊó∂Èó¥„ÄÅÊñπÊ≥ï„ÄÅË∑ØÂæÑ„ÄÅÁä∂ÊÄÅÁ†Å„ÄÅËÄóÊó∂„ÄÅÂÆ¢Êà∑Á´ØIPÔºâ\n    - Êï∞ÊçÆÊØè5ÁßíËá™Âä®Âà∑Êñ∞‰∏ÄÊ¨°\n\n### DockerÈÉ®ÁΩ≤\n\n1. **ÊûÑÂª∫ÈïúÂÉè**\n   ```bash\n   docker build -t zto-api .\n   ```\n\n2. **ËøêË°åÂÆπÂô®**\n   ```bash\n   docker run -p 9090:9090 \\\n     -e ZAI_TOKEN=your_z_ai_token \\\n     -e DEFAULT_KEY=your_api_key \\\n     zto-api\n   ```\n\n## RenderÈÉ®ÁΩ≤\n\n1. ForkËøô‰∏™‰ªìÂ∫ìÂà∞‰Ω†ÁöÑGitHubË¥¶Êà∑\n\n2. Âú®Render‰∏äÂàõÂª∫Êñ∞ÁöÑWeb ServiceÔºö\n    - ËøûÊé•‰Ω†ÁöÑGitHub‰ªìÂ∫ì\n    - ÈÄâÊã©Docker‰Ωú‰∏∫ÁéØÂ¢É\n    - ËÆæÁΩÆ‰ª•‰∏ãÁéØÂ¢ÉÂèòÈáèÔºö\n    - `ZAI_TOKEN`: Z.ai ÁöÑËÆøÈóÆ‰ª§Áâå (ÂèØÈÄâÔºå‰∏çÊèê‰æõÂ∞ÜËá™Âä®Ëé∑ÂèñÈöèÊú∫ÂåøÂêçtoken)\n    - `DEFAULT_KEY`: ÂÆ¢Êà∑Á´ØAPIÂØÜÈí• (ÂèØÈÄâÔºåÈªòËÆ§: sk-your-key)\n    - `MODEL_NAME`: ÊòæÁ§∫ÁöÑÊ®°ÂûãÂêçÁß∞ (ÂèØÈÄâÔºåÈªòËÆ§: GLM-4.5)\n    - `PORT`: ÊúçÂä°ÁõëÂê¨Á´ØÂè£ (Render‰ºöËá™Âä®ËÆæÁΩÆ)\n\n3. ÈÉ®ÁΩ≤ÂÆåÊàêÂêéÔºå‰ΩøÁî®RenderÊèê‰æõÁöÑURL‰Ωú‰∏∫OpenAI APIÁöÑbase_url\n\n## ‚öôÔ∏è ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ\n\nÊú¨È°πÁõÆÊîØÊåÅÈÄöËøáÁéØÂ¢ÉÂèòÈáèËøõË°åÈÖçÁΩÆÔºåÊèê‰æõÁÅµÊ¥ªÁöÑÈÉ®ÁΩ≤ÂíåËøêË°åÈÄâÈ°π„ÄÇ\n\n### üöÄ Âø´ÈÄüÂºÄÂßã\n\n#### 1. ‰ΩøÁî®ÂêØÂä®ËÑöÊú¨ÔºàÊé®ËçêÔºâ\n\n**macOS/Linux:**\n```bash\n./start.sh\n```\n\n**Windows:**\n```cmd\nstart.bat\n```\n\n#### 2. ÊâãÂä®ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè\n\n**macOS/Linux:**\n```bash\nexport ZAI_TOKEN=\"your_z_ai_token_here\"\nexport DEFAULT_KEY=\"sk-your-custom-key\"\nexport PORT=\"9090\"\ngo run main.go\n```\n\n**Windows:**\n```cmd\nset ZAI_TOKEN=your_z_ai_token_here\nset DEFAULT_KEY=sk-your-custom-key\nset PORT=9090\ngo run main.go\n```\n\n#### 3. DockerËøêË°å\n\n```bash\ndocker run -p 9090:9090 \\\n  -e ZAI_TOKEN=your_z_ai_token_here \\\n  -e DEFAULT_KEY=sk-your-custom-key \\\n  -e PORT=9090 \\\n  zto-api\n```\n\n### üìã ÁéØÂ¢ÉÂèòÈáèÂàóË°®\n\n#### üîë ÂøÖÈúÄÈÖçÁΩÆ\n\nÊó†ÂøÖÈúÄÈÖçÁΩÆ„ÄÇÊâÄÊúâÈÖçÁΩÆÈÉΩÊúâÂêàÁêÜÁöÑÈªòËÆ§ÂÄº„ÄÇ\n\n#### ‚öôÔ∏è ÂèØÈÄâÈÖçÁΩÆ\n\n| ÂèòÈáèÂêç | ËØ¥Êòé | ÈªòËÆ§ÂÄº | Á§∫‰æã |\n|--------|------|--------|------|\n| `ZAI_TOKEN` | Z.ai ËÆøÈóÆ‰ª§Áâå | Á©∫ÔºàËá™Âä®Ëé∑ÂèñÈöèÊú∫ÂåøÂêçtokenÔºâ | `eyJhbGciOiJFUzI1NiIs...` |\n\n#### ‚öôÔ∏è ÂèØÈÄâÈÖçÁΩÆ\n\n| ÂèòÈáèÂêç | ËØ¥Êòé | ÈªòËÆ§ÂÄº | Á§∫‰æã |\n|--------|------|--------|------|\n| `DEFAULT_KEY` | ÂÆ¢Êà∑Á´ØAPIÂØÜÈí• | `sk-your-key` | `sk-my-api-key` |\n| `MODEL_NAME` | ÊòæÁ§∫Ê®°ÂûãÂêçÁß∞ | `GLM-4.5` | `GLM-4.5-Pro` |\n| `PORT` | ÊúçÂä°ÁõëÂê¨Á´ØÂè£ | `9090` | `9000` |\n| `DEBUG_MODE` | Ë∞ÉËØïÊ®°ÂºèÂºÄÂÖ≥ | `true` | `false` |\n| `DEFAULT_STREAM` | ÈªòËÆ§ÊµÅÂºèÂìçÂ∫î | `true` | `false` |\n| `DASHBOARD_ENABLED` | DashboardÂäüËÉΩÂºÄÂÖ≥ | `true` | `false` |\n| `ENABLE_THINKING` | ÊÄùËÄÉÂäüËÉΩÂºÄÂÖ≥ | `false` | `true` |\n\n#### üîß È´òÁ∫ßÈÖçÁΩÆ\n\n| ÂèòÈáèÂêç | ËØ¥Êòé | ÈªòËÆ§ÂÄº | Á§∫‰æã |\n|--------|------|--------|------|\n| `UPSTREAM_URL` | ‰∏äÊ∏∏APIÂú∞ÂùÄ | `https://chat.z.ai/api/chat/completions` | Ëá™ÂÆö‰πâURL |\n\n### üìÅ ÈÖçÁΩÆÊñá‰ª∂\n\n#### ÊîØÊåÅÁöÑÈÖçÁΩÆÊñá‰ª∂ÔºàÊåâ‰ºòÂÖàÁ∫ßÊéíÂ∫èÔºâ\n\n1. `.env.local` - Êú¨Âú∞ÁéØÂ¢ÉÈÖçÁΩÆÔºàÊé®ËçêÔºâ\n2. `.env` - ÁéØÂ¢ÉÈÖçÁΩÆ\n3. `config.env` - ÈÖçÁΩÆÊ®°Êùø\n\n#### ÈÖçÁΩÆÊñá‰ª∂Á§∫‰æã\n\n```bash\n# Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂\ncp config.env .env.local\n\n# ÁºñËæëÈÖçÁΩÆÊñá‰ª∂\nnano .env.local\n```\n\n### üîê Ëé∑Âèñ Z.ai Token\n\n#### ÊñπÊ≥ï1ÔºöÊµèËßàÂô®ÂºÄÂèëËÄÖÂ∑•ÂÖ∑\n\n1. ÁôªÂΩï [Z.ai](https://chat.z.ai)\n2. ÊâìÂºÄÊµèËßàÂô®ÂºÄÂèëËÄÖÂ∑•ÂÖ∑ÔºàF12Ôºâ\n3. ÂàáÊç¢Âà∞ Network Ê†áÁ≠æÈ°µ\n4. ÂèëÈÄÅ‰∏ÄÊù°Ê∂àÊÅØ\n5. Âú®ËØ∑Ê±Ç‰∏≠ÊâæÂà∞ `Authorization` Â§¥ÈÉ®ÁöÑ Bearer token\n\n#### ÊñπÊ≥ï2ÔºöCookie ÊñπÂºè\n\n1. ÁôªÂΩï Z.ai ÂêéÔºåÂú®ÂºÄÂèëËÄÖÂ∑•ÂÖ∑‰∏≠Êü•Áúã Cookies\n2. ÊâæÂà∞ÂåÖÂê´ËÆ§ËØÅ‰ø°ÊÅØÁöÑ cookie\n\n#### ÊñπÊ≥ï3ÔºöÂåøÂêçToken\n\nÊú¨È°πÁõÆÊîØÊåÅËá™Âä®Ëé∑ÂèñÂåøÂêçtokenÔºåÊó†ÈúÄÊâãÂä®ÈÖçÁΩÆ„ÄÇÂΩì `ZAI_TOKEN` ÁéØÂ¢ÉÂèòÈáèÊú™ËÆæÁΩÆÊó∂ÔºåÁ≥ªÁªü‰ºöËá™Âä®‰∏∫ÊØèÊ¨°ÂØπËØùËé∑Âèñ‰∏çÂêåÁöÑÈöèÊú∫ÂåøÂêçtokenÔºåÈÅøÂÖçÂÖ±‰∫´ËÆ∞ÂøÜ„ÄÇËøôÁßçÊú∫Âà∂‰ΩøÂæóÈ°πÁõÆÂç≥‰ΩøÁî®Êà∑Ê≤°ÊúâÊèê‰æõ Z.ai ÁöÑËÆøÈóÆ‰ª§Áâå‰πüËÉΩÊ≠£Â∏∏Â∑•‰Ωú„ÄÇ\n\n### üéØ ‰ΩøÁî®Á§∫‰æã\n\n#### Âü∫Êú¨ÈÖçÁΩÆ\n\n```bash\n# .env.local\nZAI_TOKEN=eyJhbGciOiJFUzI1NiIs...\nDEFAULT_KEY=sk-my-secret-key\nMODEL_NAME=GLM-4.5-Pro\nPORT=9000\nDEBUG_MODE=false\n```\n\n#### Áîü‰∫ßÁéØÂ¢ÉÈÖçÁΩÆ\n\n```bash\n# .env.production\nZAI_TOKEN=your_production_token\nDEFAULT_KEY=sk-production-key\nMODEL_NAME=GLM-4.5\nPORT=9090\nDEBUG_MODE=false\nDEFAULT_STREAM=true\n```\n\n#### ÂºÄÂèëÁéØÂ¢ÉÈÖçÁΩÆ\n\n```bash\n# .env.development\nZAI_TOKEN=your_dev_token\nDEFAULT_KEY=sk-dev-key\nMODEL_NAME=GLM-4.5-Dev\nPORT=8080\nDEBUG_MODE=true\nDEFAULT_STREAM=true\nDASHBOARD_ENABLED=true\n```\n\n### üìä DashboardÂäüËÉΩ\n\nÊú¨È°πÁõÆÊèê‰æõ‰∫Ü‰∏Ä‰∏™Web‰ª™Ë°®ÊùøÔºåÁî®‰∫éÂÆûÊó∂ÁõëÊéßAPIËΩ¨ÂèëÊÉÖÂÜµÂíåÁªüËÆ°‰ø°ÊÅØ„ÄÇ\n\n#### ÂäüËÉΩÁâπÁÇπ\n\n- ÂÆûÊó∂ÊòæÁ§∫APIËØ∑Ê±ÇÁªüËÆ°‰ø°ÊÅØÔºàÊÄªËØ∑Ê±ÇÊï∞„ÄÅÊàêÂäüËØ∑Ê±ÇÊï∞„ÄÅÂ§±Ë¥•ËØ∑Ê±ÇÊï∞„ÄÅÂπ≥ÂùáÂìçÂ∫îÊó∂Èó¥Ôºâ\n- ÊòæÁ§∫ÊúÄËøë100Êù°ËØ∑Ê±ÇÁöÑËØ¶ÁªÜ‰ø°ÊÅØÔºàÊó∂Èó¥„ÄÅÊñπÊ≥ï„ÄÅË∑ØÂæÑ„ÄÅÁä∂ÊÄÅÁ†Å„ÄÅËÄóÊó∂„ÄÅÂÆ¢Êà∑Á´ØIPÔºâ\n- Êï∞ÊçÆÊØè5ÁßíËá™Âä®Âà∑Êñ∞‰∏ÄÊ¨°\n- ÂìçÂ∫îÂºèËÆæËÆ°ÔºåÊîØÊåÅÂêÑÁßçËÆæÂ§áËÆøÈóÆ\n\n#### ËÆøÈóÆÊñπÂºè\n\nÂêØÂä®ÊúçÂä°ÂêéÔºåÈÄöËøáÊµèËßàÂô®ËÆøÈóÆ‰ª•‰∏ãÂú∞ÂùÄÔºö\n```\nhttp://localhost:9090/dashboard\n```\n\n#### ÈÖçÁΩÆÈÄâÈ°π\n\nÈÄöËøá `DASHBOARD_ENABLED` ÁéØÂ¢ÉÂèòÈáèÊéßÂà∂DashboardÂäüËÉΩÁöÑÂºÄÂêØÂíåÂÖ≥Èó≠Ôºö\n\n```bash\n# ÂêØÁî®DashboardÔºàÈªòËÆ§Ôºâ\nDASHBOARD_ENABLED=true\n\n# Á¶ÅÁî®Dashboard\nDASHBOARD_ENABLED=false\n```\n\n#### ‰ΩøÁî®Âú∫ÊôØ\n\n- **ÂºÄÂèëË∞ÉËØï**: ÂÆûÊó∂Êü•ÁúãAPIËØ∑Ê±ÇÊÉÖÂÜµÔºå‰æø‰∫éË∞ÉËØïÂíåÈóÆÈ¢òÊéíÊü•\n- **ÊÄßËÉΩÁõëÊéß**: ÁõëÊéßAPIÂìçÂ∫îÊó∂Èó¥ÂíåÊàêÂäüÁéáÔºåËØÑ‰º∞Á≥ªÁªüÊÄßËÉΩ\n- **ÂÆâÂÖ®ÂÆ°ËÆ°**: Êü•ÁúãËØ∑Ê±ÇÊù•Ê∫êÂíåÈ¢ëÁéáÔºåÂèëÁé∞ÂºÇÂ∏∏ËÆøÈóÆÊ®°Âºè\n\n### üîÑ ÈáçÂêØÊúçÂä°\n\n‰øÆÊîπÁéØÂ¢ÉÂèòÈáèÂêéÔºåÈúÄË¶ÅÈáçÂêØÊúçÂä°‰ΩøÈÖçÁΩÆÁîüÊïàÔºö\n\n```bash\n# ÂÅúÊ≠¢ÂΩìÂâçÊúçÂä°\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:27.589427"
  },
  {
    "basic_info": {
      "name": "dab-downloader",
      "full_name": "PrathxmOp/dab-downloader",
      "owner": "PrathxmOp",
      "description": "A powerful, modular music downloader that delivers high-quality FLAC files with comprehensive metadata support through the DAB API.",
      "url": "https://github.com/PrathxmOp/dab-downloader",
      "clone_url": "https://github.com/PrathxmOp/dab-downloader.git",
      "ssh_url": "git@github.com:PrathxmOp/dab-downloader.git",
      "homepage": "https://discord.gg/q9RnuVza2",
      "created_at": "2025-09-13T23:36:48Z",
      "updated_at": "2025-09-30T01:00:16Z",
      "pushed_at": "2025-09-27T18:00:00Z"
    },
    "stats": {
      "stars": 119,
      "forks": 5,
      "watchers": 119,
      "open_issues": 1,
      "size": 14633
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 141111,
        "Dockerfile": 1249
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# üéµ DAB Music Downloader\n\n[![Go Version](https://img.shields.io/badge/go-%3E%3D1.19-blue.svg)](https://golang.org/dl/)\n[![License](https://img.shields.io/badge/license-Educational-green.svg)](#license)\n[![Release](https://img.shields.io/github/v/release/PrathxmOp/dab-downloader)](https://github.com/PrathxmOp/dab-downloader/releases/latest)\n[![Discord Support](https://img.shields.io/badge/Support-Discord-blue.svg?logo=discord&logoColor=white)](https://discord.gg/q9RnuVza2)\n![Development Status](https://img.shields.io/badge/status-unstable%20development-orange.svg)\n\n> A powerful, modular music downloader that delivers high-quality FLAC files with comprehensive metadata support through the DAB API.\n\n## Table of Contents\n- [‚ö†Ô∏è IMPORTANT: Development Status](#Ô∏è-important-development-status)\n- [‚ú® Key Features](#-key-features)\n- [üì∏ Screenshots](#-screenshots)\n- [üöÄ Quick Start](#-quick-start)\n  - [Option 1: Using `auto-dl.sh` Script (Recommended)](#option-1-using-auto-dlsh-script-recommended)\n  - [Option 2: Pre-built Binary](#option-2-pre-built-binary)\n  - [Option 3: Build from Source](#option-3-build-from-source)\n  - [Option 4: Docker (Containerized)](#option-4-docker-containerized)\n- [üîÑ CRITICAL: Staying Updated](#-critical-staying-updated)\n  - [üö® Daily Update Routine (Recommended)](#-daily-update-routine-recommended)\n  - [Versioning Format](#versioning-format)\n  - [Option 1: Pre-built Binary Updates](#option-1-pre-built-binary-updates)\n  - [Option 2: Source Code Updates](#option-2-source-code-updates)\n  - [Option 3: Docker Updates](#option-3-docker-updates)\n  - [üîî Get Update Notifications](#-get-update-notifications)\n- [üìã Usage Guide](#-usage-guide)\n  - [üîç Search and Discover](#-search-and-discover)\n  - [üìÄ Download Content](#-download-content)\n  - [üéß Spotify Integration](#-spotify-integration)\n  - [üéµ Navidrome Integration](#-navidrome-integration)\n- [‚öôÔ∏è Configuration](#Ô∏è-configuration)\n  - [First-Time Setup](#first-time-setup)\n  - [Configuration File](#configuration-file)\n- [‚öôÔ∏è Command-Line Flags](#Ô∏è-command-line-flags)\n  - [Global Flags (Persistent Flags)](#global-flags-persistent-flags)\n  - [Command-Specific Flags](#command-specific-flags)\n    - [`album` command](#album-command)\n    - [`artist` command](#artist-command)\n    - [`search` command](#search-command)\n    - [`spotify` command](#spotify-command)\n    - [`navidrome` command](#navidrome-command)\n- [üìÅ File Organization](#-file-organization)\n- [üîß Advanced Features](#-advanced-features)\n  - [Debug Tools](#debug-tools)\n  - [Quality & Metadata](#quality--metadata)\n- [üêõ Troubleshooting](#-troubleshooting)\n- [üí¨ Support & Community](#-support--community)\n- [üèóÔ∏è Project Architecture](#Ô∏è-project-architecture)\n- [ü§ù Contributing](#-contributing)\n  - [Development Areas Needing Help](#development-areas-needing-help)\n- [‚öñÔ∏è Legal Notice](#Ô∏è-legal-notice)\n- [üìÑ License](#-license)\n- [üåü Support the Project](#-support-the-project)\n- [Changelog](#changelog)\n- [Update Guide](#update-guide)\n\n## ‚ö†Ô∏è **IMPORTANT: Development Status**\n\nüöß **This project is currently in active, unstable development.** üöß\n\n- **Frequent Breaking Changes**: Features may work one day and break the next\n- **Regular Updates Required**: You'll need to update frequently to get the latest fixes\n- **Expect Issues**: Something always seems to break when i fix something else\n- **Pre-Stable Release**: We're working toward a stable v1.0, but we're not there yet\n\n**üì¢ We strongly recommend:**\n- [Discord Support Group](https://discord.gg/q9RnuVza2) for real-time updates\n- ‚úÖ Checking for updates daily if you're actively using the tool\n- ‚úÖ Being prepared to troubleshoot and report issues\n- ‚úÖ Having patience as we work through the bugs\n\nüí¨ **Need Help?** Join our [Discord Support Group](https://discord.gg/q9RnuVza2) for instant community support and the latest stability updates!\n\n\n\n## ‚ú® Key Features\n\nüîç **Smart Search** - Find artists, albums, and tracks with intelligent filtering  \nüì¶ **Complete Discographies** - Download entire artist catalogs with automatic categorization  \nüè∑Ô∏è **Rich Metadata** - Full tag support including genre, composer, producer, ISRC, and copyright  \nüé® **High-Quality Artwork** - Embedded album covers in original resolution  \n- **Concurrent Downloads** - Fast parallel processing with real-time progress tracking  \n- **Intelligent Retry Logic** - Robust error handling for reliable downloads  \n- **Spotify Integration** - Import and download entire Spotify playlists and albums  \n- **Format Conversion** - Convert downloaded FLAC files to MP3, OGG, Opus with configurable bitrates (requires FFmpeg)  \n- **Navidrome Support** - Seamless integration with your music server  \n- **Customizable Naming** - Define your own file and folder structure with configurable naming masks\n\n## üì∏ Screenshots\n\n![img1](./screenshots/ScreenShot1.png)\n![img1](./screenshots/ScreenShot2.png)\n\n## üöÄ Quick Start\n\n### Option 1: Using `auto-dl.sh` Script (Recommended)\n\nThis script simplifies the process of downloading and keeping `dab-down",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:28.856376"
  },
  {
    "basic_info": {
      "name": "ByteCaster",
      "full_name": "Print3M/ByteCaster",
      "owner": "Print3M",
      "description": "Swiss Army Knife for payload encryption, obfuscation, and conversion to byte arrays ‚Äì all in a single command (14 output formats supported)! ‚ò¢Ô∏è",
      "url": "https://github.com/Print3M/ByteCaster",
      "clone_url": "https://github.com/Print3M/ByteCaster.git",
      "ssh_url": "git@github.com:Print3M/ByteCaster.git",
      "homepage": "",
      "created_at": "2025-09-17T14:45:28Z",
      "updated_at": "2025-09-29T21:40:31Z",
      "pushed_at": "2025-09-20T13:08:55Z"
    },
    "stats": {
      "stars": 112,
      "forks": 19,
      "watchers": 112,
      "open_issues": 0,
      "size": 10756
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 13941
      },
      "license": null,
      "topics": [
        "encryption-tool",
        "golang",
        "maldev",
        "malware-builder",
        "malware-development",
        "obfuscation-script",
        "redteam",
        "security",
        "security-tools",
        "shellcode",
        "shellcode-convert",
        "shellcode-development",
        "shellcode-encoder",
        "shellcode-injection"
      ]
    },
    "content": {
      "readme": "# ByteCaster\n\nSwiss Army Knife for payload encryption, obfuscation, and conversion to byte arrays ‚Äì all in a single command!\n\nIt supports 3 encryption algorithms, 4 encoding / obfuscation algorithms and 14 output formats.\n\n![ByteCaster order of opretaions](_img/img-1.png)\n\n## Installation\n\n[Download the compiled binary](https://github.com/Print3M/ByteCaster/releases/tag/1.0.0) or compile Go source code.\n\n## Usage\n\nExample:\n\n```bash\n# Convert .bin file into C bytes array with XOR encryption and IPv4Fuscation\n./ByteCaster -i shellcode.bin -f c -x xor -k 'Test123' -e ipv4\n\n# Convert .bin file into base64 string with XOR encryption\n./ByteCaster -i shellcode.bin -x xor -k 'Test123' -e base64\n```\n\n![ByteCaster demo](_img/img-2.png)\n\n> **NOTE**: The sequence of operations is always the same:\n>\n> 1. Encryption\n> 2. Encoding\n> 3. Output formatting\n\n**`-i / --input <path>`** [required]\n\nBinary input file.\n\n**`-f / --format <value>`** [optional, default: `raw`]\n\nOutput format of the processed data. This generates the final data as an array of bytes in the selected programming language. Output is always sent to STDOUT.\n\nTo avoid applying any formatting output, use the `raw` value (default).\n\nAvailable values: `raw`, `hex`, `c`, `go`, `powershell`, `php`, `js`, `rust`, `csharp`, `nim`, `zig`, `ruby`, `python`, `java`\n\n**`-x / --enc-alg <value>` + `-k / --enc-key <string>`** [optional]\n\nData encryption. Both parameters, the encryption algorithm and the key string, must be provided.\n\nAvailabe values: `xor`, `aes256`, `rc4`\n\nAll supported encryption algorithms are described in details below.\n\n**`-e / --encoding <value>`** [optional]\n\nData encoding. Often used as obfuscation to confuse analysis or changes in the entropy level of data.\n\nAvailable values: `base32`, `base64`, `ipv4`, `mac`\n\nAll supported encoding algorithms are described in details below.\n\n## Supported encryption algorithms\n\n#### **`xor`** [0% overhead]\n\nTypical simple XOR encryption (`a^b`). Each byte is XORed with the byte from the key.\n\n#### **`aes256`** [28 bytes overhead]\n\nAES-256-GCM with the 32-bytes long key derived from SHA-256 hash function.\n\nCiphertext format: `nonce || ciphertext`. Nonce is stored in the first 12 bytes, followed by the encrypted data and authentication tag (the tag is appended automatically by GCM inside ciphertext).\n\nStandard Go implementation of AES encryption:`crypto/aes`\nStandard Go implementation of SHA-256 key derivation: `crypto/sha256`\n\n#### **`rc4`** [0% overhead]\n\nStandard Go implementation of RC4 encryption: `crypto/rc4`\n\n## Supported encoding algorithms\n\n#### **`base32`** [60‚Äì65% overhead]\n\nStandard Go implementation of Base32 encoding: `encoding/base32`\n\n#### **`base64`** [33%-37% overhead]\n\nStandard Go implementation of Base64 encoding: `encoding/base64`\n\n#### **`ipv4`** [100%-300% overhead]\n\nThis is known as the _IPv4Fuscation_ technique. Each output byte is converted to one octet in the IPv4 address as a decimal number.\n\nExample data:\n\n```text\n{ 0xe9, 0x36, 0x17, 0xbb, 0xbd, 0x7f, 0x22, 0x10 }\n```\n\nThe output (array of bytes) looks exactly like this in memory:\n\n`233.54.23.187\\0189.127.34.16\\0` ...\n\n> NOTE:\n>\n> - Each IP address ends with a null byte!\n> - If the number of bytes is not divisible by 4, the missing bytes added to the last IP address are 255.\n\n#### **`mac`** [200% overhead]\n\nThis is known as the _MACFuscation_ technique. Each output byte is converted to one octet in the MAC address as a hexadecimal number (lowercase).\n\nExample data:\n\n```text\n{ 0xe9, 0x36, 0x17, 0xbb, 0xbd, 0x7f, 0x22, 0x10, 0x84, 0xA7, 0x6f, 0xcc }\n```\n\nThe output (array of bytes) looks exactly like this in memory:\n\n`e9:36:17:bb:bd:7f\\022:10:84:a7:6f:cc\\0`\n\n> NOTE:\n>\n> - Each MAC address ends with a null byte!\n> - Hexadecimal numbers are lowercase.\n> - If the number of bytes is not divisible by 6, the missing bytes added to the last MAC address are 255 (`ff`).\n\n## Credits\n\n- [HellShell](https://github.com/NUL0x4C/HellShell) - inspired me to implement _IPv4Fuscation_ and _MACFuscation_.\n\n## TODO\n\n- Add base32 encoding\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:30.151507"
  },
  {
    "basic_info": {
      "name": "faroe",
      "full_name": "faroedev/faroe",
      "owner": "faroedev",
      "description": "Faroe is a modular auth server distributed as a Go package.",
      "url": "https://github.com/faroedev/faroe",
      "clone_url": "https://github.com/faroedev/faroe.git",
      "ssh_url": "git@github.com:faroedev/faroe.git",
      "homepage": "https://faroe.dev",
      "created_at": "2025-09-05T06:12:02Z",
      "updated_at": "2025-09-29T15:30:55Z",
      "pushed_at": "2025-09-15T08:52:02Z"
    },
    "stats": {
      "stars": 105,
      "forks": 1,
      "watchers": 105,
      "open_issues": 3,
      "size": 83
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 300201
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# github.com/faroedev/faroe\n\n_Documentation at [faroe.dev](https://faroe.dev)._\n\n_This software is in active development and has only gone through minimal testing._\n\nFaroe is a modular auth server distributed as a Go package.\n\n```\ngo get github.com/faroedev/faroe\n```\n\nSome key features of the server:\n\n1. Takes care of all the hard parts. Passwords, email address verification, sessions, rate limiting, password resets, and more.\n2. Extends your existing user database instead of replacing it. Own and customize your user data. No more data synchronization between servers.\n3. No direct connections to your database.\n4. Only ephemeral data is stored. Less things to manage and worry about.\n\n```ts\nconst result = await client.createSignup(emailAddress);\nif (!result.ok) {\n    console.log(result.errorCode);\n    return;\n}\nconsole.log(result.signup);\nwindow.localStorage.setItem(\"signup_token\", result.signupToken);\n```\n\nThe package has no hard dependencies. All you need is a key-value store and an email server.\n\n```go\npackage main\n\nimport \"github.com/faroedev/faroe\"\n\nfunc main() {\n\tserver := faroe.NewServer(\n\t\tstorage,\n\t\tuserStore,\n\t\tlogger,\n\t\tuserPasswordHashAlgorithms,\n\t\ttemporaryPasswordHashAlgorithm,\n\t\tcpuCount,\n\t\tfaroe.RealClock,\n\t\tfaroe.AllowAllEmailAddresses,\n\t\temailSender,\n\t\tsessionConfig,\n\t)\n}\n```\n\nOnly password authentication is supported. Support for passkeys and 2FA are planned but there are no immediate plans to add social login (e.g. Sign in with Google).\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:31.479393"
  },
  {
    "basic_info": {
      "name": "MeetC2",
      "full_name": "deriv-security/MeetC2",
      "owner": "deriv-security",
      "description": "(MeetC2 a.k.a Meeting C2) - A framework abusing Google Calendar APIs.",
      "url": "https://github.com/deriv-security/MeetC2",
      "clone_url": "https://github.com/deriv-security/MeetC2.git",
      "ssh_url": "git@github.com:deriv-security/MeetC2.git",
      "homepage": null,
      "created_at": "2025-09-04T10:13:40Z",
      "updated_at": "2025-09-29T14:08:16Z",
      "pushed_at": "2025-09-04T13:34:58Z"
    },
    "stats": {
      "stars": 102,
      "forks": 18,
      "watchers": 102,
      "open_issues": 0,
      "size": 21
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 11782,
        "Shell": 3226
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "## MeetC2\n\nA serverless command & control (C2) framework that leverages Google Calendar APIs, as a covert communication channel between operators and a compromised system.\n\n<b>Video Proof-of-concept:</b> https://youtu.be/YkKtQ3Ex8-Q <br>\n\n<b>Setup Instructions here:</b> https://medium.com/deriv-tech/meetc2-a-k-a-meeting-c2-1fc2a6761068\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-30T02:17:32.761667"
  },
  {
    "basic_info": {
      "name": "tunn",
      "full_name": "strandnerd/tunn",
      "owner": "strandnerd",
      "description": "SSH tunnels made simple: Launch and monitor SSH tunnels from a single YAML config and your existing OpenSSH setup.",
      "url": "https://github.com/strandnerd/tunn",
      "clone_url": "https://github.com/strandnerd/tunn.git",
      "ssh_url": "git@github.com:strandnerd/tunn.git",
      "homepage": "",
      "created_at": "2025-09-23T03:13:27Z",
      "updated_at": "2025-09-29T17:49:23Z",
      "pushed_at": "2025-09-24T02:21:54Z"
    },
    "stats": {
      "stars": 101,
      "forks": 2,
      "watchers": 101,
      "open_issues": 0,
      "size": 46
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 64829,
        "Shell": 2298
      },
      "license": "MIT License",
      "topics": [
        "golang",
        "ssh",
        "ssh-tunnel",
        "tunneling"
      ]
    },
    "content": {
      "readme": "![GitHub License](https://img.shields.io/github/license/strandnerd/tunn) ![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/strandnerd/tunn/ci.yml) ![GitHub Release](https://img.shields.io/github/v/release/strandnerd/tunn) ![GitHub Issues or Pull Requests](https://img.shields.io/github/issues/strandnerd/tunn)\n\n\n\n# tunn - SSH Tunnel Manager\n\n`tunn` is a developer-friendly wrapper around OpenSSH that makes it easy to manage multiple SSH tunnels defined in a simple configuration file\n\n<img width=\"1536\" height=\"649\" alt=\"tunn-gophers\" src=\"https://github.com/user-attachments/assets/9b88aa87-721b-4577-b0c1-2cf61af4d160\" />\n\n## Features\n\n- üöÄ **Simple Configuration**: Define all your tunnels in a single YAML file\n- üîß **Selective Tunnels**: Run all tunnels or specific ones by name\n- üîå **Multiple Ports**: Support for multiple port mappings per tunnel\n- üîê **SSH Integration**: Leverages your existing SSH configuration\n- ‚ö° **Parallel Execution**: All tunnels run concurrently\n- üß© **Daemon Mode**: Background service with status reporting via IPC\n- üßº **Lean Go Module**: Depends only on `gopkg.in/yaml.v3`, keeping builds clean and portable\n- üîß **Native SSH Sessions**: Spawns the system `ssh` binary for each mapping, so keys and config behave exactly like your shell\n- üéöÔ∏è **Per-Port Processes**: Launches one PID per port to pave the way for fine-grained lifecycle controls\n\n\n\n![Screencast from 2025-09-23 22-19-13 (online-video-cutter com)](https://github.com/user-attachments/assets/dbce86b1-c40c-47b9-a89c-6e188ad6e4ee)\n\n\n\n\n## Installation\n\n### Quick Install\n\n```bash\ncurl -sSL https://raw.githubusercontent.com/strandnerd/tunn/main/scripts/install.sh | sudo sh\n```\n\n### From Go Install\n\n```bash\ngo install github.com/strandnerd/tunn@latest\n```\n\n### Build Locally\n\n```bash\ngit clone https://github.com/strandnerd/tunn.git\ncd tunn\ngo build -o tunn\nsudo mv tunn /usr/local/bin/\n```\n\n## Configuration\n\nCreate a `~/.tunnrc` file in your home directory:\n\n```yaml\ntunnels:\n  api:\n    host: myserver          # SSH host from ~/.ssh/config\n    ports:\n      - 3000:3000           # local:remote port mapping\n      - 4000:4001\n    user: apiuser           # optional: SSH user\n    identity_file: ~/.ssh/id_rsa  # optional: SSH key\n\n  db:\n    host: database\n    ports:\n      - 3306:3306           # MySQL\n      - 5432:5432           # PostgreSQL\n    user: dbadmin           # optional: overrides SSH config\n\n  cache:\n    host: cacheserver\n    ports:\n      - 6379:6379           # Redis\n```\n\n### Configuration Fields\n\n- `tunnels`: Map of tunnel names\n- `host`: SSH host alias from `~/.ssh/config`\n- `ports`: List of port mappings in `local:remote` format\n- `user` (optional): SSH username (overrides `~/.ssh/config`)\n- `identity_file` (optional): Path to SSH private key\n\n## Usage\n\n### Run All Tunnels\n\n```bash\ntunn\n```\n\n### Run Specific Tunnels\n\n```bash\n# Single tunnel\ntunn api\n\n# Multiple tunnels\ntunn api db\n\n# All database-related tunnels\ntunn db cache\n```\n\n### Run Tunnels in the Background\n\n```bash\ntunn --detach\n\n# Or only specific tunnels\ntunn --detach api db\n```\n\nThe CLI respawns itself as a daemon, stores metadata under `$XDG_RUNTIME_DIR/tunn` (or `~/.cache/tunn` when the runtime dir is unavailable), and immediately returns control to the terminal.\n\n### Check Daemon Status\n\n```bash\ntunn status\n```\n\nThe status command contacts the daemon's Unix socket, reporting the PID, mode, and the latest port states for each managed tunnel. If no daemon is running, a friendly message is printed instead.\n\n### Stop the Daemon\n\n```bash\ntunn stop\n```\n\nThe stop command asks the daemon to shut down cleanly, waits for it to exit, and reports success.\n\n### Output Example\n\n```\nTunnels Ready\n\n[api]\n    3000 ‚ûú 3000 [active]\n    4000 ‚ûú 4001 [active]\n[db]\n    3306 ‚ûú 3306 [connecting]\n    5432 ‚ûú 5432 [active]\n```\n\n## SSH Configuration\n\n`tunn` uses your system's SSH configuration. Make sure your hosts are defined in `~/.ssh/config`:\n\n```ssh\nHost myserver\n    HostName 192.168.1.100\n    User myuser\n    Port 22\n\nHost database\n    HostName db.example.com\n    User dbuser\n    IdentityFile ~/.ssh/db_key\n```\n\n## Requirements\n\n- Go 1.21 or higher (for building)\n- OpenSSH client (`ssh` command)\n- Valid SSH configuration\n- macOS and Linux are supported today; Windows support is planned but not available yet\n\n## Daemon Runtime Files\n\nWhile running in detached mode, `tunn` stores the following files in its runtime directory:\n\n- `daemon.pid` ‚Äì PID of the active daemon; used to prevent duplicate launches.\n- `daemon.sock` ‚Äì Unix domain socket for control commands (e.g., `tunn status`).\n- `daemon.log` ‚Äì Aggregated stdout/stderr from the daemon process.\n\nThe directory is created with `0700` permissions, and files are cleaned up automatically when the daemon exits or when stale state is detected on the next launch.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:34.040433"
  },
  {
    "basic_info": {
      "name": "go-commons",
      "full_name": "Rodert/go-commons",
      "owner": "Rodert",
      "description": "A small collection of Go language utility packages. ",
      "url": "https://github.com/Rodert/go-commons",
      "clone_url": "https://github.com/Rodert/go-commons.git",
      "ssh_url": "git@github.com:Rodert/go-commons.git",
      "homepage": "",
      "created_at": "2025-09-07T15:47:35Z",
      "updated_at": "2025-09-29T03:48:18Z",
      "pushed_at": "2025-09-13T12:51:59Z"
    },
    "stats": {
      "stars": 82,
      "forks": 9,
      "watchers": 82,
      "open_issues": 0,
      "size": 16691
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 93002,
        "Makefile": 3546,
        "Shell": 1088
      },
      "license": "The Unlicense",
      "topics": []
    },
    "content": {
      "readme": "# go-commons\r\n\r\n<sub><sup>English | [‰∏≠Êñá README](README-zh.md)</sup></sub>\r\n\r\n[![Go Reference](https://pkg.go.dev/badge/github.com/Rodert/go-commons.svg)](https://pkg.go.dev/github.com/Rodert/go-commons)\r\n[![License: Unlicense](https://img.shields.io/badge/license-Unlicense-blue.svg)](LICENSE)\r\n[![Go Tests](https://github.com/Rodert/go-commons/actions/workflows/go-test.yml/badge.svg)](https://github.com/Rodert/go-commons/actions/workflows/go-test.yml)\r\n[![Go Lint](https://github.com/Rodert/go-commons/actions/workflows/go-lint.yml/badge.svg)](https://github.com/Rodert/go-commons/actions/workflows/go-lint.yml)\r\n[![codecov](https://codecov.io/gh/Rodert/go-commons/branch/main/graph/badge.svg)](https://codecov.io/gh/Rodert/go-commons)\r\n\r\nA small collection of Go utility packages focused on string helpers and basic system utilities, with minimal third‚Äëparty dependencies.\r\n\r\n## Features\r\n\r\n- **No third‚Äëparty deps**: Prefer using the Go standard library where possible\r\n- **String utilities (`stringutils`)**:\r\n  - Emptiness and whitespace: `IsEmpty`, `IsNotEmpty`, `IsBlank`, `IsNotBlank`, `Trim`, `TrimToEmpty`\r\n  - Substrings and checks: `ContainsAny`, `ContainsAll`, `SubstringBefore`, `SubstringAfter`, `StartsWith`, `EndsWith`\r\n  - Transformations: `Capitalize`, `Uncapitalize`, `ReverseString`, `ToUpperCase`, `ToLowerCase`\r\n  - Replace and join: `Join`, `Split`, `Replace`, `ReplaceAll`, `Repeat`\r\n  - Padding and centering: `PadLeft`, `PadRight`, `Center`\r\n  - Misc: `Truncate`, `TruncateWithSuffix`, `CountMatches`, `DefaultIfEmpty`, `DefaultIfBlank`\r\n- **System utilities (`systemutils`)**:\r\n  - CPU utilities (`cpuutils`): `GetCPUInfo` - retrieve CPU cores, usage percentage, and load averages\r\n  - Memory utilities (`memutils`): `GetMemInfo` - get total, available, and used memory\r\n  - Disk utilities (`diskutils`): `GetDiskInfo` - get disk space information including total, free, used space and usage ratio\r\n\r\n## Module\r\n\r\n- Module path: `github.com/Rodert/go-commons`\r\n- Go version: `1.24.7`\r\n\r\n## Install\r\n\r\n```bash\r\ngo get github.com/Rodert/go-commons\r\n```\r\n\r\n## Development\r\n\r\n### Auto-formatting\r\n\r\nThis project uses Git hooks to automatically format Go code before each commit.\r\n\r\nTo install the pre-commit hook:\r\n\r\n```bash\r\nmake hooks\r\n```\r\n\r\n### API Documentation\r\n\r\nThis project includes an interactive API documentation interface using Swagger UI. This allows you to explore and test the library's functions through a web interface.\r\n\r\n#### üìå Online API Documentation\r\n\r\n**Visit our API documentation online at: [https://rodert.github.io/go-commons](https://rodert.github.io/go-commons)**\r\n\r\nThe online documentation is automatically deployed from the main branch and provides the most up-to-date API reference.\r\n\r\n![API Documentation Interface](images/api-img.png)\r\n\r\n#### Local Development\r\n\r\nTo start the API documentation server locally:\r\n\r\n```bash\r\n./run_apidocs.sh\r\n```\r\n\r\nThen open your browser and navigate to [http://localhost:8080](http://localhost:8080) to view the interactive API documentation.\r\n\r\nTo manually format all Go files:\r\n\r\n```bash\r\nmake fmt\r\n```\r\n\r\n## Usage\r\n\r\n### String Utilities\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/Rodert/go-commons/stringutils\"\r\n)\r\n\r\nfunc main() {\r\n\t// Basic string operations\r\n\tfmt.Println(stringutils.IsBlank(\"  \\t\\n\"))         // true\r\n\tfmt.Println(stringutils.Trim(\"  hello  \"))        // \"hello\"\r\n\tfmt.Println(stringutils.TruncateWithSuffix(\"abcdef\", 4, \"..\")) // \"ab..\"\r\n\tfmt.Println(stringutils.PadLeft(\"42\", 5, '0'))     // \"00042\"\r\n\tfmt.Println(stringutils.ContainsAny(\"gopher\", \"go\", \"java\")) // true\r\n\t\r\n\t// String transformations\r\n\tfmt.Println(stringutils.Reverse(\"hello\"))         // \"olleh\"\r\n\tfmt.Println(stringutils.SwapCase(\"Hello World\"))  // \"hELLO wORLD\"\r\n\tfmt.Println(stringutils.PadCenter(\"hello\", 9, '*')) // \"**hello**\"\r\n}\r\n```\r\n\r\n### System Utilities\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/Rodert/go-commons/systemutils/cpuutils\"\r\n\t\"github.com/Rodert/go-commons/systemutils/memutils\"\r\n\t\"github.com/Rodert/go-commons/systemutils/diskutils\"\r\n)\r\n\r\nfunc main() {\r\n\t// Get CPU information\r\n\tcpuInfo, err := cpuutils.GetCPUInfo()\r\n\tif err == nil {\r\n\t\tfmt.Printf(\"CPU Cores: %d\\n\", cpuInfo.LogicalCores)\r\n\t\tfmt.Printf(\"CPU Usage: %.2f%%\\n\", cpuInfo.UsagePercent)\r\n\t\tfmt.Printf(\"Load Average: %.2f, %.2f, %.2f\\n\", \r\n\t\t\tcpuInfo.LoadAvg[0], cpuInfo.LoadAvg[1], cpuInfo.LoadAvg[2])\r\n\t}\r\n\t\r\n\t// Get memory information\r\n\tmemInfo, err := memutils.GetMemInfo()\r\n\tif err == nil {\r\n\t\tfmt.Printf(\"Total Memory: %d bytes\\n\", memInfo.Total)\r\n\t\tfmt.Printf(\"Available Memory: %d bytes\\n\", memInfo.Available)\r\n\t\tfmt.Printf(\"Used Memory: %d bytes\\n\", memInfo.Used)\r\n\t}\r\n\t\r\n\t// Get disk information\r\n\tdiskInfo, err := diskutils.GetDiskInfo(\"/\")\r\n\tif err == nil {\r\n\t\tfmt.Printf(\"Disk Path: %s\\n\", diskInfo.Path)\r\n\t\tfmt.Printf(\"Total Space: %d bytes\\n\", diskInfo.Total)\r\n\t\tfmt.Printf(\"Free Space: %d bytes\\n\", diskInfo.Free)\r\n\t\tfmt.Printf(\"Used Space: %d bytes\\n\", diskInfo.Used)\r\n\t\tfmt.P",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:35.307520"
  },
  {
    "basic_info": {
      "name": "frankenphp-grpc",
      "full_name": "dunglas/frankenphp-grpc",
      "owner": "dunglas",
      "description": " A PHP extension to write gRPC servers using the official gRPC library written in Go ",
      "url": "https://github.com/dunglas/frankenphp-grpc",
      "clone_url": "https://github.com/dunglas/frankenphp-grpc.git",
      "ssh_url": "git@github.com:dunglas/frankenphp-grpc.git",
      "homepage": null,
      "created_at": "2025-09-15T13:46:34Z",
      "updated_at": "2025-09-24T17:32:40Z",
      "pushed_at": "2025-09-28T15:09:44Z"
    },
    "stats": {
      "stars": 78,
      "forks": 2,
      "watchers": 78,
      "open_issues": 2,
      "size": 83
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 4367
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# FrankenPHP gRPC Server\n\nA [FrankenPHP](https://frankenphp.dev) extension that allows you to run a [gRPC](https://grpc.io/) server triggering code written either in PHP or Go.\nUnder the hood, this extension uses the [gRPC for Go](https://grpc.io/docs/languages/go/) library and FrankenPHP's [Go extension support](https://frankenphp.dev/docs/extensions/).\n\n> [!WARNING]\n>\n> This extension is highly experimental and not recommended for production use.\n> The public API may change at any time without notice.\n\n## Features\n\n* Run a high performance gRPC server with FrankenPHP (the PHP part is executed in a worker loop)\n* Write gRPC service handlers in PHP\n* Write gRPC service handlers in Go\n* Write gRPC service handlers in a mix of PHP and Go ü§Ø\n* All features supported by the [gRPC for Go](https://grpc.io/docs/languages/go/) library\n* Entirely written in Go, no C code!\n* [API Platform](https://api-platform.com) compatibility!\n\n## Prerequisites\n\n* FrankenPHP extensions prerequisites: https://frankenphp.dev/docs/extensions/#prerequisites\n* gRPC for Go prerequisites: https://grpc.io/docs/languages/go/quickstart/#prerequisites\n\n## Usage\n\n### Create a Go module\n\n```console\ngo mod init example.com/mygrpcserver \n```\n\n### Create a Protobuf Definition:\n\nCreate a `.proto` file describing your gRPC service and messages.\n\nExample (in a `helloworld/helloworld.proto` file):\n\n```protobuf\nsyntax = \"proto3\";\n\noption go_package = \"example.com/mygrpcserver/helloworld\";\n\npackage helloworld;\n\nservice Greeter {\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n\nmessage HelloReply {\n  string message = 1;\n}\n```\n\nGenerate the Go code:\n\n```console\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative helloworld/helloworld.proto\n```\n\n### Implement the gRPC Server in Go\n\n```go\npackage mygrpcserver\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\tpb \"example.com/mygrpcserver/helloworld\"\n\t\"github.com/dunglas/frankenphp\"\n\tphpGrpc \"github.com/dunglas/frankenphp-grpc\"\n\t\"github.com/go-viper/mapstructure/v2\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\nfunc init() {\n\tphpGrpc.RegisterGrpcServerFactory(func() *grpc.Server {\n\t\ts := grpc.NewServer()\n\t\tpb.RegisterGreeterServer(s, &server{})\n\t\treflection.Register(s)\n\n\t\treturn s\n\t})\n}\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\n// SayHello implements helloworld.GreeterServer\nfunc (s *server) SayHello(_ context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tif in.Name == \"\" {\n\t\treturn nil, fmt.Errorf(\"the Name field is required\")\n\t}\n\n    // Convert the request to a map[string]any\n\tvar phpRequest map[string]any\n\tif err := mapstructure.Decode(in, &phpRequest); err != nil {\n\t\treturn nil, err\n\t}\n\n    // Call the PHP code, pass the map as a PHP associative array\n\tphpResponse := phpGrpc.HandleRequest(phpRequest)\n\n    // Convert the PHP response (a map) back to a HelloReply struct\n\tvar response pb.HelloReply\n\tif err := mapstructure.Decode(phpResponse.(frankenphp.AssociativeArray).Map, &response); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &response, nil\n}\n```\n\nRefer to the [gRPC for Go documentation](https://grpc.io/docs/languages/go/) for more details on how to implement your gRPC service in Go.\nRfer to the [FrankenPHP extensions documentation](https://frankenphp.dev/docs/extensions/) for more details on how to pass data from Go to PHP and vice versa.\n\n### Implement the gRPC Service Handler in PHP\n\nCreate a file named `grpc-worker.php` in the same directory as the FrankenPHP binary we'll build later:\n\n```php\n<?php\n\n// Require the Composer autoloader here if needed (API Platform, Symfony, etc.)\n//require __DIR__ . '/vendor/autoload.php';\n\n// Handler outside the loop for better performance (doing less work)\n$handler = static function (array $request): array  {\n\t// Do something with the gRPC request\n\n    return ['message' => \"Hello, {$request['Name']}\"];\n};\n\n$maxRequests = (int)($_SERVER['MAX_REQUESTS'] ?? 0);\nfor ($nbRequests = 0; !$maxRequests || $nbRequests < $maxRequests; ++$nbRequests) {\n    $keepRunning = \\frankenphp_handle_request($handler);\n\n    // Call the garbage collector to reduce the chances of it being triggered in the middle of the handling of a request\n    gc_collect_cycles();\n\n    if (!$keepRunning) {\n      break;\n    }\n}\n```\n\n### Create the `Caddyfile`\n\nCreate a `Caddyfile` in the same directory as the FrankenPHP binary we'll build later:\n\n```caddyfile\n{\n\tfrankenphp\n\tgrpc {\n\t\taddress :50051 # Optional\n\t\tworker grpc-worker.php # Optional\n\t\tmin_threads 50 # Optional, defaults to runtime.NumCPU()\n\t}\n}\n```\n\n### Build and Run the FrankenPHP Binary with the gRPC Extension\n\nRun the server:\n\n```console\nXCADDY_DEBUG=1\n    CGO_ENABLED=1 \\\n\tXCADDY_GO_BUILD_FLAGS=\"-tags=nobadger,nomysql,nopgx\" \\\n\tCGO_CFLAGS=\"$(php-config --includes) -I/opt/homebrew/include/\" \\\n\tCGO_LDFLAGS=\"$(php-config --ldflags) $(php-config --libs) -L/opt/homebrew/lib/ -L/usr/lib\" \\\n\txcaddy build\n\n./caddy run\n```\n\nYour ",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:36.589590"
  },
  {
    "basic_info": {
      "name": "listnr",
      "full_name": "sammwyy/listnr",
      "owner": "sammwyy",
      "description": "TUI/Terminal interactive music player",
      "url": "https://github.com/sammwyy/listnr",
      "clone_url": "https://github.com/sammwyy/listnr.git",
      "ssh_url": "git@github.com:sammwyy/listnr.git",
      "homepage": "",
      "created_at": "2025-09-02T14:15:29Z",
      "updated_at": "2025-09-26T15:54:16Z",
      "pushed_at": "2025-09-04T18:44:35Z"
    },
    "stats": {
      "stars": 76,
      "forks": 8,
      "watchers": 76,
      "open_issues": 4,
      "size": 2717
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 37005,
        "Makefile": 141
      },
      "license": null,
      "topics": [
        "app",
        "audio",
        "audio-app",
        "audio-player",
        "cli",
        "flac",
        "go",
        "golang",
        "linux",
        "mp3",
        "music",
        "music-library",
        "music-player",
        "terminal",
        "tui",
        "tui-app",
        "vorbis",
        "wav",
        "windows"
      ]
    },
    "content": {
      "readme": "# Listnr - Terminal Music Player\n\nA modern, modular terminal-based music player written in Go.\n\n![](./docs/assets/demo.gif)\n\n## Features\n\n- üéµ Support for MP3, WAV, FLAC, OGG, M4A formats\n- üìÅ Directory-based music library browsing\n- ‚ö° Real-time playback controls\n- üéõÔ∏è Volume control with visual feedback\n- ‚å®Ô∏è Vim-inspired keyboard shortcuts\n- üé® Clean, responsive TUI interface\n- üéÄ Audio visualizer\n\n## Architecture\n\n```\nlistnr/\n‚îú‚îÄ‚îÄ cmd/listnr/          # Application entry point\n‚îú‚îÄ‚îÄ internal/\n‚îÇ   ‚îú‚îÄ‚îÄ audio/           # Audio engine (decoding, playback)\n‚îÇ   ‚îú‚îÄ‚îÄ library/         # Music library management\n‚îÇ   ‚îú‚îÄ‚îÄ config/          # Configuration handling\n‚îÇ   ‚îú‚îÄ‚îÄ ui/              # Terminal user interface\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ components/  # Reusable UI components\n‚îÇ   ‚îî‚îÄ‚îÄ events/          # Event system for component communication\n```\n\n## Installation\n\n```bash\ngit clone https://github.com/sammwyy/listnr\ncd listnr\ngo build ./cmd/listnr\n./listnr\n```\n\n## Usage\n\n### Navigation\n- `ESC`: Close app.\n- `‚Üê/‚Üí`: Navigate between sidebar and song list.\n- `‚Üë/‚Üì`: Navigate list items,\n\n### Playback\n- `SPACE`: Play/pause.\n- `A/D`: Seek backward/forward 5 seconds.\n- `Q/E`: Previous/next song.\n- `W/A`: Volume up/down.\n- `R`: Toggle repeat mode.\n- `N`: Toggle autoplay mode.\n\n### Configuration\n\nConfiguration file is automatically created at `~/.config/listnr.json`:\n\n```json\n{\n  \"music_routes\": [\"/home/user/Music\"],\n  \"volume\": 0.5,\n  \"last_path\": \"\",\n  \"autoplay_enabled\": true,\n  \"repeat_mode\": false\n}\n```",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:37.880497"
  },
  {
    "basic_info": {
      "name": "s3tk",
      "full_name": "KingOfBugbounty/s3tk",
      "owner": "KingOfBugbounty",
      "description": null,
      "url": "https://github.com/KingOfBugbounty/s3tk",
      "clone_url": "https://github.com/KingOfBugbounty/s3tk.git",
      "ssh_url": "git@github.com:KingOfBugbounty/s3tk.git",
      "homepage": null,
      "created_at": "2025-09-13T00:05:26Z",
      "updated_at": "2025-09-29T05:18:56Z",
      "pushed_at": "2025-09-13T00:14:31Z"
    },
    "stats": {
      "stars": 76,
      "forks": 18,
      "watchers": 76,
      "open_issues": 2,
      "size": 9
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 13732
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "<div align=\"center\">\n  <img width=\"768\" alt=\"ChatGPT Image 12 de set de 2025, 21_02_01\" src=\"https://github.com/user-attachments/assets/40674e6f-914b-4cd4-a7a9-421657631756\" />\n</div>\n\n\n<h1 align=\"center\">\n  S3Scan - S3 Bucket Security Scanner / <a href=\"https://x.com/OFJAAAH\" target=\"_blank\" rel=\"noopener\">@‚úñÔ∏èOFJAAAH</a>\n</h1>\n\n<p align=\"center\">\n  <strong>A powerful S3 bucket security scanner designed for penetration testing and bug bounty hunting</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://img.shields.io/badge/Go-1.21+-blue.svg\" alt=\"Go Version\">\n  <img src=\"https://img.shields.io/badge/License-MIT-green.svg\" alt=\"License\">\n  <img src=\"https://img.shields.io/badge/Platform-Linux%20%7C%20Windows%20%7C%20macOS-lightgrey.svg\" alt=\"Platform\">\n  <img src=\"https://img.shields.io/github/release/user/s3scan.svg\" alt=\"Release\">\n</p>\n\n<p align=\"center\">\n  This tool automatically detects misconfigurations and security vulnerabilities in AWS S3 buckets.\n</p>\n\n## Features\n\n- **Comprehensive Security Testing**: Tests for multiple S3 bucket vulnerabilities\n- **Multiple Input Formats**: Supports various S3 URL formats and bucket names\n- **Permission Testing**: Checks LIST, UPLOAD, DELETE, and TAKEOVER capabilities\n- **Batch Processing**: Scan multiple buckets from stdin input\n- **Colorized Output**: Easy-to-read results with color-coded vulnerability status\n- **Detailed Reporting**: Comprehensive summary of findings\n\n## Security Tests Performed\n\n### 1. Bucket Existence Check\n- Verifies if the S3 bucket exists\n- Identifies non-existent buckets that could be claimed\n\n### 2. List Permissions (READ)\n- Tests if bucket contents can be enumerated\n- Detects publicly readable buckets\n- **Risk**: Information disclosure, data exposure\n\n### 3. Upload Permissions (WRITE)\n- Tests if files can be uploaded to the bucket\n- Identifies writable buckets\n- **Risk**: Malicious file upload, defacement, hosting malware\n\n### 4. Delete Permissions (DELETE)\n- Tests if objects can be deleted from the bucket\n- Detects buckets with delete permissions\n- **Risk**: Data destruction, denial of service\n\n### 5. Bucket Takeover Detection\n- Identifies non-existent buckets that can be claimed\n- Tests multiple AWS regions for takeover opportunities\n- **Risk**: Subdomain takeover, brand impersonation\n\n## Installation\n\n### Prerequisites\n- Go 1.21 or higher\n- Internet connection for S3 API testing\n\n### Building from Source\n\n1. Clone or download the source code\n2. Navigate to the project directory\n3. Build the binary:\n\n```bash\ngo build -o s3scan main.go\n```\n\n### Quick Setup\n\n```bash\n# Make the binary executable\nchmod +x s3scan\n\n# Optional: Move to system PATH\nsudo mv s3scan /usr/local/bin/\n```\n\n## Usage\n\n### Basic Usage\n\nThe tool reads S3 bucket URLs or names from stdin:\n\n```bash\n# Single bucket\necho \"my-test-bucket\" | ./s3scan\n\n# Multiple buckets from file\ncat buckets.txt | ./s3scan\n\n# Multiple buckets inline\necho -e \"bucket1\\nbucket2\\nbucket3\" | ./s3scan\n```\n\n### Supported Input Formats\n\nThe scanner accepts various S3 URL formats:\n\n- Bucket name: `my-bucket-name`\n- Virtual-hosted style: `https://my-bucket.s3.amazonaws.com`\n- Path-style: `https://s3.amazonaws.com/my-bucket`\n- S3 URI: `s3://my-bucket-name`\n\n### Example Commands\n\n```bash\n# Scan from a list of domains/subdomains\nsubfinder -d example.com | grep s3 | ./s3scan\n\n# Scan buckets found during reconnaissance\necho \"company-backups\" | ./s3scan\necho \"app-uploads\" | ./s3scan\necho \"static-assets\" | ./s3scan\n\n# Batch scan from file\ncat << EOF | ./s3scan\ncompany-data\nbackup-bucket\npublic-assets\nuser-uploads\nEOF\n```\n\n### Integration with Other Tools\n\n```bash\n# With subfinder and grep\nsubfinder -d target.com | grep -i s3 | ./s3scan\n\n# With amass\namass enum -d target.com | grep s3 | ./s3scan\n\n# With waybackurls\necho \"target.com\" | waybackurls | grep s3 | ./s3scan\n```\n\n## Output Interpretation\n\n### Vulnerability Status\n\n- **[VULNERABLE]** - Red: Misconfiguration detected\n- **[SECURE]** - Green: No vulnerabilities found\n- **[EXISTS]** - Green: Bucket exists and accessible\n- **[NOT FOUND]** - Yellow: Bucket doesn't exist\n- **[TAKEOVER POSSIBLE]** - Magenta: Bucket can be claimed\n\n### Permission Types\n\n- **[LIST]** - Can enumerate bucket contents\n- **[UPLOAD]** - Can upload files to bucket\n- **[DELETE]** - Can delete objects from bucket\n- **[TAKEOVER]** - Bucket doesn't exist and can be claimed\n\n### Example Output\n\n```\n[MISCONFIGURED] company-backups\n  ‚îî‚îÄ [LIST] Public read access - can enumerate bucket contents\n  ‚îî‚îÄ [UPLOAD] Public write access - can upload malicious files\n\n[TAKEOVER POSSIBLE] old-app-assets\n  ‚îî‚îÄ [TAKEOVER] Bucket doesn't exist - can be claimed for subdomain takeover\n\n[SECURE] private-data\n```\n\n## Legal and Ethical Usage\n\n‚ö†Ô∏è **IMPORTANT**: This tool is designed for:\n- Authorized penetration testing\n- Bug bounty programs\n- Security assessments on systems you own\n- Educational purposes\n\n**DO NOT USE** for:\n- Unauthorized testing of third-party systems\n- Malicious activities\n- Illegal access att",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:39.149628"
  },
  {
    "basic_info": {
      "name": "orsted",
      "full_name": "almounah/orsted",
      "owner": "almounah",
      "description": "Orsted C2 Framework",
      "url": "https://github.com/almounah/orsted",
      "clone_url": "https://github.com/almounah/orsted.git",
      "ssh_url": "git@github.com:almounah/orsted.git",
      "homepage": null,
      "created_at": "2025-09-02T16:07:04Z",
      "updated_at": "2025-09-29T11:34:54Z",
      "pushed_at": "2025-09-17T10:25:48Z"
    },
    "stats": {
      "stars": 75,
      "forks": 11,
      "watchers": 75,
      "open_issues": 0,
      "size": 2418
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 792178,
        "C": 47246,
        "C++": 20147,
        "Shell": 7598,
        "Makefile": 4126,
        "CMake": 3387,
        "Assembly": 1711,
        "Batchfile": 1428
      },
      "license": "GNU General Public License v3.0",
      "topics": []
    },
    "content": {
      "readme": "# Orsted C2\n\n![Orsted](orsted-homepage.png)\n\n> **‚ÄúThey live as they please with that tiny pride of theirs and die because of a foolish enemy.‚Äù**  \n\nOrsted C2 is a **C2 framework** created for educational purposes.\n\nIt consists of multiple **Orsted beacons** that communicate with each other and the main **Orsted server**. An operator can interact with the beacons using the **Orsted client**.\n\n---\n\n## Documentation\n\nFor full details and setup instructions, check the **Orsted documentation**:\n\nüåê [Visit the Orsted Docs](https://almounah.github.io/orsted-doc/)\n\n\n![Orsted](orsted.gif)\n\n---\n\n## üîó Quick Links\n\n- **Orsted C2 code**: [GitHub Repository](https://github.com/almounah/orsted)  \n- **Documentation source code**: [GitHub Docs](https://github.com/almounah/orsted-doc)  \n- **Documentation site**: [Orsted Docs Site](https://almounah.github.io/orsted-doc/)  \n- **Example usage**: [Orsted in Action](https://almounah.github.io/orsted-doc/intro/4-example-usage/)\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:40.428868"
  },
  {
    "basic_info": {
      "name": "sshai",
      "full_name": "sshllm/sshai",
      "owner": "sshllm",
      "description": "Âü∫‰∫éSSHÁöÑAIÂÆ¢Êà∑Á´Ø„ÄÇÈöèÊó∂ÈöèÂú∞ÔºåÁ´ãÂç≥ËøûÊé•‰ΩøÁî®Â§ßÊ®°ÂûãÊúçÂä°ÔºÅ| SSH-Based AI Client: Seamlessly access large language model services anytime, anywhere with instant connectivity!",
      "url": "https://github.com/sshllm/sshai",
      "clone_url": "https://github.com/sshllm/sshai.git",
      "ssh_url": "git@github.com:sshllm/sshai.git",
      "homepage": "https://sshllm.top",
      "created_at": "2025-09-11T15:57:07Z",
      "updated_at": "2025-09-30T01:17:44Z",
      "pushed_at": "2025-09-29T08:19:07Z"
    },
    "stats": {
      "stars": 66,
      "forks": 4,
      "watchers": 66,
      "open_issues": 0,
      "size": 580
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 125747,
        "Shell": 82720,
        "Makefile": 3381
      },
      "license": "Other",
      "topics": [
        "ai",
        "ai-client",
        "sshai"
      ]
    },
    "content": {
      "readme": "# SSHAI - SSH AI Assistant\n\n[English](./README_EN.md) | ÁÆÄ‰Ωì‰∏≠Êñá\n\n‰∏Ä‰∏™ÈÄöËøáSSHËøûÊé•Êèê‰æõAIÊ®°ÂûãÊúçÂä°ÁöÑÊô∫ËÉΩÂä©ÊâãÁ®ãÂ∫èÔºåËÆ©‰Ω†ÂèØ‰ª•Âú®‰ªª‰ΩïÊîØÊåÅSSHÁöÑÁéØÂ¢É‰∏≠‰ΩøÁî®AIÂä©Êâã„ÄÇ \n\nÊîØÊåÅ[‰∏âÁßçË∞ÉÁî®Ê®°Âºè](https://mp.weixin.qq.com/s/_sSEC15WOfeF0t8AaQ6Qbg)Ôºö\n- **‰∫§‰∫íÊ®°Âºè** - ÈÄöËøáSSHËøûÊé•ÂêéÔºåÁõ¥Êé•Âú®ÁªàÁ´Ø‰∏≠ËæìÂÖ•ÂëΩ‰ª§Âç≥ÂèØË∞ÉÁî®AIÂä©ÊâãÔºà`ssh your-bot@sshllm.top`Ôºâ    \n- **ÂëΩ‰ª§Ë°åÊ®°Âºè** - ÈÄöËøáSSHËøûÊé•ÂêéÔºåÁõ¥Êé•Âú®ÁªàÁ´Ø‰∏≠ÊâßË°åÂëΩ‰ª§Âç≥ÂèØË∞ÉÁî®AIÂä©ÊâãÔºà`ssh bash@sshllm.top Êü•ÁúãËøõÁ®ãÂç†Áî®`Ôºâ    \n- **ÁÆ°ÈÅìÊ®°Âºè** - ÈÄöËøáSSHËøûÊé•ÂêéÔºåÈÄöËøáÁÆ°ÈÅìÂ∞ÜÂÜÖÂÆπËæìÂÖ•Âà∞AIÂä©ÊâãÂç≥ÂèØË∞ÉÁî®AIÂä©ÊâãÔºà`cat doc.txt | ssh fanyi@sshllm.top`Ôºâ\n\nÊ≠§È°πÁõÆÈááÁî®`CodeBuddy`ËøõË°åÂºÄÂèëÔºåÂÆåÂÖ®‰∏çÂÜô‰∏ÄË°å‰ª£Á†Å„ÄÇ    \nÂÖ≥‰∫éÂºÄÂèëÁöÑÁªèÈ™åÂøÉÂæóÔºåËØ∑ÂèÇËÄÉÔºö[‰∏çÂÜô‰∏ÄË°å‰ª£Á†ÅÔºÅÊàëÁî® AI ÊâìÈÄ†‰∫Ü‰∏ÄÊ¨æ AI ÂÆ¢Êà∑Á´ØÔºÅÔºàÂºÄÊ∫êÔºâ](https://mp.weixin.qq.com/s/-5GC3TDAP_CXAcAkGO7tMQ)    \n\n\n## üöÄ Á≤æÈÄâÊ°à‰æã\n`SSHLLM`ÔºåÂü∫‰∫éÂΩìÂâçÂºÄÊ∫êÁâàÊ∑±Â∫¶ÂÆöÂà∂ÁöÑÂ§öÁî®Êà∑Â§öÈÖçÁΩÆÁâàÔºåÊîØÊåÅÁî®Êà∑Ê≥®ÂÜå„ÄÅÈÖçÁΩÆÂä©ÊâãÔºåÂπ∂ÂàÜ‰∫´ÂÖ¨ÂºÄÊàñËÄÖÁßÅÊúâ‰ΩøÁî®„ÄÇÈöèÊó∂ÈöèÂú∞ÈÄöËøáSSHÂç≥ÂèØË∞ÉÁî®AIÂä©ÊâãÂÆåÊàêÂ¶ÇËá™Âä®ÁîüÊàêbashËÑöÊú¨„ÄÅ‰ª£Á†Å„ÄÅËØÜÂà´ÂõæÁâáÈ™åËØÅÁ†ÅÁ≠âÂäüËÉΩ„ÄÇ\n\nÂÆòÁΩëÔºö[https://sshllm.top](https://sshllm.top)\n\n\n## üöÄ ‰ΩìÈ™åÔºàÂºÄÊ∫êÁâàÊú¨Ôºâ\nÊâìÂºÄ‰Ω†ÁöÑÁªàÁ´ØÔºåËæìÂÖ•Â¶Ç‰∏ãÂëΩ‰ª§Âç≥ÂèØÁ´ãÂç≥‰ΩìÈ™åÂú®Á∫øAIÊúçÂä°ÔºÅ\n```bash\nssh test.sshai.top -p 9527\n```\n\n![](docs/screenshot.png)\n\n## ‚ú® ‰∏ªË¶ÅÁâπÊÄß\n\n- üîê **SSHÂÆâÂÖ®ËøûÊé•** - ÈÄöËøáSSHÂçèËÆÆÊèê‰æõÂä†ÂØÜÁöÑAIÊúçÂä°ËÆøÈóÆ\n- üîë **ÁÅµÊ¥ªËÆ§ËØÅ** - ÊîØÊåÅÂØÜÁ†ÅËÆ§ËØÅ„ÄÅSSHÂÖ¨Èí•ÂÖçÂØÜÁôªÂΩïÂíåÊó†ÂØÜÁ†ÅÊ®°Âºè\n- üóùÔ∏è **SSH KeysÊîØÊåÅ** - ÊîØÊåÅÂ§ö‰∏™SSHÂÖ¨Èí•ÂÖçÂØÜÁôªÂΩïÔºåÂÖºÂÆπRSA„ÄÅEd25519Á≠âÂØÜÈí•Á±ªÂûã\n- ü§ñ **Â§öÊ®°ÂûãÊîØÊåÅ** - ÊîØÊåÅDeepSeek„ÄÅHunyuanÁ≠âÂ§öÁßçAIÊ®°Âûã\n- üí≠ **ÂÆûÊó∂ÊÄùËÄÉÊòæÁ§∫** - ÊîØÊåÅDeepSeek R1Á≠âÊ®°ÂûãÁöÑÊÄùËÄÉËøáÁ®ãÂÆûÊó∂Â±ïÁ§∫\n- üõ†Ô∏è **MCPÂ∑•ÂÖ∑ÊîØÊåÅ** - ÊîØÊåÅModel Context ProtocolÔºåÂèØÈõÜÊàêÂêÑÁßçÂ§ñÈÉ®Â∑•ÂÖ∑ÂíåÊúçÂä°\n- üé® **ÁæéËßÇÁïåÈù¢** - ÂΩ©Ëâ≤ËæìÂá∫„ÄÅÂä®ÁîªÊïàÊûúÂíåASCIIËâ∫ÊúØ\n- ‚öôÔ∏è **ÁÅµÊ¥ªÈÖçÁΩÆ** - ÊîØÊåÅÂä®ÊÄÅÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Ôºà-cÂèÇÊï∞ÔºâÂíåÂÆåÊï¥ÁöÑYAMLÈÖçÁΩÆ\n- üåê **Â§öËØ≠Ë®ÄÊîØÊåÅ** - ÊîØÊåÅ‰∏≠ÊñáÂíåËã±ÊñáÁïåÈù¢\n- üìù **Ëá™ÂÆö‰πâÊèêÁ§∫ËØç** - ÂèØÈÖçÁΩÆÁöÑAIÊèêÁ§∫ËØçÁ≥ªÁªü\n- üöÄ **ÂêØÂä®Ê¨¢ËøéÈ°µ** - Á®ãÂ∫èÂêØÂä®Êó∂ÊòæÁ§∫ÁæéËßÇÁöÑÊ¨¢Ëøébanner\n- üèóÔ∏è **Ê®°ÂùóÂåñËÆæËÆ°** - Ê∏ÖÊô∞ÁöÑ‰ª£Á†ÅÊû∂ÊûÑÔºåÊòì‰∫éÊâ©Â±ï\n\n## üöÄ Âø´ÈÄüÂºÄÂßã\n\n### 1. ‰∏ãËΩΩÂíåÁºñËØë\n\n```bash\n# ÂÖãÈöÜÈ°πÁõÆ\ngit clone https://github.com/sshllm/sshai.git\ncd sshai\n\n# ÁºñËØëÁ®ãÂ∫è\nmake build\n# ÊàñËÄÖ\ngo build -o sshai cmd/main.go\n```\n\n### 2. ÈÖçÁΩÆËÆæÁΩÆ\n\nÁºñËæë `config.yaml` Êñá‰ª∂ÔºåËÆæÁΩÆ‰Ω†ÁöÑAPIÂØÜÈí•Ôºö\n\n```yaml\n# APIÈÖçÁΩÆ\napi:\n  base_url: \"https://api.deepseek.com/v1\"\n  api_key: \"your-api-key-here\"\n  default_model: \"deepseek-v3\"\n\n# ÊúçÂä°Âô®ÈÖçÁΩÆ\nserver:\n  port: 2213\n  welcome_message: \"Ê¨¢Ëøé‰ΩøÁî®SSHAIÔºÅ\"\n\n# ËÆ§ËØÅÈÖçÁΩÆÔºàÂèØÈÄâÔºâ\nauth:\n  password: \"\"  # ÁïôÁ©∫=Êó†ÂØÜÁ†ÅËÆ§ËØÅ\n  login_prompt: \"ËØ∑ËæìÂÖ•ËÆøÈóÆÂØÜÁ†Å: \"\n  # SSHÂÖ¨Èí•ÂÖçÂØÜÁôªÂΩïÈÖçÁΩÆÔºà‰ªÖÂú®ËÆæÁΩÆpasswordÊó∂ÁîüÊïàÔºâ\n  authorized_keys:\n    - \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC... user@hostname\"\n    - \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI... user2@hostname\"\n  authorized_keys_file: \"~/.ssh/authorized_keys\"  # ÂèØÈÄâÔºö‰ªéÊñá‰ª∂ËØªÂèñÂÖ¨Èí•\n\n# Ëá™ÂÆö‰πâÊèêÁ§∫ËØçÈÖçÁΩÆ\nprompt:\n  system_prompt: \"‰Ω†ÊòØ‰∏Ä‰∏™‰∏ì‰∏öÁöÑAIÂä©ÊâãÔºåËØ∑Áî®‰∏≠ÊñáÂõûÁ≠îÈóÆÈ¢ò„ÄÇ\"\n  stdin_prompt: \"ËØ∑ÂàÜÊûê‰ª•‰∏ãÂÜÖÂÆπÂπ∂Êèê‰æõÁõ∏ÂÖ≥ÁöÑÂ∏ÆÂä©ÊàñÂª∫ËÆÆÔºö\"\n  exec_prompt: \"ËØ∑ÂõûÁ≠î‰ª•‰∏ãÈóÆÈ¢òÊàñÊâßË°å‰ª•‰∏ã‰ªªÂä°Ôºö\"\n\n# MCPÂ∑•ÂÖ∑ÈÖçÁΩÆ\nmcp:\n  enabled: true  # ÂêØÁî®MCPÂäüËÉΩ\n  refresh_interval: 300  # Â∑•ÂÖ∑ÂàóË°®Âà∑Êñ∞Èó¥ÈöîÔºàÁßíÔºâ\n  servers:\n    # ‰ΩøÁî®uvxÁöÑÁ®≥ÂÆöÊúçÂä°ÔºàÊé®ËçêÔºâ\n    - name: \"time\"\n      transport: \"stdio\"\n      command: [\"uvx\", \"mcp-server-time\"]\n      enabled: true\n    - name: \"fetch\"\n      transport: \"stdio\"\n      command: [\"uvx\", \"mcp-server-fetch\"]\n      enabled: true\n    # ‰ΩøÁî®npxÁöÑÊúçÂä°ÔºàÂèØËÉΩÈúÄË¶ÅÊõ¥ÈïøÂêØÂä®Êó∂Èó¥Ôºâ\n    - name: \"bing\"\n      transport: \"stdio\"\n      command: [\"npx\", \"bing-cn-mcp\"]\n      enabled: true\n```\n\n### 3. ËøêË°åÊúçÂä°Âô®\n\n```bash\n# Áõ¥Êé•ËøêË°åÔºà‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆÊñá‰ª∂ config.yamlÔºâ\n./sshai\n\n# ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂ËøêË°å\n./sshai -c config.yaml\n./sshai -c /path/to/your/config.yaml\n\n# ÂêéÂè∞ËøêË°å\n./sshai > server.log 2>&1 &\n\n# ‰ΩøÁî®ËÑöÊú¨ËøêË°å\n./scripts/run.sh\n```\n\n#### ÂëΩ‰ª§Ë°åÂèÇÊï∞\n\n- `-c <config_file>` - ÊåáÂÆöÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑ\n  - Â¶ÇÊûú‰∏çÊåáÂÆöÔºåÈªòËÆ§‰ΩøÁî®ÂΩìÂâçÁõÆÂΩï‰∏ãÁöÑ `config.yaml`\n  - Â¶ÇÊûúÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÁ®ãÂ∫è‰ºöÊòæÁ§∫ÈîôËØØÊèêÁ§∫Âπ∂ÈÄÄÂá∫\n\n```bash\n# ‰ΩøÁî®Á§∫‰æã\n./sshai -c config.yaml          # ‰ΩøÁî®ÂΩìÂâçÁõÆÂΩïÁöÑÈÖçÁΩÆÊñá‰ª∂\n./sshai -c /etc/sshai/config.yaml  # ‰ΩøÁî®ÁªùÂØπË∑ØÂæÑÁöÑÈÖçÁΩÆÊñá‰ª∂\n./sshai                         # ÈªòËÆ§‰ΩøÁî® config.yaml\n```\n\n### 4. ËøûÊé•‰ΩøÁî®\n\n```bash\n# ‰∫§‰∫íÊ®°Âºè\nssh user@localhost -p 2213\n\n# Áõ¥Êé•ÊâßË°åÂëΩ‰ª§\nssh user@localhost -p 2213 \"‰Ω†Â•ΩÔºåËØ∑‰ªãÁªç‰∏Ä‰∏ã‰Ω†Ëá™Â∑±\"\n\n# ÁÆ°ÈÅìËæìÂÖ•ÂàÜÊûê\ncat file.txt | ssh user@localhost -p 2213\necho \"ÂàÜÊûêËøôÊÆµ‰ª£Á†Å\" | ssh user@localhost -p 2213\n```\n\n## üìÅ È°πÁõÆÁªìÊûÑ\n\n```\nsshai/\n‚îú‚îÄ‚îÄ README.md              # ‰∏≠ÊñáËØ¥ÊòéÊñáÊ°£\n‚îú‚îÄ‚îÄ README_EN.md           # Ëã±ÊñáËØ¥ÊòéÊñáÊ°£\n‚îú‚îÄ‚îÄ LICENSE                # ÂºÄÊ∫êÂçèËÆÆ\n‚îú‚îÄ‚îÄ config.yaml           # ‰∏ªÈÖçÁΩÆÊñá‰ª∂\n‚îú‚îÄ‚îÄ config-en.yaml        # Ëã±ÊñáÈÖçÁΩÆÊñá‰ª∂\n‚îú‚îÄ‚îÄ go.mod                # GoÊ®°Âùó‰æùËµñ\n‚îú‚îÄ‚îÄ Makefile              # ÊûÑÂª∫ËÑöÊú¨\n‚îú‚îÄ‚îÄ cmd/                  # Á®ãÂ∫èÂÖ•Âè£\n‚îÇ   ‚îî‚îÄ‚îÄ main.go           # ‰∏ªÁ®ãÂ∫èÊñá‰ª∂\n‚îú‚îÄ‚îÄ pkg/                  # Ê†∏ÂøÉÊ®°Âùó\n‚îÇ   ‚îú‚îÄ‚îÄ config/           # ÈÖçÁΩÆÁÆ°ÁêÜ\n‚îÇ   ‚îú‚îÄ‚îÄ models/           # Êï∞ÊçÆÊ®°Âûã\n‚îÇ   ‚îú‚îÄ‚îÄ ai/               # AIÂä©ÊâãÂäüËÉΩ\n‚îÇ   ‚îú‚îÄ‚îÄ ssh/              # SSHÊúçÂä°Âô®\n‚îÇ   ‚îî‚îÄ‚îÄ utils/            # Â∑•ÂÖ∑ÂáΩÊï∞\n‚îú‚îÄ‚îÄ docs/                 # È°πÁõÆÊñáÊ°£\n‚îú‚îÄ‚îÄ scripts/              # ÊµãËØïÂíåËøêË°åËÑöÊú¨\n‚îî‚îÄ‚îÄ keys/                 # SSHÂØÜÈí•Êñá‰ª∂\n```\n\n## üîß ÈÖçÁΩÆÊåáÂçó\n\n### APIÈÖçÁΩÆ\n\nÊîØÊåÅÂ§ö‰∏™APIÁ´ØÁÇπÈÖçÁΩÆÔºö\n\n```yaml\napi:\n  base_url: \"https://api.deepseek.com/v1\"\n  api_key: \"your-deepseek-key\"\n  default_model: \"deepseek-v3\"\n  timeout: 600\n\n# ÂèØÈÖçÁΩÆÂ§ö‰∏™API\napi_endpoints:\n  - name: \"deepseek\"\n    base_url: \"https://api.deepseek.com/v1\"\n    api_key: \"your-key\"\n    default_model: \"deepseek-v3\"\n  - name: \"local\"\n    base_url: \"http://localhost:11434/v1\"\n    api_key: \"ollama\"\n    default_model: \"gemma2:27b\"\n```\n\n### ËÆ§ËØÅÈÖçÁΩÆ\n\n#### ÂØÜÁ†ÅËÆ§ËØÅ\n```yaml\nauth:\n  password: \"your-secure-password\"  # ËÆæÁΩÆËÆøÈóÆÂØÜÁ†Å\n  login_prompt: \"ËØ∑ËæìÂÖ•ËÆøÈóÆÂØÜÁ†Å: \"\n```\n\n#### SSHÂÖ¨Èí•ÂÖçÂØÜÁôªÂΩï\n```yaml\nauth:\n  password: \"your-secure-password\"  # ÂøÖÈ°ªËÆæÁΩÆÂØÜÁ†ÅÊâçËÉΩÂêØÁî®SSHÂÖ¨Èí•ËÆ§ËØÅ\n  login_prompt: \"ËØ∑ËæìÂÖ•ËÆøÈóÆÂØÜÁ†Å: \"\n  # ÊñπÂºè‰∏ÄÔºöÁõ¥Êé•ÈÖçÁΩÆÂÖ¨Èí•ÂàóË°®\n  authorized_keys:\n    - \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC... user@hostname\"\n    - \"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI... user2@hostname\"\n  # ÊñπÂºè‰∫åÔºö‰ªéÊñá‰ª∂ËØªÂèñÂÖ¨Èí•\n  authorized_keys_file: \"~/.ssh/authorized_keys\"\n```\n\n**SSHÂÖ¨Èí•‰ΩøÁî®ÊñπÊ≥ï**Ôºö\n```bash\n# ÁîüÊàêSSHÂØÜÈí•ÂØπ\nssh-keygen -t ed25519 -f ~/.ssh/sshai_key\n\n# ‰ΩøÁî®ÁßÅÈí•ËøûÊé•ÔºàÂÖçÂØÜÁôªÂΩïÔºâ\nssh -i ~/.ssh/sshai_key -p 2213 user@localhost\n\n# Êü•ÁúãÂÖ¨Èí•ÂÜÖÂÆπÔºàÁî®‰∫éÈÖçÁΩÆÔºâ\ncat ~/.ssh/sshai_key.pub\n```\n\n**Ê≥®ÊÑè**: \n-",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-30T02:17:41.737033"
  }
]