[
  {
    "basic_info": {
      "name": "ColorOS-CVE-2025-10184",
      "full_name": "yuuouu/ColorOS-CVE-2025-10184",
      "owner": "yuuouu",
      "description": "ColorOS短信漏洞，以及用户自救方案",
      "url": "https://github.com/yuuouu/ColorOS-CVE-2025-10184",
      "clone_url": "https://github.com/yuuouu/ColorOS-CVE-2025-10184.git",
      "ssh_url": "git@github.com:yuuouu/ColorOS-CVE-2025-10184.git",
      "homepage": "",
      "created_at": "2025-09-24T11:48:03Z",
      "updated_at": "2025-10-07T21:25:23Z",
      "pushed_at": "2025-10-06T11:04:08Z"
    },
    "stats": {
      "stars": 334,
      "forks": 36,
      "watchers": 334,
      "open_issues": 6,
      "size": 1317
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 31892,
        "Kotlin": 5890
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "> [信息来源](https://www.rapid7.com/blog/post/cve-2025-10184-oneplus-oxygenos-telephony-provider-permission-bypass-not-fixed/)\n\n### 漏洞说明\n\n- 类型：数据库注入攻击`1=1 AND`\n- 效果：任意APP读取短信数据。*无需权限、无需用户交互、无感知读取*\n- 影响：本机的所有短信信息、短信验证码泄露\n- 涉及范围：**OPPO 及其子品牌(一加、realme)**\n- 影响范围：根据[maoyixuan](https://github.com/yuuouu/ColorOS-CVE-2025-10184/issues/1#issuecomment-3367827779)提交的机型显示，***17年发布的ColorOS 6.0.1存在漏洞，此漏洞可能伴随了OPPO的OEM生涯***\n- 修复情况：10月4日开始推送系统文件更新：`15.0.0.860Patch01|1.9MB`，可手动更新\n- 测试漏洞：[国内下载 yuu_v3.6.apk](https://yuuou.lanzout.com/iiQE337s6dha)，出现短信内容代表存在漏洞\n- 普通用户防护策略：\n  1. 在厂商未修补漏洞前，请将sim卡放到使用其它品牌手机上使用\n  2. 设备上的短信尽快删除，彻底删除。避免短信被用作用户画像\n  3. 使用Android虚拟机或云手机安装应用\n  4. 在使用短信验证时尽量保证无后台应用运行\n- 自救方案：有无root自救方案和root稳定拦截方案\n\n### 修复情况更新(10月4日)\n> @C和其他热心网友\n\n已确认开始推送修复，10月4日上午开始推送  \n机型：一加12、13T、ACE3、ACE3 Pro;OPPO Find x8 Pro等  \n实际内容：com.android.providers.telephony 15.40.10 (35)  \n更新路径：设置 → 系统与更新 → 软件更新 → 自动更新设置 → 系统文件更新  \n系统文件：`15.0.0.860Patch01|1.9MB`  \n效果：  \n<img src=\"http://upforme.ru/uploads/001c/43/d3/2/43385.jpg\" width=\"260\">  \n\n#### 强制更新\n> 电报@Alearer在ColorOS 14机型上测试会报错 \n\n`15.0.0.860Patch01|1.9MB`仅支持ColorOS 15.0.0、15.0.1、15.0.2版本，[推送包详细内容](https://github.com/yuuouu/ColorOS-CVE-2025-10184/blob/master/opex_15.0.0.860Patch01.cfg)  \n[下载 电话_短信存储_15.40.10.apk](https://yuuou.lanzout.com/iTuJ937md58j)，使用adb命令：`adb install -t D:\\电话_短信存储_15.40.10.apk`  \n安装成功后重启手机生效，出错了卸载安装版本即可\n\n个人想法：感谢工程师在国庆期间加班加点修补漏洞，希望大家不要把压力给到**OPPO开发工程师**。首先外部反馈漏洞到工程师真正修补漏洞之间存在很多环节，并不是工程师不想快点修补漏洞发布。另外，此漏洞可能在OPPO的初始OEM阶段就已存在，涉及的代码调用链比较底层，除了第一个写的程序员，后续接手的工程师在没有bug反馈的情况下，是比较难发现此漏洞的。希望OPPO技术开发团队能借助此次漏洞风波完善自身SRC漏洞反馈通道，更重要的是**将此次更新范围扩大，为全部受影响机型推送修补方案，而不是放弃老机型**。\n\n### 漏洞效果\n\n<img src=\"http://upforme.ru/uploads/001c/43/d3/2/700625.png\" width=\"240\">\n\n[可将隐私数据打码后上传到 Issues](https://github.com/yuuouu/ColorOS-CVE-2025-10184/issues/1)\n\n### 普通用户自救方案\n\n#### 方案一：使用短信骚扰拦截\n> 来自[v2ex@CoolMarket](https://www.v2ex.com/t/1162349?p=1#r_16821039)  \n> 打开短信骚扰拦截，拦截所有号码，这样短信就会被收进骚扰拦截里，用软件测试发现读取不到短信\n\n路径：短信 → 骚扰拦截 → 拦截规则设置 → 黑名单 → 右上角加号 → 开头号码匹配 → 输入`1`  \n<img src=\"http://upforme.ru/uploads/001c/43/d3/2/346162.jpg\" width=\"200\"><img src=\"http://upforme.ru/uploads/001c/43/d3/2/683671.jpg\" width=\"200\"><img src=\"http://upforme.ru/uploads/001c/43/d3/2/230878.jpg\" width=\"200\"><img src=\"http://upforme.ru/uploads/001c/43/d3/2/767761.jpg\" width=\"200\"><img src=\"http://upforme.ru/uploads/001c/43/d3/2/559293.jpg\" width=\"200\">  \n验证：接收一条新的短信(给10086发信息)，收到短信后在骚扰拦截那里会出现一条[黑名单拦截]信息，然后打开测试工具查看该信息是否出现，没有该信息的话说明此方法有效（Realme X、一加13、OPPO K3实测有效）  \n后续：然后继续在`开头号码匹配`中逐个添加`0-9`，拦截全部号码。在`拦截规则设置`中设置`拦截时提醒`，会导致无法接到电话！\n\n**此方案最简单，但是会导致无法接到电话😞**\n\n#### 方案二：使用Shizuku修改\n> 基于[v2ex@Dawnnnnnn](https://www.v2ex.com/t/1162349#r_16804643)提出的方法改进。⚠️修改系统内容有风险！非全部机型可用\n\n1. 下载[Shizuku](https://shizuku.rikka.app/download/)和[Blocker](https://github.com/lihenggui/blocker/releases)。(提示无法安装时断开网络后安装)\n2. 根据[教程选择无线调试启动Shizuku](https://shizuku.rikka.app/zh-hans/guide/setup/#%E5%90%AF%E7%94%A8%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95)\n3. `Blocker`设置中更改`控制器种类`为`Shizuku/Sui`，`Shizuku`授权给`Blocker`\n4. `Blocker`设置中打开 `显示系统应用` \n5. `Blocker`搜索`telephony`，进入`电话/短信存储`应用\n6. 选择`内容提供者`，找到其中的`PushMessageProvider`、`PushShopProvider`、`ServiceNumberProvider`三个选项关闭\n7. ⚠️注意：到此完成设置，效果保持到下次重启前。重启手机后将无法收到短信(能发送)，必须重新开启上一步的三个选项，再重启一次才能正常收到短信。确认能收发短信之后关闭三个选项，既有拦截效果，又能正常收发信息，将保持到下次重启\n   \n<img src=\"http://upforme.ru/uploads/001c/43/d3/2/575277.jpg\" width=\"240\"><img src=\"http://upforme.ru/uploads/001c/43/d3/2/719926.jpg\" width=\"240\">\n\n##### 无法生效说明\n\n当`com.android.providers.telephony`里`AndroidManifest.xml`存在`android:testOnly=\"true\"`属性时才能修改生效，[具体可见](https://github.com/lihenggui/blocker/issues/27)\n\n### root 拦截方案\n\n无root情况下，试了系统分身、多用户、Shelter工作账号都无法拦截此漏洞  \n如何root请参考 [ColorOS刷机路径](https://yuuou.vercel.app/%E9%80%86%E5%90%91/ColorOS%20%E5%88%B7%E6%9C%BA%E8%B7%AF%E5%BE%84/)\n\n#### 方案一：使用xposed模块\n\n测试包包含模块内容，将捕获调用此漏洞的应用，拦截结果并弹窗提示和记录，仅需勾选\"电话/短信存储\"应用，保存日志路径`/storage/emulated/0/Android/data/com.android.providers.telephony/files/yuu.log`  \n如有发现，请提 Issues 或通过[电报反馈](https://t.me/+Z8f7P5MMkZ0yNzE1)  \n\n<img src=\"https://github.com/user-attachments/assets/baf1e6cc-bf55-44f6-834b-d2c115de2c52\" width=\"260\">\n\n#### 方案二：禁用 Provider\n\n> 来自[v2ex@Dawnnnnnn](https://www.v2ex.com/t/1162349#r_16804643)\n\n1. 下载安装 [Blocker](https://github.com/lihenggui/blocker/releases) \n2. 在设置中打开 `显示系统应用`\n3. 搜索 `telephony`，进入 `电话/短信存储` \n4. 选择 `内容提供者` ，找到其中的 `PushMessageProvider`、`PushShopProvider`、`ServiceNumberProvider` 三个选项关闭\n5. 注意⚠️：重启手机后将导致无法收到短信(能发送)，必须重新开启上一步的三个选项，再重启一次才能正常收到短信。确认能收发短信之后再关闭三个选项，既有拦截效果，又能正常收发信息，将保持到下次重启   \n\n<img src=\"http://upforme.ru/uploads/001c/43/d3/2/719926.jpg\" width=\"260\">\n\n#### 方案三：限制读取数据库文件\n\n> 来自酷安@kkkkkcc\n\n1. 打开 `MT管理器`，进入目录 `/data/data/com.android.providers.telephony/databases/` \n2. 禁用读取权限：长按 `mmssms.db` - `属性` - `权限 更改` - `去除读权限，包括所有者和用户组`\n3. 将无法发送短信，需自测\n\n<img src=\"http://upforme.ru/uploads/001c/43/d3/2/244342.jpg\" width=\"260\">\n\n### 披露时间线\n\n```\n2025年5月1日：Rapid7通过电子邮件联系一加安全响应中心（OneSRC），请求就漏洞披露进行沟通。未收到回复。\n2025年5月6日：Rapid7再次通过电子邮件联系OneSRC。未收到回复。\n2025年7月2日：Rapid7同时通过电子邮件联系一加客服支持团队和OneSRC。\n2025年7月3日：一加客服回复称将向内部相关团队",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-08T02:17:22.401571"
  },
  {
    "basic_info": {
      "name": "google-ai-mode-scraper",
      "full_name": "oxylabs/google-ai-mode-scraper",
      "owner": "oxylabs",
      "description": "Scrape Google AI Mode responses without blocks on a large scale.",
      "url": "https://github.com/oxylabs/google-ai-mode-scraper",
      "clone_url": "https://github.com/oxylabs/google-ai-mode-scraper.git",
      "ssh_url": "git@github.com:oxylabs/google-ai-mode-scraper.git",
      "homepage": "https://oxylabs.io/products/scraper-api/serp/google-ai-mode",
      "created_at": "2025-09-08T13:17:40Z",
      "updated_at": "2025-10-08T02:02:42Z",
      "pushed_at": "2025-09-24T09:10:18Z"
    },
    "stats": {
      "stars": 294,
      "forks": 1,
      "watchers": 294,
      "open_issues": 0,
      "size": 1207
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 1949,
        "C#": 1358,
        "JavaScript": 918,
        "Go": 693,
        "PHP": 693,
        "Python": 583,
        "Shell": 264
      },
      "license": null,
      "topics": [
        "ai-mode",
        "google-ai",
        "google-ai-mode",
        "proxy-scrape",
        "scraper-api",
        "web-scraper",
        "web-scraper-api"
      ]
    },
    "content": {
      "readme": "# Google AI Mode Scraper\n\n[![Oxylabs promo code](https://github.com/oxylabs/google-ai-mode-scraper/blob/main/ScraperAPI%2BGoogleAI-1090x275px.png)](https://oxylabs.io/products/scraper-api/serp/google-ai-mode?utm_source=877&utm_medium=affiliate&utm_campaign=llm_scrapers&groupid=877&utm_content=google-ai-mode-scraper-github&transaction_id=102f49063ab94276ae8f116d224b67)\n\n[![](https://dcbadge.limes.pink/api/server/Pds3gBmKMH?style=for-the-badge&theme=discord)](https://discord.gg/Pds3gBmKMH) [![YouTube](https://img.shields.io/badge/YouTube-Oxylabs-red?style=for-the-badge&logo=youtube&logoColor=white)](https://www.youtube.com/@oxylabs)\n\n[Google AI Mode scraper](https://oxylabs.io/products/scraper-api/serp/google-ai-mode) lets you send prompts and reliably extract AI responses at scale without blocks. Built on the [Web Scraper API](https://oxylabs.io/products/scraper-api/web), it delivers parsed data in JSON format while handling proxies, headless browsers, and anti-bot systems for you. You can use scraped Google AI Mode data to power SEO and GEO projects, build training datasets, or support other data tasks.\n\n## How it works\n\nScrape Google AI Mode responses by sending a POST request with your prompt and authentication credentials. See the Python example below, or explore more language samples [here](https://github.com/oxylabs/google-ai-mode-scraper/tree/3e23bc41979eeb78326e9bd9d02b743aa371efb1/Code%20examples).\n\n> [!TIP]\n> Get a **free trial** by registering on the [dashboard](https://dashboard.oxylabs.io/).\n\n### Request sample (Python)\nFirst, install the requests library in your Python environment:\n\n```bash\npip install requests\n```\n\nThen, create the following `.py` file. Make sure to use your Web Scraper API `USERNAME` and `PASSWORD`:\n\n```python\nimport json\nimport requests\n\n\n# API parameters.\npayload = {\n    'source': 'google_ai_mode',\n    'query': 'best health trackers under $200',\n    'render': 'html',\n    'parse': True,\n    'geo_location': 'United States'\n}\n\n# Get a response.\nresponse = requests.post(\n    'https://realtime.oxylabs.io/v1/queries',\n    # Replace with your credentials.\n    auth=('USERNAME', 'PASSWORD'),\n    json=payload,\n)\n\n# Print the response to stdout.\nprint(response.json())\n\n# Save the response to a JSON file.\nwith open('response.json', 'w') as file:\n    json.dump(response.json(), file, indent=2)\n```\n\n### Request parameters\n\n| Parameter | Description | Default Value |\n| :---- | :---- | :---- |\n| `source` (mandatory) | Sets the scraper. | `google_ai_mode` |\n| `query` (mandatory) | The prompt or question to submit to Google AI Mode. Cannot exceed 400 characters. | – |\n| `render` (mandatory) | Setting to `html` is required for this source. | – |\n| `parse` | Returns parsed data when set to `true`. | `false` |\n| `geo_location` | Specify a country to send the prompt from. [More info](https://developers.oxylabs.io/scraping-solutions/web-scraper-api/features/localization/proxy-location). | - |\n| `callback_url` | URL to your callback endpoint. [More info](https://developers.oxylabs.io/scraping-solutions/web-scraper-api/integration-methods/push-pull#callback). | – |\n\nCheck out [documentation](https://developers.oxylabs.io/scraping-solutions/web-scraper-api/targets/google/ai-mode) to learn more.\n\n### Output samples\n#### JSON example\nBelow is a trimmed JSON output sample. See the full JSON output [here](https://github.com/oxylabs/google-ai-mode-scraper/blob/3e23bc41979eeb78326e9bd9d02b743aa371efb1/output-sample.json).\n\n```json\n{\n  \"results\": [\n    {\n      \"content\": {\n        \"links\": [\n          {\n            \"url\": \"https://www.tomsguide.com/best-picks/best-cheap-fitness-trackers\",\n            \"text\": \"We've tested the best cheap fitness trackers available right now\"\n          },\n          {\n            \"url\": \"https://www.garagegymreviews.com/best-budget-fitness-tracker\",\n            \"text\": \"Expert-Tested: Best Budget Fitness Tracker (2025)\"\n          },\n          {\"url\": \"...\", \"text\": \"...\"}\n        ],\n        \"prompt\": \"best health trackers under $200\",\n        \"citations\": [\n          {\n            \"url\": \"https://www.garagegymreviews.com/best-budget-fitness-tracker\",\n            \"text\": \"For the best health trackers under $200, the top contenders are the Fitbit Charge 6 , Fitbit Inspire 3 , and...\"\n          },\n          {\n            \"url\": \"https://www.techradar.com/best/best-cheap-fitness-trackers\",\n            \"text\": \"For the best health trackers under $200, the top contenders are the Fitbit Charge 6 , Fitbit Inspire 3 , and...\"\n          },\n          {\"url\": \"...\", \"text\": \"...\"}\n        ],\n        \"response_text\": \"For the best health trackers under $200, the top contenders are the Fitbit Charge 6 , Fitbit Inspire 3 , and...\",\n        \"parse_status_code\": 12000\n      },\n      \"created_at\": \"2025-09-03 10:13:11\",\n      \"updated_at\": \"2025-09-03 10:13:26\",\n      \"page\": 1,\n      \"url\": \"https://www.google.com/search?udm=50&q=best+health+trackers+under+$200&uule=w+CAIQICINdW5pdGVkIHN0YXRlc",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:23.661298"
  },
  {
    "basic_info": {
      "name": "JoySafety",
      "full_name": "jd-opensource/JoySafety",
      "owner": "jd-opensource",
      "description": "JoySafety",
      "url": "https://github.com/jd-opensource/JoySafety",
      "clone_url": "https://github.com/jd-opensource/JoySafety.git",
      "ssh_url": "git@github.com:jd-opensource/JoySafety.git",
      "homepage": null,
      "created_at": "2025-09-24T09:36:23Z",
      "updated_at": "2025-10-06T12:42:37Z",
      "pushed_at": "2025-10-06T12:51:50Z"
    },
    "stats": {
      "stars": 256,
      "forks": 20,
      "watchers": 256,
      "open_issues": 6,
      "size": 9862
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 818446,
        "Python": 85029,
        "Shell": 21786,
        "Go": 5136,
        "Dockerfile": 4164
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# JoySafety —— 大模型安全框架\n\n---\n\n## 📋 目录\n- [项目简介](#项目简介)\n- [✨ 特性](#特性)\n- [🚀 快速开始](#快速开始)\n- [📖 使用指南](#使用指南)\n- [🏆 最佳实践](#最佳实践)\n- [🏗️ 架构设计](#架构设计)\n- [🛠️ 开发](#开发)\n- [📄 许可证](#许可证)\n- [📅 计划](#计划)\n- Star History\n\n---\n\n## <a id=\"项目简介\"></a>项目简介\n随着生成式人工智能应用的广泛落地，内容安全、数据泄露、提示词攻击等风险也日益凸显。如何保障大模型输出符合法规要求、避免安全漏洞，已成为企业必须面对的关键挑战。为此，**京东正式开源大模型安全框架——JoySafety**，该框架在京东内部广泛应用，覆盖AI导购、物流客服、销售助手、医疗问诊、商家工作台、法务咨询、安全问答等场景，支持日均亿级调用、95%+攻击拦截率，致力于为企业提供一套**成熟、可靠、免费**的大模型安全防护方案。\n\n---\n\n## ✨ <a id=\"特性\"></a>特性\n### 🚀 生产级别\n\n**企业级实战验证**\n- ✅ 保障京东多个**生产级AI应用**安全稳定运行\n- ✅ 复杂业务场景验证，持续迭代优化\n- ✅ 服务部署支持**横向扩展**，满足高并发业务需求\n- ✅ 业务接入零门槛，策略变更支持分钟级**热更新**\n\n**高可靠性保障**\n- 🔄 **原子能力热插拔**，业务不中断\n- ⚡ **配置动态生效**，快速响应业务变化  \n- 📊 **生产环境长期稳定性**验证\n\n---\n\n### 📈 高扩展性\n\n**灵活的架构设计**\n- 🧩 支持**多种原子能力模块**（BERT/FastText/Transformer等主流模型）\n- 🔌 **标准化原子能力接口**，易于扩展新模型\n- 🏗️ 支持**独立部署**或**集中部署**两种模式\n- ⚙️ **轻量编排引擎**，按需灵活配置\n\n**智能负载均衡**\n- 🌐 **集群化部署**支持水平扩展\n- ⚡ **异步检测机制**，提升并发处理能力\n- 🎯 **窗口化检测策略**，平衡性能与准确性\n\n---\n\n### 💡 易用性\n\n**开箱即用**\n- 🐳 **一键Docker Compose启动**，零配置门槛\n- 📱 **DAG编排**\n- 🔧 **标准化API接口**，快速集成现有系统\n\n---\n\n### 🎯 核心技术亮点\n\n### 突破性创新\n\n#### 1. 大模型多轮会话智能识别\n\n#### 2. 采用Free-Taxi异步输出模式，大幅提升检测响应， 实现用户体验与安全的完美平衡\n\n#### 3. **多维响应策略矩阵**\n- 🎯 **精准拦截** - 高风险内容即时阻断\n- ⏸️ **红线代答** - 红线知识库应答\n- 🔄 **智能纠偏** - 自动引导正向回答\n---\n\n## 🚀 <a id=\"快速开始\"></a>快速开始\n## 环境依赖\n请确保已安装以下软件：\n- git\n- git-lfs   用于下载模型文件\n- docker\n- docker compose\n\n### 0. 克隆项目\n```shell\n  #1.\n  git clone https://github.com/jd-opensource/JoySafety.git\n  \n  #2. 进入项目路径\n  cd JoySafety\n  \n  #3. 设置环境变量（建议复制执行，后续脚本/服务均可自动识别）\n  export SAFETY_ROOT_PATH=`pwd`\n  #正常为JoySafety 根路径\n  echo ${SAFETY_ROOT_PATH}\n```\n\n=======\n### 1. 下载模型文件（Huggingface)\n- [模型说明](safety/safety-skills/model_overview.md)\n- 推荐使用 [git-lfs](https://git-lfs.com) 拉取大模型文件\n```shell\n\n  #进入项目路径\n  cd $SAFETY_ROOT_PATH\n\n  #\n  git lfs install\n\n  #方案1\n  git clone https://huggingface.co/jdopensource/JoySafety ${SAFETY_ROOT_PATH}/data/models\n\n  #方案2\n  #因网络问题，您也可以从[ModelScope](https://modelscope.cn/models/syf20240814/joysafety/files)下载，`记得解压fast20250710目录下的zip文件`）\n  \n```\n\n### 2. 配置 .env 文件\n- 【在项目根路径】 **复制** `.env.example` 或手动创建 `.env`：\n```shell\n   # 注：切换Shell窗口, 重新设置SAFETY_ROOT_PATH\n   cd $SAFETY_ROOT_PATH\n   \n   cp -f .env.example .env\n    \n   # 测试只需修改.env文件中变量:SAFETY_MODEL_DIR，路径需与模型实际下载路径一致【绝对路径】\n   SAFETY_MODEL_DIR=\n```\n\n### 3. 一键启动（Docker Compose）\n```shell\n   docker-compose --env-file .env up\n```\n\n### 4. API 测试\n\n详细 API 测试案例及使用说明移步到 [quickstart/README.md](quickstart/README.md)。\n\n请参考 quickstart 目录下的文档，获取最新的 API 测试脚本和案例说明。\n\n---\n\n## 📖 <a id=\"使用指南\"></a>使用指南\n### 如何接入一个业务\n> 该项目可以同时支持多个业务，每个业务都可以动态增加，分钟级生效。\n0. 注册原子能力（如果需要用的原子能力未注册过），可参考原子能力管理参考： [function_api.md](safety/safety-admin/docs/api/function_api.md)\n1. 增加一个业务（参考[business_api.md](safety/safety-admin/docs/api/business_api.md)）\n2. 为业务增加策略（参考：[dag_api.md](safety/safety-admin/docs/api/dag_api.md)、[策略样例](safety/safety-admin/docs/strategies)）\n\n*一个完整的代码实例：*[example.py](docs/example.py)\n\n### 如何配置策略（DAG）\n识别策略整体是DAG，从rootId对应的node开始，逐层执行识别策略；策略的每个node分为两部分，function和router；function为当前结点执行的具体能力，router为基于当前结点的识别结果决定需要执行的下一个结点。\n\nfunction类别包含single_label_pred（支持现成的两种开箱即用的实现）、keyword、kb_search、rag_answer、multi_turn_detect，配置方式和含义见上节[如何接入一个业务](#如何接入一个业务)中的完整实例，另外，还支持一个虚拟的类别parallel，以支持在单个node内多个function并行执行。\n\n常用的router类别包括stupid_end和groovy，前者表示直接结束，后续是groovy脚本基于识别结果来返回一下步的node_id。groovy脚本中的内置变量是`ctx`,其结构见对象[SessionContext.java](safety/safety-basic/src/main/java/com/jd/security/llmsec/core/session/SessionContext.java)。\n\n比较典型的策略编排示例见：[README.md](safety/safety-admin/docs/strategies/README.md)\n\n\n### 如何管理敏感词\n支持按`分组+业务`来管理敏感词，另外`all`业务下的敏感词对所有业务生效。\n\n对敏感词的管理方式可以参考：[sensitive_words_api.md](safety/safety-admin/docs/api/sensitive_words_api.md)\n\n### 如何管理知识库\n本项目对知识的管理是分两层的；第一层: 使用mysql数据库用于数据持久化以；第二层：使用safety_knowledge+vearch实现知识的向量化及语义检索。\n\n知识在数据库的管理方式可以参考：[knowledge_api.md](safety/safety-admin/docs/api/knowledge_api.md)；知识向量化及存储至vearch可以参考：[index_all.py]（example/safety-skills/safety-knowledge/index_all.py）\n\n\n\n\n### API 接口调用\n\n参考 [API 文档](./safety/safety-api/docs/api.md)\n\n**多语言调用：**\n- Python: [python/demo.py](safety/safety-demo/python/demo.py)\n- Go: [golang/main.go](safety/safety-demo/golang/main.go)\n- Java: [java demo](safety/safety-demo/java/src/main/java/com/jd/security/llmsec/demo/DefenseApiDemo.java)\n\n\n### FAQ\n常见问题与解决方案见 [FAQ](./docs/FAQ.md)\n\n基于产品特性，项目中的示例仅用于产品功能说明使用，不得用于其他领域，非项目开发者观点。\n\n---\n\n##  <a id=\"最佳实践\"></a>🏆最佳实践\n最佳实践见[best_practice.md](docs/best_practice.md)\n\n---\n\n## 🏗️ <a id=\"架构设计\"></a>架构设计\n\n### 项目目录结构\n```text\n.\n├── README.md\n├── deploy\n│         ├── docker-compose.yml    // 打包启动服务（各个模块也可以单独启动）\n│         └── thirdparty            // 第三方依赖相关配置及文档\n│             ├── mysql\n│             ├── redis\n│             └── vearch\n├── safety\n│         ├── safety-admin           // 用于管理配置和数据后台服务\n│         ├── safety-api             // 对外提供能力的api服务\n│         ├── safety-basic            // 核心jar包，服务于safety-admin、safety-basic及safety-demo中的java部分\n│         ├── safety-demo            // 使用safety-api的多语言示例\n│         │         ├── golang\n│         │         ├── java\n│         │         └── python\n│     ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:24.956997"
  },
  {
    "basic_info": {
      "name": "FluidMarkdown",
      "full_name": "antgroup/FluidMarkdown",
      "owner": "antgroup",
      "description": null,
      "url": "https://github.com/antgroup/FluidMarkdown",
      "clone_url": "https://github.com/antgroup/FluidMarkdown.git",
      "ssh_url": "git@github.com:antgroup/FluidMarkdown.git",
      "homepage": null,
      "created_at": "2025-09-10T11:19:33Z",
      "updated_at": "2025-10-07T09:29:12Z",
      "pushed_at": "2025-09-28T03:58:44Z"
    },
    "stats": {
      "stars": 217,
      "forks": 20,
      "watchers": 217,
      "open_issues": 4,
      "size": 105805
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 974383,
        "Objective-C": 601608,
        "Kotlin": 5931,
        "Makefile": 36
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# FluidMarkdown\nWe are committed to enabling the streaming rendering of Markdown content generated by large language models on the client side within AI-driven business applications.\n\n# Overview\nThis library is designed for native Android and iOS developers. Built on the open-source CommonMark parsing library, it supports core Markdown syntax and selected HTML tags, rendering them progressively within UI components. It exposes Markdown styling as a structured model, enabling customization and integration into your specific application contexts. For faster integration, refer to the sample code to preview the rendering effect based on input text.\n\n# Features\n+ Support for markdown syntax: titles, paragraphs, ordered lists, unordered lists, tables, code blocks, mathematical formulas, inline code blocks, quotes, dividing lines, footnotes, links, and images.\n+ Support for HTML tags:`<s>` `<sup>` `<sub>` `<mark>` `<a>` `<span>` `<cite>` `<del>` `<font>` `<img>` `<u>`, etc.\n+ Streaming rendering and one-time full rendering modes.\n+ Customizable rendering styles for Markdown syntax.\n+ Adjustable streaming speed via custom parameters.\n+ Event support for clickable elements, including click handling, visibility callbacks, and rendering status updates<font style=\"color:rgb(38, 38, 38);\">, etc.\n+ Added some new extended HTML tags such as `<iconlink>` `<icon>`in `AMHTMLTransformer` class.\n\n# Install\nThe source code of this project is open-source. For information on how to download and run the project, please refer to the file [INSTALL](https://github.com/antgroup/FluidMarkdown/blob/main/INSTALL.md).\n\n# Directory structure\n## iOS\n+ AntMarkdown —— a standard markdown parser and rendering module based on commonMark.\n+ FluidMarkdown —— Component for streaming output.\n\n## Android\n+ fluid-markdown —— Component for streaming output.\n+ markwon-xxx —— Syntax parsing and style rendering implementation based on the open-source markwon library.\n\n# Usage\n## iOS\n+ Native API： `AMXMarkdownWidget.h` is summary header file of the open API. The following is the general calling process of streaming rendering components.\n    1. Create a TextView instance.\n    2. Generate default styles and set custom styles ( if needed )\n    3. Begin streaming the Markdown content.\n    4. Append data dynamically during rendering.\n    5. Adjust list scrolling in response to content size changes in the TextView.\n    6. Handle completion when rendering is finished.\n\n```objectivec\nAMXMarkdownTextView* contentTextView = [[AMXMarkdownTextView alloc] initWithFrame_ant_mark:CGRectMake(0, 0, screenWidht - 20 * 2, 1)];\n\n// get default style config\nAMXMarkdownStyleConfig* config = [AMXMarkdownStyleConfig defaultConfig];\n\n// modify code block style for example\nconfig.codeBlockConfig.backgroundColor = [UIColor greenColor];\n\n// set the style with unique Id\n[[AMXRenderService shared] setMarkdownStyleWithId:config styleId:@\"demo\"];\n\n// begin print\n[self.contentTextView startStreamingWithContent:@\"testing data\"];\n\n// append content during printing\n[self.contentTextView addStreamContent:@\"**append test data**\"];\n\n// stop print when you need\n[self.contentTextView stop];\n```\n\n```objectivec\n@interface StreamPreviewViewController ()<AMXMarkdownTextViewDelegate>\n-(void)initUI\n{\n    // set delegate\n    self.contentTextView.textViewDelegate = self;\n}\n// size change delegate\n-(void)onSizeChange:(CGSize)size\n{\n    // adjust size of AMXMarkdownTextView and container view\n    [self.contentTextView setFrame:CGRectMake(0, 0, self.contentTextView.frame.size.width, size.height)];\n    [self.containerView setContentSize:size];\n    CGPoint bottomOffset = CGPointMake(0, self.containerView.contentSize.height - self.containerView.bounds.size.height);\n    if (bottomOffset.y > 0) {\n        // scroll the container view to bottom\n        [self.containerView setContentOffset:bottomOffset animated:NO];\n    }\n}\n```\n\n\n\n+ Sample Description \n    1. The `StreamPreviewViewController` class is a sample page for previewing streaming output.\n    2. The `AIChatViewController` class demonstrates FluidMarkdown usage in simulated AI conversation scenarios. Note that the conversation data is statically defined and intended solely for rendering demonstration purposes.\n\n![StreamingPreview](https://github.com/antgroup/FluidMarkdown/blob/main/media/StreamViewController.gif)![AIChat](https://github.com/antgroup/FluidMarkdown/blob/main/media/AIChatViewController.gif)\n\n## Android\n1. Initialize by calling AFMInitializer.init(context, backgroundTaskHandler, imageHandler, logHandler) once globally. Except for context, all other parameters can be null.\n2. Create PrinterMarkDownTextView to display markdown content.\n3. Create MarkdownStyles to set render styles.\n4. **Call PrinterMarkDownTextView.init()** to bind MarkdownStyles and ElementClickEventCallback.  Must be called, MarkdownStyles cannot be null.\n5. Set markdown content or call the print start method.\n\n```java\nAFMInitializer.init(context, null, null, null);\n// Create ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:26.330159"
  },
  {
    "basic_info": {
      "name": "android-code-studio",
      "full_name": "AndroidCSOfficial/android-code-studio",
      "owner": "AndroidCSOfficial",
      "description": "Android Code Studio is an IDE for Android to develop full featured Android apps.",
      "url": "https://github.com/AndroidCSOfficial/android-code-studio",
      "clone_url": "https://github.com/AndroidCSOfficial/android-code-studio.git",
      "ssh_url": "git@github.com:AndroidCSOfficial/android-code-studio.git",
      "homepage": "",
      "created_at": "2025-09-25T13:55:29Z",
      "updated_at": "2025-10-08T00:06:52Z",
      "pushed_at": "2025-09-27T22:27:41Z"
    },
    "stats": {
      "stars": 154,
      "forks": 14,
      "watchers": 154,
      "open_issues": 25,
      "size": 1044467
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 35429531,
        "Kotlin": 4073899,
        "ANTLR": 109365,
        "HTML": 109220,
        "C++": 23983,
        "Tree-sitter Query": 18502,
        "Shell": 16283,
        "Lex": 13233,
        "C": 7548,
        "JavaScript": 3824,
        "ReScript": 3232,
        "Makefile": 2698,
        "AIDL": 1165
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "android",
        "android-application",
        "android-developers",
        "android-development",
        "android-studio",
        "androidide",
        "androidstudio"
      ]
    },
    "content": {
      "readme": "<p align=\"left\">\r\n  <img src=\"https://avatars.githubusercontent.com/u/234419170?s=400&u=43571ebf481969baafb8399813ad57f46c19eb95&v=4\" alt=\"AndroidIDE\" width=\"80\" height=\"80\"/>\r\n</p>\r\n\r\n<h2 align=\"left\"><b>Android Code Studio</b></h2>\r\n<p align=\"left\">\r\n  An IDE to develop real, Gradle-based Android applications on Android devices.\r\n<p><br>\r\n\r\n<p align=\"left\">\r\n<!-- Latest release -->\r\n<img src=\"https://img.shields.io/github/v/release/AndroidCSOfficial/android-code-studio?include_prereleases&amp;label=latest%20release\" alt=\"Latest release\">\r\n<!-- Build and test -->\r\n<!-- <img src=\"https://github.com/Mohammed-baqer-null/android-code-studio/actions/workflows/asm_build.yml/badge.svg\" alt=\"Builds and tests\"> -->\r\n<!-- Crowdin -->\r\n<a href=\"https://crowdin.com/project/androidide\"><img src=\"https://badges.crowdin.net/androidide/localized.svg\" alt=\"Crowdin\"></a>\r\n<!-- License -->\r\n<img src=\"https://img.shields.io/badge/License-GPLv3-blue.svg\" alt=\"License\"></p>\r\n\r\n\r\n<p align=\"left\">\r\n  <a href=\"https://github.com/Mohammed-baqer-null/android-code-studio/issues/new?labels=bug&template=BUG.yml&title=%5BBug%5D%3A+\">\r\n    <img src=\"https://img.shields.io/badge/Report%20Bug-red?style=for-the-badge&logo=github\" alt=\"Report a bug\">\r\n  </a>\r\n  <a href=\"https://github.com/Mohammed-baqer-null/android-code-studio/issues/new?labels=feature&template=FEATURE.yml&title=%5BFeature%5D%3A+\">\r\n    <img src=\"https://img.shields.io/badge/Request%20Feature-brightgreen?style=for-the-badge&logo=github\" alt=\"Request a feature\">\r\n  </a>\r\n  <a href=\"https://t.me/rv2ide\">\r\n    <img src=\"https://img.shields.io/badge/Telegram-Join%20Us-1DA1F2?style=for-the-badge&logo=telegram\" alt=\"Join on Telegram\">\r\n  </a>\r\n    <a href=\"https://docs.androidide.com/\">\r\n    <img src=\"https://img.shields.io/badge/Docs-Explore-blue?style=for-the-badge&logo=read-the-docs\" alt=\"Explore the docs\">\r\n  </a>\r\n</p>\r\n\r\n## Features\r\n\r\n- [x] Gradle support\r\n- [x] JDK 11 & JDK 17 available\r\n- [x] Terminal with essential packages\r\n- [x] Custom environment variables (for builds & terminal)\r\n- [x] SDK & NDK Manager (manage Android SDKs and NDKs via terminal)\r\n- [x] API information for classes and their members (since, removed, deprecated)\r\n- [x] Log reader (real-time logs for your app)\r\n- [ ] Language servers\r\n    - [x] Java\r\n    - [x] XML\r\n    - [x] Kotlin\r\n- [ ] UI Designer\r\n    - [x] Layout inflater\r\n    - [x] Resolve resource references\r\n    - [x] Auto-complete resource values when editing attributes\r\n    - [x] Drag & Drop interface\r\n    - [x] Visual attribute editor\r\n    - [x] Android Widgets\r\n- [ ] String Translator\r\n- [x] Asset Studio (Drawable & Icon Maker)\r\n- [x] Plugin Creator (Create sub-modules or plugins inside your project)\r\n- [x] Git integration\r\n- [x] **AI Agent** – fully **project-aware AI assistant** that understands your code, modules, and project structure to help with coding.\r\n<!-- - debugging, and suggestions-->\r\n\r\n## Installation\r\n\r\n[<img src=\"https://github.com/Kunzisoft/Github-badge/raw/main/get-it-on-github.svg\"\r\n    alt=\"Get it on F-Droid\"\r\n    height=\"80\">](https://github.com/Mohammed-baqer-null/android-code-studio/releases)\r\n\r\n> _Please install Android Code Studio from trusted sources only i.e._\r\n> - [_GitHub Releases_](https://github.com/Mohammed-baqer-null/android-code-studio/releases)\r\n\r\n- Download the Android Code Studio APK from the mentioned trusted sources.\r\n- Follow the\r\n  instructions [here](https://docs.androidide.com/tutorials/get-started.html) to\r\n  install the build tools.\r\n\r\n## Limitations\r\n\r\n- For working with projects in AndroidIDE, your project must use Android Gradle Plugin v7.2.0 or\r\n  newer. Projects with older AGP must be migrated to newer versions.\r\n- SDK Manager is already included in Android SDK and is accessible in Android Code Studio via its Terminal.\r\n  But, you cannot use it to install some tools (like NDK) because those tools are not built for\r\n  Android.\r\n- No official NDK support because we haven't built the NDK for Android.\r\n\r\nThe app is still being developed actively. It's in beta stage and may not be stable. if you have any\r\nissues using the app, please let us know.\r\n\r\n## Contributing\r\n\r\nSee the [contributing guide](./CONTRIBUTING.md).\r\n\r\nFor translations, visit the [Crowdin project page](https://crowdin.com/project/androidide).\r\n\r\n## Thanks to\r\n\r\n- [Rosemoe](https://github.com/Rosemoe) for the\r\n  awesome [CodeEditor](https://github.com/Rosemoe/sora-editor)\r\n- [Termux](https://github.com/termux) for [Terminal Emulator](https://github.com/termux/termux-app)\r\n- [Bogdan Melnychuk](https://github.com/bmelnychuk)\r\n  for [AndroidTreeView](https://github.com/bmelnychuk/AndroidTreeView)\r\n- [George Fraser](https://github.com/georgewfraser) for\r\n  the [Java Language Server](https://github.com/georgewfraser/java-language-server)\r\n- [Itsaky](https://github.com/itsaky) The original developer\r\n  of [AndroidIDE](https://github.com/AndroidIDEOfficial/AndroidIDE.git) whose project I forked and now maintain.\r\n  \r\nThanks to all the de",
      "default_branch": "dev"
    },
    "fetched_at": "2025-10-08T02:17:27.586606"
  },
  {
    "basic_info": {
      "name": "JManus",
      "full_name": "spring-ai-alibaba/JManus",
      "owner": "spring-ai-alibaba",
      "description": "A high-determinism, code-free Agent development framework built with Java 一个高确定性的 无代码 Agent 开发框架，以 Java编写",
      "url": "https://github.com/spring-ai-alibaba/JManus",
      "clone_url": "https://github.com/spring-ai-alibaba/JManus.git",
      "ssh_url": "git@github.com:spring-ai-alibaba/JManus.git",
      "homepage": "",
      "created_at": "2025-09-12T09:28:02Z",
      "updated_at": "2025-10-07T14:35:50Z",
      "pushed_at": "2025-09-27T14:20:15Z"
    },
    "stats": {
      "stars": 113,
      "forks": 29,
      "watchers": 113,
      "open_issues": 21,
      "size": 240823
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 2240294,
        "Vue": 810968,
        "TypeScript": 322832,
        "JavaScript": 158555,
        "Shell": 43364,
        "Python": 26328,
        "Batchfile": 9034,
        "Makefile": 7008,
        "HTML": 2002
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Spring AI Alibaba JManus\n\n<div align=\"center\">\n\n[![License](https://img.shields.io/badge/license-Apache%202-blue.svg)](LICENSE)\n[![Java](https://img.shields.io/badge/Java-17+-orange.svg)](https://openjdk.java.net/)\n[![Spring Boot](https://img.shields.io/badge/Spring%20Boot-3.x-green.svg)](https://spring.io/projects/spring-boot)\n[![GitHub Stars](https://img.shields.io/github/stars/alibaba/spring-ai-alibaba.svg)](https://github.com/alibaba/spring-ai-alibaba/stargazers)\n\n🌍 [English](./README.md) | [中文](./README-zh.md)\n\n📚 Developer Docs: [Quick Start (EN)](./README-dev-en.md) | [开发者快速入门 (中文)](./README-dev.md)\n\n[About](#-about) • [Quick Start](#-quick-start) • [Contributing](#-contributing)\n\n</div>\n\n![image](https://github.com/user-attachments/assets/07feeb29-c410-4f56-89bf-532210bc1b63)\n\n---\n\n## ✨ About JManus\n\nJManus is a Java implementation of Manus, currently used in many applications within Alibaba Group. It is primarily used for handling exploratory tasks that require a certain degree of determinism, such as quickly finding data from massive datasets and converting it into a single row in a database, or analyzing logs and issuing alerts.\n\nJManus also provides HTTP service invocation capabilities, making it suitable for integration into existing projects. For details, please refer to the developer quick start guide.\n\n## 🎯 JManus Product Features\n\n### 🤖 **Pure Java Manus Implementation**: \n\nA pure Java multi-agent collaboration implementation that provides a complete set of HTTP call interfaces, suitable for secondary integration by Java developers.\n\n![Image](https://github.com/user-attachments/assets/3d98c1c6-aabb-45a2-b192-7b687093a1ee)\n\n### 🛠️ **Plan-Act Mode**: \n\nAllows you to precisely control every execution detail, providing extremely high execution determinism.\n\n![Image](https://github.com/user-attachments/assets/a689791f-adf5-44b6-9ea6-151f557a26d4)\n\n### 🔗 **MCP Integration**:\n\n Natively supports the Model Context Protocol (MCP) for seamless integration with external services and tools.\n\n![Image](https://github.com/user-attachments/assets/2d3f833f-ba45-42b6-8e1b-f3e9cfd40212)\n\n### 📜 **Web Interface for Agent Configuration**:\n\n Easily configure agents through an intuitive web management interface without modifying code.\n\n![Image](https://github.com/user-attachments/assets/bb25f778-f8c3-46da-9da3-6f7ea2f0917d)\n\n### 🌊 **Infinite Context Handling**: \n\nSupports precise extraction of target information from massive content without relying on specific long-context models.\n\n![Image](https://github.com/user-attachments/assets/f23e5f27-91e1-4262-83d9-5bfbe5d644d5)\n\n\n## 🚀 Quick Start\n\nGet JManus up and running in under 5 minutes:\n\n### Prerequisites\n\n- 🌐 **DashScope API Key** (or alternative AI model provider)\n- 🐳 **Docker** (for containerized deployment) or ☕ **Java 17+** (for source code execution)\n\n### Method 1: Using Docker (Recommended)\n\n#### 🐳 Using Docker Hub Image\n\n```bash\n# Pull the latest develop image\ndocker pull springaialibaba/jmanus:develop\n\n# Basic startup (temporary data storage)\ndocker run -d \\\n  --name jmanus \\\n  -p 18080:18080 \\\n  -e DASHSCOPE_API_KEY=your_api_key_here \\\n  springaialibaba/jmanus:develop\n\n# Or start with data persistence (recommended)\ndocker run -d \\\n  --name jmanus \\\n  -p 18080:18080 \\\n  -e DASHSCOPE_API_KEY=your_api_key_here \\\n  -v $(pwd)/h2-data:/app/extracted/h2-data \\\n  -v $(pwd)/extensions:/app/extracted/extensions \\\n  springaialibaba/jmanus:develop\n```\n\n#### 🇨🇳 Using Alibaba Cloud Image (China Acceleration)\n\n```bash\n# Pull Alibaba Cloud accelerated image\ndocker pull sca-registry.cn-hangzhou.cr.aliyuncs.com/spring-ai-alibaba/jmanus:develop\n\n# Basic startup (temporary data storage)\ndocker run -d \\\n  --name jmanus \\\n  -p 18080:18080 \\\n  -e DASHSCOPE_API_KEY=your_api_key_here \\\n  sca-registry.cn-hangzhou.cr.aliyuncs.com/spring-ai-alibaba/jmanus:develop\n\n# Or start with data persistence (recommended)\ndocker run -d \\\n  --name jmanus \\\n  -p 18080:18080 \\\n  -e DASHSCOPE_API_KEY=your_api_key_here \\\n  -v $(pwd)/h2-data:/app/extracted/h2-data \\\n  -v $(pwd)/extensions:/app/extracted/extensions \\\n  sca-registry.cn-hangzhou.cr.aliyuncs.com/spring-ai-alibaba/jmanus:develop\n```\n\n#### 🔧 Advanced Docker Configuration\n\nIf you need custom configuration or data persistence:\n\n```bash\n# Create data directories\nmkdir -p /path/to/jmanus/h2-data\nmkdir -p /path/to/jmanus/extensions\n\n# Start with custom configuration (recommended for data persistence)\ndocker run -d \\\n  --name jmanus \\\n  -p 18080:18080 \\\n  -e DASHSCOPE_API_KEY=your_api_key_here \\\n  -v /path/to/jmanus/h2-data:/app/extracted/h2-data \\\n  -v /path/to/jmanus/extensions:/app/extracted/extensions \\\n  --restart unless-stopped \\\n  springaialibaba/jmanus:develop\n```\n\n> 📁 **Data Storage Information**:\n> - **H2 Database**: `/app/extracted/h2-data` - Stores application database files\n> - **Runtime Data**: `/app/extracted/extensions` - Stores extensions and runtime configurations\n> - It's recommended to mount these two directories for data per",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:28.871624"
  },
  {
    "basic_info": {
      "name": "android-wifi-pojie",
      "full_name": "bszapp/android-wifi-pojie",
      "owner": "bszapp",
      "description": "Android使用密码本暴力破解wifi密码工具",
      "url": "https://github.com/bszapp/android-wifi-pojie",
      "clone_url": "https://github.com/bszapp/android-wifi-pojie.git",
      "ssh_url": "git@github.com:bszapp/android-wifi-pojie.git",
      "homepage": "",
      "created_at": "2025-09-22T13:54:39Z",
      "updated_at": "2025-10-08T01:15:29Z",
      "pushed_at": "2025-10-07T16:14:33Z"
    },
    "stats": {
      "stars": 93,
      "forks": 4,
      "watchers": 93,
      "open_issues": 2,
      "size": 6475
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 219273
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# wifi密码工具\n一款通过暴力破解密码本的方式连接wifi的工具\n\n视频演示地址： [自制安卓免Root wifi密码暴力破解工具v2.1](https://www.bilibili.com/video/BV1EbxjzZExd/)\n\n<div align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/bszapp/android-wifi-pojie/refs/heads/main/1.png\" style=\"width: 49%; display: inline-block; margin: 0 0.5%;\">\n  <img src=\"https://raw.githubusercontent.com/bszapp/android-wifi-pojie/refs/heads/main/2.png\" style=\"width: 49%; display: inline-block; margin: 0 0.5%;\">\n</div>\n\n### 免责声明\n破解他人wifi密码属于违法行为，本工具仅供网络安全测试使用，请对自己的wifi尝试，**勿用于非法用途，因此造成的后果与作者无关，继续使用代表同意此条款**\n\n## 使用说明\n\n### 操作流程\n1. 选择wifi（选择/手动输入名称）\n2. 选择密码本（建议几千行的级别，太长时间过长还可能会崩溃）\n3. 调整参数（根据wifi信号强度调整超时时间，建议先测量密码错误需要的时间然后取一半）\n4. 开始运行\n\n### 注意事项\n- 好的配置参数可以取得更好的效果\n- 请在运行前检查系统网络设置关闭所有自动连接wifi\n\n### 后台运行\n如果需要再后台运行任务，推荐读取状态方式选择命令行，系统API模式请让应用处于画中画或者小窗模式，否则会导致收不到状态变化事件。\n读取方式为命令行时请给应用电池优化设置为无限制，并且对于各系统的手机需要进行额外操作（如小米需要锁定任务、添加自启动权限）\n\n### Q&A\n#### 为什么明明密码对了还是显示timeout？\n可能是后台运行无法读取到状态或者命令行格式不支持，请尝试切换读取网络连接状态工作模式\n\n#### 为什么每个密码要尝试好几秒，能不能快点？\n连接失败标志最推荐使用“握手超次”模式，最快可以缩短时间到0.5秒以内，条件不支持可以使用“握手超时”模式，同样可以缩短到1秒左右\n\n#### 单线程太慢了，为什么不能多线程运行？\nAndroid系统没有提供同时连接多个wifi的功能，并且硬件不支持这样的行为\n\n#### 为什么不能用aircrack-ng来抓握手包本地跑字典？\n本项目类似幻影wifi控制系统连接指定网络，支持监听模式的手机比较少见，如果需要这种操作推荐单独购买硬件或者使用电脑\n\n## 工作原理\n```\n忘记此网络\n开始监听wifi连接事件\n遍历wifi密码本：\n|\t使用ssid和密码连接wifi\n|\t等待监听结果\n|\t失败/超时：\n|\t|\t忘记此网络\n|\t|\t更新进度显示\n|\t成功：\n|\t|\t停止监听wifi\n|\t|\t结束运行\n全部遍历完成：\n|\t停止监听wifi\n|\t结束运行\n```\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:30.144602"
  },
  {
    "basic_info": {
      "name": "literature-assistant",
      "full_name": "liyupi/literature-assistant",
      "owner": "liyupi",
      "description": "Spring Boot 3 + Vue 3 的 AI 文献阅读助手项目，帮助用户生成文献阅读指南、智能文献管理和检索。",
      "url": "https://github.com/liyupi/literature-assistant",
      "clone_url": "https://github.com/liyupi/literature-assistant.git",
      "ssh_url": "git@github.com:liyupi/literature-assistant.git",
      "homepage": "",
      "created_at": "2025-09-11T04:08:44Z",
      "updated_at": "2025-10-05T04:47:56Z",
      "pushed_at": "2025-09-12T03:13:27Z"
    },
    "stats": {
      "stars": 83,
      "forks": 21,
      "watchers": 83,
      "open_issues": 1,
      "size": 64648
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 115233,
        "Vue": 93802,
        "JavaScript": 9849,
        "Shell": 2587,
        "CSS": 2245,
        "Batchfile": 2057,
        "HTML": 358
      },
      "license": null,
      "topics": [
        "ai",
        "backend",
        "frontend",
        "java",
        "kimi",
        "springboot",
        "vue",
        "web"
      ]
    },
    "content": {
      "readme": "# 鱼皮文献助手\n\n一个基于 Spring Boot 3 + Vue 的现代化文献管理后端服务，集成 AI 技术为用户提供智能文献阅读指南生成、文献管理和检索功能。\n\n![](docs/wenxianzhushou-image.png)\n\n> 项目利用 AI Vibe Coding 实现\n\n## ✨ 功能特性\n\n- 📚 **文献上传与解析**: 支持 PDF、Word (.doc/.docx)、Markdown 格式文献的上传和内容解析\n- 🤖 **AI 阅读指南生成**: 集成 Kimi AI，基于文献内容自动生成结构化阅读指南\n- 🏷️ **智能分类标签**: AI 自动为文献生成分类标签，便于管理和检索\n- 🔍 **多维度检索**: 支持关键词、标签、文件类型、时间范围等多种筛选条件\n- ⚡ **实时流式响应**: 基于 SSE 技术，实时推送 AI 生成进度和结果\n- 🔧 **完善的异常处理**: 统一异常处理机制，提供友好的错误信息\n- 📖 **API 文档**: 集成 Knife4j，提供完善的 API 接口文档\n\n![](docs/manage-image.png)\n\n## 环境准备\n\n在启动项目前，请确保您的开发环境已经安装并正确配置了以下依赖。\n\n- Java: 21+\n- Node: 20+\n\n\n### 1、Java 21+\n\n**验证安装**\n\n打开终端（macOS）或命令提示符（Windows），输入以下命令。如果能正确显示版本号（21 或更高版本），则说明 Java 环境已配置成功。\n\n```bash\njava -version\n```\n\n-----\n\n**Windows 安装指南**\n\n1. 访问官方 OpenJDK 发行版网站，例如 [Oracle JDK 21](https://www.oracle.com/java/technologies/downloads/#java21)。\n2. 下载适用于 Windows x64 的 `.msi` 安装程序。\n3. 双击运行安装程序，并按照图形化界面的提示完成安装。安装程序会自动配置 `JAVA_HOME` 环境变量和系统 `Path`。\n\n-----\n\n**macOS 安装指南**\n\n推荐使用 [Homebrew](https://brew.sh/) 进行安装，方便管理。\n\n1. 打开终端。\n2. 执行以下命令安装 OpenJDK 21：\n   ```bash\n   brew install openjdk@21\n   ```\n3. 安装完成后，根据 Homebrew 的提示，将 Java 添加到环境变量中。\n\n再次执行以下命令，如果能正常展示版本号即是安装成功：\n\n```bash\njava -version\n```\n\n### 2、Node.js (20+)\n\n**验证安装**\n\n打开终端或命令提示符，输入以下命令。如果能正确显示版本号（Node.js 为 20 或更高版本），则说明 Node.js 环境已配置成功。\n\n```bash\nnode -v\n```\n\n-----\n\n**Windows 安装指南**\n\n1. 访问 [Node.js 官方网站](https://nodejs.org/en/download)。\n2. 下载推荐的 Windows Installer (`.msi`) 版本（LTS，长期支持版）。\n3. 双击运行安装程序，并按照默认选项完成安装。\n\n-----\n\n**macOS 安装指南**\n\n推荐使用 [Homebrew](https://brew.sh/) 进行安装。\n\n1. 打开终端。\n2. 执行以下命令安装 Node.js 20：\n   ```bash\n   brew install node@20\n   ```\n3. 安装完成后即可直接使用 `node` 和 `npm` 命令。\n\n## 🚀 快速开始\n\n项目已内置 H2 数据库，无需安装和额外配置，开箱即用。\n\n### 方式一：使用启动脚本 (推荐)\n\n- **Windows 系统**: 双击运行根目录下的 `start.bat` 脚本。\n\n- **Linux / macOS 系统**: 在项目根目录下执行 `start.sh` 脚本：\n\n  ```bash\n  sh start.sh\n  ```\n\n### 方式二：手动编译运行\n\n```bash\n# 编译项目\nmvn clean compile\n\n# 运行项目\nmvn spring-boot:run\n\n# 或者打包后运行\nmvn clean package\njava -jar target/literature-assistant-0.0.1-SNAPSHOT.jar\n```\n\n### 访问验证\n\n- **应用服务**: http://localhost:8086/api\n- **API 文档**: http://localhost:8086/api/doc.html\n- **健康检查**: http://localhost:8086/api/literature/health\n\n## 🛠 技术栈\n\n- **框架**: Spring Boot 3.5.5\n- **数据库**: H2 Database + MyBatis-Plus 3.5.5\n- **连接池**: HikariCP\n- **文档处理**: Apache POI (Word)、PDFBox (PDF)、CommonMark (Markdown)\n- **AI 集成**: Kimi AI API + OkHttp SSE\n- **API 文档**: Knife4j 4.5.0\n- **工具库**: Hutool 5.8.29\n- **Java 版本**: Java 21\n\n\n## 🔧 核心配置说明\n\n### 数据库配置\n\n项目默认使用 H2 嵌入式数据库，数据文件将存储在项目根目录的 `data` 文件夹下，无需额外配置。\n\n```yaml\nspring:\n  datasource:\n    # 使用 H2 嵌入式数据库，无需安装\n    driver-class-name: org.h2.Driver\n    url: jdbc:h2:file:./data/literature_assistant\n```\n\n### 文件上传配置\n\n```yaml\nliterature:\n  file:\n    upload-path: ./uploads/documents           # 文件存储路径\n    max-file-size: 10MB                       # 单文件最大大小\n    allowed-extensions: pdf,doc,docx,md,markdown # 允许的文件类型\n```\n\n### AI 服务配置\n\n```yaml\nliterature:\n  ai:\n    base-url: https://api.moonshot.cn/v1      # Kimi AI API 地址\n    model: kimi-k2-turbo-preview              # 使用的模型\n    max-tokens: 20480                         # 最大 token 数\n    temperature: 0.7                          # 生成随机性\n    timeout: 60000                            # 请求超时时间（毫秒）\n```\n\n## 🔄 开发指南\n\n### 添加新的文件类型支持\n\n1. 在 `FileProcessingService` 中添加新的解析方法\n2. 更新 `allowedExtensions` 配置\n3. 在 `extractFileContent` 方法中添加类型判断\n\n### 扩展查询条件\n\n1. 在 `LiteratureQueryRequest` 中添加新的查询字段\n2. 更新 `LiteratureMapper.xml` 中的查询条件\n3. 确保数据库索引支持新的查询字段\n\n## 🙏 致谢\n\n- [Spring Boot](https://spring.io/projects/spring-boot) - 企业级 Java 应用框架\n- [MyBatis-Plus](https://baomidou.com/) - MyBatis 增强工具\n- [Kimi AI](https://www.moonshot.cn/) - 智能对话 AI 服务\n- [Apache POI](https://poi.apache.org/) - Java 文档处理库\n- [PDFBox](https://pdfbox.apache.org/) - Java PDF 处理库\n- [Knife4j](https://doc.xiaominfo.com/) - API 文档生成工具\n- [Hutool](https://hutool.cn/) - Java 工具类库\n\n---\n\n让 AI 赋能学术阅读，让文献理解更高效！",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-08T02:17:31.434421"
  },
  {
    "basic_info": {
      "name": "GhidraGPT",
      "full_name": "ZeroDaysBroker/GhidraGPT",
      "owner": "ZeroDaysBroker",
      "description": "Integrates GPT models into Ghidra for automated code analysis, variable renaming, vulnerability detection, and explanation generation.",
      "url": "https://github.com/ZeroDaysBroker/GhidraGPT",
      "clone_url": "https://github.com/ZeroDaysBroker/GhidraGPT.git",
      "ssh_url": "git@github.com:ZeroDaysBroker/GhidraGPT.git",
      "homepage": "",
      "created_at": "2025-09-12T19:40:05Z",
      "updated_at": "2025-10-05T07:50:46Z",
      "pushed_at": "2025-09-13T15:56:48Z"
    },
    "stats": {
      "stars": 83,
      "forks": 5,
      "watchers": 83,
      "open_issues": 0,
      "size": 4255
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 156479,
        "Shell": 11810
      },
      "license": "Apache License 2.0",
      "topics": [
        "agent",
        "ghidra",
        "ghidra-extension",
        "ghidra-plugin",
        "gpt",
        "java",
        "reverse-engineering"
      ]
    },
    "content": {
      "readme": "# GhidraGPT\n\n<div align=\"center\">\n  \n![GhidraGPT Logo](assets/logo.png)\n\n**Author**: Mohamed Benchikh\n\n[![GitHub Stars](https://img.shields.io/github/stars/ZeroDaysBroker/GhidraGPT?style=social)](https://github.com/ZeroDaysBroker/GhidraGPT/stargazers)\n[![GitHub Forks](https://img.shields.io/github/forks/ZeroDaysBroker/GhidraGPT?style=social)](https://github.com/ZeroDaysBroker/GhidraGPT/network)\n[![GitHub Issues](https://img.shields.io/github/issues/ZeroDaysBroker/GhidraGPT)](https://github.com/ZeroDaysBroker/GhidraGPT/issues)\n[![License](https://img.shields.io/github/license/ZeroDaysBroker/GhidraGPT)](https://github.com/ZeroDaysBroker/GhidraGPT/blob/main/LICENSE)\n\n</div>\n\nA powerful Ghidra plugin that integrates Large Language Models (LLMs) to enhance reverse engineering workflows with AI-powered code analysis and enhancement capabilities.\n\n## 🎥 Demo\n\n![Demo](assets/demo.gif)\n\n\n## ⚡ Real-Time Performance\n\nFor optimal real-time performance, it is recommended to use smaller and faster models such as **grok-3** or **deepseek-chat**. These models deliver quicker responses, making them ideal for interactive and latency-sensitive reverse engineering workflows. Using larger reasoning models may result in slower response times.\n\n## 🚀 Features\n\n### Core Functionality\n- **Code Enhancement**: AI-powered function and variable renaming for improved code readability\n- **Code Explanation**: Detailed explanations of function logic and behavior\n- **Code Analysis**: Vulnerability detection and security analysis\n- **Multi-LLM Support**: Compatible with 8+ AI providers including OpenAI, Anthropic, Google Gemini, Cohere, Mistral AI, DeepSeek, Grok (xAI), and Ollama\n\n### Configuration\n- **Flexible Configuration**: Easy setup through configuration panel\n- **Stream Processing**: Real-time AI response streaming for better user experience\n\n### Integration Features\n- **Context Menu Integration**: Right-click functions for instant AI analysis\n- **Console Interface**: Dedicated console for viewing AI responses and results\n- **Automatic Analysis**: Integration with Ghidra's analysis pipeline\n- **Theme Support**: Custom theming for enhanced UI experience\n\n## 🛠️ Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/ZeroDaysBroker/GhidraGPT.git\n   cd GhidraGPT\n   ```\n\n2. **Build the Plugin**:\n   ```bash\n   ./build.sh\n   ```\n\n3. **Install in Ghidra**:\n   ```bash\n   ./install.sh\n   ```\n\n4. **Configure API Keys**:\n   - Open Ghidra and navigate to the GhidraGPT configuration panel\n   - Enter your preferred AI service API key\n   - API keys are automatically encrypted and stored securely\n\n## 📋 Usage\n\n### Available Actions\nAccess these features through the right-click context menu on any function:\n\n- **GhidraGPT → Enhance Code**: Improve function and variable names using AI analysis\n- **GhidraGPT → Explain Code**: Get detailed explanations of function behavior\n- **GhidraGPT → Analyze Code**: Detect potential security vulnerabilities\n\n### Supported AI Providers\n- **OpenAI**: GPT models\n- **Anthropic**: Claude models\n- **Google Gemini**: Gemini models\n- **Cohere**: Command models\n- **Mistral AI**: Mistral models\n- **DeepSeek**: DeepSeek models\n- **Grok (xAI)**: Grok models\n- **Ollama**: Local models - No API key required\n\n## 🏗️ Architecture\n\n### Service Layer\n- **`CodeEnhancementService`**: Handles AI-powered function and variable renaming\n- **`CodeAnalysisService`**: Manages comprehensive code analysis and vulnerability detection\n- **`GPTService`**: Core AI communication layer with multi-provider support\n- **`ConfigurationManager`**: Configuration and API key management\n\n### UI Components\n- **`GhidraGPTProvider`**: Main plugin provider with context menu integration\n- **`GhidraGPTConsole`**: Dedicated console for AI responses\n- **`ConfigurationPanel`**: User-friendly configuration interface\n\n## ⚠️ Pending Work\n\n### Code Retyping & Analysis Enhancement\n- **Variable retyping**: Implement automated variable retyping\n- **Cross-Reference Analysis**: Improve analysis of function calls and data flow\n\n### Performance Optimizations\n- **Batch Processing**: Implement batch analysis for multiple functions\n- **Caching System**: Add intelligent caching for AI responses\n\n### Additional Features\n- **Custom Prompts**: Allow users to define custom AI prompts for specific analysis needs\n- **Export Functionality**: Add ability to export analysis results\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit issues, feature requests, or pull requests.\n\n**Repository**: [https://github.com/ZeroDaysBroker/GhidraGPT](https://github.com/ZeroDaysBroker/GhidraGPT)\n\n- 🐛 **Report Issues**: [Submit bug reports and feature requests](https://github.com/ZeroDaysBroker/GhidraGPT/issues)\n- 🔧 **Pull Requests**: [Contribute code improvements](https://github.com/ZeroDaysBroker/GhidraGPT/pulls)\n- 📖 **Documentation**: Help improve documentation and examples\n- 🧪 **Testing**: Test with different AI providers and report compatibility\n\n## 📄 L",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:32.708013"
  },
  {
    "basic_info": {
      "name": "OpenMyau",
      "full_name": "60124808866/OpenMyau",
      "owner": "60124808866",
      "description": "Myau Client for those who can’t afford it.",
      "url": "https://github.com/60124808866/OpenMyau",
      "clone_url": "https://github.com/60124808866/OpenMyau.git",
      "ssh_url": "git@github.com:60124808866/OpenMyau.git",
      "homepage": "",
      "created_at": "2025-10-02T08:40:32Z",
      "updated_at": "2025-10-07T15:35:37Z",
      "pushed_at": "2025-10-06T02:21:56Z"
    },
    "stats": {
      "stars": 77,
      "forks": 44,
      "watchers": 77,
      "open_issues": 1,
      "size": 864
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 766903
      },
      "license": "GNU General Public License v3.0",
      "topics": []
    },
    "content": {
      "readme": "# Open Myau\n\n![Preview](/images/image2.png)\n\n[Myau Client](https://myau.sell.app/), for those who can’t afford it.\n\nBased on **`Myau-250910`**, with added features and improvements not found in the original, focused on expanding and refining the original Myau client.\n\n[![Discord](https://invidget.switchblade.xyz/SEgRBbmX)](https://discord.gg/SEgRBbmX)\n\n## Changes\n\n* Added Click GUI (ported from Raven B3 by blowsy)\n* Fixed bugs\n\nIf you encounter an issue or have a feature suggestion, please [create an issue](https://github.com/60124808866/OpenMyau/issues).\n\n## Building\n\n```bash\n./gradlew build\n```\n\n## Contributing\n\nYou can open an issue or submit a pull request to help improve Open Myau.\n\nIf you’re interested in co-developing or have questions, feel free to reach out:\n\n* Discord: `60124808866_88040`",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:33.984318"
  },
  {
    "basic_info": {
      "name": "deepresearch",
      "full_name": "spring-ai-alibaba/deepresearch",
      "owner": "spring-ai-alibaba",
      "description": null,
      "url": "https://github.com/spring-ai-alibaba/deepresearch",
      "clone_url": "https://github.com/spring-ai-alibaba/deepresearch.git",
      "ssh_url": "git@github.com:spring-ai-alibaba/deepresearch.git",
      "homepage": null,
      "created_at": "2025-09-12T09:28:19Z",
      "updated_at": "2025-10-02T08:13:57Z",
      "pushed_at": "2025-10-02T01:23:25Z"
    },
    "stats": {
      "stars": 62,
      "forks": 12,
      "watchers": 62,
      "open_issues": 5,
      "size": 7614
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 508996,
        "Vue": 106884,
        "TypeScript": 86996,
        "CSS": 17670,
        "Python": 15502,
        "Makefile": 7008,
        "Dockerfile": 4604,
        "HTML": 2173,
        "JavaScript": 1264
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "[中文版本](README_zh.md)\n\nDeep Research implemented based on spring-ai-alibaba-graph.\n\n### Demo Show\n[![](https://yingziimage.oss-cn-beijing.aliyuncs.com/img/image-20251001121713795.png)](https://yingziimage.oss-cn-beijing.aliyuncs.com/video/deep_research.mov)\nvideo：https://yingziimage.oss-cn-beijing.aliyuncs.com/video/deep_research.mov\n\n## Architecture\n[Open full-size image](./imgs/deepresearch-workflow-en.png)\n\n<img src=\"./imgs/deepresearch-workflow-en.png\" alt=\"Architecture\" style=\"width:1400px; max-width:100%; height:auto; display:block; margin:0 auto;\" />\n\n\n> The diagram shows the layered architecture and main call relationships of the core modules in deepresearch.\n\n## Main Flow\n\n![Main Flow](./imgs/flow-en.png)\n\n> The diagram shows the primary flow of a user request within the deepresearch system.\n\n\n## Configuration\n\n### Required\n\n- DashScope API: `${AI_DASHSCOPE_API_KEY}`\n  \n  DashScope API key\n- TavilySearch API: `${TAVILY_API_KEY}`\n  \n  TavilySearch API key\n- Report export path: `${AI_DEEPRESEARCH_EXPORT_PATH}`\n  \n  TIP: if omitted, files will be stored in the project root\n\n### Optional\n\n**Search Services (default: Tavily)**\n\n- Jina API: `${JINA_API_KEY}`\n- aliyunaisearch:\n  - api-key: `${ALIYUN_AI_SEARCH_API_KEY}`\n  - base-url: `${ALIYUN_AI_SEARCH_BASE_URL}`\n\n**Storage Options (default: in-memory)** \n\n- redis: `${REDIS-PASSWORD}`\n  \n  Redis password; TIP: defaults to localhost:6379\n\n**Coding Node (programming capability for LLM)**\n\n- The Python executor of the Coder node runs inside a Docker container and requires Docker configuration.\n  - Set `spring.ai.alibaba.deepresearch.python-coder.docker-host` in the config file; default is `unix:///var/run/docker.sock`.\n  The project uses the `python:3-slim` image to create ephemeral containers. You can customize an image that includes common third-party libraries. Install them under `/app/dependency` inside the image, and set `spring.ai.alibaba.deepresearch.python-coder.image-name` to the image name in the config file.\n\n**RAG**\n\n- ElasticSearch: \n    - In `application.yml`, set `spring.ai.alibaba.deepresearch.rag.enabled: true`\n    - In `application.yml`, set `spring.ai.alibaba.deepresearch.rag.vector-store-type: elasticsearch`\n    - In `application.yml`, configure `spring.ai.alibaba.deepresearch.rag.elasticsearch` with ES connection details\n    - Start ES middleware from the project root with the command below\n        ```shell\n        docker compose -f docker-compose-middleware.yml up -d\n        ```\n    - In the Knowledge Base page, create a new knowledge base and upload documents to ES\n\n**MCP Services (WIP)**\n\n- AMap MCP\n\n```json\n{\n    \"researchAgent\": {\n        \"mcp-servers\": [\n            {\n                \"url\": \"https://mcp.amap.com?key=${AI_DASHSCOPE_API_KEY}\",\n                \"sse-endpoint\": null,\n                \"description\": \"This is an AMap service\",\n                \"enabled\": false\n            }\n        ]\n    }\n} \n```\n\n\n## Related APIs, Tools, and MCP Integration Docs\n\n- DashScope (Alibaba Bailian): https://bailian.console.aliyun.com\n\n- Tavily API Docs: https://docs.tavily.com/documentation/api-reference/endpoint/search\n- Jina API Docs: https://jina.ai/reader\n- AMap MCP Docs: https://lbs.amap.com/api/mcp-server/gettingstarted#t1\n\n\n## Getting Started\n### Quick Start\nRight-click the `DeepResearchApplication` class and run it.\n\n### Run with Maven\nFrom the project root, run with Maven:\n```angular2html\nmvn spring-boot:run\n```\n\n\n### Run with Docker\n- Build the Docker image from the project directory. This may take ~5 minutes depending on network speed.\n```shell\ndocker build -t alibaba-deepresearch:v1.0 . \n```\n- After building, run the container and set environment variables:\n```shell\ndocker run -d \\\n  --name alibaba-deepresearch \\\n  -e AI_DASHSCOPE_API_KEY=\"your_key_here\" \\\n  -e TAVILY_API_KEY=\"your_key_here\" \\\n#  -e JINA_API_KEY=\"your_key_here\" \\ optional\n  -p 8080:8080 \\\n  alibaba-deepresearch:v1.0\n```\n- Alternatively, use docker-compose to start Redis, ElasticSearch, and the app:\n```shell\n  docker-compose up\n```\n> **Note**:\n> - Set API keys in the `.env` file\n> - Config files are under `dockerConfig`; you can also set keys and related configs there\n\n**Test Cases**\nSee `DeepResearch.http` for sample requests.\n\n```curl\ncurl --location 'http://localhost:8080/chat/stream' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"thread_id\": \"__default_\",\n    \"enable_deepresearch\": false,\n    \"query\": \"Please analyze the reasons for the explosive popularity of Pop Mart\",\n    \"max_step_num\": 2,\n    \"auto_accepted_plan\": true\n}'\n```\n\n**Debugging & Observability**\n\nLangfuse Configuration\n\n#### Using Langfuse Cloud\n1. Sign up at [https://cloud.langfuse.com](https://cloud.langfuse.com)\n2. Create a new project\n3. Go to **Settings** → **API Keys**\n4. Generate a new API key pair (public and secret)\n5. Encode the credentials to Base64:\n   ```bash\n   echo -n \"public_key:secret_key\" | base64\n   ```\n   ```Windows PowerShell\n   [System.Convert]::ToBase64String([Sy",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:35.315193"
  },
  {
    "basic_info": {
      "name": "FHook",
      "full_name": "Rift0911/FHook",
      "owner": "Rift0911",
      "description": null,
      "url": "https://github.com/Rift0911/FHook",
      "clone_url": "https://github.com/Rift0911/FHook.git",
      "ssh_url": "git@github.com:Rift0911/FHook.git",
      "homepage": null,
      "created_at": "2025-09-16T06:06:06Z",
      "updated_at": "2025-10-02T08:08:10Z",
      "pushed_at": "2025-09-20T13:04:22Z"
    },
    "stats": {
      "stars": 60,
      "forks": 6,
      "watchers": 60,
      "open_issues": 0,
      "size": 7944
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 150195,
        "C": 78424,
        "C++": 32511,
        "CMake": 2695
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"right\">Language: <b>English</b> · <a href=\"README.cn.md\">Chinese</a></p>\n\n# FHook\n\n**Full-function HOOK framework for the Android Java layer**\n\n* **debug mode** — initialize and use directly inside the app\n* **Android 9+ (API 28+)**, including the latest versions\n* Intercept and modify **arguments/return values** of any **Java method**\n* **Class/instance-wide batch hooks**, covering common **system hotspots** (class loading, device fingerprint, SharedPreferences writes, etc.)\n* Three integration options: Gradle dependency (`implementation`), source integration (module/source copy), and (under compliance) app injection (repack or dynamic loading)\n\n> For **lawful** security research, testing, and debugging only. Ensure you have proper authorization for any target.\n\n---\n\n## 1. What problem does it solve?\n\n* **Rapid observation**: print call stacks/args/returns at runtime without touching target code\n* **Temporary patching**: tweak args/returns or feed “mock data” to verify branches\n* **Batch coverage**: one-click hook for all methods on a class/instance to accelerate debugging and regression\n* **System hotspot auditing**: `Class.forName` / `ClassLoader.loadClass` / `Settings.Secure.getString` /\n  `System.loadLibrary`, etc. can be intercepted and logged\n\n---\n\n## 2. Scenarios & Environment\n\n* **Environment**: Android 9+ (API 28+); works with Kotlin/Java projects\n* **Scenarios**: feature co-debugging, gray-box testing, automated acceptance, critical-path tracing & audit, crash triage\n* **No dependency on** Xposed / Magisk / Root\n\n---\n\n## 3. Quick Start\n\n### 3.1 Add JitPack repository\n\nAdd to **`settings.gradle`** or the root **`build.gradle`**:\n\n```groovy\ndependencyResolutionManagement {\n  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n  repositories {\n    mavenCentral()\n    maven { url 'https://jitpack.io' }\n  }\n}\n```\n\n> Kotlin DSL: `maven(url = \"https://jitpack.io\")`\n\n### 3.2 Add dependency\n\nIn your **app module**:\n\n```groovy\ndependencies {\n  implementation \"com.github.Rift0911:fhook:+\"\n}\n```\n\n### 3.3 Initialize (auto / manual)\n\n**Option A: Auto init in `attachBaseContext`**\n\n```java\n@Override\nprotected void attachBaseContext(Context base) {\n    Log.d(TAG, \"attachBaseContext\");\n    if (FCFG.IS_APP_INIT_AUTO) {\n        Log.i(TAG, \"attachBaseContext FHook.init= \" + FHook.init(base));\n    }\n    super.attachBaseContext(base);\n}\n```\n\n**Option B: Manual init anywhere (e.g., button click)**\n\n```java\nbt_main_02.setOnClickListener(v -> {\n    if (FHook.isInited()) {\n        FHook.unInit();\n    } else {\n        if (!FHook.init(this)) {\n            Toast.makeText(this, \"Init failed\", Toast.LENGTH_LONG).show();\n            Log.e(TAG, \"Init failed\");\n        } else {\n            Toast.makeText(this, \"Init success\", Toast.LENGTH_LONG).show();\n            Log.i(TAG, \"Init success\");\n        }\n    }\n});\n```\n\n> Handy calls: `FHook.unHookAll()` to remove all hooks; `FHook.showHookInfo()` to view current hook status.\n\n### 3.4 Minimal runnable samples\n\n#### A) Hook a regular app method\n\nTake `THook.fun_I_III(int a, int b, int c): int` as an example — **modify args and return**:\n\n```java\nimport java.lang.reflect.Method;\nimport android.util.Log;\n\nMethod m = THook.class.getMethod(\"fun_I_III\", int.class, int.class, int.class);\n\nFHook.hook(m)\n    .setOrigFunRun(true) // run the original method first\n    .setHookEnter((thiz, args, types, hh) -> {\n        // change the first argument\n        args.set(0, 6666);\n        Log.d(\"FHook\", \"fun_I_III enter: \" + args);\n    })\n    .setHookExit((ret, type, hh) -> {\n        // force the return value\n        Log.d(\"FHook\", \"fun_I_III exit, origRet=\" + ret);\n        return 8888;\n    })\n    .commit();\n```\n\n#### B) Hook a system method (device fingerprint sample)\n\nTake `Settings.Secure.getString(ContentResolver, String)` — **forge ANDROID\\_ID** selectively:\n\n```java\nimport android.provider.Settings;\nimport android.content.ContentResolver;\nimport java.lang.reflect.Method;\nimport android.util.Log;\n\nMethod sysGet = Settings.Secure.class.getMethod(\n        \"getString\", ContentResolver.class, String.class);\n\nFHook.hook(sysGet)\n    .setOrigFunRun(true)\n    .setHookEnter((thiz, args, types, hh) -> {\n        String key = (String) args.get(1);\n        hh.extras.put(\"key\", key);\n        Log.d(\"FHook\", \"Settings.Secure.getString key=\" + key);\n    })\n    .setHookExit((ret, type, hh) -> {\n        String key = (String) hh.extras.get(\"key\");\n        if (\"android_id\".equalsIgnoreCase(key)) {\n            return \"a1b2c3d4e5f6a7b8\"; // affect ANDROID_ID only\n        }\n        return ret; // keep others intact\n    })\n    .commit();\n```\n\n> Tip: for interface/bridge methods (e.g., `SharedPreferences.Editor.commit`), use\n> `FHookTool.findMethod4Impl(editor, ifaceMethod)` to locate the **actual implementation method** before hooking for a higher success rate.\n\n---\n\n### 3.5 Constructor Hook Samples (System & Custom)\n\n> Notes: By definition, a **constructor always runs**; `setOrigFunRun(true/false)` **has",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-08T02:17:36.652871"
  },
  {
    "basic_info": {
      "name": "retry-wheel-parent",
      "full_name": "Dengmuuuu/retry-wheel-parent",
      "owner": "Dengmuuuu",
      "description": null,
      "url": "https://github.com/Dengmuuuu/retry-wheel-parent",
      "clone_url": "https://github.com/Dengmuuuu/retry-wheel-parent.git",
      "ssh_url": "git@github.com:Dengmuuuu/retry-wheel-parent.git",
      "homepage": null,
      "created_at": "2025-09-19T09:56:22Z",
      "updated_at": "2025-09-27T11:21:15Z",
      "pushed_at": "2025-09-26T06:15:49Z"
    },
    "stats": {
      "stars": 56,
      "forks": 6,
      "watchers": 56,
      "open_issues": 0,
      "size": 245
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 136266
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# ResilientWheel\n一款基于 Netty HashedWheelTimer 的高可用分布式重试引擎，当前采用 MySQL 持久化 + 分布式抢占/粘滞租约，未来可无缝迁移至 Redis 等存储。\n\n## 模块结构\n\n```\nretry-wheel-parent/\n├─ retry-wheel-spring-boot3-starter/ # Starter：核心引擎、自动装配、SPI、Mapper 等\n└─ sql/ # 初始化/清理 SQL（建表、索引）\n```\n\n\n---\n\n## 快速开始\n\n### 1) 引入依赖\n\n```xml\n<dependency>\n  <groupId>com.fastretry</groupId>\n  <artifactId>retry-wheel-spring-boot3-starter</artifactId>\n  <version>${latest}</version>\n</dependency>\n```\n### 2) 初始化数据库\n\n执行 sql/schema.sql (建表、索引、枚举/注释；包含 retry_task 表及必要索引).\n\n3) 启用与配置（application.yml）\n```yml\nretry:\n  stick:\n    enable: true\n    lease-ttl: 30s\n    renew-ahead: 10s\n  tx:\n    propagation: REQUIRED\n    read-only: false\n    isolation: DEFAULT\n    timeout-seconds: 10\n  wheel:\n   tick-duration: 100ms\n   ticks-per-wheel: 512\n   max-pending-timeouts: 100000\n  scan:\n   initial-delay: 1000\n   period: 2000\n   batch: 200\n  executor:\n   core-pool-size: 8\n   max-pool-size: 32\n   queue-capacity: 1000\n   keep-alive: 60s\n   rejected-handler: CALLER_RUNS\n  backoff:\n   strategy: exponential\n   base: 1s\n   min: 500ms\n   max: 300s\n   jitter-ratio: 0.2\n  default-max-retry: 5\n  default-execute-timeout: 10s\n\n```\n### 4) 注册任务处理器示例\n```JAVA\n@Service(value = \"test-biz\")\npublic class CallHandler implements RetryTaskHandler<PayloadModel> {\n    @Override\n    public boolean supports(String bizType) {\n        return \"test-biz\".equals(bizType);\n    }\n\n    @Override\n    public boolean execute(RetryTaskContext ctx, PayloadModel payload) throws Exception {\n        // 模拟失败\n        if (payload.getSimulateStatus() == 500) {\n            throw new RuntimeException(\"remote 500\");\n        }\n        if (payload.getSimulateStatus() == 408) {\n            Thread.sleep(5000);\n        }\n        return true;\n    }\n\n    @Override\n    public TypeReference<PayloadModel> payloadType() {\n        return new TypeReference<PayloadModel>() {};\n    }\n}\n```\n### 5) 投递任务\n```JAVA\nSubmitOptions opt = SubmitOptions.builder()\n  .maxRetry(8)\n  .priority(10)\n  .executeTimeoutMs(4000)\n  .backoffStrategy(\"exponential\")\n  .delay(Duration.ofSeconds(0))\n  .deadline(Instant.now().plus(Duration.ofMinutes(10)))\n  .build();\nPayloadModel payload = new PayloadModel();\npayload.setBody(\"hello world\");\npayload.setUrl(\"www.baidu.com\");\npayload.setSimulateStatus(408);\nString taskId = engine.submit(\"test-biz\", payload, opt);\nreturn Map.of(\"taskId\", taskId);\n```\n\n\n\n# 通知模块重构\n\n> 为重试框架提供 **可插拔、可路由、可限流、可观测** 的通知能力。支持单条通知，覆盖 DLQ、最大重试、不可重试失败、接管、续约失败、引擎异常、持久化异常等事件。\n\n---\n\n## 特性\n\n- **SPI 可插拔**：`Notifier` 接口，内置 `LoggingNotifier`，支持自定义（如 飞书/钉钉/kim）。\n- **异步派发**：`AsyncNotifyingService` 独立线程池 + 指数退避重试，不阻塞主流程。\n- **路由/过滤**：按事件/业务路由到不同通道；\n- **可观测性**：Micrometer 指标 + 结构化日志。\n- **开关友好**：通过`NotifyingFacade`封装`AsyncNotifyingService`, `retry.notify.enabled=false`时不装配异步实现, 由门面内部自动降级为NOOP，调用方零判空，无NPE风险。\n\n---\n\n## 快速开始\n\n### 1) 引入（在 Starter 中已自动装配）\n\n确保引入 `retry-wheel-spring-boot3-starter`，通知模块随 Starter 自动装配。\n\n### 2) 配置\n\n```yaml\nretry:\n  notify:\n    enabled: true         \n    async:\n      core-pool-size: 2\n      max-pool-size: 4\n      queue-capacity: 2000\n      keep-alive: 30s\n    rate-limit:\n      window: 30s                # 限流窗口\n      threshold: 50                  # 限流阈值\n```\n\n### 3) 事件模型/严重级别\n```JAVA\n// 事件模型\npublic enum NotifyEventType {\n  DEAD_LETTER,\n  MAX_RETRY_REACHED,\n  NON_RETRYABLE_FAILED,\n  TAKEOVER,\n  LEASE_RENEW_FAILED,\n  PERSIST_FAILED,\n  ENGINE_ERROR\n}\n\n// 事件严重级别\npublic enum Severity { INFO, WARNING, ERROR, CRITICAL }\n\n```\n### 4) 通知上下文\n```JAVA\npublic class NotifyContext {\n    private NotifyEventType type;\n    private String nodeId;\n    private String bizType;\n    private String taskId;\n    private String tenantId;\n    private Integer retryCount;\n    private Integer maxRetry;\n    // 自定义分类码，如 TIMEOUT/NO_HANDLER/SERDE_ERROR\n    private String reasonCode;\n    // 可被截断/脱敏\n    private String lastError;\n    // 事件发生时间\n    private Instant when;\n    // 额外字段：shardKey、owner、fence、nextTriggerTime 等\n    private Map<String, Object> attributes ;\n}\n```\n\n### 5) 通知上下文构造工具类\n```JAVA\npublic final class NotifyContexts {\n\n    private static final int MAX_ERROR_LEN = 4000;\n\n    private NotifyContexts() {}\n\n    /* ========== 对外入口（使用系统UTC时钟） ========== */\n\n    public static NotifyContext ctxForDlq(String nodeId, RetryTaskEntity t, Throwable e, String reasonCode) {\n        return ctxForDlq(nodeId, t, e, reasonCode, Clock.systemUTC().withZone(ZoneOffset.ofHours(8)).withZone(ZoneOffset.ofHours(8)));\n    }\n\n    public static NotifyContext ctxForMaxRetry(String nodeId, RetryTaskEntity t, Throwable e) {\n        return ctxForMaxRetry(nodeId, t, e, Clock.systemUTC().withZone(ZoneOffset.ofHours(8)));\n    }\n\n    public static NotifyContext ctxForNonRetryable(String nodeId, RetryTaskEntity t, Throwable e) {\n        return ctxForNonRetryable(nodeId, t, e, Clock.systemUTC().withZone(ZoneOffset.ofHours(8)));\n    }\n\n    public static NotifyContext ctxForTakeover(\n            String newOwnerNodeId, String taskId, String bizType, String tenantId,\n            String oldOwnerNodeId, long oldFence, long newFence) {\n ",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-08T02:17:38.011364"
  },
  {
    "basic_info": {
      "name": "Wayback-Recon",
      "full_name": "aditisingh2707/Wayback-Recon",
      "owner": "aditisingh2707",
      "description": null,
      "url": "https://github.com/aditisingh2707/Wayback-Recon",
      "clone_url": "https://github.com/aditisingh2707/Wayback-Recon.git",
      "ssh_url": "git@github.com:aditisingh2707/Wayback-Recon.git",
      "homepage": null,
      "created_at": "2025-09-08T21:51:19Z",
      "updated_at": "2025-10-04T05:40:37Z",
      "pushed_at": "2025-09-08T23:59:33Z"
    },
    "stats": {
      "stars": 49,
      "forks": 7,
      "watchers": 49,
      "open_issues": 0,
      "size": 4700
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 680718
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Wayback-Recon\n\nA Burp Suite extension for passive recon using the Wayback Machine\n\n![w](https://github.com/user-attachments/assets/dcf1421b-09fb-48f5-b086-669c57d4d8ee)\n\n🔍 Overview\n\nWayback Recon integrates the Internet Archive Wayback Machine\ninto Burp Suite, letting you fetch and analyze historical URLs for a target domain directly inside Burp. This helps uncover forgotten endpoints, parameters, and assets that might still be useful for bug bounty or penetration testing.\n\n✨ Features\n✅ Fetch archived URLs from the Wayback Machine for any domain\n\n✅ Display results in a sortable, searchable table\n\n✅ Shows Year, URL, Length, and MIME-Type for each entry\n\n✅ Built-in search filter for quick keyword hunting\n\n✅ Right-click options:\n   - Send to Sitemap (integrates with Burp’s Target tab)\n   - Copy URLs to clipboard\n   - Export results to a file\n     \n✅ Toggle “Add to sitemap” before fetching to automatically add all URLs to Burp’s Target sitemap\n\n✅ Optional auto-add to Burp’s Sitemap while fetching\n\n✅ Verbose log panel for debug and progress tracking\n\n✅ Retry mechanism with backoff to handle network issues\n\n🚀 Installation\n\nIn Burp Suite:\n - Go to Extender → Extensions → Add\n - Select Java and load the built wayback-filter-extension-1.jar\n\n📖 Usage\n\n1. Enter a target domain in the input field\n2. Click Fetch to pull historical URLs from the Wayback Machine\n3. Use the Search bar to quickly filter results\n4. Right-click results for more options (Send to Sitemap, Copy, Export)\n\n⚠️ Notes\n\n - By default, image MIME types are excluded to reduce noise\n - Only 200 OK responses are included\n - Duplicate URLs are collapsed to keep results clean\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:39.309865"
  },
  {
    "basic_info": {
      "name": "CVE-2025-10184_PoC",
      "full_name": "People-11/CVE-2025-10184_PoC",
      "owner": "People-11",
      "description": null,
      "url": "https://github.com/People-11/CVE-2025-10184_PoC",
      "clone_url": "https://github.com/People-11/CVE-2025-10184_PoC.git",
      "ssh_url": "git@github.com:People-11/CVE-2025-10184_PoC.git",
      "homepage": null,
      "created_at": "2025-09-24T09:24:45Z",
      "updated_at": "2025-10-07T11:28:59Z",
      "pushed_at": "2025-10-04T13:50:53Z"
    },
    "stats": {
      "stars": 47,
      "forks": 10,
      "watchers": 47,
      "open_issues": 0,
      "size": 145
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 24569
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# APK Build for CVE‑2025‑10184 PoC\n\n这是一个 **CVE‑2025‑10184** 的 **PoC** 的 APK 构建\n\n该漏洞存在于 com.\\*.providers.telephony 中, 允许任意应用在未获得 SMS 读取权限的情况下读取短信\n\n---\n\n## 源码\n\n此源码及更多细节可见 Rapid7 的文章：  \nhttps://www.rapid7.com/blog/post/cve-2025-10184-oneplus-oxygenos-telephony-provider-permission-bypass-not-fixed/\n\n---\n\n## 下载\n\n请登录后在 Actions 下载 **未签名** 的安装包\n\n---\n\n## 验证\n\n已确认 OPPO 及其子品牌, 自 ColorOS 7.1 的所有版本均受影响\n\n---\n\n## 修复\n\nOPPO 官方已修复此问题 (通过替换 Provider 声明的权限为 OPLUS_COMPONENT_SAFE), 目前正在逐步推送更新\n\n---\n\n## 等不了 OPPO 了, 我他妈自己修\n\n最简单的修复方法：只需要在操作之前验证调用者是否拥有 SMS 权限  \n注：此方法已验证可以防止读取, 并且不影响真正拥有 SMS 权限的应用读取, 但是未进行其他可用性影响测试\n\n在 `ServiceNumberProvider` 类的 `update` 方法开头添加运行时权限检查：\n```diff\n .method public update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I\n     .registers 8\n\n+    invoke-virtual {p0}, Lcom/android/providers/telephony/ServiceNumberProvider;->getContext()Landroid/content/Context;\n+    move-result-object v0\n+    \n+    const-string v1, \"android.permission.READ_SMS\"\n+    const-string v2, \"Requires READ_SMS permission\"\n+    invoke-virtual {v0, v1, v2}, Landroid/content/Context;->enforceCallingPermission(Ljava/lang/String;Ljava/lang/String;)V\n+   \n     .line 157\n     iget-object p0, p0, Lcom/android/providers/telephony/ServiceNumberProvider;->mOpenHelper:Lcom/android/providers/telephony/MmsSmsDatabaseHelper;\n \n     invoke-virtual {p0}, Lcom/android/providers/telephony/MmsSmsDatabaseHelper;->getWritableDatabase()Landroid/database/sqlite/SQLiteDatabase;\n \n     move-result-object p0\n \n     # ... 省略其余原有代码\n .end method\n```\n在 `PushMessageProvider` 类和 `PushShopProvider` 类的 `update` 方法也需要添加以上代码  \n\n修改后请 **不要签名** 并且需要 **核心破解** 后安装, 否则将破坏整个通话功能并丢失所有短信 (系统安全机制所致)\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:40.599628"
  },
  {
    "basic_info": {
      "name": "DataAgent",
      "full_name": "spring-ai-alibaba/DataAgent",
      "owner": "spring-ai-alibaba",
      "description": "Spring AI Alibaba DataAgent",
      "url": "https://github.com/spring-ai-alibaba/DataAgent",
      "clone_url": "https://github.com/spring-ai-alibaba/DataAgent.git",
      "ssh_url": "git@github.com:spring-ai-alibaba/DataAgent.git",
      "homepage": "",
      "created_at": "2025-09-12T09:29:55Z",
      "updated_at": "2025-10-07T14:34:43Z",
      "pushed_at": "2025-10-05T02:31:55Z"
    },
    "stats": {
      "stars": 45,
      "forks": 21,
      "watchers": 45,
      "open_issues": 9,
      "size": 2196
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 919853,
        "Vue": 256294,
        "JavaScript": 67331,
        "CSS": 31703,
        "PLpgSQL": 16241,
        "TypeScript": 11743,
        "Makefile": 7848,
        "Python": 3337,
        "HTML": 1151
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# Spring AI Alibaba DataAgent\n（ “DataAgent用户1群”群的钉钉群号： 154405001431）\n## 项目简介\n\n这是一个基于Spring AI Alibaba的自然语言转SQL项目，能让你用自然语言直接查询数据库，不需要写复杂的SQL。\n\n## 项目结构\n\n这个项目分为三个部分：\n\n```\nspring-ai-alibaba-nl2sql/\n├── spring-ai-alibaba-nl2sql-management    # 管理端（可直接启动的Web应用）\n├── spring-ai-alibaba-nl2sql-chat         # 核心功能（不能独立启动，供集成使用）\n└── spring-ai-alibaba-nl2sql-common       # 公共代码\n```\n\n## 快速启动\n\n项目进行本地测试是在spring-ai-alibaba-nl2sql-management中进行\n\n### 1. 业务数据库准备\n\n可以在spring-ai-alibaba-example项目仓库获取测试表和数据：\n\n- Schema：https://github.com/springaialibaba/spring-ai-alibaba-examples/blob/main/spring-ai-alibaba-nl2sql-example/chat/sql/schema.sql\n- Data：https://github.com/springaialibaba/spring-ai-alibaba-examples/blob/main/spring-ai-alibaba-nl2sql-example/chat/sql/insert.sql\n\n将表和数据导入到你的MySQL数据库中。\n\n### 2. 配置management数据库\n\n在`spring-ai-alibaba-nl2sql-management/src/main/resources/application.yml`中配置你的MySQL数据库连接信息。\n\n> 初始化行为说明：默认开启自动创建表并插入示例数据（`spring.sql.init.mode: always`）。生产环境建议关闭，避免示例数据回填覆盖你的业务数据。\n\n```yaml\nspring:\n  datasource:\n    url: jdbc:mysql://127.0.0.1:3306/nl2sql?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&allowMultiQueries=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Shanghai\n    username: ${MYSQL_USERNAME:root}\n    password: ${MYSQL_PASSWORD:root}\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n```\n\n### 2.1 可选：启用/关闭自动初始化（schema.sql + data.sql）\n\n- 默认配置：`application.yml` 中已设置为开启\n\n```yaml\nspring:\n  sql:\n    init:\n      mode: always           # 默认：每次启动执行 schema.sql 与 data.sql\n      schema-locations: classpath:sql/schema.sql\n      data-locations: classpath:sql/data.sql\n```\n\n- 若不希望每次启动回填示例数据，可将 `mode` 改为 `never` 关闭：\n\n```yaml\nspring:\n  sql:\n    init:\n      mode: never            # 关闭自动初始化\n      schema-locations: classpath:sql/schema.sql\n      data-locations: classpath:sql/data.sql\n```\n\n注意：默认开启时（`mode: always`），`data.sql` 会在每次启动回填示例数据（即使你手动删除了数据）。生产环境请改为 `mode: never`，避免覆盖/复原业务数据。\n\n![Snipaste_2025-09-18_14-35-29.jpg](img/Snipaste_2025-09-18_14-35-29.jpg)\n\n\n### 3. 配置 API Key\n\n```yaml\nspring:\n  ai:\n    openai:\n      base-url: https://dashscope.aliyuncs.com/compatible-mode\n      api-key: ${AI_DASHSCOPE_API_KEY}\n      model: qwen-max\n      embedding:\n        model: text-embedding-v4\n    dashscope:\n      api-key: ${AI_DASHSCOPE_API_KEY}\n```\n\n\n### 4. 启动管理端\n\n在`spring-ai-alibaba-nl2sql-management`目录下，运行 `spring-ai-alibaba-nl2sql/spring-ai-alibaba-nl2sql-management/src/main/java/com/alibaba/cloud/ai/DataAgentApplication.java` 类。\n\n### 5. 启动WEB页面\n\n进入 `spring-ai-alibaba-nl2sql/spring-ai-alibaba-nl2sql-web-ui` 目录\n\n#### 安装依赖\n\n\n```bash\n# 使用 npm\nnpm install\n\n# 或使用 yarn\nyarn install\n```\n\n### 启动服务\n\n```bash\n# 使用 npm\nnpm run dev\n\n# 或使用 yarn\nyarn dev\n```\n\n启动成功后，访问地址 http://localhost:3000\n\n## 系统体验\n\n访问 http://localhost:3000 ，可以看到有四个智能体（目前这四个只是占位显示，并没有对接数据）\n\n![homepage-agents.png](img/homepage-agents.png)\n\n\n点击右上角“创建智能体” ，这里只需要输入智能体名称，其他配置都选默认。\n\n创建成功后，可以看到智能体配置页面。\n\n![agent-config.png](img/agent-config.png)\n\n进入数据源配置页面，配置业务数据库（我们在环境初始化时第一步提供的业务数据库）。\n\n![datasource-config.png](img/datasource-config.png)\n\n添加完成后，可以在列表页面验证数据源连接是否正常。\n\n![datasource-validation.png](img/datasource-validation.png)\n\n预设问题管理，可以为智能体设置预设问题\n\n![preset-questions.png](img/preset-questions.png)\n\n智能体调试页面可以定制化配置数据源，然后初始化数据源到向量库，进行效果调试。\n\n![agent-debug.png](img/agent-debug.png)\n\n![vector-initialization.png](img/vector-initialization.png)\n\n成功后可以在智能体调试页面输入自然语言进行查询。\n\n![natural-language-query.png](img/natural-language-query.png)\n\n![query-results.png](img/query-results.png)\n\n> 调试和发布的智能体数据是分离的，调试时的数据不会影响发布后的智能体。\n\n调试没问题后，可以发布智能体。\n\n![publish-agent.png](img/publish-agent.png)\n\n> 目前“嵌入网站”和“访问API”当前版本暂未实现。\n\n点击发布后会更新元数据到发布后的智能体。\n\n![metadata-update.png](img/metadata-update.png)\n\n![publish-complete.png](img/publish-complete.png)\n\n分析问题\n\n![analyze-question.png](img/analyze-question.png)\n\n分析结果\n\n![analyze-result.png](img/analyze-result.png)\n\n> 如果你没有环境执行Python节点，临时解决方法：在提问的问题中，添加“请不要通过Python分析”。\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:41.865740"
  },
  {
    "basic_info": {
      "name": "SentencePiece4J",
      "full_name": "eix128/SentencePiece4J",
      "owner": "eix128",
      "description": "SentencePiece in pure Java , No JNI Required.Works Cross Platform",
      "url": "https://github.com/eix128/SentencePiece4J",
      "clone_url": "https://github.com/eix128/SentencePiece4J.git",
      "ssh_url": "git@github.com:eix128/SentencePiece4J.git",
      "homepage": null,
      "created_at": "2025-09-26T22:15:19Z",
      "updated_at": "2025-10-07T05:43:55Z",
      "pushed_at": "2025-10-03T06:45:43Z"
    },
    "stats": {
      "stars": 45,
      "forks": 0,
      "watchers": 45,
      "open_issues": 0,
      "size": 2620
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 20488
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# SentencePiece4J\nSentencePiece in pure Java , No JNI Required.\nWorks Cross Platform for all OS\n\nuse with :\n\n# download sentencepiece\n        wget https://github.com/eix128/SentencePiece4J/raw/refs/heads/main/src/main/resources/sentencepiece.bpe.model\n\n#   mvn package\n        <dependency>\n            <groupId>io.github.eix128</groupId>\n            <artifactId>sentencepiece4j</artifactId>\n            <version>1.0.1</version>\n        </dependency>\n\n# Usage\n    import com.sentencepiece.Model;\n    import com.sentencepiece.Scoring;\n    import com.sentencepiece.SentencePieceAlgorithm;\n\n    import java.io.IOException;\n    import java.nio.file.Paths;\n    import java.util.List;\n\n    public class Main {\n        public static void main(String[] args) throws IOException {\n            Model model = Model.parseFrom(Paths.get(\"sentencepiece.bpe.model\"));\n            SentencePieceAlgorithm algorithm = new SentencePieceAlgorithm( true, Scoring.HIGHEST_SCORE );\n            \n            {\n                String raw = \"o captain! my captain! our fearful trip is done,\" +\n                        \"the ship has weather’d every rack, the prize we sought is won,\" +\n                        \"the port is near, the bells i hear, the people all exulting,\";\n                List<Integer> ids = model.encodeNormalized(raw, algorithm);\n    \n                System.out.println(\"Token IDs: \" + ids);\n                System.out.println(\"Decoded text: \" + model.decodeSmart(ids));\n                assert (raw.hashCode() ==  model.decodeSmart(ids).hashCode());\n                System.out.println(\"✔ Success\");\n    \n            }\n    \n            //Test Hebrew\n            {\n                String raw = \"השתיקה יפה לחכמים\";\n                List<Integer> ids = model.encodeNormalized(raw, algorithm);\n    \n                System.out.println(\"Token IDs: \" + ids);\n                System.out.println(\"Decoded text: \" + model.normalizeHebrew(model.decodeSmart(ids) , true ));\n                assert (raw.hashCode() ==  model.decodeSmart(ids).hashCode());\n                System.out.println(\"✔ Success\");\n            }\n    \n    \n            //Test Turkish\n            {\n                String raw = \"kusur bulmak için bakma birine! kakmak için bakarsan bulursun.kusursuz olmayı marifet edin kendine , işte asıl o zaman kusursuz olursun!...\";\n                List<Integer> ids = model.encodeNormalized(raw, algorithm);\n    \n                System.out.println(\"Token IDs: \" + ids);\n                System.out.println(\"Decoded text: \" + model.decodeSmart(ids));\n                assert (raw.hashCode() ==  model.decodeSmart(ids).hashCode());\n                System.out.println(\"✔ Success\");\n            }\n        }\n    }\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:43.172176"
  },
  {
    "basic_info": {
      "name": "java-producer",
      "full_name": "bitDive/java-producer",
      "owner": "bitDive",
      "description": "java producer for bitdive system",
      "url": "https://github.com/bitDive/java-producer",
      "clone_url": "https://github.com/bitDive/java-producer.git",
      "ssh_url": "git@github.com:bitDive/java-producer.git",
      "homepage": null,
      "created_at": "2025-10-03T12:42:55Z",
      "updated_at": "2025-10-07T15:18:03Z",
      "pushed_at": "2025-10-07T11:08:53Z"
    },
    "stats": {
      "stars": 43,
      "forks": 0,
      "watchers": 43,
      "open_issues": 0,
      "size": 203
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 390496
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-08T02:17:44.454699"
  },
  {
    "basic_info": {
      "name": "ai-tourism",
      "full_name": "1937983507/ai-tourism",
      "owner": "1937983507",
      "description": "aI-tourism 是一个智能旅游规划系统，后端基于 Spring Boot、LangChain4j、MySQL、MyBatis、Sa-Token 等技术栈，集成了多种 AI 能力（如 AI Service、MCP 工具等），为用户提供个性化旅游路线推荐、会话管理、用户权限管理等功能。系统支持多轮对话、地图路线可视化、权限安全、MCP 工具热插拔等特性。",
      "url": "https://github.com/1937983507/ai-tourism",
      "clone_url": "https://github.com/1937983507/ai-tourism.git",
      "ssh_url": "git@github.com:1937983507/ai-tourism.git",
      "homepage": "https://www.aitrip.chat/",
      "created_at": "2025-09-20T06:58:26Z",
      "updated_at": "2025-10-08T02:01:19Z",
      "pushed_at": "2025-10-08T02:01:16Z"
    },
    "stats": {
      "stars": 39,
      "forks": 0,
      "watchers": 39,
      "open_issues": 0,
      "size": 17981
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 160871
      },
      "license": null,
      "topics": [
        "agent",
        "caffeine",
        "java",
        "langchain4j",
        "llm",
        "mcp",
        "mybatis",
        "mysql",
        "redis",
        "springboot"
      ]
    },
    "content": {
      "readme": "# AI 智能旅游规划助手（后端）\n\n> **访问地址**：[https://www.aitrip.chat/](https://www.aitrip.chat/)  \n> **欢迎体验智能旅游规划服务！**\n\n## 📖 项目简介\n\n**AI-Tourism** 是一个智能旅游规划系统，后端基于 **Spring Boot、LangChain4j、MySQL、MyBatis、Sa-Token** 等技术栈构建。\n\n系统集成了多种 AI 能力（如 AI Service、MCP 工具等），为用户提供**个性化旅游路线推荐、多轮对话、权限控制**等功能。\n\n### 🎯 核心特性\n- **多轮对话与上下文记忆** - 智能理解用户需求，保持对话连贯性\n- **地图路线可视化** - 实时展示旅游路线，直观易懂\n- **MCP 灵活热插拔** - 工具可动态启用/禁用，支持热插拔\n- **Tool 统一注册** - 所有工具统一管理，易于扩展\n- **安全认证与权限管理** - 完善的用户权限体系\n\n---\n\n### 🖼️ AI 智能旅游规划 前端效果截图\n![前端效果图](assets/界面图.png)\n\n### 📹 视频效果\n![演示视频](./assets/demo.gif)\n\n**AI 智能旅游规划系统**，结合 `SpringBoot` 与 `LangChain4j`，在用户输入自然语言后，由 **AI Agent** 调用 **MCP 工具**与 **Function Call** 获取天气、景点等信息，由前端同时渲染文字版路线规划与结构化地图路线。\n\n---\n\n## 💡 核心特性与架构特点\n\n![核心特性与架构特点](assets/核心特性与架构特点.png)\n\n### 1. Agent 服务与地图路线渲染深度结合\n- **图文结合**：提供图文结合的旅游攻略，并在前端地图中直观展示每日路线\n- **流式传输**：使用 `SSE` 流式传输文字版攻略，并基于 `JSON Schema` 输出结构化数据，支持前端实时渲染\n\n### 2. 基于 Langchain4j 的 Agent 服务\n- **任务规划**：基于 `Prompt` 工程，设计角色定位 + 任务目标 + 约束限制\n- **工具调用**：`MCP` 工具通过配置可灵活启用/禁用，支持热插拔；所有 `Tool` 工具均实现统一接口，注册到 `ToolManager`，支持运行时动态扩展与管理\n- **多轮记忆**：实现 `ChatMemoryStore`，短期记忆优先存储于 `Redis`，未命中自动回退数据库，`AI Service` 实例以会话为单位缓存，支持多用户并发与上下文隔离\n- **结构化输出路线**：基于 `JSON Schema` 输出结构化路线数据，用于前端地图渲染展示\n- **安全防范**：`LangChain4j` 输入护轨机制，前置校验请求内容，防止敏感词与 `Prompt` 注入攻击，保障系统稳定性\n\n### 3. 统一工具注册与高性能调用防抖\n- **MCP 工具**：通过配置可灵活启用/禁用，支持热插拔\n- **Function Call 工具**：通过 `ToolManager` 统一注册与调度，支持运行时扩展\n- **性能优化**：引入 `Caffeine` 缓存，避免重复调用外部服务，**平均响应耗时从 5.20s 下降至 399μs**\n\n### 4. 多轮对话记忆与实例隔离\n- **记忆管理**：结合 `Redis` 与数据库实现短期记忆，使用数据库实现会话历史\n- **实例缓存**：基于 `Caffeine` 缓存 `AI Service` 实例，支持会话隔离，提升服务响应性能并减少实例重复创建\n- **性能提升**：实例平均创建时间由 **13.1ms 降低至 9.74ms，性能提升 28.4%**\n\n### 5. AI 输入护轨与结构化输出\n- **安全校验**：请求前置校验，自动过滤敏感词、恶意注入等风险内容，保障系统安全\n\n### 6. Sa-Token 权限认证\n- **令牌机制**：`JWT` 短期令牌 + `Refresh Token` 长期令牌结合\n- **权限控制**：注解式权限控制，细粒度角色管理\n\n### 7. SpringBoot 工程化与 RESTful 设计\n- **分层架构**：标准的分层架构（`Controller` - `Service` - `Mapper`）\n- **接口规范**：接口统一，符合 `RESTful` 规范，易于前后端协作\n\n---\n\n## 🏗️ 系统整体架构\n\n\n\n- **前端（ai-tourism-frontend）**：`Vue` 应用，负责交互、地图渲染与对话展示；通过 `SSE` 调用 `POST /ai_assistant/chat-stream` 实时消费模型输出\n\n- **接入层（Controller + 鉴权）**：基于 `Spring Boot REST`，使用 `Sa-Token` 进行登录与权限校验（如 `@SaCheckLogin`、`@SaCheckPermission`）\n\n- **服务层（MemoryChatServiceImpl）**：统一处理请求校验、获取会话历史、获取会话列表、消息入库、`SSE` 流式返回\n\n- **AI Service（MemoryAssistantServiceFactory）**：按会话构建隔离的 `AssistantService` 实例，整合 `OpenAI` 流式模型、`MessageWindowChatMemory`（基于 `ChatMemoryStore`）、输入护轨、工具调用；同时使用 `Caffeine` 按 `sessionId` 缓存实例，避免重复创建\n\n- **记忆与历史（Redis + MySQL）**：\n  - **短期对话记忆**：`CustomRedisChatMemoryStore` 基于 `Redis` 进行管理，同时支持 `MySQL` 消息填入\n  - **长期历史与结构化数据**：通过 `MyBatis` 写入 `MySQL`（会话表、消息表、路线 JSON）\n\n- **工具调用（Function Call + MCP）**：\n  - **Function Call**：`ToolManager` 统一注册所有 `BaseTool`\n  - **MCP**：基于 `LangChain4j MCP`，`McpClientService` 通过 `SSE` 创建 `ToolProvider`\n\n- **缓存与防抖**：\n  - **Caffeine**：缓存 `AssistantService` 实例\n  - **Redis**：承载对话记忆，降低数据库读写压力\n\n- **可观测性与监控**：`Micrometer`` 暴露 `Prometheus` 指标（管理端点已开放 `prometheus`）；`AiModelMonitorListener`/`AiModelMetricsCollector` 记录请求量、耗时、Token 使用、错误率、缓存命中等；Grafana 仪表盘见 `doc/Prometheus-Grafana.json`\n\n---\n\n## 🚀 快速开始\n\n### 📂 目录结构\n\n```\nai-tourism/\n├── src/\n│   ├── main/\n│   │   ├── java/com/example/aitourism/\n│   │   │   ├── ai/                  # AI Agent、工具、记忆、护轨等核心AI能力\n│   │   │   ├── config/              # 配置类（如Sa-Token、CORS、Redis等）\n│   │   │   ├── controller/          # REST API 控制器\n│   │   │   ├── dto/                 # 数据传输对象\n│   │   │   ├── entity/              # 实体类\n│   │   │   ├── exception/           # 全局异常处理\n│   │   │   ├── mapper/              # MyBatis 映射\n│   │   │   ├── monitor/             # 监控与埋点\n│   │   │   ├── service/             # 业务逻辑与AI集成\n│   │   │   └── util/                # 工具类\n│   │   └── resources/\n│   │       ├── application.yml      # 主要配置文件\n│   │       └── prompt/              # AI Prompt 模板\n├── sql/\n│   └── create_table.sql             # 数据库表结构\n├── doc/\n│   ├── API.md                       # 接口文档\n│   └── Prometheus-Grafana.json      # 监控仪表盘配置\n├── pom.xml                          # Maven 依赖\n└── README.md\n```\n\n### 🛠️ 技术栈与依赖\n\n| 技术分类 | 技术栈 | 版本/说明 |\n|---------|--------|----------|\n| **核心框架** | Java | `21` |\n| | Spring Boot | `3.5.6` |\n| **AI 能力** | LangChain4j | AI能力集成 |\n| **数据库** | MySQL | `9.4` |\n| **ORM** | MyBatis & MyBatis-Spring-Boot | 数据持久化 |\n| **安全认证** | Sa-Token | JWT 认证与权限 |\n| | BCrypt | 密码加密 |\n| **工具库** | Lombok | 代码简化 |\n| | OkHttp3 | HTTP 客户端 |\n| | Hutool | 工具库 |\n| **缓存** | Caffeine | 本地高性能缓存 |\n| | Redis | 分布式缓存与对话记忆 |\n| **监控** | Prometheus + Grafana | 监控与可视化 |\n| | Micrometer | Spring Boot 监控埋点 |\n\n> **详见** `pom.xml` 依赖配置\n\n### 🗄️ 数据库结构\n\n#### 主要表设计\n\n| 表名 | 说明 | 主要字段 |\n|------|------|----------|\n| `t_user` | 用户表 | 手机号、加密密码、昵称、头像、状态等 |\n| `t_role` | 角色表 | USER、ROOT 等角色 |\n| `t_permission` | 权限表 | 权限标识、权限名称等 |\n| `t_user_role` | 用户-角色关联表 | 用户ID、角色ID |\n| `t_role_permission` | 角色-权限关联表 | 角色ID、权限ID |\n| `t_refresh_token` | 刷新令牌表 | 用户ID、令牌值、过期时间等 |\n| `t_ai_assistant_sessions` | 会话列表 | 会话ID、用户ID、会话标题等 |\n| `t_ai_assistant_chat_messages` | AI助手消息表 | 消息ID、会话ID、消息内容、角色等 |\n\n> **详细字段和约束**请参考 `",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:45.701934"
  },
  {
    "basic_info": {
      "name": "agentscope-java",
      "full_name": "agentscope-ai/agentscope-java",
      "owner": "agentscope-ai",
      "description": "AgentScope Java: Agent-Oriented Programming for Building LLM Applications",
      "url": "https://github.com/agentscope-ai/agentscope-java",
      "clone_url": "https://github.com/agentscope-ai/agentscope-java.git",
      "ssh_url": "git@github.com:agentscope-ai/agentscope-java.git",
      "homepage": "",
      "created_at": "2025-09-23T04:37:43Z",
      "updated_at": "2025-10-07T00:46:44Z",
      "pushed_at": "2025-09-24T10:22:58Z"
    },
    "stats": {
      "stars": 38,
      "forks": 2,
      "watchers": 38,
      "open_issues": 2,
      "size": 179
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 432905
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\">\n  <img\n    src=\"https://img.alicdn.com/imgextra/i1/O1CN01nTg6w21NqT5qFKH1u_!!6000000001621-55-tps-550-550.svg\"\n    alt=\"AgentScope Logo\"\n    width=\"200\"\n  />\n</p>\n\n## AgentScope Implementation for Java\n<font style=\"color:rgb(31, 35, 40);\">This is the Java implementation of </font>[<font style=\"color:rgb(9, 105, 218);\">AgentScope</font>](https://github.com/agentscope-ai/agentscope/)<font style=\"color:rgb(31, 35, 40);\">. Please note that this project is still experimental and under active development.</font>\n\n\n![](https://img.shields.io/badge/GUI-AgentScope_Studio-blue?logo=look&logoColor=green&color=dark-green)![](https://img.shields.io/badge/license-Apache--2.0-black)\n\n## ✨ Why AgentScope?\nEasy for beginners, powerful for experts.\n\n+ **Transparent to Developers**: Transparent is our **FIRST principle**. Prompt engineering, API invocation, agent building, workflow orchestration, all are visible and controllable for developers. No deep encapsulation or implicit magic.\n+ Realtime Steering: Native support for realtime interruption and customized handling.\n+ **More Agentic**: Support agentic tools management, agentic long-term memory control and agentic RAG, etc.\n+ **Model Agnostic**: Programming once, run with all models.\n+ **LEGO-style Agent Building**: All components are **modular** and **independent**.\n+ **Multi-Agent Oriented**: Designed for **multi-agent**, **explicit** message passing and workflow orchestration, NO deep encapsulation.\n+ **Highly Customizable**: Tools, prompt, agent, workflow, third-party libs & visualization, customization is encouraged everywhere.\n\n## 🚀 Quickstart\n### Installation\nAgentScope Java requires **jdk 17** or higher.\n\n```bash\n<dependency>\n    <groupId>io.agentscope</groupId>\n    <artifactId>agentscope-core</artifactId>\n    <version>0.1.0</version>\n</dependency>\n```\n\n### Hello AgentScope!\nStart with a basic ReActAgent that replies to user queries!\n\n```java\npublic static void main(String[] args) {\n    Model model = DashScopeChatModel.builder()\n\t\t.apiKey(System.getenv(\"DASHSCOPE_API_KEY\"))\n\t\t.modelName(\"qwen-max\")\n\t\t.build();\n\n    ReActAgent agent = ReActAgent.builder()\n    .name(\"hello-world-agent\")\n    .sysPrompt(\"You are a helpful AI assistant. Be concise and friendly. \" +\n               \"When thinking through problems, use <thinking>...</thinking> tags to show your reasoning.\")\n    .model(model)\n    .memory(new InMemoryMemory())\n    .formatter(new DashScopeChatFormatter())\n    .build();\n\n    Msg userMessage = Msg.builder()\n        .role(MsgRole.USER)\n        .textContent(\"Hello, please introduce yourself.\")\n        .build();\n    Msg response = agent.reply(userMessage).block();\n\n    System.out.println(\"Agent Response: \" + response.getTextContent());\n}\n```\n\n### Equip Agent with Tools\n1. Define Tool\n\n\tDefine a tool class with methods annotated with `@Tool`. Here's an example `SimpleTools` class with a time tool:\n\n\t```java\n\tpublic class SimpleTools {\n\t\t@Tool(name = \"get_time\", description = \"Get current time string of a time zone\")\n\t\tpublic String getTime(@ToolParam(description = \"Time zone, e.g., Beijing\") String zone) {\n\t\t\tLocalDateTime now = LocalDateTime.now();\n\t\t\treturn now.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n\t\t}\n\t}\n\t```\n\n2. Register Tool to ReActAgent\n\n\tRegister the tool class through `Toolkit` using the `registerTool` method:\n\n\t```java\n\tpublic static void main(String[] args) {\n\t\tModel model = DashScopeChatModel.builder()\n\t\t\t.apiKey(System.getenv(\"DASHSCOPE_API_KEY\"))\n\t\t\t.modelName(\"qwen-max\")\n\t\t\t.build();\n\n\t\tToolkit toolkit = new Toolkit();\n\t\ttoolkit.registerTool(new SimpleTools());\n\n\t\tReActAgent agent = ReActAgent.builder()\n\t\t\t.name(\"hello-world-agent\")\n\t\t\t.sysPrompt(\"You are a helpful AI assistant.\")\n\t\t\t.model(model)\n\t\t\t.toolkit(toolkit)\n\t\t\t.memory(new InMemoryMemory())\n\t\t\t.formatter(new DashScopeChatFormatter())\n\t\t\t.build();\n\n\t\tMsg userMessage = Msg.builder()\n\t\t\t\t.role(MsgRole.USER)\n\t\t\t\t.textContent(\"Please tell me the current time.\")\n\t\t\t\t.build();\n\n\t\tMsg response = agent.reply(userMessage).block();\n\t\tSystem.out.println(\"Agent Response: \" + response.getTextContent());\n\t}\n\t```\n## <font style=\"color:rgb(31, 35, 40);\">📖</font><font style=\"color:rgb(31, 35, 40);\"> Documentation</font>\n+ [Create Message](./docs/quickstart-message.md)\n+ [Create ReAct Agent](./docs/quickstart-agent.md)\n+ Model\n+ Tool\n+ Memory\n+ Prompt Formatter\n\n## <font style=\"color:rgb(31, 35, 40);\">🏗️</font><font style=\"color:rgb(31, 35, 40);\"> </font>Roadmap\nIn the upcoming versions, AgentScope Java version will focus on improving the following features.\n\n+ Multi-modal\n+ Multi-Agent\n+ Tracing\n+ AgentScope Studio\n\n## ⚖️ License\nAgentScope is released under Apache License 2.0.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-08T02:17:46.996263"
  }
]