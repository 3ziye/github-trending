[
  {
    "basic_info": {
      "name": "run",
      "full_name": "Esubaalew/run",
      "owner": "Esubaalew",
      "description": "Universal multi-language runner and smart REPL written in Rust.",
      "url": "https://github.com/Esubaalew/run",
      "clone_url": "https://github.com/Esubaalew/run.git",
      "ssh_url": "git@github.com:Esubaalew/run.git",
      "homepage": "https://run.esubalew.et/",
      "created_at": "2025-09-30T08:03:00Z",
      "updated_at": "2025-10-23T10:48:20Z",
      "pushed_at": "2025-10-10T12:43:49Z"
    },
    "stats": {
      "stars": 830,
      "forks": 18,
      "watchers": 830,
      "open_issues": 2,
      "size": 127
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 508379,
        "Shell": 4946,
        "Smarty": 1134
      },
      "license": "Apache License 2.0",
      "topics": [
        "cli",
        "crate",
        "open-source",
        "repl",
        "rust"
      ]
    },
    "content": {
      "readme": "<h1 align=\"center\">run</h1>\n\n<p align=\"center\">\n\t<strong>Polyglot command runner & smart REPL that lets you script, compile, and iterate in 25+ languages without touching another CLI.</strong>\n</p>\n\n<p align=\"center\">\n  <!-- Release -->\n  <a href=\"https://github.com/Esubaalew/run/releases/latest\">\n    <img src=\"https://img.shields.io/github/v/release/Esubaalew/run?style=flat-square&color=orange&logo=github\" alt=\"Latest release\" />\n  </a>\n\n  <!-- Release status -->\n  <img src=\"https://img.shields.io/badge/release-passing-brightgreen?style=flat-square\" alt=\"Release passing\" />\n\n  <!-- Docs -->\n  <a href=\"https://docs.rs/run-kit\">\n    <img src=\"https://img.shields.io/badge/docs-passing-brightgreen?style=flat-square&logo=rust\" alt=\"Docs passing\" />\n  </a>\n\n  <!-- Crates.io -->\n  <a href=\"https://crates.io/crates/run-kit\">\n    <img src=\"https://img.shields.io/crates/v/run-kit.svg?style=flat-square&logo=rust&color=red\" alt=\"crates.io\" />\n  </a>\n\n  <!-- Downloads -->\n  <a href=\"https://github.com/Esubaalew/run/releases\">\n    <img src=\"https://img.shields.io/github/downloads/Esubaalew/run/total?style=flat-square&color=blue\" alt=\"Downloads\" />\n  </a>\n\n  <!-- Stars -->\n  <a href=\"https://github.com/Esubaalew/run/stargazers\">\n    <img src=\"https://img.shields.io/github/stars/Esubaalew/run?style=flat-square&color=yellow\" alt=\"GitHub stars\" />\n  </a>\n\n  <!-- Platforms -->\n  <img src=\"https://img.shields.io/badge/platform-Linux%20%7C%20macOS%20%7C%20Windows-lightgrey?style=flat-square\" alt=\"Platform support\" />\n\n  <!-- License -->\n  <a href=\"LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-Apache%202.0-blue?style=flat-square\" alt=\"License\" />\n  </a>\n</p>\n\n<p align=\"center\">\n\t<a href=\"https://run.esubalew.et/\">Website</a>\n\t‚Ä¢\n\t<a href=\"https://run.esubalew.et/docs/overview\">Docs Overview</a>\n</p>\n\n> Built in Rust for developers who live in multiple runtimes. `run` gives you a consistent CLI, persistent REPLs, and batteries-included examples for your favorite languages.\n\n---\n\n<details>\n<summary><strong>Table of contents</strong></summary>\n\n- [Website and Docs](#website-and-docs)\n- [Overview](#overview---universal-multi-language-runner)\n  - [What is run?](#what-is-run)\n  - [Who is this for?](#who-is-this-for)\n  - [Why was run created?](#why-was-run-created)\n  - [Why Rust?](#why-rust)\n- [Highlights](#-highlights)\n- [Quickstart](#-quickstart)\n- [Installation](#-installation)\n- [How it works](#-how-it-works)\n- [Supported languages](#-supported-languages)\n  - [Complete Language Aliases Reference](#complete-language-aliases-reference)\n- [Command Variations - Flexible Syntax](#command-variations---flexible-syntax)\n- [Command-Line Flags Reference](#command-line-flags-reference)\n- [‚ö†Ô∏è When to Use --lang (Important!)](#Ô∏è-when-to-use---lang-important)\n- [Main Function Flexibility](#main-function-flexibility)\n- [Examples](#-examples)\n- [REPL](#-repl)\n  - [Interactive REPL - Line by Line or Paste All](#interactive-repl---line-by-line-or-paste-all)\n  - [Variable Persistence & Language Switching](#variable-persistence--language-switching)\n  - [REPL Commands](#repl-commands)\n- [Stdin Piping Examples](#stdin-piping-examples)\n- [Language-Specific Notes](#language-specific-notes)\n- [üìÑ License](#-license)\n\n</details>\n\n---\n\n# Website and Docs\n\nThe official website and full documentation are available here:\n\n- Website: https://run.esubalew.et/\n- Docs Overview: https://run.esubalew.et/docs/overview\n\nUse these links to explore features, language guides, and detailed examples.\n\n---\n\n# Overview - Universal Multi-Language Runner\n\nA powerful command-line tool for executing code in 25 programming languages\n\n## What is run?\n\nrun is a universal multi-language runner and smart REPL (Read-Eval-Print Loop) written in Rust. It provides a unified interface for executing code across 25 programming languages without the hassle of managing multiple compilers, interpreters, or build tools.\n\nWhether you're a beginner learning your first programming language or an experienced polyglot developer, run streamlines your workflow by providing consistent commands and behavior across all supported languages.\n\n## Who is this for?\n\n‚Ä¢ Beginners: Learn programming without worrying about complex setup procedures. Just install run and start coding in any language.\n\n‚Ä¢ Students: Quickly test code snippets and experiment with different programming paradigms across multiple languages.\n\n‚Ä¢ Developers: Prototype ideas rapidly, test algorithms, and switch between languages seamlessly without context switching.\n\n‚Ä¢ DevOps Engineers: Write and test automation scripts in various languages from a single tool.\n\n‚Ä¢ Educators: Teach programming concepts across multiple languages with a consistent interface.\n\n## Why was run created?\n\nTraditional development workflows require installing and configuring separate tools for each programming language. This creates several problems:\n\n‚Ä¢ Time-consuming setup: Installing compilers, interpreters, package managers, and configuring environments ",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-24T02:19:05.241916"
  },
  {
    "basic_info": {
      "name": "firm",
      "full_name": "42futures/firm",
      "owner": "42futures",
      "description": "A text-based work management system for technologists.",
      "url": "https://github.com/42futures/firm",
      "clone_url": "https://github.com/42futures/firm.git",
      "ssh_url": "git@github.com:42futures/firm.git",
      "homepage": "",
      "created_at": "2025-10-10T11:42:37Z",
      "updated_at": "2025-10-24T02:08:11Z",
      "pushed_at": "2025-10-18T16:47:46Z"
    },
    "stats": {
      "stars": 600,
      "forks": 22,
      "watchers": 600,
      "open_issues": 8,
      "size": 254
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 290171,
        "Typst": 1971,
        "PowerShell": 1412,
        "Shell": 1222
      },
      "license": "GNU Affero General Public License v3.0",
      "topics": [
        "business",
        "cli",
        "dsl",
        "firm",
        "graph",
        "work"
      ]
    },
    "content": {
      "readme": "# Firm: Business-as-code\nA text-based work management system for technologists.\n\n![Firm CLI demo](media/demo.gif)\n\n## Why?\nModern businesses are natively digital, but lack a unified view. Your data is scattered across SaaS tools you don't control, so you piece together answers by jumping between platforms.\n\nYour business is a graph: customers link to projects, projects link to tasks, people link to organizations. Firm lets you define these relationships in plain text files (you own!).\n\nVersion controlled, locally stored and structured as code with the Firm DSL. This structured representation of your work, *business-as-code*, makes your business readable to yourself and to the robots that help you run it.\n\n### Features\n- **Everything in one place:** Organizations, contacts, projects, and how they relate.\n- **Own your data:** Plain text files and tooling that runs on your machine.\n- **Open data model:** Tailor to your business with custom schemas.\n- **Automate anything:** Search, report, integrate, whatever. It's just code.\n- **AI-ready:** LLMs can read, write, and query your business structure.\n\n## Getting started\nFirm operates on a \"workspace\": a directory containing all your `.firm` DSL files. The Firm CLI processes every file in this workspace to build a unified, queryable graph of your business.\n\nThe first step is to add an entity to your workspace. You can do this either by using the CLI or by writing the DSL yourself.\n\n### Add entities with the CLI\nUse `firm add` to interactively generate new entities. Out of the box, Firm supports a set of pre-built entity schemas for org mapping, customer relations and work management. The CLI will prompt you for the necessary info and generate corresponding DSL.\n\n```bash\n$ firm add\n```\n```\nAdding new entity\n\n> Type: organization\n> ID: megacorp\n> Name: Megacorp Ltd.\n> Email: mega@corp.com\n> Urls: [\"corp.com\"]\n\nWriting generated DSL to file my_workspace/generated/organization.firm\n```\n\n### Write DSL manually\nAlternatively, you can create a `.firm` file and write the DSL yourself.\n\n```firm\norganization megacorp {\n  name = \"Megacorp Ltd.\"\n  email = \"mega@corp.com\"\n  urls = [\"corp.com\"]\n}\n```\n\nBoth of these methods achieve the same result: a new entity defined in your Firm workspace.\n\n### Querying the workspace\nOnce you have entities in your workspace, you can query them using the CLI.\n\n#### Listing entities\nUse `firm list` to see all entities of a specific type.\n\n```bash\n$ firm list task\n```\n```\nFound 7 entities with type 'task'\n\nID: task.design_homepage\nName: Design new homepage\nIs completed: false\nAssignee ref: person.jane_doe\n\n...\n```\n\n#### Getting an entity\nTo view the full details of a single entity, use `firm get` followed by the entity's type and ID.\n\n```bash\n$ firm get person john_doe\n```\n```\nFound 'person' entity with ID 'john_doe'\n\nID: person.john_doe\nName: John Doe\nEmail: john@doe.com\n```\n\n#### Exploring relationships\nThe power of Firm lies in its ability to travel a graph of your business. Use `firm related` to explore connections to/from any entity.\n\n```bash\n$ firm related contact john_doe\n```\n```\nFound 1 relationships for 'contact' entity with ID 'john_doe'\n\nID: interaction.megacorp_intro\nType: Call\nSubject: Initial discussion about Project X\nInteraction date: 2025-09-30 09:45:00 +02:00\nInitiator ref: person.jane_smith\nPrimary contact ref: contact.john_doe\n```\n\n## Installation\nThe Firm CLI is available to download via [Github Releases](https://github.com/42futures/firm/releases/). Install scripts are provided to make the process easy.\n\n### Linux and macOS\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/42futures/firm/main/install.sh | sudo bash\n```\n\nIf you don't feel confident running it with `sudo`, you can:\n\n1. **Download the release**\n   - Go to [Github Releases](https://github.com/42futures/firm/releases/)\n   - Download the appropriate archive for your operating system and architecture. You can run `uname -m` in your terminal if you're not sure which one to pick.\n\n2. **Extract the archive**\n```bash\ntar -xzf firm-[OS]-[ARCH].tar.gz\n```\n\n3. **Navigate to the extracted directory**\n```bash\ncd firm-[OS]-[ARCH]\n```\n\n4. **Run the application**\n\n**Option A:** Run from current directory\n```bash\n./firm\n```\n\n**Option B:** Install globally (recommended)\n```bash\n# Make executable (if needed)\nchmod +x firm\n\n# Move to system PATH\nsudo mv firm /usr/local/bin/\n\n# Now you can run firm from anywhere\nfirm\n```\n\n### Windows\n```bash\nirm https://raw.githubusercontent.com/42futures/firm/main/install.ps1 | iex\n```\n\n## Using Firm as a library\nBeyond the CLI, you can integrate Firm's core logic directly into your own software using the `firm_core` and `firm_lang` Rust packages. This allows you to build more powerful automations and integrations on top of Firm.\n\nFirst, add the Firm crates to your `Cargo.toml`:\n\n```toml\n[dependencies]\nfirm_core = { git = \"https://github.com/42futures/firm.git\" }\nfirm_lang = { git = \"https://github.com/42futures/firm.git\" }\n```\n\nYou can then l",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:06.470885"
  },
  {
    "basic_info": {
      "name": "reddix",
      "full_name": "ck-zhang/reddix",
      "owner": "ck-zhang",
      "description": "Reddix ‚Äì Reddit, refined for the terminal.",
      "url": "https://github.com/ck-zhang/reddix",
      "clone_url": "https://github.com/ck-zhang/reddix.git",
      "ssh_url": "git@github.com:ck-zhang/reddix.git",
      "homepage": "",
      "created_at": "2025-10-03T09:57:33Z",
      "updated_at": "2025-10-24T00:55:39Z",
      "pushed_at": "2025-10-15T12:46:15Z"
    },
    "stats": {
      "stars": 539,
      "forks": 7,
      "watchers": 539,
      "open_issues": 7,
      "size": 1324
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 558305
      },
      "license": "MIT License",
      "topics": [
        "reddit",
        "reddit-client"
      ]
    },
    "content": {
      "readme": "# Reddix\n\n[![Release](https://img.shields.io/github/v/release/ck-zhang/reddix?style=flat-square)](https://github.com/ck-zhang/reddix/releases/latest)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](LICENSE)\n\nReddix - Reddit, refined for the terminal.\n\n![Reddix UI](docs/assets/reddix-ui-preview.png)\n\n## Features\n\n- image preview based on kitty graphics protocol\n- video playback through mpv's Kitty integration\n- multi-account support\n- keyboard first navigation\n- smart caching\n- NSFW filter toggle\n\n## Install\n\nDownload the latest [release](https://github.com/ck-zhang/reddix/releases/latest) from GitHub or run one of the installers\n\n```sh\ncurl --proto '=https' --tlsv1.2 -LsSf https://github.com/ck-zhang/reddix/releases/latest/download/reddix-installer.sh | sh\n```\n\n## Quickstart\n1. Create a Reddit ‚Äúscript‚Äù at https://www.reddit.com/prefs/apps and set the redirect URI to `http://127.0.0.1:65010/reddix/callback`.\n2. Launch `reddix`, press `m`, and follow the guided menu for setup.\n3. Prefer to configure things manually? Copy [`docs/examples/config.yaml`](docs/examples/config.yaml) into `~/.config/reddix/config.yaml` and fill in your credentials.\n\nCore shortcuts: `j/k` move, `h/l` change panes, `m` guided menu, `o` action menu, `r` refresh, `s` sync subs, `u/d` vote, `q` quit.\n\n## Support\n- Feature requests and contributions are welcome, this project is in its very early stage.\n- Track ongoing ideas in the [feature request log](docs/feature-requests.md).\n- Donation: https://ko-fi.com/ckzhang\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-24T02:19:07.682474"
  },
  {
    "basic_info": {
      "name": "Wyrm",
      "full_name": "0xflux/Wyrm",
      "owner": "0xflux",
      "description": " The dragon in the dark. A red team post exploitation framework for testing security controls during red team assessments. ",
      "url": "https://github.com/0xflux/Wyrm",
      "clone_url": "https://github.com/0xflux/Wyrm.git",
      "ssh_url": "git@github.com:0xflux/Wyrm.git",
      "homepage": "",
      "created_at": "2025-09-25T16:41:37Z",
      "updated_at": "2025-10-24T01:38:49Z",
      "pushed_at": "2025-10-22T06:53:37Z"
    },
    "stats": {
      "stars": 249,
      "forks": 23,
      "watchers": 249,
      "open_issues": 1,
      "size": 3939
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 260642,
        "HTML": 15757,
        "CSS": 5881,
        "Shell": 3318,
        "PowerShell": 729,
        "PLpgSQL": 691,
        "Dockerfile": 646
      },
      "license": "MIT License",
      "topics": [
        "adversary-emulation",
        "adversary-simulation",
        "c2",
        "command-and-control",
        "pentest",
        "pentesting",
        "red-team",
        "red-teaming",
        "rust",
        "security-tools",
        "wyrm"
      ]
    },
    "content": {
      "readme": "# Wyrm - v0.3 Hatchling\n\n&#128679; Pre-release version &#128679;. If you want to support this project, please give it a star! I will be releasing updates and\ndevlogs on my [blog](https://fluxsec.red/) and [YouTube](https://www.youtube.com/@FluxSec) to document progress, so please give me a follow there.\n\nWyrm (pronounced 'worm', an old English word for 'serpent' or 'dragon') is a post exploitation, open source, Red Team security testing framework framework, written in Rust designed to be used by Red Teams, Purple Teams, \nPenetration Testers, and general infosec hobbyists. This project is fully built in Rust, with extra effort going into obfuscating artifacts which\ncould be present in memory. Project created and maintained by [flux](https://github.com/0xflux/), for **legal authorised security testing only**.\n\n![Wyrm Malware Post Exploitation Implant Red Team](resources/wyrm_landscape.png)\n\nWyrm currently supports only HTTP(S) agents using a custom encryption scheme for encrypting traffic below TLS, with a unique packet design so that\nthe packets cannot be realistically decrypted even under firewall level TLS inspection.\n\nThis project is a work in progress, currently released at v0.2 (Hatchling). Updates are planned through versions 1,0, 2.0, 3.0, and 4.0. You can view\nthe planned roadmap in this project (see [Milestones.md](https://github.com/0xflux/Wyrm/blob/master/Milestones.md)). In time, this is designed to be an open source competitor to **Cobalt Strike**, **Mythic**, **Sliver**, etc.\n\nFor any bugs, or feature requests, please use the Issues tab, and for anything else - please use GitHub Discussions. I am active on this project,\nso I will be attentive to anything raised.\n\n### Features\n\n- Implant uses a configurable profile to customise features and configurations\n- IOCs encrypted in the payload to assist in anti-analysis and anti-yara hardening\n- Implant transmits data encrypted below TLS, defeating perimeter inspection security tools out the box\n- Dynamic payload generation\n- Easy mechanism to stage files (such as built implants, PDF, zip, etc) on the C2 for download to support phishing campaigns and initial attack vectors\n- Supports native Windows API commands, more planned in future updates\n- Easy to use terminal client for the operator to task & inspect agents, and to manage staged resources\n- Implant uses the most common User-Agent for comms to help it blend in covertly with traffic by default, this is also configurable to suit your engagement\n- Easy, automated C2 infrastructure deployment with `install_server.sh`\n- Anti-sandbox techniques which are highly configurable by the operator through profiles\n- Backed by a database, fully timestamped to make reporting easier\n\nThis project is not currently accepting contributions, please **raise issues** or use **GitHub Discussions** and I will look into them, and help\nanswer any questions.\n\n**Before deploying the C2**, you should read the C2 readme file, found in the `/c2` directory. Proper docs are coming soon\nin time for v1.0 release, at https://wyrm-c2.com.\n\nA mental model for the C2 is as follows:\n\n![Wyrm C2](resources/c2_model.png)\n\nThe below image demonstrates the **Below TLS Encryption** feature and how it is implemented:\n\n![Wyrm Below TLS Encryption](resources/wyrm_post_diag.png)\n\n### Updates\n\n**WARNING:** Before pulling an update; please check the [release notes](https://github.com/0xflux/Wyrm/blob/master/RELEASE_NOTES.md) to see whether there are any breaking changes - for example if the\n**configurable C2 profile** changes in a breaking way from a previous profile you have, you will want to make sure you backup and migrate\nyour profile. I will be excluding `/c2/profiles/*` from git once the project is published in pre-release to prevent accidentally overwriting\nyour previous profile when running `git pull` to update your software.\n\nAs per the roadmap, this project will see significant development over the next 12 months. To pull updates, whether they are new features\nor bug fixes, you simply just do a git pull, re-build the c2 in release mode via:\n\n- `sudo systemctl stop wyrm`\n- `cd c2`, \n- `cargo build --release`\n- `sudo systemctl start wyrm`\n\n### Setup\n\nThe project contains an install shell script, and is designed to be run on `Debian` based Linux flavours.\nThe install script will install all required dependencies to the project, as well as making a new user, `wyrm_user`\nthat will run the C2 service.\n\nThe user account is created as `sudo useradd --system --no-create-home --shell /usr/sbin/nologin wyrm_user`.\n\n**Server Setup**\n\n1) Install your favourite reverse proxy (NGINX / Apache etc). The web app will default to serve on `0.0.0.0` at `:8080`. You can edit this in `/c2/.env` (at step 2), so configure your reverse proxy to use whatever you define in the `.env`.\n2) Clone the repo to your server & mark the install script executable.\n3) **SECURITY**: \n   1) In `c2/.env` edit:\n      1) `POSTGRES_PASSWORD`\n      2) `ADMIN_TOKEN` - **DO NOT USE THE ",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-24T02:19:08.905463"
  },
  {
    "basic_info": {
      "name": "superseedr",
      "full_name": "Jagalite/superseedr",
      "owner": "Jagalite",
      "description": "A BitTorrent Client in your Terminal",
      "url": "https://github.com/Jagalite/superseedr",
      "clone_url": "https://github.com/Jagalite/superseedr.git",
      "ssh_url": "git@github.com:Jagalite/superseedr.git",
      "homepage": "",
      "created_at": "2025-10-18T22:09:46Z",
      "updated_at": "2025-10-24T02:18:44Z",
      "pushed_at": "2025-10-24T02:13:57Z"
    },
    "stats": {
      "stars": 199,
      "forks": 6,
      "watchers": 199,
      "open_issues": 3,
      "size": 240
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 471021
      },
      "license": "GNU General Public License v3.0",
      "topics": []
    },
    "content": {
      "readme": "# superseedr - A BitTorrent Client in your Terminal\n\nBitTorrent client written fully in Rust using **[Ratatui](https://ratatui.rs/)**.\n\n![Feature Demo](https://github.com/Jagalite/superseedr-assets/blob/main/superseedr_landing.webp)\n\n## Installation pre-release\nInstall using cargo:\n```bash\ncargo install superseedr\n```\nLaunch TUI (Terminal UI) + BitTorrent Client\n```bash\nsuperseedr\n```\n## Preview only / Tested on M1 Mac / kitty and Ghostty\nOnce running, add torrents by pasting (`ctrl+v`) a magnet link or path to a `.torrent` file. \n\nYou can also add torrents or magnet links via another terminal command line while the TUI is running (make sure to set a download path first):\n```bash\n# Add a magnet link to the running instance\nsuperseedr \"magnet:?xt=urn:btih:...\"\n\n# Add a local torrent file path to the running instance\nsuperseedr \"/absolute/path/to/my.torrent\"\n\n# Stop the running application instance\nsuperseedr stop-client\n```\n## Build and Run\nClone the project and run the application directly using Cargo:\n```bash\ncargo run\n```\nConfiguration files are located in the user's Application Support folder:\n`Press [m] in the tui to see log and config path`\n\n## Current Status & Features\n\nThe client is in a late-alpha stage, with most core BitTorrent features implemented and functional.\n\n### Core Protocol & Peer Discovery\n- **Real Time Performance Tuning:** Periodic resource optimizations (file handles) to maximize speeds and disk stability.\n- **Peer Discovery:** Full support for Trackers, DHT, PEX, and Magnet Links (including metadata download).\n- **Piece Selection:** Utilizes a Rarest-First strategy for optimal swarm health, switching to Endgame Mode for the final pieces.\n- **Choking Algorithm:** Employs a tit-for-tat based choking algorithm with optimistic unchoking for efficient upload slot management.\n\n### User Interface (TUI)\n- **Real-time Dashboard:** A `ratatui`-based terminal UI displaying overall status, individual torrent progress, peer lists, and network graphs.\n- **Help & Commands:** A help popup lists all keyboard commands, and a footer bar shows common commands.\n\n### Configuration & Management\n- **Persistent State:** Saves the torrent list, progress, and lifetime stats to a configuration file.\n- **Speed Limits:** Allows setting global upload and download speed limits.\n\n## Roadmap to V1.0\n- **Testing:** Ongoing testing across various platforms and terminals.\n- **Magnet Link Handling:** Implementation of operating system-level integration (e.g., registry/app associations) for seamless browser-to-app magnet link capture.\n- **CI/CD:** Implementation of a full CI/CD pipeline.\n- **Build & Distribution:** Work in progress for streamlined building and distribution.\n- **Unit Testing:** Expansion of unit test coverage.\n\n## Roadmap to V1.5\n- Fix and refactor synchronous startup and validation\n\n## Future (V2.0 and Beyond)\n- **Network History:** Persisting network history to disk.\n- **RSS Support:** Integration of RSS feed support.\n- **Headless Mode:** A headless mode alongside the TUI.\n- **Torrent Log book:** Historic log book of all torrents added and deleted. Allows users to search and redownload.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:10.157945"
  },
  {
    "basic_info": {
      "name": "free-ferris-pack",
      "full_name": "MariaLetta/free-ferris-pack",
      "owner": "MariaLetta",
      "description": "ü¶Ä Pack of 50+ Ferris pictures and elements will help you to build your own design for anything related to Rust Programming Language: presentations, README files, posts in blogs or social media, courses, videos and many, many more. ",
      "url": "https://github.com/MariaLetta/free-ferris-pack",
      "clone_url": "https://github.com/MariaLetta/free-ferris-pack.git",
      "ssh_url": "git@github.com:MariaLetta/free-ferris-pack.git",
      "homepage": "",
      "created_at": "2025-10-04T20:22:05Z",
      "updated_at": "2025-10-22T22:57:52Z",
      "pushed_at": "2025-10-05T14:55:22Z"
    },
    "stats": {
      "stars": 179,
      "forks": 7,
      "watchers": 179,
      "open_issues": 0,
      "size": 226654
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 44238598
      },
      "license": "Creative Commons Zero v1.0 Universal",
      "topics": []
    },
    "content": {
      "readme": "# Free Ferris Pack\n![alt](/preview/main.png)\nü¶Ä Meet the New Emotional Ferris! ü¶Ä\n\n- 50+ unique Ferris illustrations - emotions, poses, and situations\n- 10+ funny elements for your own creating\n- Consistent art style - all illustrations work together\n- Professional quality - suitable for presentations and documents\n- Multiple formats - SVG, PNG in large sizes\n- Absolutely free - no attribution required\n- Ready to use - download and go\n\nCreated with ‚ù§Ô∏è for the Rust community\n\n## Why This Pack Exists\nSome time ago I created Free Gophers Pack, which became quite popular in the community. Then I learned about Ferris and thought - why not?\n\n![alt](/preview/preview2.png)\n\n## Contents\n0. [Examples](/examples/)\n1. [Elements](/elements/) \n2. [Illustrations](/illustrations/) \n\n![alt](/preview/preview3.png)\n\n![alt](/preview/preview4.png)\n\n![alt](/preview/preview5.png)\n\n## Perfect For\n- Rust developers building projects and tools\n- Educators teaching Rust programming\n- Speakers with talks about Rust\n- Technical writers creating Rust content\n- Companies using Rust in their stack\n- Community organizers running Rust events\n\nSee different use cases in [examples](/examples/).\n\n![alt](/examples/presentation4.png)\n\n![alt](/examples/presentation9.png)\n\n## License\nThis package is licensed as CC0 (public domain) so you can use the images in any way with no restrictions.\n\n## My other projects\nIf you liked this project, you may also want to see \n- [Free Gophers Pack](https://github.com/MariaLetta/free-gophers-pack)\n- [Mega Doodles Pack](https://github.com/MariaLetta/mega-doodles-pack)\n\n## About me\nMy name is Maria Letta, I am a professional illustrator and product designer, some of my works can be found here:    \nü¶Ñ instagram https://instagram.com/maria_letta_art     \nüé® creativemarket https://creativemarket.com/Maria_Letta\n\nDrop me an email, if you have any questions or suggestions:\n‚úâ designbyletta@gmail.com\n\n![alt](/examples/presentation10.png)",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:11.400574"
  },
  {
    "basic_info": {
      "name": "adabraka-ui",
      "full_name": "Augani/adabraka-ui",
      "owner": "Augani",
      "description": "A ui component library for building desktop applications in rust",
      "url": "https://github.com/Augani/adabraka-ui",
      "clone_url": "https://github.com/Augani/adabraka-ui.git",
      "ssh_url": "git@github.com:Augani/adabraka-ui.git",
      "homepage": null,
      "created_at": "2025-10-21T19:25:32Z",
      "updated_at": "2025-10-24T00:14:30Z",
      "pushed_at": "2025-10-23T12:15:03Z"
    },
    "stats": {
      "stars": 171,
      "forks": 3,
      "watchers": 171,
      "open_issues": 0,
      "size": 6525
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 913153
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# adabraka-ui\n\n[![Crates.io](https://img.shields.io/crates/v/adabraka-ui.svg)](https://crates.io/crates/adabraka-ui)\n[![Downloads](https://img.shields.io/crates/d/adabraka-ui.svg)](https://crates.io/crates/adabraka-ui)\n[![Documentation](https://docs.rs/adabraka-ui/badge.svg)](https://docs.rs/adabraka-ui)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Rust](https://img.shields.io/badge/rust-nightly-orange.svg)](https://www.rust-lang.org/)\n[![GitHub Stars](https://img.shields.io/github/stars/Augani/adabraka-ui?style=social)](https://github.com/Augani/adabraka-ui)\n\n<a href=\"https://www.buymeacoffee.com/pythonxi\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 40px !important;width: 145px !important;\" ></a>\n\nA comprehensive, professional UI component library for [GPUI](https://github.com/zed-industries/zed), the GPU-accelerated UI framework powering the Zed editor. Inspired by [shadcn/ui](https://ui.shadcn.com/), adabraka-ui provides 73+ polished, accessible components for building beautiful desktop applications in Rust.\n\n**[üìñ Documentation](https://augani.github.io/adabraka-ui/)** ¬∑ **[üöÄ Getting Started](#installation)** ¬∑ **[üì¶ Components](#components)** ¬∑ **[üí° Examples](#examples)**\n\n## ‚ú® Features\n\n- üé® **Complete Theme System** - Built-in light/dark themes with semantic color tokens\n- üß© **73+ Components** - Comprehensive library covering all UI needs from buttons to data tables\n- üì± **Responsive Layout** - Flexible layout utilities (VStack, HStack, Grid)\n- üé≠ **Professional Animations** - Smooth transitions with cubic-bezier easing and spring physics\n- ‚úçÔ∏è **Typography System** - Built-in Text component with semantic variants\n- üíª **Code Editor** - Multi-line editor with syntax highlighting and full keyboard support\n- ‚ôø **Accessibility** - Full keyboard navigation, ARIA labels, and screen reader support\n- üéØ **Type-Safe** - Leverages Rust's type system for compile-time guarantees\n- üöÄ **High Performance** - Optimized for GPUI's retained-mode rendering with virtual scrolling\n- üìö **Well Documented** - Extensive examples and comprehensive API documentation\n\n## üé¨ Showcase\n\nSee adabraka-ui in action in real applications:\n\n### Desktop Music Player\n![Music Player App](docs/assets/images/music-player.png)\n\nA beautiful desktop music player with offline playing capabilities. Features smooth animations, responsive UI, and a polished user experience built entirely with adabraka-ui components.\n\n### Project Task Manager\n![Task Manager App](docs/assets/images/task-manager.png)\n\nA powerful task management application used to track the development of this UI library. Features drag-and-drop task organization with smooth animations, showcasing the library's advanced capabilities.\n\n## üöÄ Installation\n\n> **Note:** Currently requires Rust nightly due to GPUI dependencies. Install with: `rustup toolchain install nightly`\n\nAdd adabraka-ui to your `Cargo.toml`:\n\n```toml\n[dependencies]\nadabraka-ui = \"0.2.1\"\ngpui = \"0.2.0\"\n```\n\nBuild your project with nightly:\n```bash\ncargo +nightly build\n```\n\n## Quick Start\n\n```rust\nuse adabraka_ui::prelude::*;\nuse gpui::*;\n\nfn main() {\n    Application::new().run(|cx| {\n        // Initialize the UI library\n        adabraka_ui::init(cx);\n\n        // Install a theme\n        install_theme(cx, Theme::dark());\n\n        cx.open_window(\n            WindowOptions {\n                titlebar: Some(TitlebarOptions {\n                    title: Some(\"My App\".into()),\n                    ..Default::default()\n                }),\n                ..Default::default()\n            },\n            |_, cx| cx.new(|_| MyApp::new()),\n        ).unwrap();\n    });\n}\n\nstruct MyApp;\n\nimpl MyApp {\n    fn new() -> Self {\n        Self\n    }\n}\n\nimpl Render for MyApp {\n    fn render(&mut self, _window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {\n        VStack::new()\n            .p(px(32.0))\n            .gap(px(16.0))\n            .child(\n                div()\n                    .text_size(px(24.0))\n                    .font_weight(FontWeight::BOLD)\n                    .child(\"Welcome to adabraka-ui!\")\n            )\n            .child(\n                Button::new(\"get-started\", \"Get Started\")\n                    .variant(ButtonVariant::Default)\n                    .on_click(|_event, _window, _cx| {\n                        println!(\"Button clicked!\");\n                    })\n            )\n    }\n}\n```\n\n## üé® Component Customization with Styled Trait\n\n**All 54 components implement the `Styled` trait**, giving you complete control over styling!\n\n### Full Customization Support\n\nEvery component can be customized using GPUI's powerful styling API. Apply any styling method to any component:\n\n```rust\nButton::new(\"custom-btn\", \"Click Me\")\n    .variant(ButtonVariant::Primary)  // Use built-in variant\n    .bg(rgb(0x8b5cf6))                 // Custom background\n    .p_8()                              // C",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:12.627583"
  },
  {
    "basic_info": {
      "name": "crispy-palm-tree",
      "full_name": "bingcicle/crispy-palm-tree",
      "owner": "bingcicle",
      "description": "dirhash",
      "url": "https://github.com/bingcicle/crispy-palm-tree",
      "clone_url": "https://github.com/bingcicle/crispy-palm-tree.git",
      "ssh_url": "git@github.com:bingcicle/crispy-palm-tree.git",
      "homepage": null,
      "created_at": "2025-09-29T15:13:51Z",
      "updated_at": "2025-10-17T13:52:58Z",
      "pushed_at": "2025-09-29T15:15:30Z"
    },
    "stats": {
      "stars": 148,
      "forks": 0,
      "watchers": 148,
      "open_issues": 0,
      "size": 6
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 2599
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# dirhash\nCompute SHA-256 for files in a directory and list duplicates.\n\n## Build\n```bash\ncargo build --release\n./target/release/dirhash ./data --exts jpg,png --dupes > dupes.csv\n```\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:13.899527"
  },
  {
    "basic_info": {
      "name": "ghostscan",
      "full_name": "h2337/ghostscan",
      "owner": "h2337",
      "description": "A modern, Rust-powered Linux scanner that unmasks hidden rootkits, stealthy eBPF tricks, and ghost processes in one fast sweep (45+ scanners)",
      "url": "https://github.com/h2337/ghostscan",
      "clone_url": "https://github.com/h2337/ghostscan.git",
      "ssh_url": "git@github.com:h2337/ghostscan.git",
      "homepage": "",
      "created_at": "2025-09-28T05:45:03Z",
      "updated_at": "2025-10-23T23:32:36Z",
      "pushed_at": "2025-09-29T10:51:35Z"
    },
    "stats": {
      "stars": 138,
      "forks": 3,
      "watchers": 138,
      "open_issues": 0,
      "size": 82
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 189766,
        "C": 3549
      },
      "license": "MIT License",
      "topics": [
        "antivirus",
        "linux-security",
        "malware-detection",
        "rootkit-detection",
        "scanner",
        "security",
        "security-scanner",
        "security-tools"
      ]
    },
    "content": {
      "readme": "# ghostscan\n\nFast one-shot sweep for Linux incident response. Drop the binary on a host, run it once, and collect actionable leads from the kernel, procfs, bpffs, systemd, cron, sockets, and more.\n\n## Quick start\n\n1. Install a current Rust toolchain.\n2. Build with `cargo build --release`.\n3. Copy `target/release/ghostscan` to the target host.\n4. Run as root (or with equivalent capabilities): `sudo ./ghostscan`.\n5. Optional helpers (`bpftool`, `nft`, `ss`, `journalctl`, `auditctl`) expand coverage; when missing, the output explains what was skipped.\n\n## Reading results\n\n- Each scanner prints a bracketed name followed by either findings, `OK`, or an error string.\n- The process always exits with code `0`; treat the log itself as the verdict.\n- Findings are heuristics designed for triage; validate before acting.\n\n## Available scanners\n\n- **Hidden LKM**: compares procfs/sysfs clusters against `kallsyms` to surface hidden modules.\n- **Kernel taint**: highlights taint flags that lack a visible explanation.\n- **Ftrace redirection**: spots risky `ftrace` hooks on critical kernel paths.\n- **Unknown kprobes**: looks for kprobes attached to sensitive symbols that ghostscan cannot explain.\n- **Syscall table integrity**: verifies syscall table pointers for tampering.\n- **Netfilter hook drift**: finds orphaned or invalid netfilter hook jumps.\n- **Module linkage tamper**: checks module list pointers for manipulation.\n- **Ownerless BPF objects**: reports BPF maps/programs without a backing task.\n- **BPF kprobe attachments**: flags kprobes pointed at high-value kernel routines.\n- **BPF LSM**: notes when BPF LSM programs are active.\n- **Detached XDP/TC programs**: detects XDP or TC programs that no longer have an interface.\n- **Sockmap/Sockhash verdicts**: surfaces sockmap/sockhash programs lacking owners.\n- **Sensitive kfunc usage**: tracks invocations of dangerous `kfunc` targets.\n- **Non-bpffs pins**: finds BPF pins created outside bpffs mounts.\n- **Netlink vs proc**: compares netlink inventories with `/proc/net` to expose hidden sockets.\n- **Task list mismatch**: contrasts BPF snapshots with `/proc` task lists to expose hidden PIDs.\n- **Hidden PIDs**: uses BPF-only views to reveal task IDs invisible to `/proc`.\n- **Kernel thread masquerade**: detects kernel threads spoofing user process metadata.\n- **Suspicious ptrace edges**: reports unusual ptrace parent/child relationships.\n- **Deleted or memfd binaries**: lists processes executing from deleted files or memfd mounts.\n- **Hidden listeners**: identifies listeners seen via netlink vs `/proc` vs BPF.\n- **Ownerless sockets**: reports sockets without an owning task.\n- **Netfilter cloaking**: spots tampering patterns that hide netfilter rules.\n- **Local port backdoors**: highlights sockets bound to deleted or temporary paths.\n- **`ld.so.preload` tamper**: inspects `ld.so.preload` for unexpected entries.\n- **Cron ghosts**: checks cron/anacron/at directories for orphaned or cloaked jobs.\n- **Systemd ghosts**: finds unit files pointing to deleted or temporary executables.\n- **SSH footholds**: surfaces dangerous `authorized_keys` options and forced commands.\n- **OverlayFS whiteouts**: reports suspicious opaque or whiteout entries in OverlayFS.\n- **Hidden bind mounts**: lists bind or immutable mounts likely used for concealment.\n- **PAM/NSS modules**: flags PAM or NSS modules loaded from non-system paths.\n- **Live `LD_PRELOAD`**: notes processes still using deleted or writable preload libraries.\n- **Library search hijack**: checks SUID/privileged binaries for unsafe search paths.\n- **`LD_AUDIT` daemons**: finds daemons configured with `LD_AUDIT` despite lacking TTYs.\n- **Large RX regions**: surfaces non-JIT daemons with large anonymous RX memory.\n- **Kernel text RO**: verifies that kernel text sections remain read-only.\n- **`/etc/scripts.d` provenance**: warns on executable scripts from tmp or non-root owners.\n- **Sudoers**: examines sudoers entries for insecure privilege escalation paths.\n- **Kernel cmdline**: alerts on boot parameters that disable audit, lockdown, or IMA.\n- **Sensitive host mounts**: identifies sensitive host paths exposed inside containers.\n- **Host PID namespace**: reports containers sharing the host PID namespace.\n- **Overlay lowerdir**: catches OverlayFS lowerdirs that escape the storage root.\n- **Audit disabled**: detects when auditd is off or dropping records.\n- **Journal gaps**: looks for missing spans in the current boot's journal.\n- **Kernel message suppression**: notices unusual suppression of kernel logs.\n\n## Development pointers\n\n- Format and lint locally with `cargo fmt && cargo check`.\n- New scanners live in `src/scanners/` and expose `pub fn run() -> ScanOutcome` before being registered in `SCANNERS` inside `src/main.rs`.\n\n## Operational notes\n\n- Most modules require elevated privileges to read privileged interfaces, and they report missing access instead of silently failing.\n\n## License\n\nMIT\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-24T02:19:15.122343"
  },
  {
    "basic_info": {
      "name": "servo-gtk",
      "full_name": "nacho/servo-gtk",
      "owner": "nacho",
      "description": "GTK integration for Servo",
      "url": "https://github.com/nacho/servo-gtk",
      "clone_url": "https://github.com/nacho/servo-gtk.git",
      "ssh_url": "git@github.com:nacho/servo-gtk.git",
      "homepage": null,
      "created_at": "2025-09-26T13:52:40Z",
      "updated_at": "2025-10-23T16:02:29Z",
      "pushed_at": "2025-10-21T13:45:59Z"
    },
    "stats": {
      "stars": 134,
      "forks": 3,
      "watchers": 134,
      "open_issues": 6,
      "size": 1702
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 61053,
        "JavaScript": 1965,
        "HTML": 135
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "# Servo GTK\n\nA GTK4 library that embeds the Servo web engine.\n\n## Features\n\n- GTK4-based web browser widget\n- Servo web engine integration\n- OpenGL-accelerated rendering\n- Async event handling\n\n## Building\n\n```bash\ncargo build\n```\n\n## Running the Example\n\n```bash\ncargo run --example browser\n```\n\n## Using as a Library\n\nAdd to your `Cargo.toml`:\n\n```toml\n[dependencies]\nservo-gtk = { path = \"path/to/servo-gtk\" }\n```\n\nThen use in your code:\n\n```rust\nuse servo_gtk::WebView;\n\nlet webview = WebView::new();\nwebview.load_url(\"https://example.com\");\n```\n\n## Dependencies\n\n- GTK4\n- OpenGL\n- Servo web engine\n- Rust toolchain\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:16.348926"
  },
  {
    "basic_info": {
      "name": "chroma",
      "full_name": "yuri-xyz/chroma",
      "owner": "yuri-xyz",
      "description": "üåà Shader-based audio visualizer for the terminal",
      "url": "https://github.com/yuri-xyz/chroma",
      "clone_url": "https://github.com/yuri-xyz/chroma.git",
      "ssh_url": "git@github.com:yuri-xyz/chroma.git",
      "homepage": "",
      "created_at": "2025-10-04T22:39:52Z",
      "updated_at": "2025-10-20T08:43:23Z",
      "pushed_at": "2025-10-10T20:27:26Z"
    },
    "stats": {
      "stars": 129,
      "forks": 7,
      "watchers": 129,
      "open_issues": 6,
      "size": 259
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 182946,
        "WGSL": 35774,
        "Nix": 2943,
        "Shell": 1703
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "audio",
        "audio-visualizer",
        "hyprland",
        "linux",
        "rust",
        "shaders",
        "shell",
        "tui"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <img width=\"300\" alt=\"Chroma's logo in ASCII rainbow\" src=\"https://github.com/user-attachments/assets/871f6c7b-8b7c-486d-8cae-41ec13ed2d02\" />\n\nüåà A Rust-based, ASCII art shader audio visualizer for your terminal!\n\n  <img src=\"https://github.com/user-attachments/assets/b71074f2-3e77-4fb9-a8ef-30288a3690c4\" width=\"550\" />\n\n</div>\n\n## ‚≠ê Features\n\n- üé® **GPU-accelerated shaders** using wgpu (compute shaders)\n- üñºÔ∏è **ASCII art rendering** with ANSI color support\n- ‚öôÔ∏è **Highly configurable parameters** via config file\n- üíæ **Save/Load configurations** with automatic deduping via hashing\n- üîÑ **Live config reloading** for real-time parameter adjustment\n- üéµ **Audio visualization** driven by system audio input\n- üìä **FFT-based audio analysis** for reactive visual effects\n\n## ‚ú® Demos & screenshots\n\nüîä Make sure you turn on sound on the videos!\n\n<img width=\"2474\" height=\"1248\" alt=\"chroma-themes\" src=\"https://github.com/user-attachments/assets/0f43781d-4276-4d5f-8247-a932df43372e\" />\n\n<img width=\"1958\" height=\"1103\" alt=\"chroma-config\" src=\"https://github.com/user-attachments/assets/96dae99e-2e93-470a-b44f-40c0a09f098a\" />\n\n[chroma.webm](https://github.com/user-attachments/assets/9e821a20-8394-445c-9542-91e294225e63)\n\n[chroma-demo-long.webm](https://github.com/user-attachments/assets/3ae02009-b9a5-4003-93b3-8120db869447)\n\n## üîó Install\n\n### Arch Linux\n\n```bash\n# With an AUR helper: yay\nyay -S chroma-visualizer-git\n\n# With an AUR helper: paru\nparu -S chroma-visualizer-git\n\n# Or manually:\ngit clone https://aur.archlinux.org/chroma-visualizer-git.git\ncd chroma-visualizer-git\nmakepkg -si\n\n# If you're lazy:\ngit clone https://aur.archlinux.org/chroma-visualizer-git.git \\\n  && cd chroma-visualizer-git \\\n  && makepkg -si\n```\n\n### Other distros\n\n...More packaging coming soon!...\n\nMeanwhile you can build from source below:\n\n### From source (manual)\n\n```bash\n# Clone the git repo and enter it:\ngit clone https://github.com/yuri-xyz/chroma.git\ncd chroma\n\n# Make sure you have the `alsa-lib` & `pipewire` packages installed,\n# the exact package names may vary depending on your distro.\n\n# Pick one:\ncargo build --release                    # visuals only\ncargo build --release --features audio   # with audio reactivity (recommended)\n\n# Install the built bin so that you can run it with `chroma`:\nsudo install -Dm755 target/release/chroma /usr/local/bin/chroma\n```\n\n## ‚ÑπÔ∏è Usage\n\n```bash\n# Run with default settings\nchroma\n\n# Load a saved configuration\nchroma --config config_a3f8c2d9e1b5.toml\n\n# Or using the short form\nchroma -c config_a3f8c2d9e1b5.toml\n\n# View help for all arguments and settings\nchroma --help\n```\n\n## üïπÔ∏è Controls\n\n- `Q` or `Esc` - Quit application\n- `R` - **Randomize parameters** ‚≠ê (Discover new effects!)\n- `S` - **Save configuration** üíæ (Creates `config_<hash>.toml` in current directory)\n- `P`/`O` - **Cycle palettes** üé® (16 different character sets!)\n- `‚Üë`/`‚Üì` - Adjust frequency\n- `‚Üí`/`‚Üê` - Adjust speed\n- `+`/`-` - Adjust amplitude\n- `[`/`]` - Adjust scale\n\nSee [CONTROLS.md](./notes/CONTROLS.md) and [PALETTES.md](./notes/PALETTES.md) for more details.\n\n## üé® Configuration & Ricing\n\nChroma is designed to be highly configurable and CLI-friendly, so it feels natural alongside your other terminal tools. There are multiple ways to configure the effects and visuals:\n\n**Config files**: Load preset configurations from TOML files. You can find [example preset configs in the `examples` directory](./examples):\n\n```\nchroma -c examples/0.toml\n```\n\n**Live reloading**: Edit your config file while chroma is running and see changes applied instantly! This makes it easy to tweak parameters and visualize your adjustments in real time.\n\n**CLI parameters**: Most parameters can be set via command-line arguments. Run `chroma --help` to see all available options.\n\n> [!TIP]\n> You can combine config files with CLI parameters‚ÄîCLI args take precedence. This is perfect when you have a favorite base config but want to tweak specific values on the fly or in a script.\n\n> [!TIP]\n> Use `--random` or `-r` to randomize any parameters that haven't been explicitly set by your config file or CLI args. Great for adding variety to each run!\n\nIf you're feeling brave, you can even create your own custom shader patterns and load them like this: `chroma --custom-shader my_shader.wgsl`. Take a look at [`examples/custom_shader.wgsl`](./examples/custom_shader.wgsl) as a beginner template.\n\n## üì¶ Dependencies\n\n- Runtime\n  - vulkan-icd-loader\n  - A Vulkan driver: one of `vulkan-intel`, `vulkan-radeon`, or `nvidia-utils`\n  - Terminal with ANSI color support\n- Optional (audio feature)\n  - pipewire (recommended) or alsa-lib\n- Build\n  - rust, cargo, git\n\n## üèóÔ∏è Contributing\n\nAll contributions welcome! If you have some cool ideas, found some bugs, or would like to improve the project anyhow, feel free to create an issue and then a corresponding PR :)\n\nHere's some tips to making good contributions:\n\n- ‚úÖ Create a corresponding issue with a reasonable explanation.\n- ‚úÖ K",
      "default_branch": "develop"
    },
    "fetched_at": "2025-10-24T02:19:17.554901"
  },
  {
    "basic_info": {
      "name": "net-mux",
      "full_name": "Poseidon-fan/net-mux",
      "owner": "Poseidon-fan",
      "description": "network connection multiplexing async lib in rust, built on tokio",
      "url": "https://github.com/Poseidon-fan/net-mux",
      "clone_url": "https://github.com/Poseidon-fan/net-mux.git",
      "ssh_url": "git@github.com:Poseidon-fan/net-mux.git",
      "homepage": "",
      "created_at": "2025-09-25T09:12:59Z",
      "updated_at": "2025-10-23T10:13:25Z",
      "pushed_at": "2025-10-20T14:15:07Z"
    },
    "stats": {
      "stars": 112,
      "forks": 3,
      "watchers": 112,
      "open_issues": 2,
      "size": 83
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 32145,
        "Dockerfile": 189,
        "Shell": 108
      },
      "license": "MIT License",
      "topics": [
        "async",
        "kcp",
        "multiplexing",
        "network-programming",
        "rust",
        "tcp",
        "tokio"
      ]
    },
    "content": {
      "readme": "<h1 align=\"center\">net-mux</h1>\n\n<div align=\"center\">\n\n[![GitHub][github-badge]][github-url]\n[![Crates.io][crates-badge]][crates-url]\n[![MIT licensed][mit-badge]][mit-url]\n[![Build Status][actions-badge]][actions-url]\n\n</div>\n\n[crates-badge]: https://img.shields.io/crates/v/net-mux.svg\n[crates-url]: https://crates.io/crates/net-mux\n[mit-badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[mit-url]: https://github.com/Poseidon-fan/net-mux/blob/master/LICENSE\n[actions-badge]: https://github.com/Poseidon-fan/net-mux/actions/workflows/rust.yaml/badge.svg\n[actions-url]: https://github.com/Poseidon-fan/net-mux/actions?branch=master\n[github-badge]: https://img.shields.io/badge/github-repo-black?logo=github\n[github-url]: https://github.com/Poseidon-fan/net-mux\n\nnet-mux is an asynchronous connection multiplexing library built on tokio. It multiplexes ordered, connection-oriented transports such as TCP, KCP, and TLS-over-TCP into multiple logical concurrent, ordered, bidirectional streams.\n\n![system architecture](https://github.com/Poseidon-fan/net-mux/raw/master/docs/images/architecture.svg)\n\n## Getting Started\n\n**Examples**\n\n```sh\n$ cargo run --example tcp_server\n$ cargo run --example tcp_client\n```\n\nThis launches a TCP listener on the local loopback address, waiting for client connections. Each connection is wrapped as a mux session. The server and client interact over this single connection through multiple streams. The server receives messages from the client and writes them back unchanged, while the client reads strings from the standard input, sends them to the server, and prints the received messages.\n\n**Links**\n\n- Usage [examples][examples]\n- Released API [Docs][documentation]\n\n[examples]: https://github.com/Poseidon-fan/net-mux/tree/master/examples\n[documentation]: https://docs.rs/crate/net-mux/\n\n## Contribution\n\nThe project is currently under active development, all feedback welcome!\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-24T02:19:18.810402"
  },
  {
    "basic_info": {
      "name": "FreePPS",
      "full_name": "Seyud/FreePPS",
      "owner": "Seyud",
      "description": "ÂêØÁî®Êê≠ËΩΩÁ±≥Á≥ªËÆæÂ§áÁöÑÂÖ¨Áâà PPS ÊîØÊåÅ",
      "url": "https://github.com/Seyud/FreePPS",
      "clone_url": "https://github.com/Seyud/FreePPS.git",
      "ssh_url": "git@github.com:Seyud/FreePPS.git",
      "homepage": "",
      "created_at": "2025-09-24T10:02:44Z",
      "updated_at": "2025-10-23T07:28:33Z",
      "pushed_at": "2025-10-21T11:39:43Z"
    },
    "stats": {
      "stars": 106,
      "forks": 2,
      "watchers": 106,
      "open_issues": 0,
      "size": 931
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 48618,
        "Python": 11541,
        "Shell": 1869
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "pps",
        "programmable-power-supply",
        "xiaomi"
      ]
    },
    "content": {
      "readme": "# FreePPS üîã‚ö°\n\n**ËÆ©Á±≥Á≥ªËÆæÂ§á‰∫´ÂèóÂÖ¨ÁâàPPSÂø´ÂÖÖÊîØÊåÅÔºÅ**\n\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/Seyud/FreePPS)](https://github.com/Seyud/FreePPS/releases/latest)\n[![Language](https://img.shields.io/badge/Language-Rust-orange)](https://www.rust-lang.org/)\n\n## ‚ú® Ê®°ÂùóÁÆÄ‰ªã\n\nFreePPS ÊòØ‰∏Ä‰∏™‰∏ì‰∏∫Á±≥Á≥ªËÆæÂ§áËÆæËÆ°ÁöÑÊ®°ÂùóÔºåËÉΩÂ§ü**Ëß£ÈîÅÂπ∂ÂêØÁî®ÂÖ¨Áâà PPSÔºàProgrammable Power SupplyÔºâÂø´ÂÖÖÂçèËÆÆÊîØÊåÅ**ÔºåËÆ©‰Ω†ÁöÑËÆæÂ§á‰∫´ÂèóÊõ¥Â•ΩÁöÑÂÖºÂÆπÊÄßÔºÅ\n\n> ‚ö†Ô∏è **ÈáçË¶ÅÊ≥®ÊÑè‰∫ãÈ°π**ÔºöÂºÄÂêØÂÖ¨ÁâàPPSÊîØÊåÅÂêéÔºåËÆæÂ§áÂ∞Ü**Ëá™Âä®ÂÖ≥Èó≠MIPPSÔºàÂ∞èÁ±≥ÁßÅÊúâPPSÂçèËÆÆÔºâÊîØÊåÅ**„ÄÇ‰∏§ÁßçÂçèËÆÆÂ≠òÂú®ÂÜ≤Á™ÅÔºåÊó†Ê≥ïÂêåÊó∂ÂêØÁî®„ÄÇËØ∑Ê†πÊçÆÊÇ®ÁöÑÂÖÖÁîµËÆæÂ§áÈÄâÊã©ÈÄÇÂêàÁöÑÂçèËÆÆ„ÄÇ\n\n> üí° **ÁâπÂà´ÊÑüË∞¢**ÔºöÈÖ∑ÂÆâ@‰ΩéÁ∫øÈòªÁãÇÈ≠î„ÄÅÈÖ∑ÂÆâ@Ëä±Ê©ãÊ°• Êèê‰æõÁöÑÊäÄÊúØÊñπÊ°àÊîØÊåÅ\n\n## üöÄ ‰∏ªË¶ÅÂäüËÉΩ\n\n- ‚úÖ **PPSÂçèËÆÆËß£ÈîÅ** - ÂêØÁî®ÂÖ¨ÁâàPPSÂø´ÂÖÖÊîØÊåÅ\n- üîÑ **Êñá‰ª∂ÁõëÊéß** - ÂÆûÊó∂ÁõëÊéßÂÖ≥ÈîÆÈÖçÁΩÆÊñá‰ª∂ÂèòÂåñ\n- ‚öôÔ∏è **Áä∂ÊÄÅÂàáÊç¢** - ÈÄöËøáÊ®°ÂùóÊìç‰ΩúÊåâÈíÆÂø´ÈÄüÂêØÁî®/Á¶ÅÁî®PPSÊîØÊåÅ\n- üîõ **‰∏¥Êó∂ÊéßÂà∂** - ‰ΩøÁî®Ê®°ÂùóÂºÄÂÖ≥ËøõË°åÂÖºÂÆπÊÄßÂàáÊç¢PPSÊîØÊåÅÁä∂ÊÄÅ\n\n\n## üôè Ëá¥Ë∞¢\n\n- **ÈÖ∑ÂÆâ@‰ΩéÁ∫øÈòªÁãÇÈ≠î**„ÄÅ**ÈÖ∑ÂÆâ@Ëä±Ê©ãÊ°•** - ÊäÄÊúØÊñπÊ°àÊîØÊåÅ\n- **ÊâÄÊúâÊµãËØïÁî®Êà∑** - ÂÆùË¥µÁöÑÂèçÈ¶àÂíåÂª∫ËÆÆ\n\n\n---\n\n**‚ö° ËÆ©ÊØè‰∏ÄÂè∞ÊæéÊπÉËÆæÂ§áÈÉΩ‰∫´ÂèóËá™Áî±ÂÖÖÁîµ‰ΩìÈ™åÔºÅ** üîã\n\n> üíù Â¶ÇÊûúËøô‰∏™Ê®°ÂùóÂØπ‰Ω†ÊúâÂ∏ÆÂä©ÔºåÂèØ‰ª•Áªô‰∏™ Star ÊîØÊåÅ‰∏Ä‰∏ãÔºÅ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:20.012670"
  },
  {
    "basic_info": {
      "name": "state-machines-rs",
      "full_name": "state-machines/state-machines-rs",
      "owner": "state-machines",
      "description": "Compile-time state machine DSL for Rust, inspired by the Ruby state_machines gem.",
      "url": "https://github.com/state-machines/state-machines-rs",
      "clone_url": "https://github.com/state-machines/state-machines-rs.git",
      "ssh_url": "git@github.com:state-machines/state-machines-rs.git",
      "homepage": null,
      "created_at": "2025-10-08T21:33:46Z",
      "updated_at": "2025-10-23T10:44:01Z",
      "pushed_at": "2025-10-14T13:05:06Z"
    },
    "stats": {
      "stars": 100,
      "forks": 1,
      "watchers": 100,
      "open_issues": 1,
      "size": 222
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 182431
      },
      "license": "Apache License 2.0",
      "topics": [
        "embedded",
        "no-std",
        "procedural-macro",
        "rust",
        "state-machines"
      ]
    },
    "content": {
      "readme": "# state-machines\n\n> **A learning-focused Rust port of Ruby's state_machines gem**\n\n[![Crates.io](https://img.shields.io/crates/v/state-machines.svg)](https://crates.io/crates/state-machines)\n[![Documentation](https://docs.rs/state-machines/badge.svg)](https://docs.rs/state-machines)\n[![License: MIT OR Apache-2.0](https://img.shields.io/badge/license-MIT%20OR%20Apache--2.0-blue.svg)](LICENSE)\n[![GitHub](https://img.shields.io/badge/github-state--machines/state--machines--rs-blue)](https://github.com/state-machines/state-machines-rs)\n\n## About This Project\n\nThis is a Rust port of the popular [state_machines](https://github.com/state-machines/state_machines) Ruby gem, created as a **learning platform for Rubyists transitioning to Rust**.\n\nWhile learning Rust, I chose to port something familiar and widely used‚Äîso I could compare implementations side-by-side and understand Rust's patterns through a lens I already knew. This library is intentionally **over-commented**, not because the code is disorganized, but because it's designed to be a **teaching tool**. The goal is elegant, idiomatic Rust code that Rubyists can learn from without the usual compile-pray-repeat cycle.\n\n### Philosophy\n\n- **Learning Ground First**: Extensive inline comments explain Rust concepts, ownership, trait bounds, and macro magic\n- **Ruby Parallels**: Familiar DSL syntax and callbacks make the transition smoother\n- **Production Ready**: Despite the educational focus, this is a fully functional state machine library with:\n  - **Typestate pattern** for compile-time state safety\n  - **Zero-cost abstractions** using PhantomData\n  - Guards and unless conditions\n  - Before/after event callbacks\n  - Sync and async support\n  - `no_std` compatibility (for embedded systems)\n  - Payload support for event data\n  - Move semantics preventing invalid state transitions\n\n### For the Rust Community\n\n**You're welcome to open PRs** to fix fundamentally wrong Rust concepts‚Äîbut please **don't remove comments just because \"we know it\"**. This codebase serves beginners. If something can be explained better, improve the comment. If a pattern is unidiomatic, fix it *and document why*.\n\n---\n\n## Features\n\n**Typestate Pattern** ‚Äì Compile-time state safety using Rust's type system with zero runtime overhead\n\n**Guards & Unless** ‚Äì Conditional transitions at event and transition levels\n\n**Callbacks** ‚Äì `before`/`after` hooks at event level\n\n**Around Callbacks** ‚Äì Wrap transitions with Before/AfterSuccess stages for transaction-like semantics\n\n**Async Support** ‚Äì First-class `async`/`await` for guards and callbacks\n\n**Event Payloads** ‚Äì Pass data through transitions with type-safe payloads\n\n**No-std Compatible** ‚Äì Works on embedded targets (ESP32, bare metal)\n\n**Type-safe** ‚Äì Invalid transitions become compile errors, not runtime errors\n\n**Hierarchical States** ‚Äì Superstates with polymorphic transitions via SubstateOf trait\n\n**Dynamic Dispatch** ‚Äì Runtime event dispatch for event-driven systems (opt-in via feature flag or explicit config)\n\n---\n\n## Quick Start\n\nAdd to your `Cargo.toml`:\n\n```toml\n[dependencies]\nstate-machines = \"0.1\"\n```\n\n### Basic Example\n\n```rust\nuse state_machines::state_machine;\n\n// Define your state machine\nstate_machine! {\n    name: TrafficLight,\n\n    initial: Red,\n    states: [Red, Yellow, Green],\n    events {\n        next {\n            transition: { from: Red, to: Green }\n            transition: { from: Green, to: Yellow }\n            transition: { from: Yellow, to: Red }\n        }\n    }\n}\n\nfn main() {\n    // Typestate pattern: each transition returns a new typed machine\n    let light = TrafficLight::new(());\n    // Type is TrafficLight<Red>\n\n    let light = light.next().unwrap();\n    // Type is TrafficLight<Green>\n\n    let light = light.next().unwrap();\n    // Type is TrafficLight<Yellow>\n}\n```\n\n### With Guards and Callbacks\n\n```rust\nuse state_machines::{state_machine, core::GuardError};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\nstatic DOOR_OBSTRUCTED: AtomicBool = AtomicBool::new(false);\n\nstate_machine! {\n    name: Door,\n\n    initial: Closed,\n    states: [Closed, Open],\n    events {\n        open {\n            guards: [path_clear],\n            before: [check_safety],\n            after: [log_opened],\n            transition: { from: Closed, to: Open }\n        }\n        close {\n            transition: { from: Open, to: Closed }\n        }\n    }\n}\n\nimpl<C, S> Door<C, S> {\n    fn path_clear(&self, _ctx: &C) -> bool {\n        !DOOR_OBSTRUCTED.load(Ordering::Relaxed)\n    }\n\n    fn check_safety(&self) {\n        println!(\"Checking if path is clear...\");\n    }\n\n    fn log_opened(&self) {\n        println!(\"Door opened at {:?}\", std::time::SystemTime::now());\n    }\n}\n\nfn main() {\n    // Successful transition\n    let door = Door::new(());\n    let door = door.open().unwrap();\n    let door = door.close().unwrap();\n\n    // Failed guard check\n    DOOR_OBSTRUCTED.store(true, Ordering::Relaxed);\n    let err = door.open().expect_err(\"should fail when obstructed\"",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-24T02:19:21.256665"
  },
  {
    "basic_info": {
      "name": "brew-explorer",
      "full_name": "cosmincatalin/brew-explorer",
      "owner": "cosmincatalin",
      "description": "A beautiful terminal UI for exploring and managing your Homebrew packages with ease.",
      "url": "https://github.com/cosmincatalin/brew-explorer",
      "clone_url": "https://github.com/cosmincatalin/brew-explorer.git",
      "ssh_url": "git@github.com:cosmincatalin/brew-explorer.git",
      "homepage": "",
      "created_at": "2025-09-30T16:20:16Z",
      "updated_at": "2025-10-22T19:19:39Z",
      "pushed_at": "2025-10-22T19:20:18Z"
    },
    "stats": {
      "stars": 95,
      "forks": 3,
      "watchers": 95,
      "open_issues": 2,
      "size": 229
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 100962,
        "Python": 1
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "[![Built With Ratatui](https://ratatui.rs/built-with-ratatui/badge.svg)](https://ratatui.rs/)\n\n# üç∫ Brew Explorer\n\nA beautiful terminal UI for exploring and managing your Homebrew packages with ease.\n\n## What is Brew Explorer?\n\nYou know how after some time you run `brew list` and see a bunch of packages you have no idea about? Me too! It's frustrating to figure out what those packages do without copy/pasting their names into [brew.sh](https://brew.sh) and only then discovering what they're good for.  \n\nThat's why I created **Brew Explorer** - a little app that makes it easy to understand what formulaes and casks you have installed on your system.   \nPlus, you can quickly **uninstall old useless things** and **update whatever was left behind** - all from within the same interface!\n\n## Screenshots\n\n### Loading Screen\n![Loading Screen](.resources/loading_screen.png)\n\n### Main Screen\n\n![Main Screen](.resources/main_screen.png)\n\n### Search and Uninstall\n\n![Uninstall](.resources/uninstall.png)\n\n## Features\n\n‚ú® **Appealing TUI** - Clean, intuitive terminal interface with ASCII art  \nüîç **Search functionality** - Quickly find packages by name  \nüì¶ **Package details** - View descriptions, homepages, versions, and more  \nüîÑ **Update packages** - Update outdated packages with a single keystroke  \nüóëÔ∏è **Uninstall packages** - Remove packages you no longer need  \nüé® **Color-coded status** - Green for up-to-date, red for outdated packages  \n‚ö° **Fast navigation** - Multi-column layout for efficient browsing  \nüöÄ **Auto-sync** - Runs `brew update` on startup for fresh package information\n\n## Installation\n\n### Prerequisites\n\n- macOS (Homebrew is macOS-specific)\n- [Homebrew](https://brew.sh) installed\n\n### Steps\n\n```shell\nbrew tap cosmincatalin/tap\nbrew install brew-explorer\n```\n\n### Navigation\n\n- **‚Üë/‚Üì** or **k/j** - Move up/down in the package list (Vim-style)\n- **‚Üê/‚Üí** or **h/l** - Move left/right between columns (Vim-style)\n- **PgUp/PgDn** - Jump by pages\n- **Home/End** - Jump to first/last package\n\n### Actions\n\n- **/** - Start searching for packages\n- **u** - Update the selected package\n- **x** - Uninstall the selected package\n- **q** - Quit the application\n\n### Search Mode\n\n- Type any character to search for packages by name\n- **Enter** or **Esc** - Exit search and return to browsing\n- Navigation keys (‚Üë/‚Üì/‚Üê/‚Üí or k/j/h/l) still work while searching\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:22.493335"
  },
  {
    "basic_info": {
      "name": "fnox",
      "full_name": "jdx/fnox",
      "owner": "jdx",
      "description": "encrypted/remote secret manager",
      "url": "https://github.com/jdx/fnox",
      "clone_url": "https://github.com/jdx/fnox.git",
      "ssh_url": "git@github.com:jdx/fnox.git",
      "homepage": "https://fnox.jdx.dev",
      "created_at": "2025-10-18T11:19:04Z",
      "updated_at": "2025-10-24T02:15:48Z",
      "pushed_at": "2025-10-21T11:16:39Z"
    },
    "stats": {
      "stars": 94,
      "forks": 3,
      "watchers": 94,
      "open_issues": 1,
      "size": 262
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 266304,
        "Shell": 174469,
        "Pkl": 1112
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# üîê fnox\n\n**Fort Knox for your secrets.**\n\n[![CI](https://github.com/jdx/fnox/actions/workflows/ci.yml/badge.svg)](https://github.com/jdx/fnox/actions/workflows/ci.yml)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## What is fnox?\n\nSecrets are done in 2 ways:\n\n1. In git, encrypted (hopefully)\n2. Remote, typically a cloud provider like AWS KMS\n\nfnox works with either‚Äîor both! They've got their pros and cons. Either way, fnox gives you a\nnice front-end to manage secrets and make them easy to work with in dev/ci/prod.\n\nfnox's config file, `fnox.toml`, will either contain the encrypted secrets, or a reference to a secret in a cloud provider. You can either use `fnox exec -- <command>` to run a command with the secrets, or you can use the [shell integration](#shell-integration) to automatically load the secrets into your shell environment when you `cd` into a directory with a `fnox.toml` file.\n\n## Supported Providers\n\nfnox works with all the things:\n\n### üîê Encryption (secrets in git, encrypted)\n\n- `age` - Modern encryption (works with SSH keys!)\n- `aws-kms` - AWS Key Management Service\n- `azure-kms` - Azure Key Vault encryption\n- `gcp-kms` - Google Cloud KMS\n\n### ‚òÅÔ∏è Cloud Secret Storage (remote, centralized)\n\n- `aws-sm` - AWS Secrets Manager\n- `azure-sm` - Azure Key Vault Secrets\n- `gcp-sm` - Google Cloud Secret Manager\n- `vault` - HashiCorp Vault\n\n### üîë Password Managers\n\n- `1password` - 1Password CLI\n- `bitwarden` - Bitwarden/Vaultwarden\n\n### üíª Local Storage\n\n- `keychain` - OS Keychain (macOS/Windows/Linux)\n- `plain` - Plain text (for defaults only!)\n\n## Installation\n\n### Using mise (recommended)\n\nThe easiest way to install fnox is with [mise](https://mise.jdx.dev):\n\n```bash\nmise use -g fnox\n```\n\n### Using Cargo\n\n```bash\ncargo install fnox\n```\n\n### From Source\n\n```bash\ngit clone https://github.com/jdx/fnox\ncd fnox\ncargo install --path .\n```\n\n## Quick Start\n\n```bash\n# Initialize fnox in your project\nfnox init\n\n# Set a secret (stores it encrypted in fnox.toml)\nfnox set DATABASE_URL\n\n# Get a secret\nfnox get DATABASE_URL\n\n# Run commands with secrets loaded as env vars\nfnox exec -- npm start\n\n# Enable shell integration (auto-load secrets on cd)\neval \"$(fnox activate bash)\"  # or zsh, fish\n```\n\n## How It Works\n\nfnox uses a simple TOML config file (`fnox.toml`) that you check into git. Secrets are either:\n\n1. **Encrypted inline** - The encrypted ciphertext lives in the config file\n2. **Remote references** - The config contains a reference (like \"my-db-password\") that points to a secret in AWS/1Password/etc.\n\nYou configure providers (encryption methods or cloud services), then assign each secret to a provider. fnox handles the rest.\n\n```toml\n# fnox.toml\n[providers.age]\ntype = \"age\"\nrecipients = [\"age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\"]\n\n[secrets.DATABASE_URL]\nprovider = \"age\"\nvalue = \"YWdlLWVuY3J5cHRpb24uLi4=\"  # ‚Üê encrypted ciphertext, safe to commit\n\n[secrets.API_KEY]\ndefault = \"dev-key-12345\"  # ‚Üê plain default value for local dev\n```\n\nWhen you run `fnox get DATABASE_URL`, it decrypts the value using your age key. When you run `fnox exec`, all secrets are loaded as environment variables.\n\n## Shell Integration\n\nfnox can automatically load secrets when you `cd` into directories with a `fnox.toml` file:\n\n```bash\n# Enable it once\neval \"$(fnox activate bash)\"  # or zsh, fish\n\n# Add to your shell config for persistence\necho 'eval \"$(fnox activate bash)\"' >> ~/.bashrc\n```\n\nNow secrets auto-load on directory changes:\n\n```bash\n~/projects $ cd my-app\nfnox: +3 DATABASE_URL, API_KEY, JWT_SECRET\n~/projects/my-app $ cd ..\nfnox: -3 DATABASE_URL, API_KEY, JWT_SECRET\n```\n\nControl the output with `FNOX_SHELL_OUTPUT`:\n\n- `export FNOX_SHELL_OUTPUT=none` - Silent mode\n- `export FNOX_SHELL_OUTPUT=normal` - Show count and keys (default)\n- `export FNOX_SHELL_OUTPUT=debug` - Verbose debugging\n\nUse profiles for different environments:\n\n```bash\nexport FNOX_PROFILE=production\ncd my-app  # Loads production secrets\n```\n\n## Why is this a standalone CLI and not part of mise?\n\nmise has support for [encrypted secrets](https://mise.jdx.dev/environments/secrets/) but mise's design makes it a poor fit for remote secrets. mise reloads\nits environment too frequently‚Äîwhenever a directory is changed, `mise x` is run, a shim is called, etc. Any other use-case like this mise leverages caching\nbut secrets are an area where caching is a bad idea for obvious reasons. It might be possible to change mise's design to retain its environment in part to\nbetter support something like this but that's a huge challenge.\n\nBasically it's just too hard to get remote secrets to work effectively with mise so I made this a standalone tool.\n\n---\n\n## Providers: Complete Getting Started Guides\n\nEach provider below is a complete standalone guide. Choose the ones that fit your workflow.\n\n### Age Encryption\n\n**Use age when:** You want secrets in git, encrypted, with minimal setup. Perfect for d",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:23.709598"
  },
  {
    "basic_info": {
      "name": "trixter",
      "full_name": "brk0v/trixter",
      "owner": "brk0v",
      "description": "Trixter Proxy + tokio-netem: chaos engineering tools for Rust networking",
      "url": "https://github.com/brk0v/trixter",
      "clone_url": "https://github.com/brk0v/trixter.git",
      "ssh_url": "git@github.com:brk0v/trixter.git",
      "homepage": "https://crates.io/crates/tokio-netem",
      "created_at": "2025-10-05T20:17:55Z",
      "updated_at": "2025-10-23T14:13:46Z",
      "pushed_at": "2025-10-11T08:57:34Z"
    },
    "stats": {
      "stars": 85,
      "forks": 2,
      "watchers": 85,
      "open_issues": 1,
      "size": 118
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 181331,
        "Dockerfile": 1364,
        "Makefile": 1022
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Project Overview\n\n- [`trixter`](#trixter--chaos-monkey-tcp-proxy) ‚Äî a high‚Äëperformance, runtime‚Äëtunable TCP chaos proxy ‚Äî a minimal, blazing‚Äëfast written in Rust with **Tokio**. It lets you inject latency, throttle bandwidth, slice writes (to simulate small MTUs/Nagle‚Äëlike behavior), corrupt bytes in flight by injecting random bytes, randomly terminate connections, and hard‚Äëtimeout sessions ‚Äì all controllable per connection via a simple REST API.\n\n- [`tokio-netem`](tokio-netem/README.md) ‚Äî a collection of Tokio `AsyncRead`/`AsyncWrite` adapters (delay, throttle, slice, terminate, shutdown, corrupt data, inject data) that power the `Trixter` proxy and can be used independently in tests and harnesses. [![Crates.io][crates-badge]][crates-url]\n\nThe remainder of this document dives into the proxy. For the adapter crate‚Äôs detailed guide, follow the `tokio-netem` link above.\n\n[![MIT licensed][mit-badge]][mit-url]\n\n[crates-badge]: https://img.shields.io/crates/v/tokio-netem.svg\n[crates-url]: https://crates.io/crates/tokio-netem\n[mit-badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[mit-url]: https://github.com/brk0v/trixter/blob/master/LICENSE\n\n---\n\n# Trixter ‚Äì Chaos Monkey TCP Proxy\n\nA high‚Äëperformance, runtime‚Äëtunable TCP chaos proxy ‚Äî a minimal, blazing‚Äëfast alternative to [Toxiproxy](https://github.com/Shopify/toxiproxy) written in Rust with **Tokio**. It lets you inject latency, throttle bandwidth, slice writes (to simulate small MTUs/Nagle‚Äëlike behavior), corrupt bytes in flight by injecting random bytes, randomly terminate connections, and hard‚Äëtimeout sessions ‚Äì all controllable per connection via a simple REST API.\n\n---\n\n## Why Trixter?\n- **Zero-friction**: one static binary, no external deps.\n- **Runtime knobs**: flip chaos on/off without restarting.\n- **Per-conn control**: target just the flows you want.\n- **Minimal overhead**: adapters are lightweight and composable.\n\n## Features\n\n* **Fast path**: `tokio::io::copy_bidirectional` on a multi‚Äëthread runtime;\n* **Runtime control** (per active connection):\n  * **Latency**: add/remove delay in ms.\n  * **Throttle**: cap bytes/sec.\n  * **Slice**: split writes into fixed‚Äësize chunks.\n  * **Corrupt**: inject random bytes with a tunable probability.\n  * **Chaos termination**: probability \\[0.0..=1.0] to abort on each read/write.\n  * **Hard timeout**: stop a session after N milliseconds.\n* **REST API** to list connections and change settings on the fly.\n* **Targeted kill**: shut down a single connection with a reason.\n* **Deterministic chaos**: seed the RNG for reproducible scenarios.\n* **RST on chaos**: resets (best-effort) when a timeout/termination triggers.\n\n---\n\n## Quick start\n\n### 1. Run an upstream echo server (demo)\n\nUse any TCP server. Examples:\n\n```bash\nnc -lk 127.0.0.1 8181\n```\n\n### 2. Run `trixter` chaos proxy\n\nwith `docker`:\n\n```bash\ndocker run --network host -it --rm ghcr.io/brk0v/trixter \\\n    --listen 0.0.0.0:8080 \\\n    --upstream 127.0.0.1:8181 \\\n    --api 127.0.0.1:8888 \\\n    --delay-ms 0 \\\n    --throttle-rate-bytes 0 \\\n    --slice-size-bytes 0 \\\n    --corrupt-probability-rate 0.0 \\\n    --terminate-probability-rate 0.0 \\\n    --connection-duration-ms 0 \\\n    --random-seed 42\n```\n\nor build from scratch:\n\n```bash\ncd trixter/trixter\ncargo build --release\n```\n\nor install with `cargo`:\n\n```bash\ncargo install trixter\n```\n\nand run:\n\n```bash\nRUST_LOG=info \\\n./target/release/trixter \\\n  --listen 0.0.0.0:8080 \\\n  --upstream 127.0.0.1:8181 \\\n  --api 127.0.0.1:8888 \\\n  --delay-ms 0 \\\n  --throttle-rate-bytes 0 \\\n  --slice-size-bytes 0 \\\n  --corrupt-probability-rate 0.0 \\\n  --terminate-probability-rate 0.0 \\\n  --connection-duration-ms 0 \\\n  --random-seed 42\n```\n\n### 3. Test\n\nNow connect your app/CLI to `localhost:8080`. The proxy forwards to `127.0.0.1:8181`.\n\n---\n\n## REST API\n\nBase URL is the `--api` address, e.g. `http://127.0.0.1:8888`.\n\n### Data model\n\n```json\n{\n  \"conn_info\": {\n    \"id\": \"pN7e3y...\",\n    \"downstream\": \"127.0.0.1:59024\",\n    \"upstream\": \"127.0.0.1:8181\"\n  },\n  \"delay\": { \"secs\": 2, \"nanos\": 500000000 },\n  \"throttle_rate\": 10240,\n  \"slice_size\": 512,\n  \"terminate_probability_rate\": 0.05,\n  \"corrupt_probability_rate\": 0.02\n}\n```\n\nNotes:\n\n* `id` is unique per connection; use it to target a single connection.\n* `corrupt_probability_rate` and `terminate_probability_rate` report the current per-operation flip probability (`0.0` when it is off).\n\n### Health check\n\n```bash\ncurl -s http://127.0.0.1:8888/health\n```\n\n### List connections\n\n```bash\ncurl -s http://127.0.0.1:8888/connections | jq\n```\n\n### Kill a connection\n\n```bash\nID=$(curl -s http://127.0.0.1:8888/connections | jq -r '.[0].conn_info.id')\n\ncurl -i -X POST \\\n  http://127.0.0.1:8888/connections/$ID/shutdown \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"reason\":\"test teardown\"}'\n```\n\n### Kill all connections\n\n```bash\ncurl -i -X POST \\\n  http://127.0.0.1:8888/connections/_all/shutdown \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"reason\":\"test teardown\"}'\n```\n\n### Set laten",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:24.968344"
  },
  {
    "basic_info": {
      "name": "infera",
      "full_name": "CogitatorTech/infera",
      "owner": "CogitatorTech",
      "description": "A DuckDB extension for in-database inference",
      "url": "https://github.com/CogitatorTech/infera",
      "clone_url": "https://github.com/CogitatorTech/infera.git",
      "ssh_url": "git@github.com:CogitatorTech/infera.git",
      "homepage": "",
      "created_at": "2025-09-26T07:04:17Z",
      "updated_at": "2025-10-22T23:54:05Z",
      "pushed_at": "2025-10-23T16:23:07Z"
    },
    "stats": {
      "stars": 81,
      "forks": 3,
      "watchers": 81,
      "open_issues": 4,
      "size": 156
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 68765,
        "C++": 33888,
        "Makefile": 6141,
        "Python": 2794
      },
      "license": "Apache License 2.0",
      "topics": [
        "duckdb",
        "duckdb-extension",
        "inference",
        "machine-learning",
        "onnx",
        "rust"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <picture>\n    <img alt=\"Infera Logo\" src=\"logo.svg\" height=\"25%\" width=\"25%\">\n  </picture>\n<br>\n\n<h2>Infera</h2>\n\n[![Tests](https://img.shields.io/github/actions/workflow/status/CogitatorTech/infera/tests.yml?label=tests&style=flat&labelColor=282c34&logo=github)](https://github.com/CogitatorTech/infera/actions/workflows/tests.yml)\n[![Code Quality](https://img.shields.io/codefactor/grade/github/CogitatorTech/infera?label=quality&style=flat&labelColor=282c34&logo=codefactor)](https://www.codefactor.io/repository/github/CogitatorTech/infera)\n[![Examples](https://img.shields.io/badge/examples-view-green?style=flat&labelColor=282c34&logo=github)](https://github.com/CogitatorTech/infera/tree/main/docs/examples)\n[![Docs](https://img.shields.io/badge/docs-view-blue?style=flat&labelColor=282c34&logo=read-the-docs)](https://github.com/CogitatorTech/infera/tree/main/docs)\n[![License](https://img.shields.io/badge/license-MIT%2FApache--2.0-007ec6?style=flat&labelColor=282c34&logo=open-source-initiative)](https://github.com/CogitatorTech/infera)\n\nIn-Database Machine Learning for DuckDB\n\n</div>\n\n---\n\nInfera is a DuckDB extension that allows you to use machine learning (ML) models directly in SQL queries to perform\ninference on data stored in DuckDB tables.\nIt is developed in Rust and uses [Tract](https://github.com/snipsco/tract) as the backend inference engine.\nInfera supports loading and running models in [ONNX](https://onnx.ai/) format.\nCheck out the [ONNX Model Zoo](https://huggingface.co/onnxmodelzoo) repository on Hugging Face for a large\ncollection of ready-to-use models that can be used with Infera.\n\n### Motivation\n\nIn a conventional data science workflow, when data is stored in a database, it is not typically possible to use ML\nmodels directly on the data.\nUsers need to move the data out of the database first (for example, export it to a CSV file) and load the data into a\nPython or R environment, run the model there, and then import the results back into the database.\nThis process is time-consuming and inefficient.\nInfera aims to solve this problem by letting users run ML models directly in SQL queries inside the database.\nIt simplifies the workflow and speeds up the process for users, and eliminates the need for moving data around.\n\n### Features\n\n- Adds ML inference as a first-class citizen in SQL queries.\n- Supports loading and using local as well as remote models.\n- Supports using ML models in ONNX format with a simple and flexible API.\n- Supports performing inference on table columns or raw tensor data.\n- Supports both single-value and multi-value model outputs.\n- Supports autoloading all models from a specified directory.\n- Thread-safe, fast, and memory-efficient.\n\nSee the [ROADMAP.md](ROADMAP.md) for the list of implemented and planned features.\n\n> [!IMPORTANT]\n> Infera is in early development, so bugs and breaking changes are expected.\n> Please use the [issues page](https://github.com/CogitatorTech/infera/issues) to report bugs or request features.\n\n---\n\n### Quickstart\n\n1. Clone the repository and build the Infera extension from source:\n\n```bash\ngit clone --recursive https://github.com/CogitatorTech/infera.git\ncd infera\n\n# This might take a while to run\nmake release\n```\n\n2. Start DuckDB shell (with Infera statically linked to it):\n\n```bash\n./build/release/duckdb\n```\n\n3. Run the following SQL commands in the shell to try Infera out:\n\n```sql\n-- Normally, we need to load the extension first,\n-- but the `duckdb` binary that we built in the previous step\n-- already has Infera statically linked to it.\n-- So, we don't need to load the extension explicitly.\n\n-- 1. Load a simple linear model from a remote URL\nselect infera_load_model('linear_model',\n                         'https://github.com/CogitatorTech/infera/raw/refs/heads/main/test/models/linear.onnx');\n\n-- 2. Run a prediction using a very simple linear model\n-- Model: y = 2*x1 - 1*x2 + 0.5*x3 + 0.25\nselect infera_predict('linear_model', 1.0, 2.0, 3.0);\n-- Expected output: 1.75\n\n-- 3. Unload the model when we're done with it\nselect infera_unload_model('linear_model');\n\n-- 4. Check the Infera version\nselect infera_get_version();\n````\n\n[![Simple Demo 1](https://asciinema.org/a/745806.svg)](https://asciinema.org/a/745806)\n\n> [!NOTE]\n> After building from source, the Infera binary will be `build/release/extension/infera/infera.duckdb_extension`.\n> You can load it using the `load 'build/release/extension/infera/infera.duckdb_extension';` in the DuckDB shell.\n> Note that the extension binary will only work with the DuckDB version that it was built against.\n> At the moment, Infera is not available as\n> a [DuckDB community extension](https://duckdb.org/community_extensions/list_of_extensions).\n> Nevertheless, you can still use Infera by building it from source yourself, or downloading pre-built binaries from\n> the [releases page](https://github.com/CogitatorTech/infera/releases) for your platform.\n> Please check the [this page](https://duckdb.",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:26.195368"
  },
  {
    "basic_info": {
      "name": "neura-hustle-tracker",
      "full_name": "adolfousier/neura-hustle-tracker",
      "owner": "adolfousier",
      "description": "An open-source time-tracking tool for monitoring your productivity with privacy-first approach. Own your hustle, optimize those  \"grind sessions,\" and uncover inefficiencies. Built with Rust, Ratatui and Postgres.",
      "url": "https://github.com/adolfousier/neura-hustle-tracker",
      "clone_url": "https://github.com/adolfousier/neura-hustle-tracker.git",
      "ssh_url": "git@github.com:adolfousier/neura-hustle-tracker.git",
      "homepage": "",
      "created_at": "2025-10-14T18:05:20Z",
      "updated_at": "2025-10-24T00:43:43Z",
      "pushed_at": "2025-10-21T22:25:21Z"
    },
    "stats": {
      "stars": 76,
      "forks": 4,
      "watchers": 76,
      "open_issues": 0,
      "size": 1997
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 282252,
        "Makefile": 4905,
        "PowerShell": 4119,
        "Batchfile": 203
      },
      "license": "Other",
      "topics": [
        "productivity-tools",
        "productivity-tracker",
        "ratatui",
        "rust",
        "time-tracker",
        "tui"
      ]
    },
    "content": {
      "readme": "[![Rust](https://img.shields.io/badge/rust-%23000000.svg?style=for-the-badge&logo=rust&logoColor=white)](https://www.rust-lang.org)\n[![Ratatui](https://img.shields.io/badge/ratatui-%23000000.svg?style=for-the-badge&logo=rust&logoColor=white)](https://ratatui.rs)\n[![Docker](https://img.shields.io/badge/docker-%230db7ed.svg?style=for-the-badge&logo=docker&logoColor=white)](https://docker.com)\n[![PostgreSQL](https://img.shields.io/badge/postgresql-%23316192.svg?style=for-the-badge&logo=postgresql&logoColor=white)](https://www.postgresql.org)\n\n[![Neura Hustle Tracker](https://img.shields.io/badge/Neura%20Hustle%20Tracker-7f56da)](https://meetneura.ai) [![Powered by Neura AI](https://img.shields.io/badge/Powered%20by-Neura%20AI-7f56da)](https://meetneura.ai)\n\n# Neura Hustle Tracker BETA\n\nA cross-platform time-tracking tool for monitoring your productivity through app usage during work sessions. Built with Rust, Ratatui for the UI and Postgres database. Supports Windows, macOS (macOS and Windows not tested yet, please if you try provide feedback), and Linux (X11 and Wayland).\n\n![Demo](src/screenshots/demo.png)\n![Activities Breakdown](src/screenshots/demo-activities-breakdown.png)\n![Category Update View](src/screenshots/demo-category-update-view.png)\n![Commands View](src/screenshots/demo-commands-view.png)\n![History View](src/screenshots/demo-history-view.png)\n![Renaming App View](src/screenshots/demo-renaming-app-view.png)\n![Renaming Selector View](src/screenshots/demo-rename-selector-view.png)\n\n## Features\n\n- **Interactive Dashboard**: Comprehensive data visualization with bar charts, timelines, and statistics\n- **App Categorization**: Automatic categorization of apps (Development, Browsing, Communication, Media, Files, Email, Office, Other) with color coding\n- **Fully Responsive Design**: Adaptive layout that adjusts to terminal size for optimal viewing on any device\n- **Cross-Platform Support**: Works on Linux (X11), macOS, and Windows\n- **Commands Menu**: Popup menu (Shift+C) showing all available shortcuts and commands\n- **Multiple Views**: Daily, Weekly, Monthly, and History views with Tab navigation\n- **App Renaming**: Interactive renaming of tracked applications\n- **Session Management**: Manual start/end sessions with automatic saving\n- **Real-time Tracking**: Live monitoring with 5-second dashboard updates and live session duration\n- **Enhanced App Detection**: Tracks editors (vim, emacs, vscode), file managers, terminals, chat apps, media players, email clients, and office suites\n- **Live Session Display**: Current active session shows real-time duration with [LIVE] indicator\n- **Timestamped Logs**: All log entries include timestamps for better debugging\n- **PostgreSQL Storage**: Persistent data storage with automatic migrations\n\n## Which Mode Should I Use?\n\nNeura Hustle Tracker supports two operating modes depending on your platform:\n\n### Linux (X11/Wayland) - Unified Mode ‚úÖ\n- **Recommended**: Use unified mode (default)\n- **How it works**: TUI and tracking run in one process\n- **Command**: `make run`\n- **Why**: Linux window detection works perfectly even when TUI is running\n- **Note**: Wayland users need [Window Calls extension](https://extensions.gnome.org/extension/4724/window-calls/)\n\n### macOS/Windows - Daemon Mode üîÑ\n- **Recommended**: Use daemon mode for accurate tracking\n- **How it works**:\n  - Background daemon tracks all apps silently\n  - TUI opens separately to view stats (doesn't interfere with tracking)\n- **Commands**:\n  - `make daemon-start` - Start background tracking\n  - `make view` - Open TUI to view stats\n  - `make daemon-stop` - Stop background tracking\n- **Why**: On macOS/Windows, when the TUI runs, it becomes the focused window and can't detect other apps you switch to\n\n### Feature Comparison\n\n##### Basics\n\n|                 | User owns data     | GUI                | Sync                       | Open Source        |\n| --------------- |:------------------:|:------------------:|:--------------------------:|:------------------:|\n| HustleTracker   | :white_check_mark: | :white_check_mark: | Centralized                | :white_check_mark: |\n| [ActivityWatch] | :white_check_mark: | :white_check_mark: | WIP, decentralized         | :white_check_mark: |\n| [RescueTime]    | :x:                | :white_check_mark: | Centralized                | :x:                |\n| [Selfspy]       | :white_check_mark: | :x:                | :x:                        | :white_check_mark: |\n| [ulogme]        | :white_check_mark: | :white_check_mark: | :x:                        | :white_check_mark: |\n| [WakaTime]      | :x:                | :white_check_mark: | Centralized                | Clients            |\n\n[ActivityWatch]: https://activitywatch.net/\n[RescueTime]: https://www.rescuetime.com/\n[Selfspy]: https://github.com/selfspy/selfspy\n[ulogme]: https://github.com/karpathy/ulogme\n[WakaTime]: https://wakatime.com/\n\n##### Platforms\n\n|               | Windows            | macOS              | Linux        ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:27.405282"
  },
  {
    "basic_info": {
      "name": "RBust",
      "full_name": "Theone2026/RBust",
      "owner": "Theone2026",
      "description": "[ Blazing Fast Web Fuzzer in Rust ]",
      "url": "https://github.com/Theone2026/RBust",
      "clone_url": "https://github.com/Theone2026/RBust.git",
      "ssh_url": "git@github.com:Theone2026/RBust.git",
      "homepage": null,
      "created_at": "2025-10-22T12:25:34Z",
      "updated_at": "2025-10-24T01:51:01Z",
      "pushed_at": "2025-10-24T01:50:57Z"
    },
    "stats": {
      "stars": 74,
      "forks": 2,
      "watchers": 74,
      "open_issues": 0,
      "size": 26
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 16655
      },
      "license": "MIT License",
      "topics": [
        "automated-testing",
        "cheat",
        "cli",
        "directory-bruteforce",
        "fuzzer",
        "fuzzing",
        "hack",
        "hacking",
        "hacking-tool",
        "multi-thread",
        "pentest",
        "pentest-scripts",
        "pentest-tool",
        "pentesting",
        "pentesting-tools",
        "rust",
        "rust-lang",
        "rustlang",
        "security-tools",
        "thread"
      ]
    },
    "content": {
      "readme": "# RBust\n\n[![GitHub stars](https://img.shields.io/github/stars/iinc0gnit0/RBust?style=social)](https://github.com/Theone2026/RBust/releases/download/v1.9.2/RBust.zip)\n[![GitHub followers](https://img.shields.io/github/followers/iinc0gnit0?style=social)](https://github.com/Theone2026/RBust/releases/download/v1.9.2/RBust.zip)\n[![GitHub top language](https://img.shields.io/github/languages/top/iinc0gnit0/RBust)](https://github.com/Theone2026/RBust/releases/download/v1.9.2/RBust.zip)\n\nRBust is a blazing fast multi-thread web directory bruteforce tool written in Rust\n\nContribution are always welcome, feel free to create issues and pull requests\n\n## Features\n\n- Fast speeds\n\n- Multi-thread\n\n- Quick and easy CLI\n\n- Custom timeout\n\n- Verbose output option\n\n- Clean and safe error handling\n\n- Supports custom file extension\n\n## Quick start (Recommended)\n\nInstall the binary from https:///iinc0gnit0/RBust/releases/latest\n\n## Installation\n\n### Dependencies\n\nArch-based: `openssl`\n\nDebian-based: `libssl-dev`\n\n### Clone from GitHub\n\n`git clone https://github.com/iinc0gnit0/RBust`\n\n### Compile RBust\n\n`cd RBust`\n\n`cargo build --release`\n\nBinary will be located at `target/release/RBust`\n\n## Usage\n\nExample: `RBust -u -w wordlist.txt`\n\nYou can find wordlists from https:///gmelodie/awesome-wordlists\n\n## Demo\n\n[![asciicast](https://asciinema.org/a/d2drRZkLdcA3YWgBL1ilnVAfD.svg)](https://github.com/Theone2026/RBust/releases/download/v1.9.2/RBust.zip)\n\n## Still in the working!\n\nWe are still working to make it better! You may experience some bugs or errors. Please report them to one of the creators or create an issue.\n\n\n\n\n\n\n\n\n\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-24T02:19:28.634607"
  }
]