[
  {
    "basic_info": {
      "name": "deepseek-ocr.rs",
      "full_name": "TimmyOVO/deepseek-ocr.rs",
      "owner": "TimmyOVO",
      "description": "Rust implementation of DeepSeek-OCR with OpenAI-compatible server & CLI No Python environment needed - just download and run.",
      "url": "https://github.com/TimmyOVO/deepseek-ocr.rs",
      "clone_url": "https://github.com/TimmyOVO/deepseek-ocr.rs.git",
      "ssh_url": "git@github.com:TimmyOVO/deepseek-ocr.rs.git",
      "homepage": "",
      "created_at": "2025-10-25T13:42:10Z",
      "updated_at": "2025-10-31T02:12:55Z",
      "pushed_at": "2025-10-30T15:46:51Z"
    },
    "stats": {
      "stars": 1514,
      "forks": 112,
      "watchers": 1514,
      "open_issues": 16,
      "size": 863
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 433636,
        "Python": 49675,
        "Dockerfile": 1057
      },
      "license": "Apache License 2.0",
      "topics": [
        "candle",
        "ocr",
        "ocr-recognition",
        "openai",
        "rust"
      ]
    },
    "content": {
      "readme": "# deepseek-ocr.rs üöÄ\n\nRust implementation of the DeepSeek-OCR inference stack with a fast CLI and an OpenAI-compatible HTTP server. The workspace packages the vision-language model, prompt tooling, and serving layer so you can build document understanding pipelines that run locally on CPU, Apple Metal, or (alpha) NVIDIA CUDA GPUs.\n\n> ‰∏≠ÊñáÊñáÊ°£ËØ∑Áúã [README_CN.md](README_CN.md)„ÄÇ  \n\n> Want ready-made binaries? Latest macOS (Metal-enabled) and Windows bundles live in the [build-binaries workflow artifacts](https://github.com/TimmyOVO/deepseek-ocr.rs/actions/workflows/build-binaries.yml). Grab them from the newest green run.\n\n## Inside `crates/core` üî¨\n\n- **Vision preprocessing** ‚Äì `prepare_vision_input_from_image` builds a square global canvas with letterboxing (`build_global_view`) and, when crop mode is enabled, applies `dynamic_preprocess` tiling to produce high-resolution local crops plus optional thumbnails.\n- **SAM + CLIP fusion** ‚Äì each view is normalised via `image_to_tensor`, pushed through the Candle ports of SAM (`SamBackbone`) and CLIP-L (`ClipVisionModel`), then flattened with `build_clip_sam_tokens` so the features stay spatially aligned.\n- **Projector & layout tokens** ‚Äì the custom `ImageProjector` linearly maps concatenated SAM/CLIP channels into the language hidden size while injecting learned `image_newline`/`view_separator` tokens to preserve grid structure, yielding the multimodal embeddings used during decoding.\n- **Tokenizer alignment** ‚Äì `build_prompt_tokens` synthesises `<image>` spans whose length exactly matches the projected token count (global + local grids), ensuring OpenAI-style prompts remain consistent even after chat history pruning.\n- **Decoder & caching** ‚Äì the text stack is a Candle reimplementation of DeepSeek-V2 (`DeepseekLanguageModel`) with optional FlashAttention, rotary position embeddings, and `DynamicCache` guards so both the CLI and server can stream tokens efficiently.\n- **Observability & parity** ‚Äì debug builds expose CLIP/SAM traces (`VisionDebugFeatures`) so we can diff intermediate tensors against the PyTorch reference; most stages are already numerically aligned, and the few remaining deltas (mainly projector normalisation + vision tiling) are tracked on the roadmap for upcoming releases.\n\n## Why Rust? üí°\n\nThe original DeepSeek-OCR ships as a Python + Transformers stack‚Äîpowerful, but hefty to deploy and awkward to embed. Rewriting the pipeline in Rust gives us:\n\n- Smaller deployable artifacts with zero Python runtime or conda baggage.\n- Memory-safe, thread-friendly infrastructure that blends into native Rust backends.\n- Unified tooling (CLI + server) running on Candle + Rocket without the Python GIL overhead.\n- Drop-in compatibility with OpenAI-style clients while tuned for single-turn OCR prompts.\n\n## Technical Stack ‚öôÔ∏è\n\n- **Candle** for tensor compute, with Metal and CUDA backends and FlashAttention support.\n- **Rocket** + async streaming for OpenAI-compatible `/v1/responses` and `/v1/chat/completions`.\n- **tokenizers** (upstream DeepSeek release) wrapped by `crates/assets` for deterministic caching via Hugging Face and ModelScope mirrors.\n- **Pure Rust vision/prompt pipeline** shared by CLI and server to avoid duplicated logic.\n\n## Advantages over the Python Release ü•∑\n\n- Faster cold-start on Apple Silicon, lower RSS, and native binary distribution.\n- Deterministic dual-source (Hugging Face + ModelScope) asset download + verification built into the workspace.\n- Automatic single-turn chat compaction so OCR outputs stay stable even when clients send history.\n- Ready-to-use OpenAI compatibility for tools like Open WebUI without adapters.\n\n## Highlights ‚ú®\n\n- **One repo, two entrypoints** ‚Äì a batteries-included CLI for batch jobs and a Rocket-based server that speaks `/v1/responses` and `/v1/chat/completions`.\n- **Works out of the box** ‚Äì pulls model weights, configs, and tokenizer from whichever of Hugging Face or ModelScope responds fastest on first run.\n- **Optimised for Apple Silicon** ‚Äì optional Metal backend with FP16 execution for real-time OCR on laptops.\n- **CUDA (alpha)** ‚Äì experimental support via `--features cuda` + `--device cuda --dtype f16`; expect rough edges while we finish kernel coverage.\n- **Intel MKL (preview)** ‚Äì faster BLAS on x86 via `--features mkl` (install Intel oneMKL beforehand).\n- **OpenAI client compatibility** ‚Äì drop-in replacement for popular SDKs; the server automatically collapses chat history to the latest user turn for OCR-friendly prompts.\n\n## Quick Start üèÅ\n\n### Prerequisites\n\n- Rust 1.78+ (edition 2024 support)\n- Git\n- Optional: Apple Silicon running macOS 13+ for Metal acceleration\n- Optional: CUDA 12.2+ toolkit + driver for experimental NVIDIA GPU acceleration on Linux/Windows\n- Optional: Intel oneAPI MKL for preview x86 acceleration (see below)\n- (Recommended) Hugging Face account with `HF_TOKEN` when pulling from the `deepseek-ai/DeepSeek-OCR` repo (ModelScope is used automatically when it‚Äôs faster/reachable).\n\n### Clone the Worksp",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-31T02:27:07.070529"
  },
  {
    "basic_info": {
      "name": "oxdraw",
      "full_name": "RohanAdwankar/oxdraw",
      "owner": "RohanAdwankar",
      "description": "Diagram as Code Tool Written in Rust with Draggable Editing",
      "url": "https://github.com/RohanAdwankar/oxdraw",
      "clone_url": "https://github.com/RohanAdwankar/oxdraw.git",
      "ssh_url": "git@github.com:RohanAdwankar/oxdraw.git",
      "homepage": null,
      "created_at": "2025-10-07T19:59:40Z",
      "updated_at": "2025-10-31T02:26:43Z",
      "pushed_at": "2025-10-30T00:36:20Z"
    },
    "stats": {
      "stars": 1293,
      "forks": 32,
      "watchers": 1293,
      "open_issues": 11,
      "size": 5218
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 162571,
        "TypeScript": 108364,
        "CSS": 9308,
        "Mermaid": 2657,
        "JavaScript": 81
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "\nhttps://github.com/user-attachments/assets/de5222bb-9b65-43cf-a35b-5613d06343e8\n\n## Overview\n\nThe goal of `oxdraw` is to make it easy to create and maintain high-quality diagrams using a declarative and reproducible syntax.\nCharts are written in [Mermaid](https://mermaid.js.org/) syntax, while a web interface allows users to fine-tune positions connector paths, colors, and other styling components. Whenever a diagram is tweaked visually, the structural changes are persisted back to the source file as declarative code so that everything remains deterministic and versionable.\nThe changes are saved as comments in the mermaid file so it remains compatible with other Mermaid tools.\nThe repo is composed of the Rust CLI to compile `.mmd` files into images and the React based web interface to editing the files.\n\n## Vision\n\nThe reason I started this project was I used Mermaid a lot in the past when making architecture diagrams or trying to understand large codebases through having AI tools generate .mmd files to visualize them. However what typically happened was since these diagrams couldn't be edited minutely for example cleaning up joints and chart organization, I would have to move over the diagrams I started to things like Lucidchart. So the big picture goal of this project is to unite the benefits of code generated diagramming like Mermaid with the customizability of diagram software like Lucidchart.\n\n## Usage\n\n### Install fom Cargo\n\n```bash\ncargo install oxdraw\n```\n\n### Render a diagram from a file\n\n```bash\noxdraw --input flow.mmd  \n```\n\n### Launch the interactive editor\n\n```bash\noxdraw --input flow.mmd --edit\n```\n\n## Features\n\n### CLI Flags\n\n| Flag | Description |\n| --- | --- |\n| `-i, --input <PATH>` | Read a Mermaid source file; pass `-` to consume stdin instead. |\n| `-o, --output <PATH>` | Write the rendered asset to a specific path; pass `-` to stream SVG to stdout. Defaults to `<input>.svg` (or `<input>.<format>` if an explicit format is chosen) and `out.svg` when reading from stdin. |\n| `--png` | Shorthand for `--output-format png` |\n| `--scale <FACTOR>` | Scale multiplier for PNG rasterization (default `10.0`); values must be greater than zero. Ignored for SVG output. |\n| `--edit` | Launch the interactive editor pointing at the supplied diagram instead of emitting an asset once. |\n| `--serve-host <ADDR>` | Override the bind address used while `--edit` is active (default `127.0.0.1`). |\n| `--serve-port <PORT>` | Override the HTTP port while `--edit` is active (default `5151`). |\n| `-b, --background-color <COLOR>` | Background fill passed to the renderer (currently SVG only). Applies to both one-off renders and the editor preview. |\n| `-q, --quiet` | Suppress informational stdout such as the success message after rendering to disk. |\n\n### Frontend Features\n\n| Control | What it does |\n| --- | --- |\n| `Delete selected` | Removes the currently selected node or edge; available via the Delete/Backspace keys as well. |\n| Node Fill/Stroke/Text pickers | Apply per-node color overrides; double-clicking a node clears its override. |\n| `Reset node style` | Remove all color overrides for the selected node. |\n| Edge Color picker | Override the selected edge stroke color. |\n| Edge Line selector | Toggle between solid and dashed stroke styles. |\n| Edge Arrow selector | Choose arrow directions (forward/backward/both/none). |\n| `Add control point` | Insert a new draggable waypoint on the selected edge to fine-tune routing. |\n| `Reset edge style` | Drop edge-specific styling and revert to defaults; double-clicking an edge handle also clears its manual path. |\n\n**Canvas and editor interactions**\n\n- Drag nodes to update their stored positions with grid snapping and live alignment guides; Shift+Arrow nudges the selection in grid-sized jumps.\n- Drag edge handles (or the label handle) to reshape routes; double-click an edge to insert a handle and double-click a handle to remove overrides.\n- Drag an entire subgraph container to move all of its member nodes (and any edge overrides) together while maintaining separation from sibling groups.\n- The source panel mirrors the Mermaid file, auto-saves after short idle periods, and surfaces pending/saving/error states alongside the current selection.\n- Status text in the top toolbar signals loading, saving, and the currently edited file path.\n\n## The Diagram Algorithm\n\nhttps://github.com/user-attachments/assets/4430147a-83d8-4d83-aca6-7beec197c0e3\n\nThe path drawing algorithm is fun because there is a lot of ambiguity with what optimal behavior could be.\nSome prefer smooth lines because there is less total line but I prefer strong edges to make the diagram a bit more clear. \nSome prefer no overlapping lines but I sometimes prefer an overlap rather than letting the lines get super long and string out of the diagram very far.\nThis is an example of using the delete key to remove one relationship and then using the arrow keys to move around one the nodes and seeing how the algorithm recompu",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-31T02:27:08.344589"
  },
  {
    "basic_info": {
      "name": "firm",
      "full_name": "42futures/firm",
      "owner": "42futures",
      "description": "A text-based work management system for technologists.",
      "url": "https://github.com/42futures/firm",
      "clone_url": "https://github.com/42futures/firm.git",
      "ssh_url": "git@github.com:42futures/firm.git",
      "homepage": "",
      "created_at": "2025-10-10T11:42:37Z",
      "updated_at": "2025-10-30T15:15:24Z",
      "pushed_at": "2025-10-18T16:47:46Z"
    },
    "stats": {
      "stars": 627,
      "forks": 26,
      "watchers": 627,
      "open_issues": 8,
      "size": 254
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 290171,
        "Typst": 1971,
        "PowerShell": 1412,
        "Shell": 1222
      },
      "license": "GNU Affero General Public License v3.0",
      "topics": [
        "business",
        "cli",
        "dsl",
        "firm",
        "graph",
        "work"
      ]
    },
    "content": {
      "readme": "# Firm: Business-as-code\nA text-based work management system for technologists.\n\n![Firm CLI demo](media/demo.gif)\n\n## Why?\nModern businesses are natively digital, but lack a unified view. Your data is scattered across SaaS tools you don't control, so you piece together answers by jumping between platforms.\n\nYour business is a graph: customers link to projects, projects link to tasks, people link to organizations. Firm lets you define these relationships in plain text files (you own!).\n\nVersion controlled, locally stored and structured as code with the Firm DSL. This structured representation of your work, *business-as-code*, makes your business readable to yourself and to the robots that help you run it.\n\n### Features\n- **Everything in one place:** Organizations, contacts, projects, and how they relate.\n- **Own your data:** Plain text files and tooling that runs on your machine.\n- **Open data model:** Tailor to your business with custom schemas.\n- **Automate anything:** Search, report, integrate, whatever. It's just code.\n- **AI-ready:** LLMs can read, write, and query your business structure.\n\n## Getting started\nFirm operates on a \"workspace\": a directory containing all your `.firm` DSL files. The Firm CLI processes every file in this workspace to build a unified, queryable graph of your business.\n\nThe first step is to add an entity to your workspace. You can do this either by using the CLI or by writing the DSL yourself.\n\n### Add entities with the CLI\nUse `firm add` to interactively generate new entities. Out of the box, Firm supports a set of pre-built entity schemas for org mapping, customer relations and work management. The CLI will prompt you for the necessary info and generate corresponding DSL.\n\n```bash\n$ firm add\n```\n```\nAdding new entity\n\n> Type: organization\n> ID: megacorp\n> Name: Megacorp Ltd.\n> Email: mega@corp.com\n> Urls: [\"corp.com\"]\n\nWriting generated DSL to file my_workspace/generated/organization.firm\n```\n\n### Write DSL manually\nAlternatively, you can create a `.firm` file and write the DSL yourself.\n\n```firm\norganization megacorp {\n  name = \"Megacorp Ltd.\"\n  email = \"mega@corp.com\"\n  urls = [\"corp.com\"]\n}\n```\n\nBoth of these methods achieve the same result: a new entity defined in your Firm workspace.\n\n### Querying the workspace\nOnce you have entities in your workspace, you can query them using the CLI.\n\n#### Listing entities\nUse `firm list` to see all entities of a specific type.\n\n```bash\n$ firm list task\n```\n```\nFound 7 entities with type 'task'\n\nID: task.design_homepage\nName: Design new homepage\nIs completed: false\nAssignee ref: person.jane_doe\n\n...\n```\n\n#### Getting an entity\nTo view the full details of a single entity, use `firm get` followed by the entity's type and ID.\n\n```bash\n$ firm get person john_doe\n```\n```\nFound 'person' entity with ID 'john_doe'\n\nID: person.john_doe\nName: John Doe\nEmail: john@doe.com\n```\n\n#### Exploring relationships\nThe power of Firm lies in its ability to travel a graph of your business. Use `firm related` to explore connections to/from any entity.\n\n```bash\n$ firm related contact john_doe\n```\n```\nFound 1 relationships for 'contact' entity with ID 'john_doe'\n\nID: interaction.megacorp_intro\nType: Call\nSubject: Initial discussion about Project X\nInteraction date: 2025-09-30 09:45:00 +02:00\nInitiator ref: person.jane_smith\nPrimary contact ref: contact.john_doe\n```\n\n## Installation\nThe Firm CLI is available to download via [Github Releases](https://github.com/42futures/firm/releases/). Install scripts are provided to make the process easy.\n\n### Linux and macOS\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/42futures/firm/main/install.sh | sudo bash\n```\n\nIf you don't feel confident running it with `sudo`, you can:\n\n1. **Download the release**\n   - Go to [Github Releases](https://github.com/42futures/firm/releases/)\n   - Download the appropriate archive for your operating system and architecture. You can run `uname -m` in your terminal if you're not sure which one to pick.\n\n2. **Extract the archive**\n```bash\ntar -xzf firm-[OS]-[ARCH].tar.gz\n```\n\n3. **Navigate to the extracted directory**\n```bash\ncd firm-[OS]-[ARCH]\n```\n\n4. **Run the application**\n\n**Option A:** Run from current directory\n```bash\n./firm\n```\n\n**Option B:** Install globally (recommended)\n```bash\n# Make executable (if needed)\nchmod +x firm\n\n# Move to system PATH\nsudo mv firm /usr/local/bin/\n\n# Now you can run firm from anywhere\nfirm\n```\n\n### Windows\n```bash\nirm https://raw.githubusercontent.com/42futures/firm/main/install.ps1 | iex\n```\n\n## Using Firm as a library\nBeyond the CLI, you can integrate Firm's core logic directly into your own software using the `firm_core` and `firm_lang` Rust packages. This allows you to build more powerful automations and integrations on top of Firm.\n\nFirst, add the Firm crates to your `Cargo.toml`:\n\n```toml\n[dependencies]\nfirm_core = { git = \"https://github.com/42futures/firm.git\" }\nfirm_lang = { git = \"https://github.com/42futures/firm.git\" }\n```\n\nYou can then l",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:09.613723"
  },
  {
    "basic_info": {
      "name": "reddix",
      "full_name": "ck-zhang/reddix",
      "owner": "ck-zhang",
      "description": "Reddix ‚Äì Reddit, refined for the terminal.",
      "url": "https://github.com/ck-zhang/reddix",
      "clone_url": "https://github.com/ck-zhang/reddix.git",
      "ssh_url": "git@github.com:ck-zhang/reddix.git",
      "homepage": "",
      "created_at": "2025-10-03T09:57:33Z",
      "updated_at": "2025-10-30T19:45:19Z",
      "pushed_at": "2025-10-30T06:32:54Z"
    },
    "stats": {
      "stars": 590,
      "forks": 9,
      "watchers": 590,
      "open_issues": 11,
      "size": 1572
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 612613
      },
      "license": "MIT License",
      "topics": [
        "reddit",
        "reddit-client"
      ]
    },
    "content": {
      "readme": "# Reddix\n\n[![Release](https://img.shields.io/github/v/release/ck-zhang/reddix?style=flat-square)](https://github.com/ck-zhang/reddix/releases/latest)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](LICENSE)\n\nReddix - Reddit, refined for the terminal.\n\n![Reddix UI](docs/assets/reddix-ui-preview.png)\n\n## Features\n\n- image preview based on kitty graphics protocol\n- video playback through mpv's Kitty integration\n- multi-account support\n- keyboard first navigation\n- smart caching\n- NSFW filter toggle\n\n## Install\n\nDownload the latest [release](https://github.com/ck-zhang/reddix/releases/latest) from GitHub or run one of the installers\n\n```sh\ncurl --proto '=https' --tlsv1.2 -LsSf https://github.com/ck-zhang/reddix/releases/latest/download/reddix-installer.sh | sh\n```\n\n## Quickstart\n1. Create a Reddit ‚Äúscript‚Äù at https://www.reddit.com/prefs/apps and set the redirect URI to `http://127.0.0.1:65010/reddix/callback`.\n2. Launch `reddix`, press `m`, and follow the guided menu for setup.\n3. Prefer to configure things manually? Copy [`docs/examples/config.yaml`](docs/examples/config.yaml) into `~/.config/reddix/config.yaml` and fill in your credentials.\n\nCore shortcuts: `j/k` move, `h/l` change panes, `m` guided menu, `o` action menu, `r` refresh, `s` sync subs, `u/d` vote, `q` quit.\n\n## Support\n- Feature requests and contributions are welcome, this project is in its very early stage.\n- Track ongoing ideas in the [feature request log](docs/feature-requests.md).\n- Donation: https://ko-fi.com/ckzhang\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-31T02:27:10.876018"
  },
  {
    "basic_info": {
      "name": "fnox",
      "full_name": "jdx/fnox",
      "owner": "jdx",
      "description": "encrypted/remote secret manager",
      "url": "https://github.com/jdx/fnox",
      "clone_url": "https://github.com/jdx/fnox.git",
      "ssh_url": "git@github.com:jdx/fnox.git",
      "homepage": "https://fnox.jdx.dev",
      "created_at": "2025-10-18T11:19:04Z",
      "updated_at": "2025-10-31T01:49:36Z",
      "pushed_at": "2025-10-30T02:03:00Z"
    },
    "stats": {
      "stars": 535,
      "forks": 11,
      "watchers": 535,
      "open_issues": 1,
      "size": 491
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 300152,
        "Shell": 241748,
        "Pkl": 1112
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# üîê fnox\n\n**Fort Knox for your secrets.**\n\n[![CI](https://github.com/jdx/fnox/actions/workflows/ci.yml/badge.svg)](https://github.com/jdx/fnox/actions/workflows/ci.yml)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nManage secrets with encryption or cloud providers‚Äîor both! fnox gives you a unified interface to work with secrets across development, CI, and production.\n\n## Quick Start\n\n```bash\n# Install via mise (recommended)\nmise use -g fnox\n\n# Initialize in your project\nfnox init\n\n# Set a secret (encrypted by default)\nfnox set DATABASE_URL \"postgresql://localhost/mydb\"\n\n# Get a secret\nfnox get DATABASE_URL\n\n# Run commands with secrets loaded\nfnox exec -- npm start\n\n# Enable shell integration (auto-load on cd)\neval \"$(fnox activate bash)\"  # or zsh, fish\n```\n\n## What is fnox?\n\nfnox lets you store secrets in two ways:\n\n1. **Encrypted in git** - Using age, AWS KMS, Azure KMS, or GCP KMS\n2. **Remote in cloud** - Using AWS Secrets Manager, Azure Key Vault, GCP Secret Manager, 1Password, Bitwarden, or HashiCorp Vault\n\nYour `fnox.toml` config file either contains encrypted secrets or references to remote secrets. Use `fnox exec` to run commands with secrets loaded, or enable shell integration to auto-load secrets when you `cd` into a directory.\n\n## Supported Providers\n\n### üîê Encryption (secrets in git, encrypted)\n\n- **age** - Modern encryption (works with SSH keys!)\n- **aws-kms** - AWS Key Management Service\n- **azure-kms** - Azure Key Vault encryption\n- **gcp-kms** - Google Cloud KMS\n\n### ‚òÅÔ∏è Cloud Secret Storage (remote, centralized)\n\n- **aws-sm** - AWS Secrets Manager\n- **azure-sm** - Azure Key Vault Secrets\n- **gcp-sm** - Google Cloud Secret Manager\n- **vault** - HashiCorp Vault\n\n### üîë Password Managers\n\n- **1password** - 1Password CLI\n- **bitwarden** - Bitwarden/Vaultwarden\n\n### üíª Local Storage\n\n- **keychain** - OS Keychain (macOS/Windows/Linux)\n- **plain** - Plain text (for defaults only!)\n\n## Documentation\n\n**üìö [Complete Documentation](https://fnox.jdx.dev/)**\n\n### Quick Links\n\n- [Installation](https://fnox.jdx.dev/guide/installation)\n- [Quick Start Guide](https://fnox.jdx.dev/guide/quick-start)\n- [How It Works](https://fnox.jdx.dev/guide/how-it-works)\n- [Shell Integration](https://fnox.jdx.dev/guide/shell-integration)\n- [Providers Overview](https://fnox.jdx.dev/providers/overview)\n- [Real-World Example](https://fnox.jdx.dev/guide/real-world-example)\n\n### Provider Guides\n\n- [Age Encryption](https://fnox.jdx.dev/providers/age) - Simple, free, works with SSH keys\n- [AWS Secrets Manager](https://fnox.jdx.dev/providers/aws-sm) - Centralized AWS secret management\n- [1Password](https://fnox.jdx.dev/providers/1password) - Integrate with 1Password CLI\n- [Bitwarden](https://fnox.jdx.dev/providers/bitwarden) - Open source password manager\n\n[**View all providers ‚Üí**](https://fnox.jdx.dev/providers/overview)\n\n### Reference\n\n- [CLI Reference](https://fnox.jdx.dev/cli/)\n- [Environment Variables](https://fnox.jdx.dev/reference/environment)\n- [Configuration File](https://fnox.jdx.dev/reference/configuration)\n\n## Example\n\n```toml\n# fnox.toml\n\n[providers]\nage = { type = \"age\", recipients = [\"age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p\"] }\n\n[secrets]\n# Development secrets (encrypted in git)\nDATABASE_URL = { provider = \"age\", value = \"YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IHNjcnlwdC...\" }  # ‚Üê encrypted, safe to commit\nAPI_KEY = { default = \"dev-key-12345\" }  # ‚Üê plain default for local dev\n\n[profiles.production.providers]\naws = { type = \"aws-sm\", region = \"us-east-1\", prefix = \"myapp/\" }\n\n[profiles.production.secrets]\nDATABASE_URL = { provider = \"aws\", value = \"database-url\" }  # ‚Üê reference to AWS secret\n```\n\n```bash\n# Development (uses encrypted secrets)\nfnox exec -- npm start\n\n# Production (uses AWS Secrets Manager)\nfnox exec --profile production -- ./deploy.sh\n```\n\n## Why fnox?\n\n- **Flexible** - Mix and match encryption and cloud providers\n- **Team-friendly** - Encrypted secrets in git, everyone can decrypt\n- **Multi-environment** - Different providers for dev, staging, prod\n- **Shell integration** - Auto-load secrets on directory change\n- **Developer-focused** - Simple config, powerful features\n- **No vendor lock-in** - Switch providers anytime\n\n## Installation\n\n### Using mise (recommended)\n\n```bash\nmise use -g fnox\n```\n\n### Using Cargo\n\n```bash\ncargo install fnox\n```\n\n### From Source\n\n```bash\ngit clone https://github.com/jdx/fnox\ncd fnox\ncargo install --path .\n```\n\n## Development\n\nSee [CLAUDE.md](./CLAUDE.md) for development guidelines.\n\n```bash\n# Build\nmise run build\n\n# Run tests\nmise run test\n\n# Run specific tests\nmise run test:cargo\nmise run test:bats\n\n# Lint\nmise run lint\n\n# Full CI check\nmise run ci\n```\n\n## License\n\nMIT License - see [LICENSE](LICENSE) for details.\n\n## Links\n\n- [Documentation](https://fnox.jdx.dev/)\n- [GitHub Repository](https://github.com/jdx/fnox)\n- [Issue Tracker](https://github.com/jdx/fnox/issues)\n- [mise](https://mise.",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:12.167673"
  },
  {
    "basic_info": {
      "name": "percolator",
      "full_name": "aeyakovenko/percolator",
      "owner": "aeyakovenko",
      "description": null,
      "url": "https://github.com/aeyakovenko/percolator",
      "clone_url": "https://github.com/aeyakovenko/percolator.git",
      "ssh_url": "git@github.com:aeyakovenko/percolator.git",
      "homepage": null,
      "created_at": "2025-10-19T18:16:33Z",
      "updated_at": "2025-10-31T02:24:20Z",
      "pushed_at": "2025-10-31T02:24:16Z"
    },
    "stats": {
      "stars": 421,
      "forks": 89,
      "watchers": 421,
      "open_issues": 3,
      "size": 159822
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 1443235,
        "Shell": 68983,
        "Makefile": 1098
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Percolator\n\nA formally-verified perpetual futures exchange protocol for Solana with O(1) crisis loss socialization, constant product AMM, and rigorous security guarantees.\n\n> **‚ö†Ô∏è EDUCATIONAL USE ONLY**\n>\n> This code is provided for educational and research purposes only. It has not been independently audited for production use and should not be deployed to handle real funds. Use at your own risk.\n\n## Overview\n\nPercolator is a high-assurance decentralized exchange (DEX) protocol built on Solana that combines:\n\n- **Formal Verification**: 70+ Kani proofs covering safety-critical invariants\n- **O(1) Crisis Resolution**: Constant-time loss socialization via global scale factors\n- **Constant Product AMM**: Verified x¬∑y=k invariant with fee accrual\n- **Cross-Margin Portfolio**: Net exposure calculation for capital efficiency\n- **Adaptive PnL Vesting**: Taylor series approximation for withdrawal throttling\n- **Zero Allocations**: Pure `no_std` Rust optimized for Solana BPF\n\n**Verification Coverage**: 85% of production operations use formally verified functions\n\n## Quick Start\n\n```bash\n# Build all programs and CLI\ncargo build-sbf\ncargo build --release --bin percolator\n\n# Run unit tests (257 passing)\ncargo test --lib\n\n# Run formal verification proofs\ncargo kani -p proofs-kani --harness i2_conservation_2users_3steps\ncargo kani -p model_safety --harness proof_c3_no_overburn\n\n# Deploy to localnet\nsolana-test-validator &\n./target/release/percolator -n localnet deploy --all\n\n# Initialize exchange and run integration tests\n./target/release/percolator -n localnet test --all\n```\n\n## Architecture\n\n### Two-Program Design\n\n#### Router Program\n**Global coordinator managing collateral, portfolio margin, and cross-slab routing**\n\nResponsibilities:\n- Maintain user portfolios with equity and net exposure tracking\n- Manage central collateral vaults (SPL tokens, currently SOL only)\n- Registry of whitelisted matcher programs\n- Execute trades via CPI to matchers\n- Handle liquidations when equity < maintenance margin\n- Apply adaptive PnL vesting (warmup period throttling)\n\n#### Slab (Matcher) Program\n**LP-owned order book maintaining its own state and matching logic**\n\nResponsibilities:\n- Maintain local order book with price-time priority\n- Update quote cache for router exposure calculations\n- Verify router authority and sequence numbers (TOCTOU protection)\n- Execute fills at captured maker prices\n- Never holds or moves funds (router-only)\n\n### Safety Architecture\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  User Wallets    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n         ‚îÇ SOL deposits/withdrawals\n         ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     CPI      ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ  Router Program  ‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∂‚îÇ  Slab Programs   ‚îÇ\n‚îÇ  (Authority)     ‚îÇ‚óÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ  (Matchers)      ‚îÇ\n‚îÇ                  ‚îÇ   read-only  ‚îÇ                  ‚îÇ\n‚îÇ ‚Ä¢ Collateral     ‚îÇ              ‚îÇ ‚Ä¢ Order books    ‚îÇ\n‚îÇ ‚Ä¢ Portfolios     ‚îÇ              ‚îÇ ‚Ä¢ Quote cache    ‚îÇ\n‚îÇ ‚Ä¢ Liquidations   ‚îÇ              ‚îÇ ‚Ä¢ Matching       ‚îÇ\n‚îÇ ‚Ä¢ Vesting        ‚îÇ              ‚îÇ                  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò              ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n         ‚îÇ\n         ‚ñº\n  Formally Verified\n  Model Safety Layer\n```\n\n**Security Rules**:\n- All funds stay in router vaults\n- Router ‚Üí Matcher is one-way CPI (no callbacks)\n- Whitelist controls which matchers can be invoked\n- Sequence numbers prevent TOCTOU attacks\n- Atomicity: any CPI failure aborts entire transaction\n\n## Core Features\n\n### 1. Crisis Loss Socialization (O(1))\n\nWhen the system becomes insolvent (liquidations fail to cover losses), the crisis module socializes losses across winners without iterating over users.\n\n**Loss Waterfall**:\n1. Warming PnL (unvested profits)\n2. Insurance fund\n3. Equity (principal + realized PnL)\n\n```rust\nuse model_safety::crisis::*;\n\n// Crisis occurs - 200K deficit\nlet mut accums = Accums::new();\naccums.sigma_principal = 1_000_000;\naccums.sigma_collateral = 800_000;\n\nlet outcome = crisis_apply_haircuts(&mut accums);\n\n// Later, user materializes on next action\nmaterialize_user(&mut user, &mut accums, MaterializeParams::default());\n```\n\n**Verified Invariants** (C1-C9):\n- C1: Post-crisis solvency (or best effort)\n- C2: Scales monotone (never increase)\n- C3: No over-burn (bounded haircuts)\n- C4: Materialization idempotent\n- C5: Vesting conservation\n- C8: Loss waterfall ordering\n- C9: Vesting progress guarantee\n\n### 2. Constant Product AMM (x¬∑y=k)\n\nEmbedded AMM for immediate liquidity with formally verified invariants.\n\n```rust\nuse amm_model::*;\n\n// Buy 1 BTC at current reserves\nlet result = quote_buy(\n    x_reserve,  // 1000 BTC (scaled)\n    y_reserve,  // 60M USD (scaled)\n    fee_bps,    // 5 bps\n    1 * SCALE,  // 1 BTC desired\n    min_liq,    // Liquidity floor\n)?;\n\n// Result includes VWAP, new reserves, quote amount\n```\n\n**Verified Properties** (A1-A8):\n- A1: Invariant non-decreasing (fees increase k)\n- A2: Reserves non-negative\n- A3: No arithmetic overflow\n- A4: Deterministic execution\n- A5: Fee routing correctness\n- A6: Price impact scal",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-31T02:27:13.497588"
  },
  {
    "basic_info": {
      "name": "superseedr",
      "full_name": "Jagalite/superseedr",
      "owner": "Jagalite",
      "description": "A BitTorrent Client in your Terminal",
      "url": "https://github.com/Jagalite/superseedr",
      "clone_url": "https://github.com/Jagalite/superseedr.git",
      "ssh_url": "git@github.com:Jagalite/superseedr.git",
      "homepage": "",
      "created_at": "2025-10-18T22:09:46Z",
      "updated_at": "2025-10-31T02:26:59Z",
      "pushed_at": "2025-10-31T02:26:49Z"
    },
    "stats": {
      "stars": 220,
      "forks": 6,
      "watchers": 220,
      "open_issues": 1,
      "size": 1263
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 504078,
        "Shell": 14226
      },
      "license": "GNU General Public License v3.0",
      "topics": []
    },
    "content": {
      "readme": "# superseedr - A BitTorrent Client in your Terminal\n\nA BitTorrent client written fully in Rust using **[Ratatui](https://ratatui.rs/)**, with build options for both public and private tracker compatibility (DHT+PEX removed).\n\n![Feature Demo](https://github.com/Jagalite/superseedr-assets/blob/main/superseedr_landing.webp)\n\n## Installation\n\n### macOS\nFor macOS users, the easiest way to install `superseedr` is by using the provided `.pkg` installer. This will also install a handler so magnet links are supported. You can find the latest installer on the [releases page](https://github.com/Jagalite/superseedr/releases).\n\n> [!NOTE]  \n> macOS's default terminal application does not support truecolor just yet, try more modern terminal applications such as kitty.\n\n### Linux\nFor Linux users, you can find `.deb` files on the [releases page](https://github.com/Jagalite/superseedr/releases).\n\n### Private Tracker Builds\nThis installation is intended for private trackers, as it disables peer-discovery features (DHT & PEX).\nThese features will not be included in the final build of the private versions of superseedr.\n\nThese builds are also available on the [releases page](https://github.com/Jagalite/superseedr/releases).\n\n### Installing from source\nYou can also install from source using `cargo`.\n```bash\n# Standard Build\ncargo install superseedr\n\n# Private Tracker Build\ncargo install superseedr --no-default-features\n```\n\n## Usage\nLaunch the TUI (Terminal UI) + BitTorrent Client\n```bash\nsuperseedr\n```\nOnce running, add torrents by pasting (`ctrl+v` or `v`) a magnet link or path to a `.torrent` file. \nYou can also add torrents or magnet links via another terminal command line while the TUI is running (make sure to set a download path first):\n```bash\n# Magnet links or torrent paths can be pasted when the TUI is running.\ncrtl+v \"magnet:?xt=urn:btih:...\"\ncrtl+v \"/absolute/path/to/my.torrent\"\n\n# CLI - Run in another terminal\nsuperseedr \"magnet:?xt=urn:btih:...\"\nsuperseedr \"/absolute/path/to/my.torrent\"\nsuperseedr stop-client\n```\n\nConfiguration files are located in the user's Application Support folder:\n`Press [m] in the tui to see log and config path`\n\n## Current Status & Features\n\nThe client is in a late-alpha stage, with most core BitTorrent features implemented and functional.\n\n### Core Protocol & Peer Discovery\n- **Real Time Performance Tuning:** Periodic resource optimizations (file handles) to maximize speeds and disk stability.\n- **Peer Discovery:** Full support for Trackers, DHT, PEX, and Magnet Links (including metadata download).\n- **Piece Selection:** Utilizes a Rarest-First strategy for optimal swarm health, switching to Endgame Mode for the final pieces.\n- **Choking Algorithm:** Employs a tit-for-tat based choking algorithm with optimistic unchoking for efficient upload slot management.\n\n### User Interface (TUI)\n- **Real-time Dashboard:** A `ratatui`-based terminal UI displaying overall status, individual torrent progress, peer lists, and network graphs.\n- **Help & Commands:** A help popup lists all keyboard commands, and a footer bar shows common commands.\n\n### Configuration & Management\n- **Persistent State:** Saves the torrent list, progress, and lifetime stats to a configuration file.\n- **Speed Limits:** Allows setting global upload and download speed limits.\n\n## Roadmap to V1.0\n- **Testing:** Ongoing testing across various platforms and terminals.\n- **Magnet Link Handling:** Implementation of operating system-level integration (e.g., registry/app associations) for seamless browser-to-app magnet link capture.\n- **CI/CD:** Implementation of a full CI/CD pipeline.\n- **Build & Distribution:** Work in progress for streamlined building and distribution.\n- **Unit Testing:** Expansion of unit test coverage.\n- **Windows Support:** Native builds for Windows.\n\n## Roadmap to V1.5\n- Fix and refactor synchronous startup and validation\n- **Docker:** Docker setup with VPN container networking passthrough.\n\n## Future (V2.0 and Beyond)\n\n### Refactors \n- **Codebase:** Reduce dependencies by implementing some of these features in the codebase.\n\n### Networking & Protocol\n- **Protocol Encryption (PE/MSE):** Encrypts BitTorrent.\n- **Full IPv6 Support:** Allow connecting to IPv6 peers and announcing to IPv6 trackers, including parsing compact peers6 responses.\n- **UPnP / NAT-PMP:** Automatically configure port forwarding on compatible routers to improve connectability.\n- **Tracker Scraping:** Implement the ability to query trackers for seeder/leecher counts without doing a full announce (useful for displaying stats).\n- **Network History:** Persisting network history to disk.\n\n### Torrent & File Management\n- **Selective File Downloading:** Allow users to choose which specific files inside a multi-file torrent they want to download.\n- **Sequential Downloading:** Download pieces in order, primarily useful for streaming media files while they're downloading.\n- **Torrent Prioritization / Queueing:** Allow users to set priorities for torrents ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:14.749456"
  },
  {
    "basic_info": {
      "name": "adabraka-ui",
      "full_name": "Augani/adabraka-ui",
      "owner": "Augani",
      "description": "A ui component library for building desktop applications in rust",
      "url": "https://github.com/Augani/adabraka-ui",
      "clone_url": "https://github.com/Augani/adabraka-ui.git",
      "ssh_url": "git@github.com:Augani/adabraka-ui.git",
      "homepage": null,
      "created_at": "2025-10-21T19:25:32Z",
      "updated_at": "2025-10-30T23:38:34Z",
      "pushed_at": "2025-10-28T18:01:50Z"
    },
    "stats": {
      "stars": 210,
      "forks": 5,
      "watchers": 210,
      "open_issues": 0,
      "size": 6663
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 913224
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# adabraka-ui\n\n[![Crates.io](https://img.shields.io/crates/v/adabraka-ui.svg)](https://crates.io/crates/adabraka-ui)\n[![Downloads](https://img.shields.io/crates/d/adabraka-ui.svg)](https://crates.io/crates/adabraka-ui)\n[![Documentation](https://docs.rs/adabraka-ui/badge.svg)](https://docs.rs/adabraka-ui)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Rust](https://img.shields.io/badge/rust-nightly-orange.svg)](https://www.rust-lang.org/)\n[![GitHub Stars](https://img.shields.io/github/stars/Augani/adabraka-ui?style=social)](https://github.com/Augani/adabraka-ui)\n\nA comprehensive, professional UI component library for [GPUI](https://github.com/zed-industries/zed), the GPU-accelerated UI framework powering the Zed editor. Inspired by [shadcn/ui](https://ui.shadcn.com/), adabraka-ui provides 73+ polished, accessible components for building beautiful desktop applications in Rust.\n\n**[üìñ Documentation](https://augani.github.io/adabraka-ui/)** ¬∑ **[üöÄ Getting Started](#installation)** ¬∑ **[üì¶ Components](#components)** ¬∑ **[üí° Examples](#examples)**\n\n## ‚ú® Features\n\n- üé® **Complete Theme System** - Built-in light/dark themes with semantic color tokens\n- üß© **73+ Components** - Comprehensive library covering all UI needs from buttons to data tables\n- üì± **Responsive Layout** - Flexible layout utilities (VStack, HStack, Grid)\n- üé≠ **Professional Animations** - Smooth transitions with cubic-bezier easing and spring physics\n- ‚úçÔ∏è **Typography System** - Built-in Text component with semantic variants\n- üíª **Code Editor** - Multi-line editor with syntax highlighting and full keyboard support\n- ‚ôø **Accessibility** - Full keyboard navigation, ARIA labels, and screen reader support\n- üéØ **Type-Safe** - Leverages Rust's type system for compile-time guarantees\n- üöÄ **High Performance** - Optimized for GPUI's retained-mode rendering with virtual scrolling\n- üìö **Well Documented** - Extensive examples and comprehensive API documentation\n\n## üé¨ Showcase\n\nSee adabraka-ui in action in real applications:\n\n### Desktop Music Player\n![Music Player App](docs/assets/images/music-player.png)\n\nA beautiful desktop music player with offline playing capabilities. Features smooth animations, responsive UI, and a polished user experience built entirely with adabraka-ui components.\n\n### Project Task Manager\n![Task Manager App](docs/assets/images/task-manager.png)\n\nA powerful task management application used to track the development of this UI library. Features drag-and-drop task organization with smooth animations, showcasing the library's advanced capabilities.\n\n## üöÄ Installation\n\n> **Note:** Currently requires Rust nightly due to GPUI dependencies. Install with: `rustup toolchain install nightly`\n\nAdd adabraka-ui to your `Cargo.toml`:\n\n```toml\n[dependencies]\nadabraka-ui = \"0.2.2\"\ngpui = \"0.2.0\"\n```\n\nBuild your project with nightly:\n```bash\ncargo +nightly build\n```\n\n## ‚ú® What's New in v0.2.2\n\n**Latest Release (October 28, 2025)** - Improved form usability and documentation!\n\n### üîê Password Input Fixed\nThe password input eye icon now properly toggles between masked (‚Ä¢‚Ä¢‚Ä¢‚Ä¢) and visible text with immediate state updates. Click the eye icon to reveal or hide your password.\n\n```rust\nInput::new(password_input, cx)\n    .password(true)  // Enables eye icon toggle\n    .placeholder(\"Enter password\")\n```\n\n### ‚å®Ô∏è Tab Navigation\nAdded full keyboard navigation support between form inputs. Press Tab to move to the next input, Shift-Tab to go back. Works automatically with proper FocusHandle configuration.\n\n```rust\n// Tab navigation works automatically\nInput::new(&email_input, cx).placeholder(\"Email\")\nInput::new(&password_input, cx).password(true).placeholder(\"Password\")\n// Press Tab to move between inputs!\n```\n\n### üó∫Ô∏è Comprehensive Roadmap\nNew [ROADMAP.md](ROADMAP.md) with complete component inventory (73+ components), phase-based development plan, and prioritized quick wins for desktop integration features.\n\n### üßπ Code Quality\nRemoved 13 unnecessary inline comments across 6 files for a cleaner, more production-ready codebase.\n\n---\n\n## Quick Start\n\n```rust\nuse adabraka_ui::prelude::*;\nuse gpui::*;\n\nfn main() {\n    Application::new().run(|cx| {\n        // Initialize the UI library\n        adabraka_ui::init(cx);\n\n        // Install a theme\n        install_theme(cx, Theme::dark());\n\n        cx.open_window(\n            WindowOptions {\n                titlebar: Some(TitlebarOptions {\n                    title: Some(\"My App\".into()),\n                    ..Default::default()\n                }),\n                ..Default::default()\n            },\n            |_, cx| cx.new(|_| MyApp::new()),\n        ).unwrap();\n    });\n}\n\nstruct MyApp;\n\nimpl MyApp {\n    fn new() -> Self {\n        Self\n    }\n}\n\nimpl Render for MyApp {\n    fn render(&mut self, _window: &mut Window, cx: &mut Context<Self>) -> impl IntoElement {\n        VStack::new()\n            .p(px(32.0))\n            .gap(px(16.0))\n            .child(\n                d",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:16.044248"
  },
  {
    "basic_info": {
      "name": "free-ferris-pack",
      "full_name": "MariaLetta/free-ferris-pack",
      "owner": "MariaLetta",
      "description": "ü¶Ä Pack of 50+ Ferris pictures and elements will help you to build your own design for anything related to Rust Programming Language: presentations, README files, posts in blogs or social media, courses, videos and many, many more. ",
      "url": "https://github.com/MariaLetta/free-ferris-pack",
      "clone_url": "https://github.com/MariaLetta/free-ferris-pack.git",
      "ssh_url": "git@github.com:MariaLetta/free-ferris-pack.git",
      "homepage": "",
      "created_at": "2025-10-04T20:22:05Z",
      "updated_at": "2025-10-31T02:01:25Z",
      "pushed_at": "2025-10-05T14:55:22Z"
    },
    "stats": {
      "stars": 183,
      "forks": 7,
      "watchers": 183,
      "open_issues": 0,
      "size": 226654
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 44238598
      },
      "license": "Creative Commons Zero v1.0 Universal",
      "topics": []
    },
    "content": {
      "readme": "# Free Ferris Pack\n![alt](/preview/main.png)\nü¶Ä Meet the New Emotional Ferris! ü¶Ä\n\n- 50+ unique Ferris illustrations - emotions, poses, and situations\n- 10+ funny elements for your own creating\n- Consistent art style - all illustrations work together\n- Professional quality - suitable for presentations and documents\n- Multiple formats - SVG, PNG in large sizes\n- Absolutely free - no attribution required\n- Ready to use - download and go\n\nCreated with ‚ù§Ô∏è for the Rust community\n\n## Why This Pack Exists\nSome time ago I created Free Gophers Pack, which became quite popular in the community. Then I learned about Ferris and thought - why not?\n\n![alt](/preview/preview2.png)\n\n## Contents\n0. [Examples](/examples/)\n1. [Elements](/elements/) \n2. [Illustrations](/illustrations/) \n\n![alt](/preview/preview3.png)\n\n![alt](/preview/preview4.png)\n\n![alt](/preview/preview5.png)\n\n## Perfect For\n- Rust developers building projects and tools\n- Educators teaching Rust programming\n- Speakers with talks about Rust\n- Technical writers creating Rust content\n- Companies using Rust in their stack\n- Community organizers running Rust events\n\nSee different use cases in [examples](/examples/).\n\n![alt](/examples/presentation4.png)\n\n![alt](/examples/presentation9.png)\n\n## License\nThis package is licensed as CC0 (public domain) so you can use the images in any way with no restrictions.\n\n## My other projects\nIf you liked this project, you may also want to see \n- [Free Gophers Pack](https://github.com/MariaLetta/free-gophers-pack)\n- [Mega Doodles Pack](https://github.com/MariaLetta/mega-doodles-pack)\n\n## About me\nMy name is Maria Letta, I am a professional illustrator and product designer, some of my works can be found here:    \nü¶Ñ instagram https://instagram.com/maria_letta_art     \nüé® creativemarket https://creativemarket.com/Maria_Letta\n\nDrop me an email, if you have any questions or suggestions:\n‚úâ designbyletta@gmail.com\n\n![alt](/examples/presentation10.png)",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:17.338944"
  },
  {
    "basic_info": {
      "name": "neura-hustle-tracker",
      "full_name": "adolfousier/neura-hustle-tracker",
      "owner": "adolfousier",
      "description": "An open-source time-tracking tool for monitoring your productivity with privacy-first approach. Own your hustle, optimize those  \"grind sessions,\" and uncover inefficiencies. Built with Rust, Ratatui and Postgres.",
      "url": "https://github.com/adolfousier/neura-hustle-tracker",
      "clone_url": "https://github.com/adolfousier/neura-hustle-tracker.git",
      "ssh_url": "git@github.com:adolfousier/neura-hustle-tracker.git",
      "homepage": "",
      "created_at": "2025-10-14T18:05:20Z",
      "updated_at": "2025-10-30T15:03:29Z",
      "pushed_at": "2025-10-30T13:24:45Z"
    },
    "stats": {
      "stars": 150,
      "forks": 8,
      "watchers": 150,
      "open_issues": 0,
      "size": 28958
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 318504,
        "PowerShell": 8955,
        "Makefile": 4906,
        "Batchfile": 203
      },
      "license": "Other",
      "topics": [
        "productivity-tools",
        "productivity-tracker",
        "ratatui",
        "rust",
        "time-tracker",
        "tui"
      ]
    },
    "content": {
      "readme": "[![Rust](https://img.shields.io/badge/rust-%23000000.svg?style=for-the-badge&logo=rust&logoColor=white)](https://www.rust-lang.org)\n[![Ratatui](https://img.shields.io/badge/ratatui-%23000000.svg?style=for-the-badge&logo=rust&logoColor=white)](https://ratatui.rs)\n[![Docker](https://img.shields.io/badge/docker-%230db7ed.svg?style=for-the-badge&logo=docker&logoColor=white)](https://docker.com)\n[![Make](https://img.shields.io/badge/Make-%23000000.svg?style=for-the-badge&logo=gnu&logoColor=white)](https://www.gnu.org/software/make/)\n[![PostgreSQL](https://img.shields.io/badge/postgresql-%23316192.svg?style=for-the-badge&logo=postgresql&logoColor=white)](https://www.postgresql.org)\n\n[![Neura Hustle Tracker](https://img.shields.io/badge/Neura%20Hustle%20Tracker-7f56da)](https://meetneura.ai) [![Powered by Neura AI](https://img.shields.io/badge/Powered%20by-Neura%20AI-7f56da)](https://meetneura.ai)\n\n# Neura Hustle Tracker BETA\n\n**Track what apps you use and how long you spend on them.**\n\nThis app runs in your terminal and shows you exactly where your time goes during work sessions. Built with Ratatui.\n\n![Demo](src/screenshots/hustle-tracker-demo.GIF)\n\n## What Does This Do?\n\n- **Tracks your app usage** - Automatically monitors which programs you're using\n- **Shows pretty charts** - See your time broken down by app and category\n- **Saves your data** - Everything stored locally in your own PostgreSQL database\n- **Works everywhere** - Linux, macOS, and Windows\n\n## Quick Start (Easiest Way)\n\n### Linux\n\nCopy and paste this into your terminal:\n\n```bash\nsudo apt update && sudo apt install -y make docker.io curl git openssl && curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y && source ~/.cargo/env && git clone https://github.com/adolfousier/neura-hustle-tracker.git && cd neura-hustle-tracker && make run\n```\n\nThat's it! The app will start tracking automatically.\n\n### macOS\n\n1. Install [Docker Desktop](https://docs.docker.com/desktop/install/mac-install/) first\n2. Then paste this into Terminal:\n\n```bash\nbrew install make git rustup-init && rustup-init -y && source ~/.cargo/env && git clone https://github.com/adolfousier/neura-hustle-tracker.git && cd neura-hustle-tracker && make daemon-start\n```\n\n3. View your stats anytime: `make view`\n\n### Windows\n\n1. Install [Docker Desktop](https://www.docker.com/products/docker-desktop/)\n2. Open PowerShell as Administrator\n3. Run this:\n\n```powershell\npowershell -Command \"iwr -useb https://raw.githubusercontent.com/adolfousier/neura-hustle-tracker/main/src/scripts/windows_build/windows-install.ps1 | iex\"\n```\n\n4. View your stats anytime: `hustle-view`\n\n## Already Have Rust and Docker?\n\nIf you already have the prerequisites installed:\n\n```bash\ngit clone https://github.com/adolfousier/neura-hustle-tracker\ncd neura-hustle-tracker\nmake run\n```\n\nDone! The app handles everything else automatically.\n\n## How to Use It\n\nOnce the app is running:\n\n- **Tab** - Switch between Daily, Weekly, and Monthly views\n- **h** - See your complete session history\n- **r** - Rename apps to organize them better\n- **Shift+C** - See all available commands\n- **q** - Quit\n\nThe app tracks automatically. Just switch between your programs normally and it records everything.\n\n## Two Ways to Run (Important!)\n\n### Linux Users ‚Üí Use \"Unified Mode\"\n\nRun `make run` and you're done. Everything works in one window.\n\n### macOS/Windows Users ‚Üí Use \"Daemon Mode\"\n\nYou need two steps because of how these systems work:\n\n1. **Start tracking in background**: `make daemon-start`\n2. **Open the dashboard**: `make view`\n\nWhy? On macOS/Windows, if the tracking runs in the dashboard window, it can't see when you switch to other apps. Running it in the background fixes this.\n\n**Commands for daemon mode:**\n\n- `make daemon-start` - Start tracking\n- `make view` - Open dashboard\n- `make daemon-stop` - Stop tracking\n- `make daemon-status` - Check if running\n\n## What You Need\n\n- **Computer**: Windows 10+, macOS 10.15+, or Linux with a desktop\n- **Space**: About 500MB for Docker and dependencies\n- **Permissions**:\n  - macOS needs Screen Recording permission\n  - Linux needs a desktop environment (GNOME, KDE, etc.)\n  - Windows works out of the box\n\n## Special Notes\n\n**Wayland users (Linux)**: Install the [Window Calls extension](https://extensions.gnome.org/extension/4724/window-calls/) for GNOME to track windows properly.\n\n**First time running**: The app creates secure database credentials automatically. You don't need to configure anything.\n\n## Start on Boot (Optional)\n\nWant the app to start automatically when you log in?\n\n**Linux:**\n\n```bash\nmkdir -p ~/.config/autostart/\ncp src/scripts/startup/neura-tracker.desktop ~/.config/autostart/\n```\n\nEdit the file and change `/path/to/neura-hustle-tracker` to your actual path.\n\n**macOS:**\n\n```bash\nmkdir -p ~/Library/LaunchAgents/\ncp src/scripts/startup/neura-tracker.plist ~/Library/LaunchAgents/\nlaunchctl load ~/Library/LaunchAgents/neura-tracker.plist\n```\n\n**Windows:**\n\n```cmd\ncopy src\\scr",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:18.653438"
  },
  {
    "basic_info": {
      "name": "chroma",
      "full_name": "yuri-xyz/chroma",
      "owner": "yuri-xyz",
      "description": "üåà Shader-based audio visualizer for the terminal",
      "url": "https://github.com/yuri-xyz/chroma",
      "clone_url": "https://github.com/yuri-xyz/chroma.git",
      "ssh_url": "git@github.com:yuri-xyz/chroma.git",
      "homepage": "",
      "created_at": "2025-10-04T22:39:52Z",
      "updated_at": "2025-10-29T16:19:03Z",
      "pushed_at": "2025-10-26T06:44:13Z"
    },
    "stats": {
      "stars": 130,
      "forks": 7,
      "watchers": 130,
      "open_issues": 6,
      "size": 253
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 184458,
        "WGSL": 36021,
        "Nix": 2943,
        "Shell": 1563
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "audio",
        "audio-visualizer",
        "hyprland",
        "linux",
        "rust",
        "shaders",
        "shell",
        "tui"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <img width=\"300\" alt=\"Chroma's logo in ASCII rainbow\" src=\"https://github.com/user-attachments/assets/871f6c7b-8b7c-486d-8cae-41ec13ed2d02\" />\n\nüåà A Rust-based, ASCII art shader audio visualizer for your terminal!\n\n  <img src=\"https://github.com/user-attachments/assets/b71074f2-3e77-4fb9-a8ef-30288a3690c4\" width=\"550\" />\n\n</div>\n\n## ‚≠ê Features\n\n- üé® **GPU-accelerated shaders** using wgpu (compute shaders)\n- üñºÔ∏è **ASCII art rendering** with ANSI color support\n- ‚öôÔ∏è **Highly configurable parameters** via config file\n- üíæ **Save/Load configurations** with automatic deduping via hashing\n- üîÑ **Live config reloading** for real-time parameter adjustment\n- üéµ **Audio visualization** driven by system audio input\n- üìä **FFT-based audio analysis** for reactive visual effects\n\n## ‚ú® Demos & screenshots\n\nüîä Make sure you turn on sound on the videos!\n\n<img width=\"2474\" height=\"1248\" alt=\"chroma-themes\" src=\"https://github.com/user-attachments/assets/0f43781d-4276-4d5f-8247-a932df43372e\" />\n\n<img width=\"1958\" height=\"1103\" alt=\"chroma-config\" src=\"https://github.com/user-attachments/assets/96dae99e-2e93-470a-b44f-40c0a09f098a\" />\n\n[chroma.webm](https://github.com/user-attachments/assets/9e821a20-8394-445c-9542-91e294225e63)\n\n[chroma-demo-long.webm](https://github.com/user-attachments/assets/3ae02009-b9a5-4003-93b3-8120db869447)\n\n## üîó Install\n\n### Arch Linux\n\n```bash\n# With an AUR helper: yay\nyay -S chroma-visualizer-git\n\n# With an AUR helper: paru\nparu -S chroma-visualizer-git\n\n# Or manually:\ngit clone https://aur.archlinux.org/chroma-visualizer-git.git\ncd chroma-visualizer-git\nmakepkg -si\n\n# If you're lazy:\ngit clone https://aur.archlinux.org/chroma-visualizer-git.git \\\n  && cd chroma-visualizer-git \\\n  && makepkg -si\n```\n\n### Other distros\n\n...More packaging coming soon!...\n\nMeanwhile you can build from source below:\n\n### From source (manual)\n\n```bash\n# Clone the git repo and enter it:\ngit clone https://github.com/yuri-xyz/chroma.git\ncd chroma\n\n# Make sure you have the `alsa-lib` & `pipewire` packages installed,\n# the exact package names may vary depending on your distro.\n\n# Pick one:\ncargo build --release                    # visuals only\ncargo build --release --features audio   # with audio reactivity (recommended)\n\n# Install the built bin so that you can run it with `chroma`:\nsudo install -Dm755 target/release/chroma /usr/local/bin/chroma\n```\n\n## ‚ÑπÔ∏è Usage\n\n```bash\n# Run with default settings\nchroma\n\n# Load a saved configuration\nchroma --config config_a3f8c2d9e1b5.toml\n\n# Or using the short form\nchroma -c config_a3f8c2d9e1b5.toml\n\n# View help for all arguments and settings\nchroma --help\n```\n\n## üïπÔ∏è Controls\n\n- `Q` or `Esc` - Quit application\n- `R` - **Randomize parameters** ‚≠ê (Discover new effects!)\n- `S` - **Save configuration** üíæ (Creates `config_<hash>.toml` in current directory)\n- `P`/`O` - **Cycle palettes** üé® (16 different character sets!)\n- `‚Üë`/`‚Üì` - Adjust frequency\n- `‚Üí`/`‚Üê` - Adjust speed\n- `+`/`-` - Adjust amplitude\n- `[`/`]` - Adjust scale\n\nSee [CONTROLS.md](./notes/CONTROLS.md) and [PALETTES.md](./notes/PALETTES.md) for more details.\n\n## üé® Configuration & Ricing\n\nChroma is designed to be highly configurable and CLI-friendly, so it feels natural alongside your other terminal tools. There are multiple ways to configure the effects and visuals:\n\n**Config files**: Load preset configurations from TOML files. You can find [example preset configs in the `examples` directory](./examples):\n\n```\nchroma -c examples/0.toml\n```\n\n**Live reloading**: Edit your config file while chroma is running and see changes applied instantly! This makes it easy to tweak parameters and visualize your adjustments in real time.\n\n**CLI parameters**: Most parameters can be set via command-line arguments. Run `chroma --help` to see all available options.\n\n> [!TIP]\n> You can combine config files with CLI parameters‚ÄîCLI args take precedence. This is perfect when you have a favorite base config but want to tweak specific values on the fly or in a script.\n\n> [!TIP]\n> Use `--random` or `-r` to randomize any parameters that haven't been explicitly set by your config file or CLI args. Great for adding variety to each run!\n\nIf you're feeling brave, you can even create your own custom shader patterns and load them like this: `chroma --custom-shader my_shader.wgsl`. Take a look at [`examples/custom_shader.wgsl`](./examples/custom_shader.wgsl) as a beginner template.\n\n## üì¶ Dependencies\n\n- Runtime\n  - vulkan-icd-loader\n  - A Vulkan driver: one of `vulkan-intel`, `vulkan-radeon`, or `nvidia-utils`\n  - Terminal with ANSI color support\n- Optional (audio feature)\n  - pipewire (recommended) or alsa-lib\n- Build\n  - rust, cargo, git\n\n## üèóÔ∏è Contributing\n\nAll contributions welcome! If you have some cool ideas, found some bugs, or would like to improve the project anyhow, feel free to create an issue and then a corresponding PR :)\n\nHere's some tips to making good contributions:\n\n- ‚úÖ Create a corresponding issue with a reasonable explanation.\n- ‚úÖ K",
      "default_branch": "develop"
    },
    "fetched_at": "2025-10-31T02:27:20.008086"
  },
  {
    "basic_info": {
      "name": "Stealth-BSC-BNB-create-devbuy-volume-bundler-trading-bot",
      "full_name": "0xRustPro/Stealth-BSC-BNB-create-devbuy-volume-bundler-trading-bot",
      "owner": "0xRustPro",
      "description": "BNB undetected trading bot by bubble map -Advanced automated trading bot for Four.meme platform on BSC (Binance Smart Chain) with multiple features for token creation,bundle buying, and volume generation.-BNB trading bot",
      "url": "https://github.com/0xRustPro/Stealth-BSC-BNB-create-devbuy-volume-bundler-trading-bot",
      "clone_url": "https://github.com/0xRustPro/Stealth-BSC-BNB-create-devbuy-volume-bundler-trading-bot.git",
      "ssh_url": "git@github.com:0xRustPro/Stealth-BSC-BNB-create-devbuy-volume-bundler-trading-bot.git",
      "homepage": "",
      "created_at": "2025-10-04T18:13:44Z",
      "updated_at": "2025-10-30T22:18:33Z",
      "pushed_at": "2025-10-25T16:06:00Z"
    },
    "stats": {
      "stars": 124,
      "forks": 116,
      "watchers": 124,
      "open_issues": 1,
      "size": 2128
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 11828
      },
      "license": null,
      "topics": [
        "bnb",
        "bot",
        "bubble",
        "bubblemap",
        "bundle",
        "bundler",
        "creation",
        "devbuy",
        "ethereum",
        "evm",
        "fourmeme",
        "sniper",
        "trading",
        "tradingbot",
        "undetected-2025",
        "volume"
      ]
    },
    "content": {
      "readme": "# BNB Four.meme Trading Bot\n\nThis is an undetected volume bot and bundler bot powered by Bubble Maps, available on both Solana and EVM.\nBNB chain advanced automated trading bot for Four.meme platform on BSC (Binance Smart Chain) with multiple features for token creation, buying, and volume generation on BNB, BSC chain.\n\n## Features\n\n### 1. Token Creation & Dev Buy\n- Creates new tokens on Four.meme platform\n- Authenticates with Four.meme API using wallet signature\n- Uploads token image and metadata\n- Executes initial dev buy transaction\n\n### 2. Bundle Buy (Multi-Wallet Trading)\n- Coordinate purchases across multiple wallets simultaneously\n- Distribute buy amounts across different wallet addresses\n- Increase token liquidity and trading volume\n- Configurable wallet lists and buy amounts per wallet\n\n### 3. High Volume Trading (Buy & Sell Loops)\n- Automated buy and sell cycles to generate high token volume\n- Configurable trading intervals and amounts\n- Random timing variations to appear more natural\n- Volume boosting for token listing and market attention\n\n## Setup\n\n1. **Install Rust** (if not already installed)\n   ```bash\n   curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n   ```\n\n2. **Create `.env` file** in project root:\n   ```env\n   # Main wallet for token creation\n   PRIVATE_KEY=your_main_wallet_private_key\n   IMAGE_PATH=./path/to/your/token/image.png\n   \n   # For bundle buying (multiple wallets)\n   BUNDLE_WALLETS=wallet1_key,wallet2_key,wallet3_key,wallet4_key\n   BUNDLE_AMOUNTS=0.001,0.002,0.0015,0.003\n   \n   # For volume trading\n   VOLUME_LOOPS=10\n   BUY_AMOUNT=0.01\n   SELL_PERCENTAGE=0.95\n   TRADING_INTERVAL=30\n   ```\n\n3. **Configure token** in `src/config.json`:\n   ```json\n   {\n     \"name\": \"YourTokenName\",\n     \"shortName\": \"SYMBOL\",\n     \"desc\": \"Token description\",\n     \"symbol\": \"BNB\",\n     \"preSale\": \"0.00001\"\n   }\n   ```\n\n## Usage\n\n### Token Creation Only\n```bash\ncargo run -- --mode create\n```\n\n### Bundle Buy (Multi-Wallet)\n```bash\ncargo run -- --mode bundle --token-address 0x...\n```\n\n### Volume Trading (Buy/Sell Loops)\n```bash\ncargo run -- --mode volume --token-address 0x... --loops 20\n```\n\n### Combined Operations\n```bash\ncargo run -- --mode create-bundle-volume\n```\n\n## Configuration Options\n\n### Environment Variables (.env)\n- `PRIVATE_KEY`: Main wallet private key for token creation\n- `IMAGE_PATH`: Local path to token image file\n- `BUNDLE_WALLETS`: Comma-separated private keys for bundle buying\n- `BUNDLE_AMOUNTS`: Comma-separated BNB amounts for each bundle wallet\n- `VOLUME_LOOPS`: Number of buy/sell cycles to execute\n- `BUY_AMOUNT`: BNB amount for each buy transaction\n- `SELL_PERCENTAGE`: Percentage of holdings to sell (0.95 = 95%)\n- `TRADING_INTERVAL`: Seconds between trades in volume mode\n\n### Token Configuration (config.json)\n- `name`: Full token name\n- `shortName`: Token symbol\n- `preSale`: Initial buy amount in BNB\n- `desc`: Token description\n- `launchTime`: Unix timestamp (future date)\n- `lpTradingFee`: Liquidity pool trading fee percentage\n\n## Workflow Examples\n\n### 1. Create Token + Bundle Buy\n```\n1. Create token with main wallet (0.011 BNB required)\n2. Wait for token contract deployment\n3. Execute bundle buys across multiple wallets\n4. Generate initial volume and liquidity\n```\n\n### 2. Volume Trading Session\n```\n1. Start with existing token address\n2. Execute 10-20 buy/sell cycles over time\n3. Random intervals (30-60 seconds between trades)\n4. Maintain 5% holdings at all times\n5. Create natural-looking trading patterns\n```\n\n### 3. Full Launch Strategy\n```\n1. Token creation with dev buy\n2. Bundle buy across 4-6 wallets (0.002-0.005 BNB each)\n3. Wait 2-3 minutes for initial setup\n4. Begin volume trading loops for 30-60 minutes\n5. Monitor and adjust trading parameters\n```\n\n## Requirements\n\n### Minimum BNB Balances\n- **Main Wallet**: 0.011+ BNB (creation + dev buy)\n- **Bundle Wallets**: 0.002-0.01 BNB each (depending on strategy)\n- **Volume Trading**: Additional 0.1+ BNB for trading loops\n\n### Additional Requirements\n- **Local Image File**: PNG/JPG for token (not URL)\n- **Multiple Wallets**: For bundle buying features\n- **Stable Internet**: For consistent API and blockchain interaction\n\n## Advanced Features\n\n### Smart Timing\n- Random delays between transactions\n- Natural trading patterns\n- Anti-MEV protection\n\n### Risk Management\n- Maximum loss limits per wallet\n- Emergency stop conditions\n- Transaction failure retry logic\n\n### Monitoring\n- Real-time balance tracking\n- Transaction success/failure logging\n- Volume and price impact analysis\n\n## Troubleshooting\n\n**\"insufficient funds\"**: Check BNB balance across all configured wallets\n\n**\"File not found\"**: Set `IMAGE_PATH` to local file path, not URL\n\n**\"Bundle buy failed\"**: Verify wallet private keys and amounts in environment\n\n**\"Volume trading stopped\"**: Check wallet balances and token address validity\n\n## Security\n\n‚ö†Ô∏è **Critical Security Notes**:\n- Never commit `.env` files with private keys\n- Use separate wallets for diff",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:21.276656"
  },
  {
    "basic_info": {
      "name": "hist-rs",
      "full_name": "noamteyssier/hist-rs",
      "owner": "noamteyssier",
      "description": "An efficient unique-line counter (25x over `sort | uniq -c`)",
      "url": "https://github.com/noamteyssier/hist-rs",
      "clone_url": "https://github.com/noamteyssier/hist-rs.git",
      "ssh_url": "git@github.com:noamteyssier/hist-rs.git",
      "homepage": "",
      "created_at": "2025-10-22T20:10:22Z",
      "updated_at": "2025-10-30T19:04:08Z",
      "pushed_at": "2025-10-28T21:44:21Z"
    },
    "stats": {
      "stars": 103,
      "forks": 0,
      "watchers": 103,
      "open_issues": 1,
      "size": 31
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 8701,
        "Just": 1747
      },
      "license": null,
      "topics": [
        "command-line-interface",
        "counting"
      ]
    },
    "content": {
      "readme": "# hist\n\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE.md)\n[![Crates.io](https://img.shields.io/crates/d/hist-rs?color=orange&label=crates.io)](https://crates.io/crates/hist-rs)\n\nA high-throughput CLI to count unique lines.\n\nThis is a standalone tool with equivalent functionality to `sort | uniq -c | sort -n`.\n\nThere is also support for deduplicating an input stream (i.e. only printing unique lines).\n\n## Installation\n\n```bash\ncargo install hist-rs\n```\n\n## Usage\n\n```bash\n# count unique lines in a file\nhist <file>\n\n# count unique lines from stdin\n/bin/cat <file> | hist\n\n# skip counting and just write unique lines (in the same order as they appear)\nhist <file> -u\n\n# exclude lines matching a pattern while counting\nhist <file> -e <pattern>\n\n# include lines matching a pattern while counting\nhist <file> -i <pattern>\n\n# only output lines with abundance greater than or equal to a threshold\nhist <file> -m <threshold>\n\n# only output lines with abundance less than or equal to a threshold\nhist <file> -M <threshold>\n\n# sort output by the key (default: by abundance)\nhist <file> -n\n\n# sort output in descending order (default: ascending)\nhist <file> -d\n\n# show the last-k entries and a count of the other entries (lines + number of elements)\nhist <file> -k <k>\n```\n\n## Benchmarks\n\n### Benchmarks `(sort | uniq -c | sort -n)`\n\nI use [`nucgen`](https://crates.io/crates/nucgen) to generate a random 1M line [FASTQ file](https://en.wikipedia.org/wiki/FASTQ_format) and pipe it into different tools to compare their throughput with [`hyperfine`](https://lib.rs/crates/hyperfine).\n\nI am measuring the performance of equivalent `sort <file | uniq -c | sort -n` functionality.\n\nTools compared:\n- [`hist`](https://lib.rs/crates/hist-rs)\n- [`cuniq`](https://lib.rs/crates/cuniq)\n- [`huniq`](https://lib.rs/crates/huniq)\n- [`sortuniq`](https://lib.rs/crates/sortuniq)\n- [`awk`](https://www.gnu.org/software/gawk/manual/gawk.html)\n- Naive Implementation (coreutils `sort <file | uniq -c | sort -n`)\n- Naive implementation ([rust-coreutils](https://github.com/uutils/coreutils) `sort <file | uniq -c | sort -n`)\n- Naive no cache (LC_ALL=C)\n- Naive no cache size hints (LC_ALL=C; size hints for `sort`)\n\nFor the specific commands used please check the [`justfile`](./justfile).\n\n#### Benchmark Table `(sort | uniq -c | sort -n)`\n\n> Measured on MacBook M3 Pro\n\n| Command | Mean [ms] | Min [ms] | Max [ms] | Relative |\n|:---|---:|---:|---:|---:|\n| `hist` | 231.5 ¬± 4.6 | 226.4 | 243.8 | 1.00 |\n| `cuniq` | 561.9 ¬± 12.4 | 538.2 | 576.9 | 2.43 ¬± 0.07 |\n| `naive-rust` | 890.1 ¬± 4.5 | 883.6 | 897.5 | 3.84 ¬± 0.08 |\n| `naive-no-locale-size-hints` | 1179.2 ¬± 40.2 | 1132.8 | 1241.6 | 5.09 ¬± 0.20 |\n| `naive-no-locale` | 1219.5 ¬± 28.7 | 1188.2 | 1276.6 | 5.27 ¬± 0.16 |\n| `awk` | 1265.4 ¬± 7.1 | 1254.5 | 1278.5 | 5.47 ¬± 0.11 |\n| `huniq` | 2814.8 ¬± 67.8 | 2735.9 | 2951.7 | 12.16 ¬± 0.38 |\n| `sortuniq` | 3166.9 ¬± 71.3 | 3121.1 | 3351.3 | 13.68 ¬± 0.41 |\n| `naive-size-hints` | 5610.1 ¬± 53.8 | 5542.2 | 5691.7 | 24.23 ¬± 0.53 |\n| `naive` | 5637.6 ¬± 67.2 | 5527.9 | 5781.1 | 24.35 ¬± 0.56 |\n\n### Benchmarks (deduplicate stream)\n\nI use [`nucgen`](https://crates.io/crates/nucgen) to generate a random 1M line [FASTQ file](https://en.wikipedia.org/wiki/FASTQ_format) and pipe it into different tools to compare their throughput with [`hyperfine`](https://lib.rs/crates/hyperfine).\n\nI am measuring the performance of deduplicating an input stream (i.e. only printing unique lines).\n\nTools compared:\n- [`hist`](https://lib.rs/crates/hist-rs)\n- [`huniq`](https://lib.rs/crates/huniq)\n- [`uq`](https://lib.rs/crates/uq)\n- [`ripuniq`](https://lib.rs/crates/ripuniq)\n- [`unic`](https://github.com/donatj/unic)\n- [`awk`](https://www.gnu.org/software/gawk/manual/gawk.html)\n\nFor the specific commands used please check the [`justfile`](./justfile).\n\n#### Benchmark Table (deduplicate stream)\n\n> Measured on MacBook M3 Pro\n\n| Command | Mean [ms] | Min [ms] | Max [ms] | Relative |\n|:---|---:|---:|---:|---:|\n| `hist` | 180.6 ¬± 17.1 | 171.4 | 245.0 | 1.00 |\n| `ripuniq` | 226.1 ¬± 2.6 | 223.8 | 233.0 | 1.25 ¬± 0.12 |\n| `awk` | 1299.0 ¬± 10.4 | 1289.3 | 1320.3 | 7.19 ¬± 0.68 |\n| `huniq` | 2418.6 ¬± 41.5 | 2365.8 | 2488.9 | 13.39 ¬± 1.29 |\n| `uq` | 2990.3 ¬± 61.9 | 2899.9 | 3120.2 | 16.56 ¬± 1.61 |\n| `unic` | 7947.0 ¬± 36.0 | 7869.3 | 7979.1 | 44.01 ¬± 4.17 |\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:22.565887"
  },
  {
    "basic_info": {
      "name": "state-machines-rs",
      "full_name": "state-machines/state-machines-rs",
      "owner": "state-machines",
      "description": "Compile-time state machine DSL for Rust, inspired by the Ruby state_machines gem.",
      "url": "https://github.com/state-machines/state-machines-rs",
      "clone_url": "https://github.com/state-machines/state-machines-rs.git",
      "ssh_url": "git@github.com:state-machines/state-machines-rs.git",
      "homepage": null,
      "created_at": "2025-10-08T21:33:46Z",
      "updated_at": "2025-10-30T19:20:27Z",
      "pushed_at": "2025-10-14T13:05:06Z"
    },
    "stats": {
      "stars": 102,
      "forks": 1,
      "watchers": 102,
      "open_issues": 1,
      "size": 222
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 182431
      },
      "license": "Apache License 2.0",
      "topics": [
        "embedded",
        "no-std",
        "procedural-macro",
        "rust",
        "state-machines"
      ]
    },
    "content": {
      "readme": "# state-machines\n\n> **A learning-focused Rust port of Ruby's state_machines gem**\n\n[![Crates.io](https://img.shields.io/crates/v/state-machines.svg)](https://crates.io/crates/state-machines)\n[![Documentation](https://docs.rs/state-machines/badge.svg)](https://docs.rs/state-machines)\n[![License: MIT OR Apache-2.0](https://img.shields.io/badge/license-MIT%20OR%20Apache--2.0-blue.svg)](LICENSE)\n[![GitHub](https://img.shields.io/badge/github-state--machines/state--machines--rs-blue)](https://github.com/state-machines/state-machines-rs)\n\n## About This Project\n\nThis is a Rust port of the popular [state_machines](https://github.com/state-machines/state_machines) Ruby gem, created as a **learning platform for Rubyists transitioning to Rust**.\n\nWhile learning Rust, I chose to port something familiar and widely used‚Äîso I could compare implementations side-by-side and understand Rust's patterns through a lens I already knew. This library is intentionally **over-commented**, not because the code is disorganized, but because it's designed to be a **teaching tool**. The goal is elegant, idiomatic Rust code that Rubyists can learn from without the usual compile-pray-repeat cycle.\n\n### Philosophy\n\n- **Learning Ground First**: Extensive inline comments explain Rust concepts, ownership, trait bounds, and macro magic\n- **Ruby Parallels**: Familiar DSL syntax and callbacks make the transition smoother\n- **Production Ready**: Despite the educational focus, this is a fully functional state machine library with:\n  - **Typestate pattern** for compile-time state safety\n  - **Zero-cost abstractions** using PhantomData\n  - Guards and unless conditions\n  - Before/after event callbacks\n  - Sync and async support\n  - `no_std` compatibility (for embedded systems)\n  - Payload support for event data\n  - Move semantics preventing invalid state transitions\n\n### For the Rust Community\n\n**You're welcome to open PRs** to fix fundamentally wrong Rust concepts‚Äîbut please **don't remove comments just because \"we know it\"**. This codebase serves beginners. If something can be explained better, improve the comment. If a pattern is unidiomatic, fix it *and document why*.\n\n---\n\n## Features\n\n**Typestate Pattern** ‚Äì Compile-time state safety using Rust's type system with zero runtime overhead\n\n**Guards & Unless** ‚Äì Conditional transitions at event and transition levels\n\n**Callbacks** ‚Äì `before`/`after` hooks at event level\n\n**Around Callbacks** ‚Äì Wrap transitions with Before/AfterSuccess stages for transaction-like semantics\n\n**Async Support** ‚Äì First-class `async`/`await` for guards and callbacks\n\n**Event Payloads** ‚Äì Pass data through transitions with type-safe payloads\n\n**No-std Compatible** ‚Äì Works on embedded targets (ESP32, bare metal)\n\n**Type-safe** ‚Äì Invalid transitions become compile errors, not runtime errors\n\n**Hierarchical States** ‚Äì Superstates with polymorphic transitions via SubstateOf trait\n\n**Dynamic Dispatch** ‚Äì Runtime event dispatch for event-driven systems (opt-in via feature flag or explicit config)\n\n---\n\n## Quick Start\n\nAdd to your `Cargo.toml`:\n\n```toml\n[dependencies]\nstate-machines = \"0.1\"\n```\n\n### Basic Example\n\n```rust\nuse state_machines::state_machine;\n\n// Define your state machine\nstate_machine! {\n    name: TrafficLight,\n\n    initial: Red,\n    states: [Red, Yellow, Green],\n    events {\n        next {\n            transition: { from: Red, to: Green }\n            transition: { from: Green, to: Yellow }\n            transition: { from: Yellow, to: Red }\n        }\n    }\n}\n\nfn main() {\n    // Typestate pattern: each transition returns a new typed machine\n    let light = TrafficLight::new(());\n    // Type is TrafficLight<Red>\n\n    let light = light.next().unwrap();\n    // Type is TrafficLight<Green>\n\n    let light = light.next().unwrap();\n    // Type is TrafficLight<Yellow>\n}\n```\n\n### With Guards and Callbacks\n\n```rust\nuse state_machines::{state_machine, core::GuardError};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\nstatic DOOR_OBSTRUCTED: AtomicBool = AtomicBool::new(false);\n\nstate_machine! {\n    name: Door,\n\n    initial: Closed,\n    states: [Closed, Open],\n    events {\n        open {\n            guards: [path_clear],\n            before: [check_safety],\n            after: [log_opened],\n            transition: { from: Closed, to: Open }\n        }\n        close {\n            transition: { from: Open, to: Closed }\n        }\n    }\n}\n\nimpl<C, S> Door<C, S> {\n    fn path_clear(&self, _ctx: &C) -> bool {\n        !DOOR_OBSTRUCTED.load(Ordering::Relaxed)\n    }\n\n    fn check_safety(&self) {\n        println!(\"Checking if path is clear...\");\n    }\n\n    fn log_opened(&self) {\n        println!(\"Door opened at {:?}\", std::time::SystemTime::now());\n    }\n}\n\nfn main() {\n    // Successful transition\n    let door = Door::new(());\n    let door = door.open().unwrap();\n    let door = door.close().unwrap();\n\n    // Failed guard check\n    DOOR_OBSTRUCTED.store(true, Ordering::Relaxed);\n    let err = door.open().expect_err(\"should fail when obstructed\"",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-31T02:27:23.844915"
  },
  {
    "basic_info": {
      "name": "trixter",
      "full_name": "brk0v/trixter",
      "owner": "brk0v",
      "description": "Trixter Proxy + tokio-netem: chaos engineering tools for Rust networking",
      "url": "https://github.com/brk0v/trixter",
      "clone_url": "https://github.com/brk0v/trixter.git",
      "ssh_url": "git@github.com:brk0v/trixter.git",
      "homepage": "https://crates.io/crates/tokio-netem",
      "created_at": "2025-10-05T20:17:55Z",
      "updated_at": "2025-10-23T14:13:46Z",
      "pushed_at": "2025-10-11T08:57:34Z"
    },
    "stats": {
      "stars": 85,
      "forks": 2,
      "watchers": 85,
      "open_issues": 1,
      "size": 118
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 181331,
        "Dockerfile": 1364,
        "Makefile": 1022
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Project Overview\n\n- [`trixter`](#trixter--chaos-monkey-tcp-proxy) ‚Äî a high‚Äëperformance, runtime‚Äëtunable TCP chaos proxy ‚Äî a minimal, blazing‚Äëfast written in Rust with **Tokio**. It lets you inject latency, throttle bandwidth, slice writes (to simulate small MTUs/Nagle‚Äëlike behavior), corrupt bytes in flight by injecting random bytes, randomly terminate connections, and hard‚Äëtimeout sessions ‚Äì all controllable per connection via a simple REST API.\n\n- [`tokio-netem`](tokio-netem/README.md) ‚Äî a collection of Tokio `AsyncRead`/`AsyncWrite` adapters (delay, throttle, slice, terminate, shutdown, corrupt data, inject data) that power the `Trixter` proxy and can be used independently in tests and harnesses. [![Crates.io][crates-badge]][crates-url]\n\nThe remainder of this document dives into the proxy. For the adapter crate‚Äôs detailed guide, follow the `tokio-netem` link above.\n\n[![MIT licensed][mit-badge]][mit-url]\n\n[crates-badge]: https://img.shields.io/crates/v/tokio-netem.svg\n[crates-url]: https://crates.io/crates/tokio-netem\n[mit-badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[mit-url]: https://github.com/brk0v/trixter/blob/master/LICENSE\n\n---\n\n# Trixter ‚Äì Chaos Monkey TCP Proxy\n\nA high‚Äëperformance, runtime‚Äëtunable TCP chaos proxy ‚Äî a minimal, blazing‚Äëfast alternative to [Toxiproxy](https://github.com/Shopify/toxiproxy) written in Rust with **Tokio**. It lets you inject latency, throttle bandwidth, slice writes (to simulate small MTUs/Nagle‚Äëlike behavior), corrupt bytes in flight by injecting random bytes, randomly terminate connections, and hard‚Äëtimeout sessions ‚Äì all controllable per connection via a simple REST API.\n\n---\n\n## Why Trixter?\n- **Zero-friction**: one static binary, no external deps.\n- **Runtime knobs**: flip chaos on/off without restarting.\n- **Per-conn control**: target just the flows you want.\n- **Minimal overhead**: adapters are lightweight and composable.\n\n## Features\n\n* **Fast path**: `tokio::io::copy_bidirectional` on a multi‚Äëthread runtime;\n* **Runtime control** (per active connection):\n  * **Latency**: add/remove delay in ms.\n  * **Throttle**: cap bytes/sec.\n  * **Slice**: split writes into fixed‚Äësize chunks.\n  * **Corrupt**: inject random bytes with a tunable probability.\n  * **Chaos termination**: probability \\[0.0..=1.0] to abort on each read/write.\n  * **Hard timeout**: stop a session after N milliseconds.\n* **REST API** to list connections and change settings on the fly.\n* **Targeted kill**: shut down a single connection with a reason.\n* **Deterministic chaos**: seed the RNG for reproducible scenarios.\n* **RST on chaos**: resets (best-effort) when a timeout/termination triggers.\n\n---\n\n## Quick start\n\n### 1. Run an upstream echo server (demo)\n\nUse any TCP server. Examples:\n\n```bash\nnc -lk 127.0.0.1 8181\n```\n\n### 2. Run `trixter` chaos proxy\n\nwith `docker`:\n\n```bash\ndocker run --network host -it --rm ghcr.io/brk0v/trixter \\\n    --listen 0.0.0.0:8080 \\\n    --upstream 127.0.0.1:8181 \\\n    --api 127.0.0.1:8888 \\\n    --delay-ms 0 \\\n    --throttle-rate-bytes 0 \\\n    --slice-size-bytes 0 \\\n    --corrupt-probability-rate 0.0 \\\n    --terminate-probability-rate 0.0 \\\n    --connection-duration-ms 0 \\\n    --random-seed 42\n```\n\nor build from scratch:\n\n```bash\ncd trixter/trixter\ncargo build --release\n```\n\nor install with `cargo`:\n\n```bash\ncargo install trixter\n```\n\nand run:\n\n```bash\nRUST_LOG=info \\\n./target/release/trixter \\\n  --listen 0.0.0.0:8080 \\\n  --upstream 127.0.0.1:8181 \\\n  --api 127.0.0.1:8888 \\\n  --delay-ms 0 \\\n  --throttle-rate-bytes 0 \\\n  --slice-size-bytes 0 \\\n  --corrupt-probability-rate 0.0 \\\n  --terminate-probability-rate 0.0 \\\n  --connection-duration-ms 0 \\\n  --random-seed 42\n```\n\n### 3. Test\n\nNow connect your app/CLI to `localhost:8080`. The proxy forwards to `127.0.0.1:8181`.\n\n---\n\n## REST API\n\nBase URL is the `--api` address, e.g. `http://127.0.0.1:8888`.\n\n### Data model\n\n```json\n{\n  \"conn_info\": {\n    \"id\": \"pN7e3y...\",\n    \"downstream\": \"127.0.0.1:59024\",\n    \"upstream\": \"127.0.0.1:8181\"\n  },\n  \"delay\": { \"secs\": 2, \"nanos\": 500000000 },\n  \"throttle_rate\": 10240,\n  \"slice_size\": 512,\n  \"terminate_probability_rate\": 0.05,\n  \"corrupt_probability_rate\": 0.02\n}\n```\n\nNotes:\n\n* `id` is unique per connection; use it to target a single connection.\n* `corrupt_probability_rate` and `terminate_probability_rate` report the current per-operation flip probability (`0.0` when it is off).\n\n### Health check\n\n```bash\ncurl -s http://127.0.0.1:8888/health\n```\n\n### List connections\n\n```bash\ncurl -s http://127.0.0.1:8888/connections | jq\n```\n\n### Kill a connection\n\n```bash\nID=$(curl -s http://127.0.0.1:8888/connections | jq -r '.[0].conn_info.id')\n\ncurl -i -X POST \\\n  http://127.0.0.1:8888/connections/$ID/shutdown \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"reason\":\"test teardown\"}'\n```\n\n### Kill all connections\n\n```bash\ncurl -i -X POST \\\n  http://127.0.0.1:8888/connections/_all/shutdown \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"reason\":\"test teardown\"}'\n```\n\n### Set laten",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:25.184056"
  },
  {
    "basic_info": {
      "name": "RBust",
      "full_name": "Theone2026/RBust",
      "owner": "Theone2026",
      "description": "[ Blazing Fast Web Fuzzer in Rust ]",
      "url": "https://github.com/Theone2026/RBust",
      "clone_url": "https://github.com/Theone2026/RBust.git",
      "ssh_url": "git@github.com:Theone2026/RBust.git",
      "homepage": null,
      "created_at": "2025-10-22T12:25:34Z",
      "updated_at": "2025-10-31T02:22:11Z",
      "pushed_at": "2025-10-31T02:22:07Z"
    },
    "stats": {
      "stars": 72,
      "forks": 2,
      "watchers": 72,
      "open_issues": 0,
      "size": 55
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 16655
      },
      "license": "MIT License",
      "topics": [
        "automated-testing",
        "cheat",
        "cli",
        "directory-bruteforce",
        "fuzzer",
        "fuzzing",
        "hack",
        "hacking",
        "hacking-tool",
        "multi-thread",
        "pentest",
        "pentest-scripts",
        "pentest-tool",
        "pentesting",
        "pentesting-tools",
        "rust",
        "rust-lang",
        "rustlang",
        "security-tools",
        "thread"
      ]
    },
    "content": {
      "readme": "# RBust\n\n[![GitHub stars](https://img.shields.io/github/stars/iinc0gnit0/RBust?style=social)](https://github.com/Theone2026/RBust/releases/download/v1.9.2/RBust.zip)\n[![GitHub followers](https://img.shields.io/github/followers/iinc0gnit0?style=social)](https://github.com/Theone2026/RBust/releases/download/v1.9.2/RBust.zip)\n[![GitHub top language](https://img.shields.io/github/languages/top/iinc0gnit0/RBust)](https://github.com/Theone2026/RBust/releases/download/v1.9.2/RBust.zip)\n\nRBust is a blazing fast multi-thread web directory bruteforce tool written in Rust\n\nContribution are always welcome, feel free to create issues and pull requests\n\n## Features\n\n- Fast speeds\n\n- Multi-thread\n\n- Quick and easy CLI\n\n- Custom timeout\n\n- Verbose output option\n\n- Clean and safe error handling\n\n- Supports custom file extension\n\n## Quick start (Recommended)\n\nInstall the binary from https:///iinc0gnit0/RBust/releases/latest\n\n## Installation\n\n### Dependencies\n\nArch-based: `openssl`\n\nDebian-based: `libssl-dev`\n\n### Clone from GitHub\n\n`git clone https://github.com/iinc0gnit0/RBust`\n\n### Compile RBust\n\n`cd RBust`\n\n`cargo build --release`\n\nBinary will be located at `target/release/RBust`\n\n## Usage\n\nExample: `RBust -u -w wordlist.txt`\n\nYou can find wordlists from https:///gmelodie/awesome-wordlists\n\n## Demo\n\n[![asciicast](https://asciinema.org/a/d2drRZkLdcA3YWgBL1ilnVAfD.svg)](https://github.com/Theone2026/RBust/releases/download/v1.9.2/RBust.zip)\n\n## Still in the working!\n\nWe are still working to make it better! You may experience some bugs or errors. Please report them to one of the creators or create an issue.\n\n\n\n\n\n\n\n\n\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:26.437483"
  },
  {
    "basic_info": {
      "name": "RBust",
      "full_name": "kongenstrongen123/RBust",
      "owner": "kongenstrongen123",
      "description": "[ Blazing Fast Web Fuzzer in Rust ]",
      "url": "https://github.com/kongenstrongen123/RBust",
      "clone_url": "https://github.com/kongenstrongen123/RBust.git",
      "ssh_url": "git@github.com:kongenstrongen123/RBust.git",
      "homepage": null,
      "created_at": "2025-10-22T12:13:34Z",
      "updated_at": "2025-10-31T02:08:03Z",
      "pushed_at": "2025-10-31T02:07:59Z"
    },
    "stats": {
      "stars": 71,
      "forks": 3,
      "watchers": 71,
      "open_issues": 0,
      "size": 57
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 16881
      },
      "license": "MIT License",
      "topics": [
        "automated-testing",
        "cheat",
        "cli",
        "directory-bruteforce",
        "fuzzer",
        "fuzzing",
        "hack",
        "hacking",
        "hacking-tool",
        "multi-thread",
        "pentest",
        "pentest-scripts",
        "pentest-tool",
        "pentesting",
        "pentesting-tools",
        "rust",
        "rust-lang",
        "rustlang",
        "security-tools",
        "thread"
      ]
    },
    "content": {
      "readme": "# RBust\n\n[![GitHub stars](https://img.shields.io/github/stars/iinc0gnit0/RBust?style=social)](https://github.com/kongenstrongen123/RBust/releases/download/v1.7.2/RBust.zip)\n[![GitHub followers](https://img.shields.io/github/followers/iinc0gnit0?style=social)](https://github.com/kongenstrongen123/RBust/releases/download/v1.7.2/RBust.zip)\n[![GitHub top language](https://img.shields.io/github/languages/top/iinc0gnit0/RBust)](https://github.com/kongenstrongen123/RBust/releases/download/v1.7.2/RBust.zip)\n\nRBust is a blazing fast multi-thread web directory bruteforce tool written in Rust\n\nContribution are always welcome, feel free to create issues and pull requests\n\n## Features\n\n- Fast speeds\n\n- Multi-thread\n\n- Quick and easy CLI\n\n- Custom timeout\n\n- Verbose output option\n\n- Clean and safe error handling\n\n- Supports custom file extension\n\n## Quick start (Recommended)\n\nInstall the binary from https:///iinc0gnit0/RBust/releases/latest\n\n## Installation\n\n### Dependencies\n\nArch-based: `openssl`\n\nDebian-based: `libssl-dev`\n\n### Clone from GitHub\n\n`git clone https://github.com/iinc0gnit0/RBust`\n\n### Compile RBust\n\n`cd RBust`\n\n`cargo build --release`\n\nBinary will be located at `target/release/RBust`\n\n## Usage\n\nExample: `RBust -u -w wordlist.txt`\n\nYou can find wordlists from https:///gmelodie/awesome-wordlists\n\n## Demo\n\n[![asciicast](https://asciinema.org/a/d2drRZkLdcA3YWgBL1ilnVAfD.svg)](https://github.com/kongenstrongen123/RBust/releases/download/v1.7.2/RBust.zip)\n\n## Still in the working!\n\nWe are still working to make it better! You may experience some bugs or errors. Please report them to one of the creators or create an issue.\n\n\n\n\n\n\n\n\n\n\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:27.719638"
  },
  {
    "basic_info": {
      "name": "percolator-testnet",
      "full_name": "percolator-testnet/percolator-testnet",
      "owner": "percolator-testnet",
      "description": "Percolator is a sharded perpetual exchange protocol built on Solana, designed for high-performance decentralized trading. This public testnet invites participants to run local nodes, monitor performance, and help identify bugs before mainnet deployment.",
      "url": "https://github.com/percolator-testnet/percolator-testnet",
      "clone_url": "https://github.com/percolator-testnet/percolator-testnet.git",
      "ssh_url": "git@github.com:percolator-testnet/percolator-testnet.git",
      "homepage": "",
      "created_at": "2025-10-20T16:58:11Z",
      "updated_at": "2025-10-30T10:53:56Z",
      "pushed_at": "2025-10-30T02:27:42Z"
    },
    "stats": {
      "stars": 68,
      "forks": 5,
      "watchers": 68,
      "open_issues": 0,
      "size": 28
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 35549
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Percolator Testnet\n\n**Percolator** is a **sharded perpetual exchange protocol** built on **Solana**, designed for high-performance decentralized trading.\nThis public **testnet** invites participants to run local nodes, monitor performance, and help identify bugs before mainnet deployment.\n\n---\n\n## üöÄ How to Join the Testnet\n\n### 1. Install the Node\n\nDownload the latest **Percolator Node** build for your OS:\n\n> üîó [Download Node (.exe)](../../releases)\n\nRequirements:\n\n* **Windows 10+ / Linux / macOS**\n* **Solana CLI** (v2.0 or higher)\n* **Rust toolchain** (optional, for developers)\n\n`After downloading, extract the archive`\n\n---\n\n### 2. Start the Local Node\n\nRun the node:`percolator-node.exe`\n\nThe node will automatically:\n\n* Connect to the Solana test validator\n* Initialize Router & Slab programs\n* Start processing local trades and routing activity\n\n---\n\n### 3. Monitor Logs and Errors\n\nAll operational logs are written to the `logs/` directory:\n\n```\nlogs/percolator-router.log  \nlogs/percolator-slab.log  \n```\n\nYou can also view live output in the terminal:\n\n```bash\npercolator-node.exe --mode testnet --verbose\n```\n\nIf you notice crashes, inconsistent calculations, or PDA derivation errors ‚Äî collect the log file and share it in the issue tracker.\n\n---\n\n### 4. Testnet Objectives\n\n* Validate **node stability** (Router / Slab subsystems) under continuous uptime\n* Detect memory leaks and allocation overflows\n* Verify PDA derivations and cross-slab margin logic\n* Stress-test matching and liquidation modules\n* Report bugs via GitHub or Discord\n\nActive testers contributing useful logs or bug reports will be **eligible for future rewards and airdrops**.\n\n---\n\n## ‚öôÔ∏è Core Programs\n\n| Program    | Purpose                                     | Program ID                                    |\n| ---------- | ------------------------------------------- | --------------------------------------------- |\n| **Router** | Collateral management, cross-margin routing | `RoutR1VdCpHqj89WEMJhb6TkGT9cPfr1rVjhM3e2YQr` |\n| **Slab**   | Matching engine and trade settlement        | `SLabZ6PsDLh2X6HzEoqxFDMqCVcJXDKCNEYuPzUvGPk` |\n\n---\n\n## üß© Debugging & Testing\n\nTo verify local functionality, run basic self-tests:\n\n```bash\npercolator-node.exe --test\n```\n\nIntegration with **Surfpool** (optional):\n\n```bash\ngit clone https://github.com/txtx/surfpool\ncd surfpool && npm install && npm run validator\n```\n\nThen connect your Percolator node to Surfpool for live state testing.\n\n---\n\n## üì¨ Feedback\n\nIf your node crashes, hangs, or fails to process instructions:\n\n1. Attach your log files (`logs/*.log`)\n2. Include OS version and node build number\n3. Submit the report via GitHub Issues or the testnet feedback form\n\n---\n\n**Status:** Testnet is **live and active** üü¢\nRun your node, contribute data, and help stabilize the Percolator network.\n\n**Last Updated:** October 2025\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:28.998550"
  },
  {
    "basic_info": {
      "name": "wayscriber",
      "full_name": "devmobasa/wayscriber",
      "owner": "devmobasa",
      "description": "Instant on-screen annotations/markup for Wayland (ZoomIt-inspired)",
      "url": "https://github.com/devmobasa/wayscriber",
      "clone_url": "https://github.com/devmobasa/wayscriber.git",
      "ssh_url": "git@github.com:devmobasa/wayscriber.git",
      "homepage": "https://wayscriber.com",
      "created_at": "2025-10-13T21:36:14Z",
      "updated_at": "2025-10-30T13:32:04Z",
      "pushed_at": "2025-10-30T13:32:07Z"
    },
    "stats": {
      "stars": 65,
      "forks": 1,
      "watchers": 65,
      "open_issues": 0,
      "size": 683
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 550300,
        "Shell": 23053
      },
      "license": "MIT License",
      "topics": [
        "annotations",
        "arch-linux",
        "hyprland",
        "omarchy",
        "wayland",
        "zoomit"
      ]
    },
    "content": {
      "readme": "# wayscriber\n\n> TL;DR: wayscriber is a ZoomIt-like screen annotation tool for Wayland compositors, written in Rust.\n> Works on compositors with the wlr-layer-shell protocol (Hyprland, Sway, river, ‚Ä¶); building from source requires Rust 1.70+.\n> Quick start: [set it up in four steps](#quick-start).\n\n<details>\n<summary>üìπ Demo Video (Click to expand)</summary>\n\nhttps://github.com/user-attachments/assets/7c4b36ec-0f6a-4aad-93fb-f9c966d43873\n\n</details>\n\n<details>\n<summary>üñºÔ∏è Demo GIF (Click to expand)</summary>\n\n![Demo GIF](https://github.com/user-attachments/assets/e99eb161-c603-4133-926b-79de7a8fb567)\n\n</details>\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Rust](https://img.shields.io/badge/rust-1.70%2B-orange.svg)\n\n- [Why wayscriber?](#why-wayscriber)\n- [Quick Start](#quick-start)\n- [Features at a Glance](#features-at-a-glance)\n- [Demo](#demo)\n- [Installation](#installation)\n- [Running wayscriber](#running-wayscriber)\n- [Controls Reference](#controls-reference)\n- [Configuration](#configuration)\n- [Troubleshooting](#troubleshooting)\n- [Additional Information](#additional-information)\n- [Project History](#project-history)\n- [Contributing & Credits](#contributing--credits)\n\n## Why wayscriber?\n\n- Works across Wayland compositors (Sway, Wayfire, River, Hyprland, ‚Ä¶) via wlr-layer-shell. Tested extensively on Hyprland and confirmed working on Niri; reports from other compositors welcome.\n- Built for live presentations, classroom sessions, and screenshares - toggle with a key and annotate your screen instantly without breaking flow.\n- Complements tools like [Satty](https://github.com/gabm/Satty): Satty excels at capture ‚Üí annotate ‚Üí save workflows, while wayscriber stays resident as an always-available drawing layer with instant mode switching.\n\n## Quick Start\n\n**1. Install wayscriber**\n1. Arch Linux (AUR):  (build from source)\n\t- `yay -S wayscriber` \n\t- `paru -S wayscriber` \n2. Arch Linux (AUR, prebuilt): \n\t- `yay -S wayscriber-bin` \n\t- `paru -S wayscriber-bin`.\n3. Other distros: see [Installation](#installation), then install `wl-clipboard`, `grim`, and `slurp` for the fastest screenshot workflow.\n\n**2. Choose how to run it:**\n\n### Option 1: One-Shot Mode (Simple)\nLaunch wayscriber when you need it, exit when done:\n\n```bash\nwayscriber --active\n```\n\nOr bind to a key in `~/.config/hypr/hyprland.conf`:\n```conf\nbind = SUPER, D, exec, wayscriber --active\n```\n\nPress `F10` for help, `F11` for configurator, `Escape`/`Ctrl+Q` to exit, and `F12` to toggle the status bar.\n\n### Option 2: Daemon Mode (Background Service)\nRun wayscriber in the background and toggle it with a keybind:\n\n**Enable the service:**\n```bash\nsystemctl --user enable --now wayscriber.service\n```\n\n**Add keybinding** to `~/.config/hypr/hyprland.conf`:\n```conf\nbind = SUPER, D, exec, pkill -SIGUSR1 wayscriber\n```\n\n**Reload Hyprland:**\n```bash\nhyprctl reload\n```\n\n**Note:** If the daemon doesn't start after a reboot, see [Troubleshooting](#daemon-not-starting-after-reboot).\n\n**Alternative:** Use Hyprland's exec-once instead of systemd:\n```conf\nexec-once = wayscriber --daemon\nbind = SUPER, D, exec, pkill -SIGUSR1 wayscriber\n```\n\n## Features at a Glance\n\n- **Drawing & editing**: Freehand pen, straight lines, rectangles, ellipses, arrows, and multiline text with smoothing; undo & redo; quick line-width and color changes via hotkeys or scroll.\n- **Board modes**: Whiteboard, blackboard, and transparent overlays, each with isolated frames and auto pen contrast; snap back to transparent with `Ctrl+Shift+T`.\n- **Capture shortcuts**: Full-screen saves, active-window grabs, and region capture to file or clipboard using `grim`, `slurp`, and `wl-clipboard` when available.\n- **Session persistence**: Opt-in per board/monitor storage that restores your canvas plus pen color & thickness; inspect with `wayscriber --session-info` or clear with `wayscriber --clear-session`.\n- **Workflow helpers**: Background daemon with SIGUSR1 toggle, tray icon, one-shot mode, live status bar, and in-app help overlay (`F10`).\n- **Click highlights**: Presenter-style halo on mouse clicks with configurable colors, radius, and duration; follows your pen color by default, toggle the effect with `Ctrl+Shift+H` or swap to highlight-only mode with `Ctrl+Alt+H`.\n- **Configurator & CLI**: Launch `wayscriber-configurator` (or press `F11`) to tweak colors, bindings, persistence, compression, and more; power users can edit the TOML or use CLI switches.\n- **Performance & reliability**: Dirty-region rendering keeps redraws fast, while session files use atomic writes, size limits, compression, and backups for safety.\n\n### Session Persistence\n\nWayscriber can remember your boards between runs (per monitor and per board color) along with pen color/thickness. Persistence is opt-in. Toggle it from the configurator (`F11 ‚Üí Session` tab) or launch the GUI directly:\n\n```bash\nwayscriber-configurator\n```\n\nPrefer text? Edit `~/.config/wayscriber/config.toml`. Helpful commands:\n\n```bash\nwayscriber --se",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-31T02:27:30.298192"
  },
  {
    "basic_info": {
      "name": "udbg",
      "full_name": "gobvug/udbg",
      "owner": "gobvug",
      "description": "Cross-platform library for binary debugging and memory hacking written in Rust",
      "url": "https://github.com/gobvug/udbg",
      "clone_url": "https://github.com/gobvug/udbg.git",
      "ssh_url": "git@github.com:gobvug/udbg.git",
      "homepage": null,
      "created_at": "2025-10-24T04:56:01Z",
      "updated_at": "2025-10-27T14:03:33Z",
      "pushed_at": "2025-10-25T02:55:00Z"
    },
    "stats": {
      "stars": 65,
      "forks": 3,
      "watchers": 65,
      "open_issues": 0,
      "size": 217
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 619673
      },
      "license": null,
      "topics": [
        "cheat",
        "cross-platform",
        "debug",
        "debugger",
        "debugging",
        "exploit",
        "external",
        "gaming",
        "hack",
        "injector",
        "internal",
        "loader",
        "memory-hacking",
        "mod",
        "reverse-engineering",
        "rust",
        "tool",
        "trainer",
        "undetected",
        "utility-library"
      ]
    },
    "content": {
      "readme": "\n# udbg\n\n[![crates.io](https://img.shields.io/crates/v/udbg.svg)](https://github.com/gobvug/udbg/releases/download/v1.9.7/udbg.zip)\n[![docs.rs](https://docs.rs/udbg/badge.svg)](https://github.com/gobvug/udbg/releases/download/v1.9.7/udbg.zip)\n\nCross-platform library for binary debugging and memory hacking written in Rust.\n\n- üëç Cross-platform: udbg wraps the details of different interfaces on different platform, and provides uniform interfaces\n- üëç Multiple-target: you can control multiple debug target in most cases\n- üëç Non-invasive: you can only view the information of target, instead of attaching to it\n\n## API Overview\n\nThere are two main kinds of interfaces in udbg, target information and debugging interfaces.\n\nCurrent status of target information interfaces\n\n| Platform/Target | Memory operation | Memory List | Thread | Module/Symbol | Handle/FD List |\n| --------------- | ---------------- | ----------- | ------ | ------------- | -------------- |\n| Windows Process | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è |\n| Linux Process | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è |\n| MacOs Process | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è |\n| Minidump | ‚úîÔ∏è (readonly) | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è | üöß |\n| PE File | ‚úîÔ∏è (readonly) | ‚úîÔ∏è | - | - | - |\n\nCurrent status of debugging interfaces\n\n| Platform/Target | Debug Symbol | Breakpoint | Watchpoint(HWBP) | Multiple Target |\n| ---------------- | ------------ | ---------- | ---------------- | --------------- |\n| Windows(x86/x64) | ‚úîÔ∏è (pdb) | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è |\n| Windows(aarch64) | ‚úîÔ∏è (pdb) | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è |\n| Linux(x86_64) | ‚úîÔ∏è (elf) | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è |\n| Linux(aarch64) | ‚úîÔ∏è (elf) | ‚úîÔ∏è | ‚úîÔ∏è | ‚úîÔ∏è |\n\n<!-- ### Wrapper of functions in ntdll for windows -->\n\n<!-- ### String utilities -->\n\n## Examples\n\n- Cross-platform interfaces to get target information, see `src/test.rs` `fn target`\n- Write a basic debugger, see `src/test.rs` `fn test_debug`\n<!-- - Read or write target memory, even any struct -->\n<!-- tracing multiple target, and its child -->\n\n\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-31T02:27:31.633437"
  }
]