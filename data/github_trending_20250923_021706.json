[
  {
    "basic_info": {
      "name": "semantic-router",
      "full_name": "vllm-project/semantic-router",
      "owner": "vllm-project",
      "description": "Intelligent Mixture-of-Models Router for Efficient LLM Inference",
      "url": "https://github.com/vllm-project/semantic-router",
      "clone_url": "https://github.com/vllm-project/semantic-router.git",
      "ssh_url": "git@github.com:vllm-project/semantic-router.git",
      "homepage": "https://vllm-semantic-router.com",
      "created_at": "2025-08-26T21:49:50Z",
      "updated_at": "2025-09-23T00:48:23Z",
      "pushed_at": "2025-09-22T22:41:26Z"
    },
    "stats": {
      "stars": 1368,
      "forks": 127,
      "watchers": 1368,
      "open_issues": 58,
      "size": 5625
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 677888,
        "Python": 644711,
        "Rust": 189496,
        "JavaScript": 85647,
        "CSS": 63646,
        "Shell": 57681,
        "Makefile": 24195,
        "Dockerfile": 1176
      },
      "license": "Apache License 2.0",
      "topics": [
        "ai-gateway",
        "bert-classification",
        "envoy-ext-proc",
        "envoyproxy",
        "fine-tuning",
        "golang",
        "huggingface-candle",
        "huggingface-transformers",
        "kubernetes",
        "llm-tool-call",
        "mixture-of-models",
        "pii-detection",
        "prompt-guard",
        "python",
        "rust",
        "semantic-router",
        "vllm"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n\n<img src=\"website/static/img/repo.png\" alt=\"vLLM Semantic Router\" width=\"80%\"/>\n\n[![Documentation](https://img.shields.io/badge/docs-read%20the%20docs-blue)](https://vllm-semantic-router.com)\n[![Hugging Face](https://img.shields.io/badge/ü§ó%20Hugging%20Face-Community-yellow)](https://huggingface.co/LLM-Semantic-Router)\n[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](LICENSE)\n[![Crates.io](https://img.shields.io/crates/v/candle-semantic-router.svg)](https://crates.io/crates/candle-semantic-router)\n![Test And Build](https://github.com/vllm-project/semantic-router/workflows/Test%20And%20Build/badge.svg)\n\n**üìö [Complete Documentation](https://vllm-semantic-router.com) | üöÄ [Quick Start](https://vllm-semantic-router.com/docs/getting-started/installation) | üì£ [Blog](https://vllm-semantic-router.com/blog/) | üìñ [API Reference](https://vllm-semantic-router.com/docs/api/router/)**\n\n![code](./website/static/img/code.png)\n\n</div>\n\n## Innovations ‚ú®\n\n![architecture](./website/static/img/architecture.png)\n\n### Intelligent Routing üß†\n\n#### Auto-Reasoning and Auto-Selection of Models\n\nAn **Mixture-of-Models** (MoM) router that intelligently directs OpenAI API requests to the most suitable models from a defined pool based on **Semantic Understanding** of the request's intent (Complexity, Task, Tools).\n\nThis is achieved using BERT classification. Conceptually similar to Mixture-of-Experts (MoE) which lives *within* a model, this system selects the best *entire model* for the nature of the task.\n\nAs such, the overall inference accuracy is improved by using a pool of models that are better suited for different types of tasks:\n\n![Model Accuracy](./website/static/img/category_accuracies.png)\n\nThe screenshot below shows the LLM Router dashboard in Grafana.\n\n![LLM Router Dashboard](./website/static/img/grafana_screenshot.png)\n\nThe router is implemented in two ways: \n\n- Golang (with Rust FFI based on the [candle](https://github.com/huggingface/candle) rust ML framework)\n- Python\nBenchmarking will be conducted to determine the best implementation.\n\n#### Auto-Selection of Tools\n\nSelect the tools to use based on the prompt, avoiding the use of tools that are not relevant to the prompt so as to reduce the number of prompt tokens and improve tool selection accuracy by the LLM.\n\n### Enterprise Security üîí\n\n#### PII detection\n\nDetect PII in the prompt, avoiding sending PII to the LLM so as to protect the privacy of the user.\n\n#### Prompt guard\n\nDetect if the prompt is a jailbreak prompt, avoiding sending jailbreak prompts to the LLM so as to prevent the LLM from misbehaving.\n\n### Similarity Caching ‚ö°Ô∏è\n\nCache the semantic representation of the prompt so as to reduce the number of prompt tokens and improve the overall inference latency.\n\n## Documentation üìñ\n\nFor comprehensive documentation including detailed setup instructions, architecture guides, and API references, visit:\n\n**üëâ [Complete Documentation at Read the Docs](https://vllm-semantic-router.com/)**\n\nThe documentation includes:\n\n- **[Installation Guide](https://vllm-semantic-router.com/docs/getting-started/installation/)** - Complete setup instructions\n- **[System Architecture](https://vllm-semantic-router.com/docs/architecture/system-architecture/)** - Technical deep dive\n- **[Model Training](https://vllm-semantic-router.com/docs/training/training-overview/)** - How classification models work\n- **[API Reference](https://vllm-semantic-router.com/docs/api/router/)** - Complete API documentation\n\n## Community üëã\n\nFor questions, feedback, or to contribute, please join `#semantic-router` channel in vLLM Slack.\n\n## Citation\n\nIf you find Semantic Router helpful in your research or projects, please consider citing it:\n\n```\n@misc{semanticrouter2025,\n  title={vLLM Semantic Router},\n  author={vLLM Semantic Router Team},\n  year={2025},\n  howpublished={\\url{https://github.com/vllm-project/semantic-router}},\n}\n```\n\n## Star History üî•\n\nWe opened the project at Aug 31, 2025. We love open source  and collaboration ‚ù§Ô∏è\n\n[![Star History Chart](https://api.star-history.com/svg?repos=vllm-project/semantic-router&type=Date)](https://www.star-history.com/#vllm-project/semantic-router&Date)\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:07.311166"
  },
  {
    "basic_info": {
      "name": "cagent",
      "full_name": "docker/cagent",
      "owner": "docker",
      "description": "Agent Builder and Runtime by Docker Engineering",
      "url": "https://github.com/docker/cagent",
      "clone_url": "https://github.com/docker/cagent.git",
      "ssh_url": "git@github.com:docker/cagent.git",
      "homepage": "",
      "created_at": "2025-09-01T12:14:45Z",
      "updated_at": "2025-09-23T02:11:59Z",
      "pushed_at": "2025-09-22T15:15:43Z"
    },
    "stats": {
      "stars": 1134,
      "forks": 108,
      "watchers": 1134,
      "open_issues": 51,
      "size": 12413
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 746333,
        "Dockerfile": 2164
      },
      "license": "Apache License 2.0",
      "topics": [
        "agents",
        "ai"
      ]
    },
    "content": {
      "readme": "# ü§ñ `cagent` ü§ñ\n\n> A powerful, easy to use, customizable multi-agent runtime that orchestrates AI agents with\n> specialized capabilities and tools, and the interactions between agents.\n\n![cagent in action](docs/assets/cagent-run.gif)\n\n## ‚ú® What is `cagent`? ‚ú®\n\n`cagent` lets you create and run intelligent AI agents, where each agent has\nspecialized knowledge, tools, and capabilities.\n\nThink of it as allowing you to quickly build, share and run a team of virtual experts that\ncollaborate to solve complex problems for you.\n\nAnd it's dead easy to use!\n\n‚ö†Ô∏è Note: `cagent` is in active development, **breaking changes are to be expected** ‚ö†Ô∏è\n\n### Your First Agent\n\nExample [basic_agent.yaml](/examples/basic_agent.yaml):\n\nCreating agents with cagent is very simple. They are described in a short yaml file, like this one:\n\n```yaml\nagents:\n  root:\n    model: openai/gpt-5-mini\n    description: A helpful AI assistant\n    instruction: |\n      You are a knowledgeable assistant that helps users with various tasks.\n      Be helpful, accurate, and concise in your responses.\n```\n\nRun it in a terminal with `cagent run basic_agent.yaml`.\n\nMany more examples can be found [here](/examples/README.md)!\n\n### Improving an agent with MCP tools\n\n`cagent` supports MCP servers, enabling agents to use a wide variety of external tools and services.\n\nIt supports three transport types: `stdio`, `http` and `sse`.\n\nGiving an agent access to tools via MCP is a quick way to greatly improve its capabilities, the quality of its results and its general useful-ness.\n\nGet started quickly with the [Docker MCP Toolkit](https://docs.docker.com/ai/mcp-catalog-and-toolkit/toolkit/) and [catalog](https://docs.docker.com/ai/mcp-catalog-and-toolkit/catalog/)\n\nHere, we're giving the same basic agent from the example above access to a **containerized** `duckduckgo` mcp server and it's tools by using Docker's MCP Gateway:\n\n```yaml\nagents:\n  root:\n    model: openai/gpt-5-mini\n    description: A helpful AI assistant\n    instruction: |\n      You are a knowledgeable assistant that helps users with various tasks.\n      Be helpful, accurate, and concise in your responses.\n    toolset:\n      - type: mcp\n        ref: docker:duckduckgo # stdio transport\n```\n\nWhen using a containerized server via the Docker MCP gateway, you can configure any required settings/secrets/authentication using the [Docker MCP Toolkit](https://docs.docker.com/ai/mcp-catalog-and-toolkit/toolkit/#example-use-the-github-official-mcp-server) in Docker Desktop.\n\nAside from the containerized MCP severs the Docker MCP Gateway provides, any standard MCP server can be used with cagent!\n\nHere's an example similar to the above but adding `read_file` and `write_file` tools from the `rust-mcp-filesystem` MCP server:\n\n```yaml\nagents:\n  root:\n    model: openai/gpt-5-mini\n    description: A helpful AI assistant\n    instruction: |\n      You are a knowledgeable assistant that helps users with various tasks.\n      Be helpful, accurate, and concise in your responses. Write your search results to disk.\n    toolset:\n      - type: mcp\n        ref: docker:duckduckgo\n      - type: mcp\n        command: rust-mcp-filesystem # installed with `cargo install rust-mcp-filesystem`\n        args: [\"--allow-write\", \".\"]\n        tools: [\"read_file\", \"write_file\"] # Optional: specific tools only\n        env:\n          - \"RUST_LOG=debug\"\n```\n\nSee [the USAGE docs](./docs/USAGE.md#tool-configuration) for more detailed information and examples\n\n### üéØ Key Features\n\n- **üèóÔ∏è Multi-agent architecture** - Create specialized agents for different domains.\n- **üîß Rich tool ecosystem** - Agents can use external tools and APIs via the MCP protocol.\n- **üîÑ Smart delegation** - Agents can automatically route tasks to the most suitable specialist.\n- **üìù YAML configuration** - Declarative model and agent configuration.\n- **üí≠ Advanced reasoning** - Built-in \"think\", \"todo\" and \"memory\" tools for complex problem-solving.\n- **üåê Multiple AI providers** - Support for OpenAI, Anthropic, Gemini and [Docker Model Runner](https://docs.docker.com/ai/model-runner/).\n\n## üöÄ Quick Start üöÄ\n\n### Installation\n\n[Prebuilt binaries](https://github.com/docker/cagent/releases) for Windows, macOS and Linux can be found on the releases page of the [project's GitHub repository](https://github.com/docker/cagent/releases)\n\nOnce you've downloaded the appropriate binary for your platform, you may need to give it executable permissions.\nOn macOS and Linux, this is done with the following command:\n\n```sh\n# linux amd64 build example\nchmod +x /path/to/downloads/cagent-linux-amd64\n```\n\nYou can then rename the binary to `cagent` and configure your `PATH` to be able to find it (configuration varies by platform).\n\n### **Set your API keys**\n\nBased on the models you configure your agents to use, you will need to set the corresponding provider API key accordingly,\nall theses keys are optional, you will likely need at least one of these, though:\n\n```bash\n# For OpenAI models\nexport OPENAI_API_KEY=",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:08.411692"
  },
  {
    "basic_info": {
      "name": "surf",
      "full_name": "enetx/surf",
      "owner": "enetx",
      "description": "SURF - Advanced Go HTTP client with Chrome/Firefox browser impersonation, HTTP/3 with QUIC fingerprinting, JA3/JA4 TLS emulation, and anti-bot bypass for web automation and scraping.",
      "url": "https://github.com/enetx/surf",
      "clone_url": "https://github.com/enetx/surf.git",
      "ssh_url": "git@github.com:enetx/surf.git",
      "homepage": "https://enetx.surf",
      "created_at": "2025-08-30T12:33:32Z",
      "updated_at": "2025-09-22T14:22:13Z",
      "pushed_at": "2025-09-22T09:11:37Z"
    },
    "stats": {
      "stars": 912,
      "forks": 42,
      "watchers": 912,
      "open_issues": 0,
      "size": 332
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 710670
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/65846651/233453773-33f38b64-0adc-41b4-8e13-a49c89bf9db6.png\">\n</p>\n\n<h1>Surf - Advanced HTTP Client for Go</h1>\n\n[![Go Reference](https://pkg.go.dev/badge/github.com/enetx/surf.svg)](https://pkg.go.dev/github.com/enetx/surf)\n[![Go Report Card](https://goreportcard.com/badge/github.com/enetx/surf)](https://goreportcard.com/report/github.com/enetx/surf)\n[![Coverage Status](https://coveralls.io/repos/github/enetx/surf/badge.svg?branch=main&service=github)](https://coveralls.io/github/enetx/surf?branch=main)\n[![Go](https://github.com/enetx/surf/actions/workflows/go.yml/badge.svg)](https://github.com/enetx/surf/actions/workflows/go.yml)\n[![Ask DeepWiki](https://deepwiki.com/badge.svg)](https://deepwiki.com/enetx/surf)\n\n<p>Surf is a powerful, feature-rich HTTP client library for Go that makes working with HTTP requests intuitive and enjoyable. With advanced features like browser impersonation, JA3/JA4 fingerprinting, and comprehensive middleware support, Surf provides everything you need for modern web interactions.</p>\n\n## ‚ú® Key Features\n\n### üé≠ **Browser Impersonation**\n- **Chrome & Firefox Support**: Accurately mimic Chrome v131 and Firefox v143 browser fingerprints\n- **Platform Diversity**: Impersonate Windows, macOS, Linux, Android, and iOS devices\n- **TLS Fingerprinting**: Full JA3/JA4 fingerprint customization for enhanced privacy\n- **Automatic Headers**: Proper header ordering and browser-specific values\n- **WebKit Form Boundaries**: Accurate multipart form boundary generation matching real browsers\n\n### üîí **Advanced TLS & Security**\n- **Custom JA3/JA4**: Configure precise TLS fingerprints with `HelloID` and `HelloSpec`\n- **HTTP/3 Support**: Full HTTP/3 over QUIC with complete browser-specific QUIC fingerprinting\n- **JA4QUIC Fingerprinting**: Complete QUIC transport parameter fingerprinting for Chrome and Firefox\n- **HTTP/2 & HTTP/3**: Full HTTP/2 support with customizable settings (SETTINGS frame, window size, priority)\n- **Ordered Headers**: Browser-accurate header ordering for perfect fingerprint evasion\n- **Certificate Pinning**: Custom TLS certificate validation\n- **DNS-over-TLS**: Enhanced privacy with DoT support\n- **Proxy Support**: HTTP, HTTPS, and SOCKS5 proxy configurations with UDP support for HTTP/3\n\n### üöÄ **Performance & Reliability**\n- **Connection Pooling**: Efficient connection reuse with singleton pattern\n- **Automatic Retries**: Configurable retry logic with custom status codes\n- **Response Caching**: Built-in body caching for repeated access\n- **Streaming Support**: Efficient handling of large responses and SSE\n- **Compression**: Automatic decompression of gzip, deflate, brotli, and zstd responses\n- **Keep-Alive**: Persistent connections with configurable parameters\n\n### üõ†Ô∏è **Developer Experience**\n- **Standard Library Compatible**: Convert to `net/http.Client` for third-party library integration\n- **Fluent API**: Chainable methods for elegant code\n- **Middleware System**: Extensible request/response/client middleware with priority support\n- **Type Safety**: Strong typing with generics support via [enetx/g](https://github.com/enetx/g)\n- **Debug Mode**: Comprehensive request/response debugging\n- **Error Handling**: Result type pattern for better error management\n- **Context Support**: Full context.Context integration for cancellation and timeouts\n\n## üì¶ Installation\n\n```bash\ngo get -u github.com/enetx/surf\n```\n\n**Required Go version:** 1.24+\n\n## üîÑ Standard Library Compatibility\n\nSurf provides seamless integration with Go's standard `net/http` package, allowing you to use Surf's advanced features with any library that expects a standard `*http.Client`.\n\n```go\n// Create a Surf client with advanced features\nsurfClient := surf.NewClient().\n    Builder().\n    Impersonate().Chrome().\n    Session().\n    Build()\n\n// Convert to standard net/http.Client\nstdClient := surfClient.Std()\n\n// Use with any third-party library\n// Example: AWS SDK, Google APIs, OpenAI client, etc.\nresp, err := stdClient.Get(\"https://api.example.com\")\n```\n\n**Preserved Features When Using Std():**\n- ‚úÖ JA3/TLS fingerprinting\n- ‚úÖ HTTP/2 settings\n- ‚úÖ HTTP/3 & QUIC fingerprinting\n- ‚úÖ Browser impersonation headers\n- ‚úÖ Ordered headers\n- ‚úÖ Cookies and sessions\n- ‚úÖ Proxy configuration\n- ‚úÖ Custom headers and User-Agent\n- ‚úÖ Timeout settings\n- ‚úÖ Redirect policies\n- ‚úÖ Request/Response middleware\n\n**Limitations with Std():**\n- ‚ùå Retry logic (implement at application level)\n- ‚ùå Response body caching\n- ‚ùå Remote address tracking\n- ‚ùå Request timing information\n\n## üöÄ Quick Start\n\n### Basic GET Request\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"github.com/enetx/surf\"\n)\n\nfunc main() {\n    resp := surf.NewClient().Get(\"https://api.github.com/users/github\").Do()\n    if resp.IsErr() {\n        log.Fatal(resp.Err())\n    }\n\n    fmt.Println(resp.Ok().Body.String())\n}\n```\n\n### JSON Response Handling\n\n```go\ntype User struct {\n    Name     string `json:\"name\"`\n    Company",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:09.512486"
  },
  {
    "basic_info": {
      "name": "oq",
      "full_name": "plutov/oq",
      "owner": "plutov",
      "description": "Terminal OpenAPI Spec viewer",
      "url": "https://github.com/plutov/oq",
      "clone_url": "https://github.com/plutov/oq.git",
      "ssh_url": "git@github.com:plutov/oq.git",
      "homepage": "",
      "created_at": "2025-09-12T14:04:46Z",
      "updated_at": "2025-09-23T00:42:33Z",
      "pushed_at": "2025-09-21T20:11:15Z"
    },
    "stats": {
      "stars": 670,
      "forks": 12,
      "watchers": 670,
      "open_issues": 4,
      "size": 1937
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 47383
      },
      "license": "MIT License",
      "topics": [
        "hacktoberfest"
      ]
    },
    "content": {
      "readme": "# oq - a terminal-based OpenAPI Spec (OAS) viewer\n\n<p align=\"center\"><img src=\"preview.gif\" width=\"500\" alt=\"oq preview\"></p>\n\n## Usage\n\n```bash\noq openapi.yaml\n# or\ncat openapi.yaml | oq\n# or\ncurl https://api.example.com/openapi.json | oq\n```\n\n### Keyboard Shortcuts\n\nPress `?` to see the help screen with all available keyboard shortcuts.\n\n## OpenAPI Support\n\n`oq` supports all 3.* OpenAPI specification versions:\n\n- 3.0\n- 3.1\n- 3.2\n\nBoth JSON and YAML formats are supported.\n\nNote: `oq` uses the [libopenapi](https://github.com/pb33f/libopenapi) library as it supports all OpenAPI versions and is actively maintained.\n\n## Installation\n\nUsing go install:\n\n```bash\ngo install github.com/plutov/oq@latest\n```\n\n<details>\n<summary>Package managers</summary>\n\nUsing Homebrew (macOS/Linux):\n\n```bash\nbrew install plutov/tap/oq\n```\n\nArch Linux (AUR):\n\n```bash\nyay -S oq-openapi-viewer-git\n```\n\n</details>\n\nYou can also download the compiled binaries from the Releases page.\n\n### From source\n\n```bash\ngit clone git@github.com:plutov/oq.git\ncd oq\ngo build -o oq .\n```\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit issues and pull requests.\n\nWhen contributing:\n\n1. Ensure tests pass: `go test -v`\n2. Test all supported OpenAPI versions (3.0, 3.1, 3.2)\n3. If the UI changes, make sure to run `vhs preview.tape` to generate a new preview GIF\n4. Try to extend test coverage by introducing new example OpenAPI specs in the `examples` folder\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:10.627605"
  },
  {
    "basic_info": {
      "name": "pgmcp",
      "full_name": "subnetmarco/pgmcp",
      "owner": "subnetmarco",
      "description": "An MCP server to query any Postgres database in natural language.",
      "url": "https://github.com/subnetmarco/pgmcp",
      "clone_url": "https://github.com/subnetmarco/pgmcp.git",
      "ssh_url": "git@github.com:subnetmarco/pgmcp.git",
      "homepage": "",
      "created_at": "2025-09-16T19:45:03Z",
      "updated_at": "2025-09-23T01:31:36Z",
      "pushed_at": "2025-09-21T20:22:26Z"
    },
    "stats": {
      "stars": 403,
      "forks": 37,
      "watchers": 403,
      "open_issues": 1,
      "size": 170
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 135804
      },
      "license": "Other",
      "topics": [
        "agent",
        "agentic-ai",
        "ai",
        "analytics",
        "artificial-intelligence",
        "data-analysis",
        "database",
        "kong",
        "mcp",
        "mcp-server",
        "postgres",
        "postgresql"
      ]
    },
    "content": {
      "readme": "[![ci](https://github.com/subnetmarco/pgmcp/actions/workflows/ci.yml/badge.svg)](https://github.com/subnetmarco/pgmcp/actions/workflows/ci.yml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/subnetmarco/pgmcp)](https://goreportcard.com/report/github.com/subnetmarco/pgmcp)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n# PGMCP - PostgreSQL Model Context Protocol Server\n\nPGMCP connects AI assistants to **any PostgreSQL database** through natural language queries. Ask questions in plain English and get structured SQL results with automatic streaming and robust error handling.\n\n**Works with**: Cursor, Claude Desktop, VS Code extensions, and any [MCP-compatible client](https://modelcontextprotocol.io/)\n\n## Quick Start\n\n### Prerequisites\n- Go 1.23+\n- PostgreSQL database\n- OpenAI API key (optional, can use other compatible APIs)\n\n### Installation\n\n```bash\n# Build\ngo build -o pgmcp-server ./server\ngo build -o pgmcp-client ./client\n\n# Set up database (optional - works with any existing PostgreSQL database)\nexport DATABASE_URL=\"postgres://user:password@localhost:5432/mydb\"\npsql $DATABASE_URL < schema.sql\n\n# Run server\nexport OPENAI_API_KEY=\"your-api-key\"\n./pgmcp-server\n\n# Test with client\n./pgmcp-client -ask \"Who is the user that places the most orders?\" -format table\n./pgmcp-client -ask \"Show me the top 40 most reviewed items in the marketplace\" -format table\n```\n\n### Environment Variables\n\n**Required:**\n- `DATABASE_URL`: PostgreSQL connection string\n\n**Optional:**\n- `OPENAI_API_KEY`: OpenAI API key for SQL generation\n- `OPENAI_MODEL`: Model to use (default: \"gpt-4o-mini\")\n- `HTTP_ADDR`: Server address (default: \":8080\")\n- `HTTP_PATH`: MCP endpoint path (default: \"/mcp\")\n- `AUTH_BEARER`: Bearer token for authentication\n\n```\nüë§ User / AI Assistant\n         ‚îÇ\n         ‚îÇ \"Who are the top customers?\"\n         ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                    Any MCP Client                           ‚îÇ\n‚îÇ                                                             ‚îÇ\n‚îÇ  PGMCP CLI  ‚îÇ  Cursor  ‚îÇ  Claude Desktop  ‚îÇ  VS Code  ‚îÇ ... ‚îÇ\n‚îÇ  JSON/CSV   ‚îÇ  Chat    ‚îÇ  AI Assistant    ‚îÇ  Editor   ‚îÇ     ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n         ‚îÇ\n         ‚îÇ Streamable HTTP / MCP Protocol\n         ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                    PGMCP Server                             ‚îÇ\n‚îÇ                                                             ‚îÇ\n‚îÇ  üîí Security    üß† AI Engine      üåä Streaming               ‚îÇ\n‚îÇ  ‚Ä¢ Input Valid  ‚Ä¢ Schema Cache    ‚Ä¢ Auto-Pagination         ‚îÇ\n‚îÇ  ‚Ä¢ Audit Log    ‚Ä¢ OpenAI API      ‚Ä¢ Memory Management       ‚îÇ\n‚îÇ  ‚Ä¢ SQL Guard    ‚Ä¢ Error Recovery  ‚Ä¢ Connection Pool         ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n         ‚îÇ\n         ‚îÇ Read-Only SQL Queries\n         ‚ñº\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                Your PostgreSQL Database                     ‚îÇ\n‚îÇ                                                             ‚îÇ\n‚îÇ  Any Schema: E-commerce, Analytics, CRM, etc.               ‚îÇ\n‚îÇ  Tables ‚Ä¢ Views ‚Ä¢ Indexes ‚Ä¢ Functions                       ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\nExternal AI Services:\nOpenAI API ‚Ä¢ Anthropic ‚Ä¢ Local LLMs (Ollama, etc.)\n\nKey Benefits:\n‚úÖ Works with ANY PostgreSQL database (no assumptions about schema)\n‚úÖ No schema modifications required  \n‚úÖ Read-only access (100% safe)\n‚úÖ Automatic streaming for large results\n‚úÖ Intelligent query understanding (singular vs plural)\n‚úÖ Robust error handling (graceful AI failure recovery)\n‚úÖ PostgreSQL case sensitivity support (mixed-case tables)\n‚úÖ Production-ready security and performance\n‚úÖ Universal database compatibility\n‚úÖ Multiple output formats (table, JSON, CSV)\n‚úÖ Free-text search across all columns\n‚úÖ Authentication support\n‚úÖ Comprehensive testing suite\n```\n\n## Usage Examples\n\n```bash\n# Ask questions in natural language\n./pgmcp-client -ask \"What are the top 5 customers?\" -format table\n./pgmcp-client -ask \"How many orders were placed today?\" -format json\n\n# Search across all text fields\n./pgmcp-client -search \"john\" -format table\n\n# Multiple questions at once\n./pgmcp-client -ask \"Show tables\" -ask \"Count users\" -format table\n\n# Different output formats\n./pgmcp-client -ask \"Export all data\" -format csv -max-rows 1000\n```\n\n## Features\n\n- **Natural Language to SQL**: Ask questions in plain English\n- **Automatic Streaming**: Handles large result sets automatically  \n- **Safe Read-Only Access**: Prevents any write operations\n- **Text Search**: Search across all text columns\n- **Multiple Output Formats**: Table, JSON, and CSV\n- **PostgreSQL Case Sensitivity**: Handles mixed-case table names correctly\n- **Universal Compatibility**: Works with any PostgreSQL database\n\n## Example Database\n\nThe project includes two schemas:\n- **`schema.sql`**: Full Amazon-like marketplace with 5,000+ ",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:11.722086"
  },
  {
    "basic_info": {
      "name": "sshm",
      "full_name": "Gu1llaum-3/sshm",
      "owner": "Gu1llaum-3",
      "description": "SSHM is a beautiful command-line tool that transforms how you manage and connect to your SSH hosts. Built with Go and featuring an intuitive TUI interface, it makes SSH connection management effortless and enjoyable.",
      "url": "https://github.com/Gu1llaum-3/sshm",
      "clone_url": "https://github.com/Gu1llaum-3/sshm.git",
      "ssh_url": "git@github.com:Gu1llaum-3/sshm.git",
      "homepage": null,
      "created_at": "2025-08-31T20:56:25Z",
      "updated_at": "2025-09-22T08:24:08Z",
      "pushed_at": "2025-09-17T13:24:40Z"
    },
    "stats": {
      "stars": 371,
      "forks": 23,
      "watchers": 371,
      "open_issues": 5,
      "size": 1618
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 232812,
        "Shell": 6353,
        "PowerShell": 4562,
        "Makefile": 1043
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "\n\n<p align=\"center\">\n    <img src=\"images/logo.png\" alt=\"SSHM Logo\" width=\"120\" />\n</p>\n\n# üöÄ SSHM - SSH Manager\n\n[![Go](https://img.shields.io/badge/Go-1.23+-00ADD8?style=for-the-badge&logo=go)](https://golang.org/)\n[![Release](https://img.shields.io/github/v/release/Gu1llaum-3/sshm?style=for-the-badge)](https://github.com/Gu1llaum-3/sshm/releases)\n[![License](https://img.shields.io/github/license/Gu1llaum-3/sshm?style=for-the-badge)](LICENSE)\n[![Platform](https://img.shields.io/badge/platform-Linux%20%7C%20macOS%20%7C%20Windows-lightgrey?style=for-the-badge)](https://github.com/Gu1llaum-3/sshm/releases)\n\n> **A modern, interactive SSH Manager for your terminal** üî•\n\nSSHM is a beautiful command-line tool that transforms how you manage and connect to your SSH hosts. Built with Go and featuring an intuitive TUI interface, it makes SSH connection management effortless and enjoyable.\n\n<p align=\"center\">\n    <a href=\"images/sshm.gif\" target=\"_blank\">\n        <img src=\"images/sshm.gif\" alt=\"Demo SSHM Terminal\" width=\"800\" />\n    </a>\n    <br>\n    <em>üñ±Ô∏è Click on the image to view in full size</em>\n</p>\n\n## ‚ú® Features\n\n### üöÄ **Core Capabilities**\n- **üé® Beautiful TUI Interface** - Navigate your SSH hosts with an elegant, interactive terminal UI\n- **‚ö° Quick Connect** - Connect to any host instantly through the TUI or the CLI with `sshm <host>`\n- **üîÑ Port Forwarding** - Easy setup for Local, Remote, and Dynamic (SOCKS) forwarding with history persistence\n- **üìù Easy Management** - Add, edit, move, and manage SSH configurations seamlessly\n- **üè∑Ô∏è Tag Support** - Organize your hosts with custom tags for better categorization\n- **üîç Smart Search** - Find hosts quickly with built-in filtering and search\n- **üìù Real-time Status** - Live SSH connectivity indicators with asynchronous ping checks and color-coded status\n- **üîî Smart Updates** - Automatic version checking with update notifications\n- **üìà Connection History** - Track your SSH connections with last login timestamps\n\n### üõ†Ô∏è **Technical Features**\n- **üîí Secure** - Works directly with your existing `~/.ssh/config` file\n- **üìÅ Custom Config Support** - Use any SSH configuration file with the `-c` flag\n- **üìÇ SSH Include Support** - Full support for SSH Include directives to organize configurations across multiple files\n- **‚öôÔ∏è SSH Options Support** - Add any SSH configuration option through intuitive forms\n- **üîÑ Automatic Conversion** - Seamlessly converts between command-line and config formats\n- **üîÑ Automatic Backups** - Backup configurations automatically before changes\n- **‚úÖ Validation** - Prevent configuration errors with built-in validation\n- **üîó ProxyJump Support** - Secure connection tunneling through bastion hosts\n- **‚å®Ô∏è Keyboard Shortcuts** - Power user navigation with vim-like shortcuts\n- **üåê Cross-platform** - Supports Linux, macOS (Intel & Apple Silicon), and Windows\n- **‚ö° Lightweight** - Single binary with no dependencies, zero configuration required\n\n## üöÄ Quick Start\n\n### Installation\n\n**Homebrew (Recommended for macOS):**\n```bash\nbrew install Gu1llaum-3/sshm/sshm\n```\n\n**Unix/Linux/macOS (One-line install):**\n```bash\ncurl -sSL https://raw.githubusercontent.com/Gu1llaum-3/sshm/main/install/unix.sh | bash\n```\n\n**Windows (PowerShell):**\n```powershell\nirm https://raw.githubusercontent.com/Gu1llaum-3/sshm/main/install/windows.ps1 | iex\n```\n\n**Alternative methods:**\n\n*Linux/macOS:*\n```bash\n# Download specific release\nwget https://github.com/Gu1llaum-3/sshm/releases/latest/download/sshm-linux-amd64.tar.gz\n\n# Extract and install\ntar -xzf sshm-linux-amd64.tar.gz\nsudo mv sshm-linux-amd64 /usr/local/bin/sshm\n```\n\n*Windows:*\n```powershell\n# Download and extract\nInvoke-WebRequest -Uri \"https://github.com/Gu1llaum-3/sshm/releases/latest/download/sshm-windows-amd64.zip\" -OutFile \"sshm-windows-amd64.zip\"\nExpand-Archive sshm-windows-amd64.zip -DestinationPath C:\\tools\\\n# Add C:\\tools to your PATH environment variable\n```\n\n## üìñ Usage\n\n### Interactive Mode\n\nLaunch SSHM without arguments to enter the beautiful TUI interface:\n\n```bash\nsshm\n```\n\n**Navigation:**\n- `‚Üë/‚Üì` or `j/k` - Navigate hosts\n- `Enter` - Connect to selected host\n- `a` - Add new host\n- `e` - Edit selected host\n- `d` - Delete selected host\n- `m` - Move host to another config file (requires SSH Include directives)\n- `f` - Port forwarding setup\n- `q` - Quit\n- `/` - Search/filter hosts\n\n**Real-time Status Indicators:**\n- üü¢ **Online** - Host is reachable via SSH\n- üü° **Connecting** - Currently checking host connectivity\n- üî¥ **Offline** - Host is unreachable or SSH connection failed\n- ‚ö´ **Unknown** - Connectivity status not yet determined\n\n**Sorting & Filtering:**\n- `s` - Switch between sorting modes (name ‚Üî last login)\n- `n` - Sort by **name** (alphabetical)\n- `r` - Sort by **recent** (last login time)\n- `Tab` - Cycle between filtering modes\n- Filter by **name** (default) - Search through host names\n- Filter by **last login** - Sort and filter by most recently used connections\n\nThe interactive forms will guide you through",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:12.825376"
  },
  {
    "basic_info": {
      "name": "zf",
      "full_name": "Huenchen28092/zf",
      "owner": "Huenchen28092",
      "description": "ÂõõÊñπÊîØ‰ªòÁ≥ªÁªü ËÅöÂêàÊîØ‰ªòÁ≥ªÁªü ÂõõÊñπÊîØ‰ªòÁ≥ªÁªüÊ∫êÁ†Å ÂõõÊñπÂπ≥Âè∞Êê≠Âª∫ Â∑®Êµ∑ÊîØ‰ªò goËØ≠Ë®ÄÊîØ‰ªò ÊîØ‰ªòÂØπÊé• ÊîØ‰ªòÈÄöÈÅìÂØπÊé•",
      "url": "https://github.com/Huenchen28092/zf",
      "clone_url": "https://github.com/Huenchen28092/zf.git",
      "ssh_url": "git@github.com:Huenchen28092/zf.git",
      "homepage": "https://github.com/Huenchen28092/zf/",
      "created_at": "2025-09-05T15:31:40Z",
      "updated_at": "2025-09-17T07:00:48Z",
      "pushed_at": "2025-09-08T12:04:18Z"
    },
    "stats": {
      "stars": 192,
      "forks": 2,
      "watchers": 192,
      "open_issues": 0,
      "size": 22
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 32602
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Â£∞Êòé \nÊ∫êÁ†ÅÂè™‰æõÂ≠¶‰π†‰ΩøÁî®ÔºåÂ¶ÇÁî®‰∫éÂïÜ‰∏öÊ¥ªÂä®‰∏éÊú¨‰∫∫Êó†ÂÖ≥ÔºåËØ∑ÂãøÂ∞ÜÁ≥ªÁªüÁî®‰∫éÈùûÊ≥ï‰∏öÂä°\n\n\ngoËØ≠Ë®ÄÊîØ‰ªòÁ≥ªÁªüÂú®Á∫ø‰ΩìÈ™å \n\nÊºîÁ§∫Âú∞ÂùÄÔºö\n\nËøêËê•Á´ØÔºöhttps://homea.golangpay.com \n\nË¥¶Âè∑:xitong\nÁôªÂΩïÂØÜÁ†ÅÔºö123456789\n\nÂïÜÊà∑Á´ØÔºöhttps://sha.golangpay.com \n\nË¥¶Âè∑Ôºötest \n\nÁôªÂΩïÂØÜÁ†ÅÔºö123456789\n\nÊµãËØïË¥¶Âè∑ÂØÜÁ†Å‰ºöÂÆöÊúüÊõ¥ÊîπÔºåÂ¶Ç‰∏çÂØπËØ∑ËÅîÁ≥ªÂÆ¢ÊúçÂèëÊñ∞ÁöÑË¥¶Âè∑ÂØÜÁ†Å\n\nÂºÄÂèëÊñáÊ°£ https://www.golangpay.com\n\ngoËØ≠Ë®ÄÊîØ‰ªòÁ≥ªÁªüÊºîÁ§∫Âú∞ÂùÄÔºö\n\nËøêËê•Á´ØÔºöhttp://home.golangpay.com \n\nÂ∏êÂè∑Ôºöxitong\n\nÁôªÂΩïÂØÜÁ†ÅÔºö123456789\n\nÂïÜÊà∑Á´ØÔºöhttp://sh.golangpay.com \n\nÂ∏êÂè∑Ôºömchtest ÁôªÂΩïÂØÜÁ†ÅÔºömch123123\n\n## Á≥ªÁªü‰ªãÁªç\n\nÁ≥ªÁªüÂùáÈááÁî®golangpayËØ≠Ë®ÄÂºÄÂèëÔºå‰ºögolangpayÁöÑÊäÄÊúØ‰∫∫ÂëòÂèØ‰ª•Ëá™Ë°å‰∫åÊ¨°ÂºÄÂèë\n\ngolangpayÊòØ‰∏ÄÂ•óÂºÄÁÆ±Âç≥Áî®„ÄÅÈÄÇÂêàÊãøÊù•Áõ¥Êé•ËøêËê•ÁöÑËÅöÂêàÊîØ‰ªòÁ≥ªÁªü„ÄÇÁ≥ªÁªüÈÄÇÂêàÊúâÊäÄÊúØÂõ¢ÈòüÁöÑ‰ºÅ‰∏öË¥≠‰π∞ÔºåÊàëÂè∏ÂèØÊèê‰æõÁ®ãÂ∫èÊ∫êÁ†Å„ÄÅÊäÄÊúØÊñáÊ°£ÂíåÂîÆÂêéÊäÄÊúØÊîØÊåÅÊúçÂä°„ÄÇ\n\nÁ®ãÂ∫èÊ∫êÁ†ÅÂíåÊñáÊ°£ÂåÖÊã¨Âì™‰∫õÔºü Ê∫êÁ†ÅÂåÖÊã¨ÔºöÊâÄÊúâgolangÊúçÂä°Á´ØÊ∫êÁ†ÅÂíåLayuiÂâçÁ´ØÊ∫êÁ†ÅÔºåÂèØ‰∫åÊ¨°ÂºÄÂèëÔºåÊÉ≥ÊÄé‰πàÊîπÂ∞±ÊÄé‰πàÊîπÔºåSo Easy !\n\nÊñáÊ°£ÂåÖÊã¨ÔºöÂºÄÂèëËØ¥Êòé„ÄÅÁ≥ªÁªüÈÉ®ÁΩ≤„ÄÅÈÄöÈÅìÂØπÊé•„ÄÅAPIÊé•Âè£„ÄÅÁ∫ø‰∏äËøêÁª¥„ÄÅÁ≥ªÁªü‰∏öÂä°Á≠â„ÄÇ\n\nÊäÄÊúØÊîØÊåÅÊúâÂì™‰∫õÊúçÂä°Ôºü ÈíàÂØπÊØè‰∏™Ë¥≠‰π∞ÁöÑÂÆ¢Êà∑ÔºåÊàëÂè∏‰ºöÂçïÁã¨ÂàõÂª∫Áæ§ÔºåËá≥Â∞ëÊåáÂÆö‰∏ÄÂêçÊäÄÊúØÊîØÊåÅ‰∫∫ÂëòÂçïÁã¨Êèê‰æõÂîÆÂêéÊäÄÊúØÊîØÊåÅ„ÄÇ\n\nÊäÄÊúØÊîØÊåÅÂÜÖÂÆπÂåÖÊã¨ÔºöÁ≥ªÁªüÈÉ®ÁΩ≤ÊåáÂØº„ÄÅ‰∫åÊ¨°ÂºÄÂèëÊåáÂØº„ÄÅÂèçÈ¶àBugÁöÑ‰øÆÂ§ç„ÄÅÈúÄÊ±ÇÁöÑÊî∂ÈõÜÁ≠â„ÄÇ\n\nÊ≥®Ôºö‰∏çÊèê‰æõËΩØ‰ª∂ÂºÄÂèëÁéØÂ¢ÉÊê≠Âª∫„ÄÅ‰∏çÊèê‰æõgolangÂü∫Á°ÄËæÖÂØº„ÄÅ‰ªÖÈôêËØ•Á≥ªÁªü‰∏öÂä°ÊäÄÊúØ‰∫§ÊµÅ„ÄÇ\n\nÂ¶ÇÈúÄË¶ÅÊúÄÊñ∞ÂÆåÊï¥ÂïÜ‰∏öÁâàÊú¨ËØ∑ËÅîÁ≥ª È£ûÊú∫(Telegram)Ôºö@tianxiex\n\nÁ≥ªÁªüÊèèËø∞ golangpay‰∏∫golangÂºÄÂèëÁâàÔºå‰ΩøÁî®golang + vue + beegoÊû∂ÊûÑÂºÄÂèë„ÄÇÂåÖÊã¨ËøêËê•Âπ≥Âè∞„ÄÅ‰ª£ÁêÜÂïÜÁ≥ªÁªü„ÄÅÂïÜÊà∑Á≥ªÁªü„ÄÅÊîØ‰ªòÁ≥ªÁªüÔºåÁªìÁÆóÁ≥ªÁªü„ÄÅÂØπË¥¶Á≥ªÁªüÁ≠â„ÄÇ\n\nÊ®°ÂùóËØ¥Êòé golang-service ÊâÄÊúâÊ†∏ÂøÉ‰∏öÂä°ÊñπÊ≥ïÂ∞ÅË£ÖÔºå‰æõÂÖ∂‰ªñÊ®°ÂùóÂºïÁî®ÂêéË∞ÉÁî®\n\ngolang-core Ê†∏ÂøÉÂåÖÔºåÂåÖÊã¨golangÊúçÂä°Êé•Âè£‰ª•ÂèäÂÆû‰Ωìbeego,‰ª•ÂèäÂÖ¨Áî®ÂºïÁî®ÂèäÂ∏∏Áî®Â∑•ÂÖ∑Á±ªÁ≠â\n\ngolang-manage ËøêËê•Âπ≥Âè∞ÔºàÊé•Âè£ÂíåÁÆ°ÁêÜÁïåÈù¢ÔºåÂâçÂêéÁ´ØÂàÜÁ¶ªÔºâ\n\ngolang-merchant ÂïÜÊà∑Á≥ªÁªüÔºàÊé•Âè£ÂíåÁÆ°ÁêÜÁïåÈù¢ÔºåÂâçÂêéÁ´ØÂàÜÁ¶ªÔºâ\n\ngolang-agent ‰ª£ÁêÜÂïÜÁ≥ªÁªüÔºàÊé•Âè£ÂíåÁÆ°ÁêÜÁïåÈù¢ÔºåÂâçÂêéÁ´ØÂàÜÁ¶ªÔºâ\n\ngolang-pay ÊîØ‰ªòÁΩëÂÖ≥ÔºåÊèê‰æõÂïÜÊà∑ËÆøÈóÆÁöÑÊîØ‰ªòÊé•Âè£ÂèäÂØπÊé•ÊâÄÊúâÊîØ‰ªòÈÄöÈÅìÂÆûÁé∞\n\ngolang-taskÂÆöÊó∂‰ªªÂä°ÔºåÂåÖÊã¨ÂØπË¥¶ÊúçÂä°„ÄÅÁªìÁÆóÊúçÂä°ÔºåÈÉ®ÁΩ≤Êó∂ÈúÄÂçïËäÇÁÇπÈÉ®ÁΩ≤\n\ngolang-writeoffÔºåÊ†∏ÈîÄÁ´Ø„ÄÅÊèê‰æõÊ†∏ÈîÄAPIÔºåÂíåÊ†∏ÈîÄÂïÜÊèê‰∫§ËØùË¥πÔºåÁîµË¥πÔºåÊ≤πÂç°Á≠âÊ†∏ÈîÄÊà∑Âè∑ÔºåÈÉ®ÁΩ≤Êó∂ÈúÄÂçïËäÇÁÇπÈÉ®ÁΩ≤\n\ngolang-z-api-base ÊîØ‰ªòÊé•Âè£ÁöÑÂü∫Á°ÄÂåÖ\n# ÂõõÊñπÊîØ‰ªòÁ≥ªÁªü‰ªãÁªç\nÂ∑®Êµ∑ÂõõÊñπÊîØ‰ªòÁ≥ªÁªüÊòØgoËØ≠Ë®ÄÂºÄÂèëÊîØÊåÅÂ§öÂïÜÊà∑„ÄÅÂ§öÈÄöÈÅì„ÄÅËÉΩÂ§üËá™Áî±ËøõË°åÂØπÊé•ÈÖçÁΩÆ„ÄÅÈõÜÊàêtelegramÊú∫Âô®‰∫∫ÊúçÂä°ÁöÑËÅöÂêàÊîØ‰ªòÁ≥ªÁªü\n\n## ÂïÜÂä°Âêà‰ΩúËØ∑ËÅîÁ≥ªÈ£ûÊú∫Ôºö[tianxiex](https://t.me/tianxiex)\n\n## Á≥ªÁªüÁÆÄ‰ªã\n## ËøêËê•Á´ØÔºöÂõõÊñπËøêËê•‰∫∫Âëò„ÄÅÁ≥ªÁªüË¥≠‰π∞Êñπ\n1.ÂºÄÊà∑ÔºàÁªôÂïÜÊà∑ÂºÄÈÄöË¥¶Âè∑Ôºâ\n\n2.ÂØπÊé•ÈÄöÈÅìÔºàÈÄöÈÅì‰æõÂ∫îÂïÜÂØπÊé•Ôºâ\n\n3.ÊµãËØï‰∏ãÂçï„ÄÅË°•Âçï\n\n4.ÈÖçÁΩÆTGÊú∫Âô®‰∫∫„ÄÅÁæ§ÂèëTGÊ∂àÊÅØ\n\n5.ÂÖ∂‰ªñÂäüËÉΩ\n\n## ÂïÜÊà∑Á´ØÔºöÂõõÊñπËøêËê•‰∫∫ÂëòÁöÑÂÆ¢Êà∑„ÄÅÁ≥ªÁªüË¥≠‰π∞ÊñπÁöÑÂÆ¢Êà∑\n1.Êü•ÁúãÂºÄÊà∑‰ø°ÊÅØÔºàÂïÜÊà∑ID,ÂØÜÈí•Á≠âÔºâ\n\n2.Êü•ÁúãÂØπÊé•ÊñáÊ°£\n\n3.ÊµãËØï‰∏ãÂçï\n\n4.ÂÖ∂‰ªñÂäüËÉΩ\n\n## ÂØπÊé•ÔºöÂõõÊñπËøêËê•‰∫∫Âëò„ÄÅÂõõÊñπÊäÄÊúØÂõ¢Èòü„ÄÅÁ≥ªÁªüË¥≠‰π∞Êñπ\n1.Êèê‰æõÂõõÊñπÂØπÊé•ÊñáÊ°£ÁªôÂïÜÊà∑„ÄÇÔºàÁî±ÂõõÊñπÊäÄÊúØÂõ¢ÈòüÂçèÂä©„ÄÅÁ≥ªÁªüË¥≠‰π∞ÊñπÔºâ\n\n2.ÂØπÊé•ÈÄöÈÅì„ÄÇÔºàÁî±ÂõõÊñπÊäÄÊúØÂõ¢ÈòüÂØπÊé•„ÄÅÁ≥ªÁªüË¥≠‰π∞ÊñπÔºâ\n\n3.ÊµãËØïÂØπÊé•ÊÉÖÂÜµ„ÄÇÔºàÁî±ÂõõÊñπÊäÄÊúØÂõ¢Èòü„ÄÅÂõõÊñπËøêËê•‰∫∫ÂëòÂçèÂä©„ÄÅÁ≥ªÁªüË¥≠‰π∞ÊñπÔºâ\n\n##TGÊú∫Âô®‰∫∫ÔºöËøêËê•Êñπ\n1.ÂõõÊñπËøêËê•‰∫∫ÂëòÔºàÁ≥ªÁªüË¥≠‰π∞ÊñπÔºâÂú®Á≥ªÁªüÈÖçÁΩÆËøêËê•‰∫∫Âëò\n\n2.ÂõõÊñπËøêËê•‰∫∫ÂëòÔºàÁ≥ªÁªüË¥≠‰π∞ÊñπÔºâÂú®Á≥ªÁªüÈÖçÁΩÆÊú∫Âô®‰∫∫Áõ∏ÂÖ≥‰ø°ÊÅØ\n\n3.ÂõõÊñπËøêËê•‰∫∫ÂëòÔºàÁ≥ªÁªüË¥≠‰π∞ÊñπÔºâÂú®TG‰∏≠ÂàõÂª∫ÈíàÂØπÂïÜÊà∑ÁöÑ‰∏öÂä°Áæ§ÔºåÂ∞ÜÂ∑≤ÁªèÈÖçÁΩÆÂ•ΩÁöÑÊú∫Âô®‰∫∫ÊãâËøõÁæ§ÔºåÂπ∂ËÆæÁΩÆÁæ§ÁÆ°ÁêÜËßíËâ≤\n\n## ËøêËê•Á´ØÈÉ®ÂàÜÊºîÁ§∫\n1.ÂïÜÊà∑ÁÆ°ÁêÜ\n‚Äã ÂïÜÊà∑ÁÆ°ÁêÜ‰∏ªË¶ÅÁî®Êù•ÔºåÂàõÂª∫ÂïÜÊà∑Ôºå‰πüÂ∞±ÊòØÂºÄÊà∑ÔºåÈÖçÁΩÆ‰∫ßÂìÅË¥πÁéáÔºå‰ª•ÂèäÈÖçÁΩÆ‰∫ßÂìÅÂØπÂ∫îË∑ëÁöÑÈÄöÈÅì„ÄÇ\n\n1.1 ÂïÜÊà∑ÂàóË°®\n![ÂïÜÊà∑ÂàóË°®](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/3.png)\n\n\n\n1.2 Â∫îÁî®ÂàóË°®\n![Â∫îÁî®ÂàóË°®](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/4.png)\n\n1.2.3 ‰∫ßÂìÅÂàóË°®\nimage\n\n‰∫ßÂìÅÈÖçÁΩÆÈÄöÈÅìÔºà‰∏Ä‰∏™‰∫ßÂìÅÂèØ‰ª•ÈÖçÁΩÆÂ§ö‰∏™ÈÄöÈÅìÔºåËøôÈáåÂ∞±ÊòØËøêËê•‰∫∫ÂëòÈúÄË¶ÅÈáçÁÇπÂÖ≥Ê≥®ÁöÑÁÇπÔºâ\n\n![‰∫ßÂìÅÂàóË°®](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/5.png)\n\n1.2.4 ÂïÜÊà∑‰∏ãÂçïÊµãËØïÁïåÈù¢\nÂïÜÊà∑‰∏ãÂçïÊµãËØïÂèØ‰ª•Âø´ÈÄüÈÄöËøá‰∏çÂêåÂïÜÊà∑ÔºåÈÄâÊã©‰∏çÂêåÁöÑ‰∫ßÂìÅÔºå‰ª•Âèä‰∏çÂêåÁöÑÈÄöÈÅìÔºåÊù•ËøõË°åÊµãËØïÊàñËÄÖÊ≠£Âºè‰∏ãÂçïÔºåÂèØ‰ª•Â∏ÆÂä©Â§ßÂÆ∂Âø´ÈÄüËé∑Âèñ‰∏ãÂçïÁöÑÁªìÊûú„ÄÇ\n\nËøôÈáåÊó¢ÂèØ‰ª•ÈíàÂØπÂïÜÊà∑ÂØπÊé•ÔºåÊµãËØïÔºõ‰πüÂèØ‰ª•ÈíàÂØπÈÄöÈÅìÂØπÊé•ÔºåÊµãËØï„ÄÇ\n\n![6](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/6.png)\n\n## 2.ËÆ¢ÂçïÁÆ°ÁêÜ\nËÆ¢ÂçïÂàóË°®ÔºåÂèØ‰ª•ÂÆûÊó∂Êü•ÁúãÂΩìÂâçÁ≥ªÁªüËÆ¢ÂçïÊÉÖÂÜµ„ÄÇ\n\n1.ÂèØ‰ª•Êü•ÁúãÊØè‰∏™ÂïÜÊà∑ÔºåÊØè‰∏™‰∫ßÂìÅÔºåÊØè‰∏™ÈÄöÈÅìÔºåÂïÜÊà∑Ë¥πÁéáÔºåÈÄöÈÅìË¥πÁéáÔºåÂπ≥Âè∞ÊàêÊú¨ÔºåÂπ≥Âè∞Âà©Ê∂¶ÔºåÊîØ‰ªòÁä∂ÊÄÅÔºåÂõûË∞ÉÁä∂ÊÄÅÔºåË°•ÂçïÁä∂ÊÄÅÁ≠â„ÄÇ\n\n![7](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/7.png)\n\n2.ÊâìÂºÄÂÆûÊó∂ÁªüËÆ°ÔºåÂèØ‰ª•Êü•ÁúãÂΩìÂâçÂïÜÊà∑Êàñ‰∫ßÂìÅÊàñÈÄöÈÅìÁöÑÁªüËÆ°ÊÉÖÂÜµ\n\n![8](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/8.png)\n\n3.ÂΩì‰æõÂ∫îÂïÜÂ∑≤ÁªèÊòéÁ°ÆÊîØ‰ªòÊàêÂäüÔºàÊúâÊó∂ÈáëÈ¢ù‰∏çÂØπÁöÑÊÉÖÂÜµ‰∏ãÔºâÔºå‰ΩÜÊ≤°ÊúâÂõûË∞ÉÊàêÂäüÊó∂ÔºåÂèØ‰ª•ÈÄöËøá‰∫∫Â∑•Ë°•ÂçïÊìç‰ΩúÔºåÊ≠§Êó∂ÂèØ‰ª•Âú®Â§áÊ≥®‰ø°ÊÅØ‰∏≠ËØ¥ÊòéÊÉÖÂÜµ„ÄÇË°•ÂçïÂØÜÁ†ÅÊòØË∑üÁ≥ªÁªüÂàÜÂºÄÁöÑ„ÄÇË°•ÂçïÂπ∂‰∏ç‰ºö‰øÆÊîπËÆ¢ÂçïÈáëÈ¢ùÔºåÂè™ÊòØ‰ºöÂ∞ÜÁ≥ªÁªüËÆ¢ÂçïÁä∂ÊÄÅ‰ªéÊîØ‰ªò‰∏≠ÔºåÊîπ‰∏∫Â∑≤ÊîØ‰ªò„ÄÇË°•ÂçïÊúâ‰∫õÊÉÖÂÜµÈúÄË¶ÅË∑üÂïÜÊà∑Ê≤üÈÄöÔºåÊòØÂê¶ÈúÄË¶ÅËøõË°åË°•Âçï„ÄÇË°•ÂçïÁöÑÁõÆÁöÑÔºåÈô§‰∫ÜÊîπÂèòÁ≥ªÁªüÁä∂ÊÄÅ‰πãÂ§ñÔºå‰πü‰ºöÂêëÂïÜÊà∑ÂèëËµ∑ÂõûË∞ÉÈÄöÁü•„ÄÇ\n\n![9](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/9.png)\n\n![10](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/10.png)\n\n## 3.ÊîØ‰ªòÈÖçÁΩÆ\n### 3.1 ‰æõÂ∫îÂïÜÁÆ°ÁêÜ\n‚Äã ËøôÈáå‰∏ªË¶ÅÊòØÁî®Êù•ÂØπÊé•ÈÄöÈÅìÁöÑÈÖçÁΩÆ„ÄÇÂºÄÂèëËøôÂùóÁöÑÁõÆÁöÑÊòØ‰∏∫‰∫ÜÔºöÂ≠òÂú®Êúâ‰ºòÂäøÁöÑÈÄöÈÅìÔºåÈúÄË¶ÅÊàë‰ª¨ÂéªÂØπÊé•ÈÄöÈÅìÔºå‰ΩÜÊòØÔºåÂæÄÂæÄÊäÄÊúØ‰∫∫ÂëòÂìçÂ∫î‰∏çÂèäÊó∂ÔºåÂØºËá¥Êàë‰ª¨ËøêËê•Âõ¢ÈòüÈîôÂ§±‰∫ÜÂæàÂ§öËµöÈí±ÁöÑÊú∫‰ºö„ÄÇÈÇ£Êàë‰ª¨ÊÉ≥ÔºöÂ¶ÇÊûúÂØπÊé•ÈÄöÈÅìÔºå‰∏çÈúÄË¶ÅÊäÄÊúØÂèÇ‰∏éÔºåÊàë‰ª¨ËøêËê•‰∫∫ÂëòËÉΩÂ§üËá™Â∑±ÂØπÊé•ÔºåÈÇ£ËØ•Â§öÂ•ΩÂëÄ„ÄÇÂú®Ê≠§Â∫îÁî®Âú∫ÊôØ‰∏ãÔºå‰æõÂ∫îÂïÜÁÆ°ÁêÜÂØπÊé•ÔºåÂ∞±Áî±Ê≠§ËÄåÁîü„ÄÇ \n\n![11](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/11.png)\nÂèÇÊï∞Êò†Â∞ÑÈÖçÁΩÆÔºö\n\nÁ¨¨‰∏ÄÊ≠•Ôºå‰æõÂ∫îÂïÜÊèê‰æõ‰ø°ÊÅØ„ÄÇÂåÖÊã¨Ôºà‰æõÂ∫îÂïÜÂºÄÊàë‰ª¨ÔºåÂºÄÁöÑÊà∑ÔºåÂØÜÈí•Ôºå‰∏ãÂçïÂú∞ÂùÄÔºåÊü•ÂçïÂú∞ÂùÄÔºåÁ≠â‰ø°ÊÅØÔºâÔºåÂÖ∑‰ΩìËøòÂæóÁúã‰æõÂ∫îÂïÜÁöÑÊé•Âè£ÊñáÊ°£„ÄÇ image Á¨¨‰∫åÊ≠•ÔºöÊò†Â∞ÑÈÖçÁΩÆ„ÄÇÂåÖÊã¨‰∏ãÂçï„ÄÅÊü•Âçï„ÄÅÂõûË∞ÉÔºåËøô‰∏âÈÉ®ÂàÜ„ÄÇ‰∏ãÂçïÂåÖÂê´ÔºåËØ∑Ê±ÇÂèÇÊï∞ÔºåËøîÂõûÂèÇÊï∞ÈÖçÁΩÆÔºõÊü•Âçï‰πü‰∏ÄÊ†∑ÔºåÂõûË∞ÉÂè™ÊúâÊé•Êî∂ÂèÇÊï∞ÈÖçÁΩÆÔºåËÄå‰∏îÊØè‰∏™ÈÖçÁΩÆÈÉΩÊúâËØ¥Êòé„ÄÇÂâçÊúüÈúÄË¶ÅÊàë‰ª¨ÊäÄÊúØÊîØÊåÅ‰∏Ä‰∏ãÔºåÂ∏¶ÁùÄ‰∏ÄËµ∑ÈÖçÁΩÆÂá†‰∏™ÈÄöÈÅìÊñπÔºå‰ª•ÂêéËøêËê•‰∫∫ÂëòÂ∞±ÂèØ‰ª•Ëá™Â∑±ÈÖçÁΩÆ‰∫Ü„ÄÇ \n\n![12](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/12.png)\n![13](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/13.png)\n![14](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/14.png)\n![15](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/15.png)\n### 3.2 ÈÄöÈÅìÁÆ°ÁêÜ\n‚Äã ‰∏äËø∞ÈÄöËøá‰æõÂ∫îÂïÜÂØπÊé•ÂêéÔºåÊàë‰ª¨ÈúÄË¶ÅÂ∞Ü‰æõÂ∫îÂïÜÊèê‰æõÁöÑÈÄöÈÅì‰ø°ÊÅØÊ∑ªÂä†ËøõÊù•Âç≥ÂèØ„ÄÇÈÄâÊã©ÊåáÂÆöÁöÑ‰æõÂ∫îÂïÜÔºå‰æõÂ∫îÂïÜÊèê‰æõÁöÑÈÄöÈÅìÁºñÁ†Å„ÄÅÈÄöÈÅìÂêçÁß∞„ÄÅÈÄöÈÅìË¥πÁéá„ÄÅÊî∂Ê¨æÁ±ªÂûãÔºàÂàÜ‰∏∫Âõ∫ÂÆöÈ¢ùÂ∫¶Âè™ËÉΩÊòØÊåáÂÆöÁöÑÈ¢ùÂ∫¶ÔºåÊØîÂ¶ÇÔºö30|50|100|200ÂíåÊµÆÂä®È¢ùÂ∫¶ÔºåÂå∫Èó¥ËåÉÂõ¥ÊØîÂ¶ÇÔºö1-9999Ôºâ„ÄÅÊòØÂê¶ÂêØÁî®„ÄÇËøôÈáåÂä†‰∫Ü‰∏Ä‰∏™ÂõûÊî∂Á´ôÔºö‰∏ªË¶ÅÊòØÊñπ‰æøÁÆ°ÁêÜÔºåÂè™Â±ïÁ§∫ÊúâÁî®ÁöÑÈÄöÈÅì„ÄÇÊöÇÊó∂‰∏çÈúÄË¶ÅÁöÑÂèØ‰ª•ËøõË°åÂõûÊî∂Êìç‰ΩúÔºåÂà∞ÂõûÊî∂Á´ô‰∏≠ÁöÑÈÄöÈÅìÁÆ°ÁêÜËøõË°åÊü•Áúã„ÄÇ \n\n\n![16](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/16.png)\n![17](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/17.png)\n### 3.3 ‰∫ßÂìÅÁÆ°ÁêÜ\n‚Äã ‰∫ßÂìÅÔºåÂú®ÂõõÊñπÁ≥ªÁªüÂèØ‰ª•ËÆ§‰∏∫ÊòØ‰∏Ä‰∏™Â§ßÈÄöÈÅìÔºåÊàë‰ª¨ÁªôÂà∞ÂïÜÊà∑ÁöÑ‰∫ßÂìÅÁºñÁ†ÅÔºà‰πüÂèØ‰ª•Âè´ÈÄöÈÅìÁºñÁ†ÅÔºâÂíå‰∫ßÂìÅÂêçÁß∞Ôºà‰πüÂèØ‰ª•Âè´ÈÄöÈÅìÂêçÁß∞Ôºâ„ÄÇ‰πüÂ∞±ÊòØÂØπÂ§ñÊé®ÂπøÂíåËê•ÈîÄÁöÑÂ§ßÈÄöÈÅì„ÄÇËøôÈáåÁî±Êàë‰ª¨ËøêËê•‰∫∫ÂëòËá™ÂÆö‰πâ‰∏ÄÂ•ó‰∫ßÂìÅÔºàÂ§ßÈÄöÈÅìÔºâËßÑÂàô„ÄÇ\n‚Äã ÂèØ‰ª•ÊèêÂâçËá™ÂÆö‰πâÂ•ΩÔºå‰∫ßÂìÅÁºñÁ†ÅÔºàÂ§ßÈÄöÈÅìÁºñÁ†ÅÔºâÂíå‰∫ßÂìÅÂêçÁß∞ÔºàÂ§ßÈÄöÈÅìÂêçÁß∞Ôºâ„ÄÇ \n\n![18](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/18.png)\n\n## 4.Êú∫Âô®‰∫∫ÁÆ°ÁêÜ\n### 4.1 ÈÖçÁΩÆÊú∫Âô®‰∫∫\nÂ¶ÇÊûúÁ¨¨‰∏ÄÊ¨°Êé•Ëß¶TGÊú∫Âô®‰∫∫ÔºåÈúÄË¶ÅÂà∞TG‰∏äÊ≥®ÂÜå‰∏Ä‰∏™Êú∫Âô®‰∫∫ÔºåËé∑ÂèñtokenÔºåËøõË°åËÆæÁΩÆÔºåÂêåÊó∂ÈúÄË¶ÅÊ≥®ÂÜåwebhookÊñπÂºèÔºåÂ∞ÜÊú∫Âô®‰∫∫ÁªëÂÆöÂà∞Á≥ªÁªü‰∏≠Âéª„ÄÇËØ∑Ê≥®ÊÑèÔºöÂ¶ÇÊûúÊòØÊñ∞ÈÉ®ÁΩ≤ÁöÑÊúçÂä°Âô®ÂüüÂêçÂøÖÈ°ªË¶ÅÂÆâË£ÖËØÅ‰π¶Ôºå‰πüÂ∞±ÊòØÈúÄË¶ÅÊîØÊåÅhttps\n\n![19](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/19.png)\n![20](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/20.png)\n![21](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/21.png)\n\n### 4.2 Áæ§ÁªÑÁÆ°ÁêÜ\nËøôÈáåÁöÑÁæ§ÁªÑÁî±ËøêËê•‰∫∫ÂëòÔºåÂª∫Â•ΩÁæ§ÂêéÔºåÂπ∂Â∞ÜÊú∫Âô®‰∫∫ÊãâÂÖ•Áæ§‰∏≠Ôºå‰Ωú‰∏∫ÁÆ°ÁêÜÂëòÊùÉÈôêÔºåÂ∞±‰ºöËá™Âä®Â∞ÜÁæ§‰ø°ÊÅØÊé®ÈÄÅÂà∞ÂêéÂè∞Á≥ªÁªü‰∏≠„ÄÇÂ¶ÇÊûúËøêËê•‰∫∫ÂëòÈÄöËøáÂëΩ‰ª§ÁªëÂÆöÂïÜÊà∑ÔºåÂ∞±‰ºöËá™Âä®ÂÖ≥ËÅîÁæ§ÁªÑ„ÄÇÂ¶ÇÊûúÊ≤°ÊúâÁªëÂÆöÔºåÂàôÊòæÁ§∫ÊöÇÊú™ÂÖ≥ËÅîÂïÜÊà∑„ÄÇÂêåÊó∂Ôºå‰πüÂèØ‰ª•Ëá™Â∑±Âª∫Â•ΩÁæ§ÔºàÈ¢ëÈÅìÔºâ„ÄÇÂª∫Â•ΩÁæ§ÂêéÔºå‰πüÂèØ‰ª•Ê∑ªÂä†Áæ§ÊàêÂëòÔºåËÆæÂÆöÊùÉÈôê„ÄÇ\n\n![22](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/22.png)\n![23](https://raw.githubusercontent.com/golangpay/1/refs/heads/img/pay/23.png)\n\n### 4.3 Ê∂àÊÅØÁÆ°ÁêÜ\nËøôÈáåÂèØ‰ª•Êñ∞Â¢ûÊ∂àÊÅØÔºåÈÄâÊã©ÂØπÂ∫îÁöÑÁæ§ÔºåËøõË°åËΩ¨Âèë\n\n![24](https://raw.gith",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:13.933677"
  },
  {
    "basic_info": {
      "name": "OpenAI-Compatible-API-Proxy-for-Z",
      "full_name": "kbykb/OpenAI-Compatible-API-Proxy-for-Z",
      "owner": "kbykb",
      "description": "ËøôÊòØ‰∏Ä‰∏™‰∏∫ Zai Êèê‰æõ OpenAI API ÂÖºÂÆπÊé•Âè£ÁöÑ‰ª£ÁêÜÊúçÂä°ÔºåÂÖÅËÆ∏ÂºÄÂèëËÄÖÈÄöËøáÊ†áÂáÜÁöÑ OpenAI API Ê†ºÂºèËÆøÈóÆ Zai ÁöÑ GLM-4.5 Ê®°Âûã„ÄÇ",
      "url": "https://github.com/kbykb/OpenAI-Compatible-API-Proxy-for-Z",
      "clone_url": "https://github.com/kbykb/OpenAI-Compatible-API-Proxy-for-Z.git",
      "ssh_url": "git@github.com:kbykb/OpenAI-Compatible-API-Proxy-for-Z.git",
      "homepage": null,
      "created_at": "2025-09-01T04:58:29Z",
      "updated_at": "2025-09-19T14:27:38Z",
      "pushed_at": "2025-09-01T06:53:25Z"
    },
    "stats": {
      "stars": 174,
      "forks": 123,
      "watchers": 174,
      "open_issues": 1,
      "size": 33
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 20363,
        "Dockerfile": 266
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# OpenAIÂÖºÂÆπAPI‰ª£ÁêÜ for Z.ai GLM-4.5\n\nËøôÊòØ‰∏Ä‰∏™‰∏∫Z.ai GLM-4.5Ê®°ÂûãÊèê‰æõOpenAIÂÖºÂÆπAPIÊé•Âè£ÁöÑ‰ª£ÁêÜÊúçÂä°Âô®„ÄÇ\n\n## RenderÈÉ®ÁΩ≤\n\n1. ForkËøô‰∏™‰ªìÂ∫ìÂà∞‰Ω†ÁöÑGitHubË¥¶Êà∑\n\n2. Âú®Render‰∏äÂàõÂª∫Êñ∞ÁöÑWeb ServiceÔºö\n   - ËøûÊé•‰Ω†ÁöÑGitHub‰ªìÂ∫ì\n   - ÈÄâÊã©Docker‰Ωú‰∏∫ÁéØÂ¢É\n   - ËÆæÁΩÆ‰ª•‰∏ãÁéØÂ¢ÉÂèòÈáèÔºö\n   - `UPSTREAM_TOKEN`: Z.ai ÁöÑËÆøÈóÆ‰ª§Áâå (ÂøÖÈúÄ)\n   - `DEFAULT_KEY`: ÂÆ¢Êà∑Á´ØAPIÂØÜÈí• (ÂèØÈÄâÔºåÈªòËÆ§: sk-your-key)\n   - `MODEL_NAME`: ÊòæÁ§∫ÁöÑÊ®°ÂûãÂêçÁß∞ (ÂèØÈÄâÔºåÈªòËÆ§: GLM-4.5)\n\n   - `PORT`: ÊúçÂä°ÁõëÂê¨Á´ØÂè£ (Render‰ºöËá™Âä®ËÆæÁΩÆ)\n\n3. ÈÉ®ÁΩ≤ÂÆåÊàêÂêéÔºå‰ΩøÁî®RenderÊèê‰æõÁöÑURL‰Ωú‰∏∫OpenAI APIÁöÑbase_url\n\n## ‰ΩøÁî®Á§∫‰æã\n\n```python\nimport openai\n\nclient = openai.OpenAI(\n    api_key=\"your-api-key\",  # ÂØπÂ∫î DEFAULT_KEY\n    base_url=\"https://your-app.onrender.com/v1\"\n)\n\nresponse = client.chat.completions.create(\n    model=\"GLM-4.5\",\n    messages=[{\"role\": \"user\", \"content\": \"‰Ω†Â•Ω\"}],\n    stream=True\n)\n\nfor chunk in response:\n    print(chunk.choices[0].delta.content or \"\", end=\"\")\n```\n\n## Ë¥°ÁåÆÊåáÂçó\n\nÊ¨¢ËøéÊèê‰∫§ Issue Âíå Pull RequestÔºÅËØ∑Á°Æ‰øùÔºö\n\n1. ‰ª£Á†ÅÁ¨¶Âêà Go ÁöÑ‰ª£Á†ÅÈ£éÊ†º\n2. Êèê‰∫§ÂâçËøêË°åÊµãËØï\n3. Êõ¥Êñ∞Áõ∏ÂÖ≥ÊñáÊ°£\n\n## ËÆ∏ÂèØËØÅ\n\nLICENSE\n\n## ÂÖçË¥£Â£∞Êòé\n\nÊú¨È°πÁõÆ‰∏é Z.ai ÂÆòÊñπÊó†ÂÖ≥Ôºå‰ΩøÁî®ÂâçËØ∑Á°Æ‰øùÈÅµÂÆà Z.ai ÁöÑÊúçÂä°Êù°Ê¨æ„ÄÇ",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:15.038730"
  },
  {
    "basic_info": {
      "name": "Shannon",
      "full_name": "Kocoro-lab/Shannon",
      "owner": "Kocoro-lab",
      "description": "An open-source, enterprise-ready AI agent platform built with Rust for performance, Go for orchestration, Python for LLMs, and Solana for Web3 trust.",
      "url": "https://github.com/Kocoro-lab/Shannon",
      "clone_url": "https://github.com/Kocoro-lab/Shannon.git",
      "ssh_url": "git@github.com:Kocoro-lab/Shannon.git",
      "homepage": "",
      "created_at": "2025-08-29T10:53:48Z",
      "updated_at": "2025-09-22T22:54:12Z",
      "pushed_at": "2025-09-22T09:07:55Z"
    },
    "stats": {
      "stars": 156,
      "forks": 16,
      "watchers": 156,
      "open_issues": 0,
      "size": 20024
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 1084589,
        "Python": 427107,
        "TypeScript": 298459,
        "Rust": 247118,
        "Shell": 150620,
        "PLpgSQL": 21136,
        "Makefile": 17398,
        "Open Policy Agent": 10222,
        "Dockerfile": 4224,
        "CSS": 2819,
        "HTML": 1111,
        "JavaScript": 605
      },
      "license": "MIT License",
      "topics": [
        "agent",
        "ai"
      ]
    },
    "content": {
      "readme": "# Shannon ‚Äî Production AI Agents That Actually Work\n\n<div align=\"center\">\n\n![Shannon Dashboard](docs/images/dashboard-demo.gif)\n\n*Real-time observability dashboard showing agent traffic control, metrics, and event streams*\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                                                                              ‚îÇ\n‚îÇ     Real-time metrics, event tracking, and system health monitoring.         ‚îÇ\n‚îÇ     Access at http://localhost:3000 after running 'make dev'                 ‚îÇ\n‚îÇ                                                                              ‚îÇ\n‚îÇ     Please ‚≠ê star this repo to show your support and stay updated!          ‚îÇ\n‚îÇ                                                                              ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n</div>\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Go Version](https://img.shields.io/badge/Go-1.24%2B-blue.svg)](https://golang.org/)\n[![Rust](https://img.shields.io/badge/Rust-stable-orange.svg)](https://www.rust-lang.org/)\n[![Docker](https://img.shields.io/badge/Docker-required-blue.svg)](https://www.docker.com/)\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)](CONTRIBUTING.md)\n\n**Stop burning money on AI tokens. Ship reliable agents that won't break in production.**\n\nShannon is battle-tested infrastructure for AI agents that solves the problems you'll hit at scale: runaway costs, non-deterministic failures, and security nightmares. Built on Temporal workflows and WASI sandboxing, it's the platform we wished existed when our LLM bills hit $50k/month.\n\n## üî• The Problems We Solve\n\n- **\"Our AI costs are out of control\"** ‚Üí 70% token reduction via intelligent caching\n- **\"We can't debug production issues\"** ‚Üí Deterministic replay of any workflow\n- **\"Agents keep breaking randomly\"** ‚Üí Time-travel debugging with full state history\n- **\"We're worried about prompt injection\"** ‚Üí WASI sandbox + OPA policies for bulletproof security\n- **\"Different teams need different models\"** ‚Üí Hot-swap between 15+ LLM providers\n- **\"We need audit trails for compliance\"** ‚Üí Every decision logged and traceable\n\n## ‚ö° What Makes Shannon Different\n\n### üöÄ Ship Faster\n- **Zero Configuration Multi-Agent** - Just describe what you want: \"Analyze data, then create report\" ‚Üí Shannon handles dependencies automatically\n- **Multiple AI Patterns** - ReAct, Tree-of-Thoughts, Chain-of-Thought, Debate, and Reflection (configurable via `cognitive_strategy`)\n- **Time-Travel Debugging** - Export and replay any workflow to reproduce exact agent behavior\n- **Hot Configuration** - Change models, prompts, and policies without restarts\n\n### üîí Production Ready\n- **WASI Sandbox** - Full Python 3.11 support with bulletproof security ([‚Üí Guide](docs/python-code-execution.md))\n- **Token Budget Control** - Hard limits per user/session with real-time tracking\n- **Policy Engine (OPA)** - Define who can use which tools, models, and data\n- **Multi-Tenancy** - Complete isolation between users, sessions, and organizations\n\n### üìà Scale Without Breaking\n- **70% Cost Reduction** - Smart caching, session management, and token optimization\n- **Provider Agnostic** - OpenAI, Anthropic, Google, Azure, Bedrock, DeepSeek, Groq, and more\n- **Observable by Default** - Real-time dashboard, Prometheus metrics, OpenTelemetry tracing\n- **Distributed by Design** - Horizontal scaling with Temporal workflow orchestration\n\n*Model pricing is centralized in `config/models.yaml` - all services load from this single source for consistent cost tracking.*\n\n## üéØ Why Shannon vs. Others?\n\n| Challenge | Shannon | LangGraph | AutoGen | CrewAI |\n|---------|---------|-----------|---------|---------|\n| **Multi-Agent Orchestration** | ‚úÖ DAG/Graph workflows | ‚úÖ Stateful graphs | ‚úÖ Group chat | ‚úÖ Crew/roles |\n| **Agent Communication** | ‚úÖ Message passing | ‚úÖ Tool calling | ‚úÖ Conversations | ‚úÖ Delegation |\n| **Memory & Context** | ‚úÖ Long/short-term, vector | ‚úÖ Multiple types | ‚úÖ Conversation history | ‚úÖ Shared memory |\n| **Debugging Production Issues** | ‚úÖ Replay any workflow | ‚ùå Limited debugging | ‚ùå Basic logging | ‚ùå |\n| **Token Cost Control** | ‚úÖ Hard budget limits | ‚ùå | ‚ùå | ‚ùå |\n| **Security Sandbox** | ‚úÖ WASI isolation | ‚ùå | ‚ùå | ‚ùå |\n| **Policy Control (OPA)** | ‚úÖ Fine-grained rules | ‚ùå | ‚ùå | ‚ùå |\n| **Deterministic Replay** | ‚úÖ Time-travel debugging | ‚ùå | ‚ùå | ‚ùå |\n| **Session Persistence** | ‚úÖ Redis-backed, durable | ‚ö†Ô∏è In-memory only | ‚ö†Ô∏è Limited | ‚ùå |\n| **Multi-Language** | ‚úÖ Go/Rust/Python | ‚ö†Ô∏è Python only | ‚ö†Ô∏è Python only | ‚ö†Ô∏è Python only |\n| **Production Metrics** | ‚úÖ Dashboard/Prometheus | ‚ö†Ô∏è DIY | ‚ùå | ‚ùå |\n\n## üöÄ Quick Start\n\n### Prerequisites\n\n- Docker and Docker Compose\n- Make, curl, grpcurl\n- An API key for at least one supported LLM provider\n\n<details>\n<summary><b>Docker Setup Instructions</b> (click to expand)</summary>\n\n#### Installin",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:16.174701"
  },
  {
    "basic_info": {
      "name": "ZtoApi",
      "full_name": "libaxuan/ZtoApi",
      "owner": "libaxuan",
      "description": "‰ΩõÊ≥ïGLM-4.5 For Kilo CODE„ÄÅRoo Code",
      "url": "https://github.com/libaxuan/ZtoApi",
      "clone_url": "https://github.com/libaxuan/ZtoApi.git",
      "ssh_url": "git@github.com:libaxuan/ZtoApi.git",
      "homepage": "",
      "created_at": "2025-09-02T05:48:02Z",
      "updated_at": "2025-09-20T22:09:01Z",
      "pushed_at": "2025-09-05T08:41:17Z"
    },
    "stats": {
      "stars": 129,
      "forks": 65,
      "watchers": 129,
      "open_issues": 2,
      "size": 60
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 56328,
        "Batchfile": 2623,
        "Shell": 2163,
        "Dockerfile": 442
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# OpenAIÂÖºÂÆπAPI‰ª£ÁêÜ for Z.ai GLM-4.5\n\nËøôÊòØ‰∏Ä‰∏™‰∏∫Z.ai GLM-4.5Ê®°ÂûãÊèê‰æõOpenAIÂÖºÂÆπAPIÊé•Âè£ÁöÑ‰ª£ÁêÜÊúçÂä°Âô®„ÄÇÂÆÉÂÖÅËÆ∏‰Ω†‰ΩøÁî®Ê†áÂáÜÁöÑOpenAI APIÊ†ºÂºè‰∏éZ.aiÁöÑGLM-4.5Ê®°ÂûãËøõË°å‰∫§‰∫íÔºåÊîØÊåÅÊµÅÂºèÂíåÈùûÊµÅÂºèÂìçÂ∫î„ÄÇ\n\n> **Ê≥®ÊÑè**: Êú¨È°πÁõÆÊù•Ëá™fork  [OpenAI-Compatible-API-Proxy-for-Z](https://github.com/kbykb/OpenAI-Compatible-API-Proxy-for-Z)‰∫åÊ¨°ÂºÄÂèë\n\n\n## ‚ú® ‰∏ªË¶ÅÂäüËÉΩ\n\n- üîÑ **OpenAI APIÂÖºÂÆπ**: ÂÆåÂÖ®ÂÖºÂÆπOpenAIÁöÑAPIÊ†ºÂºèÔºåÊó†ÈúÄ‰øÆÊîπÂÆ¢Êà∑Á´Ø‰ª£Á†Å\n- üåä **ÊµÅÂºèÂìçÂ∫îÊîØÊåÅ**: ÊîØÊåÅÂÆûÊó∂ÊµÅÂºèËæìÂá∫ÔºåÊèê‰æõÊõ¥Â•ΩÁöÑÁî®Êà∑‰ΩìÈ™å\n- üîê **Ë∫´‰ªΩÈ™åËØÅ**: ÊîØÊåÅAPIÂØÜÈí•È™åËØÅÔºåÁ°Æ‰øùÊúçÂä°ÂÆâÂÖ®\n- üõ†Ô∏è **ÁÅµÊ¥ªÈÖçÁΩÆ**: ÈÄöËøáÁéØÂ¢ÉÂèòÈáèËøõË°åÁÅµÊ¥ªÈÖçÁΩÆ\n- üê≥ **DockerÊîØÊåÅ**: Êèê‰æõDockerÈïúÂÉèÔºå‰æø‰∫éÈÉ®ÁΩ≤\n- üåç **CORSÊîØÊåÅ**: ÊîØÊåÅË∑®ÂüüËØ∑Ê±ÇÔºå‰æø‰∫éÂâçÁ´ØÈõÜÊàê\n- üìù **ÊÄùËÄÉËøáÁ®ãÂ±ïÁ§∫**: Êô∫ËÉΩÂ§ÑÁêÜÂπ∂Â±ïÁ§∫Ê®°ÂûãÁöÑÊÄùËÄÉËøáÁ®ã\n- üìä **ÂÆûÊó∂ÁõëÊéß‰ª™Ë°®Êùø**: Êèê‰æõWeb‰ª™Ë°®ÊùøÔºåÂÆûÊó∂ÊòæÁ§∫APIËΩ¨ÂèëÊÉÖÂÜµÂíåÁªüËÆ°‰ø°ÊÅØ\n\n## üöÄ Âø´ÈÄüÂºÄÂßã\n\n### ÁéØÂ¢ÉË¶ÅÊ±Ç\n\n- Go 1.23 ÊàñÊõ¥È´òÁâàÊú¨\n- Z.ai ÁöÑËÆøÈóÆ‰ª§Áâå\n\n### Êú¨Âú∞ÈÉ®ÁΩ≤\n\n1. **ÂÖãÈöÜ‰ªìÂ∫ì**\n   ```bash\n   git clone https://github.com/your-username/ZtoApi.git\n   cd ZtoApi\n   ```\n\n2. **ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáè**\n   ```bash\n   cp config.env .env.local\n   # ÁºñËæë .env.local Êñá‰ª∂ÔºåËÆæÁΩÆ‰Ω†ÁöÑ ZAI_TOKEN\n   ```\n\n3. **ÂêØÂä®ÊúçÂä°**\n   ```bash\n   # ‰ΩøÁî®ÂêØÂä®ËÑöÊú¨ÔºàÊé®ËçêÔºâ\n   ./start.sh\n   \n   # ÊàñÁõ¥Êé•ËøêË°å\n   go run main.go\n   ```\n\n4. **ÊµãËØïÊúçÂä°**\n    ```bash\n    curl http://localhost:9090/v1/models\n    ```\n\n5. **ËÆøÈóÆAPIÊñáÊ°£**\n\n   ÂêØÂä®ÊúçÂä°ÂêéÔºåÂèØ‰ª•ÈÄöËøáÊµèËßàÂô®ËÆøÈóÆ‰ª•‰∏ãÂú∞ÂùÄÊü•ÁúãÂÆåÊï¥ÁöÑAPIÊñáÊ°£Ôºö\n    ```\n    http://localhost:9090/docs\n    ```\n\n   APIÊñáÊ°£Êèê‰æõ‰∫Ü‰ª•‰∏ãÂäüËÉΩÔºö\n    - ËØ¶ÁªÜÁöÑAPIÁ´ØÁÇπËØ¥Êòé\n    - ËØ∑Ê±ÇÂèÇÊï∞ÂíåÂìçÂ∫îÊ†ºÂºè\n    - Â§öÁßçÁºñÁ®ãËØ≠Ë®ÄÁöÑ‰ΩøÁî®Á§∫‰æãÔºàPython„ÄÅcURL„ÄÅJavaScriptÔºâ\n    - ÈîôËØØÂ§ÑÁêÜËØ¥Êòé\n\n5. **ËÆøÈóÆDashboard**\n\n   ÂêØÂä®ÊúçÂä°ÂêéÔºåÂèØ‰ª•ÈÄöËøáÊµèËßàÂô®ËÆøÈóÆ‰ª•‰∏ãÂú∞ÂùÄÊü•ÁúãÂÆûÊó∂ÁõëÊéß‰ª™Ë°®ÊùøÔºö\n   ```\n   http://localhost:9090/dashboard\n   ```\n\n   DashboardÊèê‰æõ‰∫Ü‰ª•‰∏ãÂäüËÉΩÔºö\n    - ÂÆûÊó∂ÊòæÁ§∫APIËØ∑Ê±ÇÁªüËÆ°‰ø°ÊÅØÔºàÊÄªËØ∑Ê±ÇÊï∞„ÄÅÊàêÂäüËØ∑Ê±ÇÊï∞„ÄÅÂ§±Ë¥•ËØ∑Ê±ÇÊï∞„ÄÅÂπ≥ÂùáÂìçÂ∫îÊó∂Èó¥Ôºâ\n    - ÊòæÁ§∫ÊúÄËøë100Êù°ËØ∑Ê±ÇÁöÑËØ¶ÁªÜ‰ø°ÊÅØÔºàÊó∂Èó¥„ÄÅÊñπÊ≥ï„ÄÅË∑ØÂæÑ„ÄÅÁä∂ÊÄÅÁ†Å„ÄÅËÄóÊó∂„ÄÅÂÆ¢Êà∑Á´ØIPÔºâ\n    - Êï∞ÊçÆÊØè5ÁßíËá™Âä®Âà∑Êñ∞‰∏ÄÊ¨°\n\n### DockerÈÉ®ÁΩ≤\n\n1. **ÊûÑÂª∫ÈïúÂÉè**\n   ```bash\n   docker build -t zto-api .\n   ```\n\n2. **ËøêË°åÂÆπÂô®**\n   ```bash\n   docker run -p 9090:9090 \\\n     -e ZAI_TOKEN=your_z_ai_token \\\n     -e DEFAULT_KEY=your_api_key \\\n     zto-api\n   ```\n\n## RenderÈÉ®ÁΩ≤\n\n1. ForkËøô‰∏™‰ªìÂ∫ìÂà∞‰Ω†ÁöÑGitHubË¥¶Êà∑\n\n2. Âú®Render‰∏äÂàõÂª∫Êñ∞ÁöÑWeb ServiceÔºö\n    - ËøûÊé•‰Ω†ÁöÑGitHub‰ªìÂ∫ì\n    - ÈÄâÊã©Docker‰Ωú‰∏∫ÁéØÂ¢É\n    - ËÆæÁΩÆ‰ª•‰∏ãÁéØÂ¢ÉÂèòÈáèÔºö\n    - `ZAI_TOKEN`: Z.ai ÁöÑËÆøÈóÆ‰ª§Áâå (ÂèØÈÄâÔºå‰∏çÊèê‰æõÂ∞ÜËá™Âä®Ëé∑ÂèñÈöèÊú∫ÂåøÂêçtoken)\n    - `DEFAULT_KEY`: ÂÆ¢Êà∑Á´ØAPIÂØÜÈí• (ÂèØÈÄâÔºåÈªòËÆ§: sk-your-key)\n    - `MODEL_NAME`: ÊòæÁ§∫ÁöÑÊ®°ÂûãÂêçÁß∞ (ÂèØÈÄâÔºåÈªòËÆ§: GLM-4.5)\n    - `PORT`: ÊúçÂä°ÁõëÂê¨Á´ØÂè£ (Render‰ºöËá™Âä®ËÆæÁΩÆ)\n\n3. ÈÉ®ÁΩ≤ÂÆåÊàêÂêéÔºå‰ΩøÁî®RenderÊèê‰æõÁöÑURL‰Ωú‰∏∫OpenAI APIÁöÑbase_url\n\n## ‚öôÔ∏è ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ\n\nÊú¨È°πÁõÆÊîØÊåÅÈÄöËøáÁéØÂ¢ÉÂèòÈáèËøõË°åÈÖçÁΩÆÔºåÊèê‰æõÁÅµÊ¥ªÁöÑÈÉ®ÁΩ≤ÂíåËøêË°åÈÄâÈ°π„ÄÇ\n\n### üöÄ Âø´ÈÄüÂºÄÂßã\n\n#### 1. ‰ΩøÁî®ÂêØÂä®ËÑöÊú¨ÔºàÊé®ËçêÔºâ\n\n**macOS/Linux:**\n```bash\n./start.sh\n```\n\n**Windows:**\n```cmd\nstart.bat\n```\n\n#### 2. ÊâãÂä®ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáè\n\n**macOS/Linux:**\n```bash\nexport ZAI_TOKEN=\"your_z_ai_token_here\"\nexport DEFAULT_KEY=\"sk-your-custom-key\"\nexport PORT=\"9090\"\ngo run main.go\n```\n\n**Windows:**\n```cmd\nset ZAI_TOKEN=your_z_ai_token_here\nset DEFAULT_KEY=sk-your-custom-key\nset PORT=9090\ngo run main.go\n```\n\n#### 3. DockerËøêË°å\n\n```bash\ndocker run -p 9090:9090 \\\n  -e ZAI_TOKEN=your_z_ai_token_here \\\n  -e DEFAULT_KEY=sk-your-custom-key \\\n  -e PORT=9090 \\\n  zto-api\n```\n\n### üìã ÁéØÂ¢ÉÂèòÈáèÂàóË°®\n\n#### üîë ÂøÖÈúÄÈÖçÁΩÆ\n\nÊó†ÂøÖÈúÄÈÖçÁΩÆ„ÄÇÊâÄÊúâÈÖçÁΩÆÈÉΩÊúâÂêàÁêÜÁöÑÈªòËÆ§ÂÄº„ÄÇ\n\n#### ‚öôÔ∏è ÂèØÈÄâÈÖçÁΩÆ\n\n| ÂèòÈáèÂêç | ËØ¥Êòé | ÈªòËÆ§ÂÄº | Á§∫‰æã |\n|--------|------|--------|------|\n| `ZAI_TOKEN` | Z.ai ËÆøÈóÆ‰ª§Áâå | Á©∫ÔºàËá™Âä®Ëé∑ÂèñÈöèÊú∫ÂåøÂêçtokenÔºâ | `eyJhbGciOiJFUzI1NiIs...` |\n\n#### ‚öôÔ∏è ÂèØÈÄâÈÖçÁΩÆ\n\n| ÂèòÈáèÂêç | ËØ¥Êòé | ÈªòËÆ§ÂÄº | Á§∫‰æã |\n|--------|------|--------|------|\n| `DEFAULT_KEY` | ÂÆ¢Êà∑Á´ØAPIÂØÜÈí• | `sk-your-key` | `sk-my-api-key` |\n| `MODEL_NAME` | ÊòæÁ§∫Ê®°ÂûãÂêçÁß∞ | `GLM-4.5` | `GLM-4.5-Pro` |\n| `PORT` | ÊúçÂä°ÁõëÂê¨Á´ØÂè£ | `9090` | `9000` |\n| `DEBUG_MODE` | Ë∞ÉËØïÊ®°ÂºèÂºÄÂÖ≥ | `true` | `false` |\n| `DEFAULT_STREAM` | ÈªòËÆ§ÊµÅÂºèÂìçÂ∫î | `true` | `false` |\n| `DASHBOARD_ENABLED` | DashboardÂäüËÉΩÂºÄÂÖ≥ | `true` | `false` |\n| `ENABLE_THINKING` | ÊÄùËÄÉÂäüËÉΩÂºÄÂÖ≥ | `false` | `true` |\n\n#### üîß È´òÁ∫ßÈÖçÁΩÆ\n\n| ÂèòÈáèÂêç | ËØ¥Êòé | ÈªòËÆ§ÂÄº | Á§∫‰æã |\n|--------|------|--------|------|\n| `UPSTREAM_URL` | ‰∏äÊ∏∏APIÂú∞ÂùÄ | `https://chat.z.ai/api/chat/completions` | Ëá™ÂÆö‰πâURL |\n\n### üìÅ ÈÖçÁΩÆÊñá‰ª∂\n\n#### ÊîØÊåÅÁöÑÈÖçÁΩÆÊñá‰ª∂ÔºàÊåâ‰ºòÂÖàÁ∫ßÊéíÂ∫èÔºâ\n\n1. `.env.local` - Êú¨Âú∞ÁéØÂ¢ÉÈÖçÁΩÆÔºàÊé®ËçêÔºâ\n2. `.env` - ÁéØÂ¢ÉÈÖçÁΩÆ\n3. `config.env` - ÈÖçÁΩÆÊ®°Êùø\n\n#### ÈÖçÁΩÆÊñá‰ª∂Á§∫‰æã\n\n```bash\n# Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂\ncp config.env .env.local\n\n# ÁºñËæëÈÖçÁΩÆÊñá‰ª∂\nnano .env.local\n```\n\n### üîê Ëé∑Âèñ Z.ai Token\n\n#### ÊñπÊ≥ï1ÔºöÊµèËßàÂô®ÂºÄÂèëËÄÖÂ∑•ÂÖ∑\n\n1. ÁôªÂΩï [Z.ai](https://chat.z.ai)\n2. ÊâìÂºÄÊµèËßàÂô®ÂºÄÂèëËÄÖÂ∑•ÂÖ∑ÔºàF12Ôºâ\n3. ÂàáÊç¢Âà∞ Network Ê†áÁ≠æÈ°µ\n4. ÂèëÈÄÅ‰∏ÄÊù°Ê∂àÊÅØ\n5. Âú®ËØ∑Ê±Ç‰∏≠ÊâæÂà∞ `Authorization` Â§¥ÈÉ®ÁöÑ Bearer token\n\n#### ÊñπÊ≥ï2ÔºöCookie ÊñπÂºè\n\n1. ÁôªÂΩï Z.ai ÂêéÔºåÂú®ÂºÄÂèëËÄÖÂ∑•ÂÖ∑‰∏≠Êü•Áúã Cookies\n2. ÊâæÂà∞ÂåÖÂê´ËÆ§ËØÅ‰ø°ÊÅØÁöÑ cookie\n\n#### ÊñπÊ≥ï3ÔºöÂåøÂêçToken\n\nÊú¨È°πÁõÆÊîØÊåÅËá™Âä®Ëé∑ÂèñÂåøÂêçtokenÔºåÊó†ÈúÄÊâãÂä®ÈÖçÁΩÆ„ÄÇÂΩì `ZAI_TOKEN` ÁéØÂ¢ÉÂèòÈáèÊú™ËÆæÁΩÆÊó∂ÔºåÁ≥ªÁªü‰ºöËá™Âä®‰∏∫ÊØèÊ¨°ÂØπËØùËé∑Âèñ‰∏çÂêåÁöÑÈöèÊú∫ÂåøÂêçtokenÔºåÈÅøÂÖçÂÖ±‰∫´ËÆ∞ÂøÜ„ÄÇËøôÁßçÊú∫Âà∂‰ΩøÂæóÈ°πÁõÆÂç≥‰ΩøÁî®Êà∑Ê≤°ÊúâÊèê‰æõ Z.ai ÁöÑËÆøÈóÆ‰ª§Áâå‰πüËÉΩÊ≠£Â∏∏Â∑•‰Ωú„ÄÇ\n\n### üéØ ‰ΩøÁî®Á§∫‰æã\n\n#### Âü∫Êú¨ÈÖçÁΩÆ\n\n```bash\n# .env.local\nZAI_TOKEN=eyJhbGciOiJFUzI1NiIs...\nDEFAULT_KEY=sk-my-secret-key\nMODEL_NAME=GLM-4.5-Pro\nPORT=9000\nDEBUG_MODE=false\n```\n\n#### Áîü‰∫ßÁéØÂ¢ÉÈÖçÁΩÆ\n\n```bash\n# .env.production\nZAI_TOKEN=your_production_token\nDEFAULT_KEY=sk-production-key\nMODEL_NAME=GLM-4.5\nPORT=9090\nDEBUG_MODE=false\nDEFAULT_STREAM=true\n```\n\n#### ÂºÄÂèëÁéØÂ¢ÉÈÖçÁΩÆ\n\n```bash\n# .env.development\nZAI_TOKEN=your_dev_token\nDEFAULT_KEY=sk-dev-key\nMODEL_NAME=GLM-4.5-Dev\nPORT=8080\nDEBUG_MODE=true\nDEFAULT_STREAM=true\nDASHBOARD_ENABLED=true\n```\n\n### üìä DashboardÂäüËÉΩ\n\nÊú¨È°πÁõÆÊèê‰æõ‰∫Ü‰∏Ä‰∏™Web‰ª™Ë°®ÊùøÔºåÁî®‰∫éÂÆûÊó∂ÁõëÊéßAPIËΩ¨ÂèëÊÉÖÂÜµÂíåÁªüËÆ°‰ø°ÊÅØ„ÄÇ\n\n#### ÂäüËÉΩÁâπÁÇπ\n\n- ÂÆûÊó∂ÊòæÁ§∫APIËØ∑Ê±ÇÁªüËÆ°‰ø°ÊÅØÔºàÊÄªËØ∑Ê±ÇÊï∞„ÄÅÊàêÂäüËØ∑Ê±ÇÊï∞„ÄÅÂ§±Ë¥•ËØ∑Ê±ÇÊï∞„ÄÅÂπ≥ÂùáÂìçÂ∫îÊó∂Èó¥Ôºâ\n- ÊòæÁ§∫ÊúÄËøë100Êù°ËØ∑Ê±ÇÁöÑËØ¶ÁªÜ‰ø°ÊÅØÔºàÊó∂Èó¥„ÄÅÊñπÊ≥ï„ÄÅË∑ØÂæÑ„ÄÅÁä∂ÊÄÅÁ†Å„ÄÅËÄóÊó∂„ÄÅÂÆ¢Êà∑Á´ØIPÔºâ\n- Êï∞ÊçÆÊØè5ÁßíËá™Âä®Âà∑Êñ∞‰∏ÄÊ¨°\n- ÂìçÂ∫îÂºèËÆæËÆ°ÔºåÊîØÊåÅÂêÑÁßçËÆæÂ§áËÆøÈóÆ\n\n#### ËÆøÈóÆÊñπÂºè\n\nÂêØÂä®ÊúçÂä°ÂêéÔºåÈÄöËøáÊµèËßàÂô®ËÆøÈóÆ‰ª•‰∏ãÂú∞ÂùÄÔºö\n```\nhttp://localhost:9090/dashboard\n```\n\n#### ÈÖçÁΩÆÈÄâÈ°π\n\nÈÄöËøá `DASHBOARD_ENABLED` ÁéØÂ¢ÉÂèòÈáèÊéßÂà∂DashboardÂäüËÉΩÁöÑÂºÄÂêØÂíåÂÖ≥Èó≠Ôºö\n\n```bash\n# ÂêØÁî®DashboardÔºàÈªòËÆ§Ôºâ\nDASHBOARD_ENABLED=true\n\n# Á¶ÅÁî®Dashboard\nDASHBOARD_ENABLED=false\n```\n\n#### ‰ΩøÁî®Âú∫ÊôØ\n\n- **ÂºÄÂèëË∞ÉËØï**: ÂÆûÊó∂Êü•ÁúãAPIËØ∑Ê±ÇÊÉÖÂÜµÔºå‰æø‰∫éË∞ÉËØïÂíåÈóÆÈ¢òÊéíÊü•\n- **ÊÄßËÉΩÁõëÊéß**: ÁõëÊéßAPIÂìçÂ∫îÊó∂Èó¥ÂíåÊàêÂäüÁéáÔºåËØÑ‰º∞Á≥ªÁªüÊÄßËÉΩ\n- **ÂÆâÂÖ®ÂÆ°ËÆ°**: Êü•ÁúãËØ∑Ê±ÇÊù•Ê∫êÂíåÈ¢ëÁéáÔºåÂèëÁé∞ÂºÇÂ∏∏ËÆøÈóÆÊ®°Âºè\n\n### üîÑ ÈáçÂêØÊúçÂä°\n\n‰øÆÊîπÁéØÂ¢ÉÂèòÈáèÂêéÔºåÈúÄË¶ÅÈáçÂêØÊúçÂä°‰ΩøÈÖçÁΩÆÁîüÊïàÔºö\n\n```bash\n# ÂÅúÊ≠¢ÂΩìÂâçÊúçÂä°\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:17.277307"
  },
  {
    "basic_info": {
      "name": "dab-downloader",
      "full_name": "PrathxmOp/dab-downloader",
      "owner": "PrathxmOp",
      "description": "A powerful, modular music downloader that delivers high-quality FLAC files with comprehensive metadata support through the DAB API.",
      "url": "https://github.com/PrathxmOp/dab-downloader",
      "clone_url": "https://github.com/PrathxmOp/dab-downloader.git",
      "ssh_url": "git@github.com:PrathxmOp/dab-downloader.git",
      "homepage": "https://signal.group/#CjQKIARVUX48EP6g9DSPb2n1v6fAkxGQvdJJSWc4KLa4KFVyEhDCRiJon09heXcckPnkX6k2",
      "created_at": "2025-09-13T23:36:48Z",
      "updated_at": "2025-09-23T01:33:57Z",
      "pushed_at": "2025-09-19T18:43:37Z"
    },
    "stats": {
      "stars": 110,
      "forks": 3,
      "watchers": 110,
      "open_issues": 3,
      "size": 7643
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 111955,
        "Dockerfile": 1201
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# üéµ DAB Music Downloader\n\n[![Go Version](https://img.shields.io/badge/go-%3E%3D1.19-blue.svg)](https://golang.org/dl/)\n[![License](https://img.shields.io/badge/license-Educational-green.svg)](#license)\n[![Release](https://img.shields.io/github/v/release/PrathxmOp/dab-downloader)](https://github.com/PrathxmOp/dab-downloader/releases/latest)\n[![Signal Support](https://img.shields.io/badge/Support-Signal%20Group-blue.svg)](https://signal.group/#CjQKIARVUX48EP6g9DSPb2n1v6fAkxGQvdJJSWc4KLa4KFVyEhDCRiJon09heXcckPnkX6k2)\n![Development Status](https://img.shields.io/badge/status-unstable%20development-orange.svg)\n\n> A powerful, modular music downloader that delivers high-quality FLAC files with comprehensive metadata support through the DAB API.\n\n## ‚ö†Ô∏è **IMPORTANT: Development Status**\n\nüöß **This project is currently in active, unstable development.** üöß\n\n- **Frequent Breaking Changes**: Features may work one day and break the next\n- **Regular Updates Required**: You'll need to update frequently to get the latest fixes\n- **Expect Issues**: Something always seems to break when i fix something else\n- **Pre-Stable Release**: We're working toward a stable v1.0, but we're not there yet\n\n**üì¢ We strongly recommend:**\n- ‚úÖ Joining our [Signal Support Group](https://signal.group/#CjQKIARVUX48EP6g9DSPb2n1v6fAkxGQvdJJSWc4KLa4KFVyEhDCRiJon09heXcckPnkX6k2) for real-time updates\n- ‚úÖ Checking for updates daily if you're actively using the tool\n- ‚úÖ Being prepared to troubleshoot and report issues\n- ‚úÖ Having patience as we work through the bugs\n\nüí¨ **Need Help?** Join our [Signal Support Group](httpss://signal.group/#CjQKIARVUX48EP6g9DSPb2n1v6fAkxGQvdJJSWc4KLa4KFVyEhDCRiJon09heXcckPnkX6k2) for instant community support and the latest stability updates!\n\n**üë§ Solo Developer Project:** This tool is developed and maintained by a single developer. While I work hard to push frequent updates and fixes (often multiple commits per day), expect some instability as I can't test every scenario across all systems.\n\n## ‚ú® Key Features\n\nüîç **Smart Search** - Find artists, albums, and tracks with intelligent filtering  \nüì¶ **Complete Discographies** - Download entire artist catalogs with automatic categorization  \nüè∑Ô∏è **Rich Metadata** - Full tag support including genre, composer, producer, ISRC, and copyright  \nüé® **High-Quality Artwork** - Embedded album covers in original resolution  \n‚ö° **Concurrent Downloads** - Fast parallel processing with real-time progress tracking  \nüîÑ **Intelligent Retry Logic** - Robust error handling for reliable downloads  \nüéß **Spotify Integration** - Import and download entire Spotify playlists and albums  \nüéµ **Format Conversion** - Convert downloaded FLAC files to MP3, OGG, Opus with configurable bitrates (requires FFmpeg)  \nüìä **Navidrome Support** - Seamless integration with your music server  \n\n## üì∏ Screenshots\n\n![img1](./screenshots/ScreenShot1.png)\n![img1](./screenshots/ScreenShot2.png)\n\n## üöÄ Quick Start\n\n### Option 1: Using `auto-dl.sh` Script (Recommended)\n\nThis script simplifies the process of downloading and keeping `dab-downloader` updated. It fetches the latest version and places it in your current directory.\n\n**Direct execution with curl:**\n```bash\ncurl -fsSL https://raw.githubusercontent.com/PrathxmOp/Support-group-junk/main/Scripts/auto-dl.sh | bash\n```\n\n**Alternative methods:**\n\n**Using wget (if curl is not available):**\n```bash\nwget -qO- https://raw.githubusercontent.com/PrathxmOp/Support-group-junk/main/Scripts/auto-dl.sh | bash\n```\n\n**Download first, then execute (safer approach):**\n```bash\ncurl -fsSL -o auto-dl.sh https://raw.githubusercontent.com/PrathxmOp/Support-group-junk/main/Scripts/auto-dl.sh\nchmod +x auto-dl.sh\n./auto-dl.sh\n```\n\n### Option 2: Pre-built Binary\n\n1. Download the latest release from our [GitHub Releases](https://github.com/PrathxmOp/dab-downloader/releases/latest)\n2. Extract the archive.\n3. Grant execute permissions to the binary:\n   ```bash\n   chmod +x ./dab-downloader-linux-arm64 # Or the appropriate binary for your system\n   ```\n4. Run the executable:\n   ```bash\n   ./dab-downloader-linux-arm64 # Or the appropriate binary for your system\n   ```\n5. Follow the interactive setup on first launch\n\n### Option 3: Build from Source\n\n**Prerequisites:**\n- Go 1.19 or later ([Download here](https://golang.org/dl/))\n\n```bash\n# Clone the repository\ngit clone https://github.com/PrathxmOp/dab-downloader.git\ncd dab-downloader\n\n# Install dependencies and build\ngo mod tidy\ngo build -o dab-downloader\n```\n\n### Option 4: Docker (Containerized)\n\nTo run dab-downloader using a pre-built Docker image from Docker Hub:\n\n1.  **Ensure Docker is installed:** Follow the official Docker installation guide for your system.\n2.  **Configure with Docker Compose:**\n    *   Make sure your `docker-compose.yml` file is configured to use the `prathxm/dab-downloader:latest` image (as updated by the latest changes).\n    *   Create `config` and `music` directories if they don't exist:\n        ```bash\n        mkdir -p config music",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:18.384762"
  },
  {
    "basic_info": {
      "name": "helios",
      "full_name": "good-night-oppie/helios",
      "owner": "good-night-oppie",
      "description": "üåûHelios is an AI-native version control system that empowers coding agents with light-speed snapshots and massive branch exploration beyond Git‚Äôs human-centric limits.",
      "url": "https://github.com/good-night-oppie/helios",
      "clone_url": "https://github.com/good-night-oppie/helios.git",
      "ssh_url": "git@github.com:good-night-oppie/helios.git",
      "homepage": "",
      "created_at": "2025-08-27T19:37:04Z",
      "updated_at": "2025-09-19T23:03:32Z",
      "pushed_at": "2025-09-21T04:40:03Z"
    },
    "stats": {
      "stars": 105,
      "forks": 33,
      "watchers": 105,
      "open_issues": 12,
      "size": 21331
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 202435,
        "Shell": 36722,
        "HTML": 7687,
        "Makefile": 4638,
        "Dockerfile": 1760
      },
      "license": "Apache License 2.0",
      "topics": [
        "agentic-ai",
        "agentic-workflow",
        "ai-native",
        "git",
        "vcs"
      ]
    },
    "content": {
      "readme": "# Helios - Fast Version Control for AI Agents\n\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/good-night-oppie/helios?style=for-the-badge)](https://github.com/good-night-oppie/helios/releases/latest)\n[![GitHub Downloads](https://img.shields.io/github/downloads/good-night-oppie/helios/total?style=for-the-badge&color=brightgreen)](https://github.com/good-night-oppie/helios/releases)\n[![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg?style=for-the-badge)](LICENSE)\n[![Go Version](https://img.shields.io/badge/go-1.22+-00ADD8?style=for-the-badge&logo=go)](https://golang.org/)\n\n[![Platform Support](https://img.shields.io/badge/platforms-Linux%20|%20macOS%20|%20Windows-success?style=for-the-badge)](https://github.com/good-night-oppie/helios/releases)\n[![Architecture](https://img.shields.io/badge/arch-AMD64%20|%20ARM64-blue?style=for-the-badge)](https://github.com/good-night-oppie/helios/releases)\n[![Ask DeepWiki](https://img.shields.io/badge/deepwiki-indexed-purple?style=for-the-badge)](https://deepwiki.com/good-night-oppie/helios)\n[![README_ZH](https://img.shields.io/badge/‰∏≠ÊñáÊñáÊ°£-README__ZH.md-red?style=for-the-badge)](README_ZH.md)\n\n**H**ybrid / **E**fficient / **L**ayered / **I**ncremental **O**bject **S**tate (Engine)\n\n## Problems Helios Solves\n\n**High-frequency commits**: AI agents generate 100+ commits/hour, Git becomes bottleneck\n**Storage explosion**: Testing code variations creates massive repositories\n**Slow branching**: O(n) branch creation blocks parallel experiments  \n**Manual rollback**: When agents break code, recovery is slow and manual\n\n## Quick Start\n\n```bash\n# Install\ncurl -sSL https://raw.githubusercontent.com/good-night-oppie/helios/master/scripts/install.sh | sh\n\n# Use with existing project\ncd my-project\necho \"print('hello')\" > test.py\nhelios commit --work .  # Fast commit of current directory\n```\n\n## How It Works\n\n**Content-addressable storage** instead of Git's diff-based approach:\n- Files stored by BLAKE3 hash, automatic deduplication\n- O(1) branch creation (copy snapshot reference)\n- Three-tier architecture: Memory ‚Üí Cache ‚Üí Persistent storage\n\n## Quick Start: 5 Minutes to Faster AI Development\n\n```bash\n# Install Helios\ncurl -sSL https://raw.githubusercontent.com/good-night-oppie/helios/master/scripts/install.sh | sh\n\n# Basic usage (v0.0.1 commands)\ncd your-ai-project/\n\n# Commit current working directory\nhelios commit --work .\n\n# View statistics\nhelios stats\n\n# Restore to a specific snapshot\nhelios restore --id <snapshotID>\n\n# Compare snapshots\nhelios diff --from <id1> --to <id2>\n\n# Extract files from snapshot\nhelios materialize --id <snapshotID> --out /path/to/output\n```\n\n## Real AI Coding Agent Use Cases\n\n**High-frequency code generation**: Testing multiple LLM outputs per minute\n- GPT-4 generates 10 function implementations ‚Üí commit each in <1ms ‚Üí run tests ‚Üí keep best one\n- Traditional Git: 10 √ó 20ms = 200ms just for version control\n- Helios: 10 √ó 0.2ms = 2ms for version control\n\n**Parallel experiment branching**: Multiple agents trying different approaches  \n- Create 50 branches to test different algorithms ‚Üí merge successful ones\n- Traditional Git: 50 √ó 100ms = 5+ seconds of branch creation overhead\n- Helios: 50 √ó 0.07ms = 3.5ms for all branches\n\n**Instant rollback on failures**: When AI agents break working code\n- Agent makes 47 experimental changes ‚Üí tests fail ‚Üí rollback to last working state\n- Traditional Git: `git reset --hard` takes 100-500ms plus working directory sync\n- Helios: Jump to any previous state in <0.1ms\n\n## How It Works (Technical Overview)\n\n### Why Helios Is Faster\n\n**The bottleneck**: Git stores changes as diffs and uses filesystem operations for branches\n**Our approach**: Store unique content once, reference it with cryptographic hashes\n\n```\nTraditional Git                    Helios Content-Addressable\n‚îú‚îÄ‚îÄ commit1/                      ‚îú‚îÄ‚îÄ content/\n‚îÇ   ‚îú‚îÄ‚îÄ file1.py (full content)   ‚îÇ   ‚îú‚îÄ‚îÄ abc123... ‚Üí \"def func1():\"\n‚îÇ   ‚îî‚îÄ‚îÄ file2.py (full content)   ‚îÇ   ‚îú‚îÄ‚îÄ def456... ‚Üí \"def func2():\"  \n‚îú‚îÄ‚îÄ commit2/                      ‚îÇ   ‚îî‚îÄ‚îÄ ghi789... ‚Üí \"def func3():\"\n‚îÇ   ‚îú‚îÄ‚îÄ file1.py (diff)           ‚îî‚îÄ‚îÄ snapshots/\n‚îÇ   ‚îî‚îÄ‚îÄ file2.py (diff)               ‚îú‚îÄ‚îÄ commit1 ‚Üí [abc123, def456]\n‚îî‚îÄ‚îÄ commit3/                          ‚îî‚îÄ‚îÄ commit2 ‚Üí [abc123, ghi789]\n    ‚îú‚îÄ‚îÄ file1.py (diff)\n    ‚îî‚îÄ‚îÄ file2.py (diff)\n```\n\n**Result**: When your AI generates 1000 similar functions, we store shared code once instead of 1000 times.\n\n### Three-Layer Performance Architecture\n\n```\nüß† L0: In-Memory Working Set    - <1Œºs operations, current files\n‚ö° L1: Compressed Cache         - <10Œºs access, frequently used content  \nüíæ L2: RocksDB Storage         - <5ms writes, permanent storage\n```\n\n**Why this matters for AI**: Agents can commit every code change without performance penalty.\n\n### Performance: When It Matters\n\n**Operations per second your AI can achieve:**\n\n| Task | Git Limit | Helios | Real Impact |\n|------|-----------|---------|-------------|\n| Code commit",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-23T02:17:19.617283"
  },
  {
    "basic_info": {
      "name": "from-bash-to-go-part-ii",
      "full_name": "go-monk/from-bash-to-go-part-ii",
      "owner": "go-monk",
      "description": "Go for Bash Programmers II - CLI Tools",
      "url": "https://github.com/go-monk/from-bash-to-go-part-ii",
      "clone_url": "https://github.com/go-monk/from-bash-to-go-part-ii.git",
      "ssh_url": "git@github.com:go-monk/from-bash-to-go-part-ii.git",
      "homepage": "",
      "created_at": "2025-08-30T08:55:54Z",
      "updated_at": "2025-09-22T21:23:27Z",
      "pushed_at": "2025-09-10T12:49:46Z"
    },
    "stats": {
      "stars": 100,
      "forks": 0,
      "watchers": 100,
      "open_issues": 0,
      "size": 43
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 11670
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "This is the second part of a series introducing Bash programmers to Go. This part is about basics of writing CLI tools in Go. See the [first](https://github.com/go-monk/from-bash-to-go-part-i) part for the language building blocks.\n\n# Our first CLI tool\n\nBash is often used to write small CLI tools and automation. Let's start with an example CLI tool that prints \"hello\" to terminal. The Bash version is pretty simple:\n\n```bash\n#!/bin/bash\necho hello\n```\n\nNow, let's implement a Go version. We start by creating a directory where the first version of our program will live. We also initialize a module in there:\n\n```sh\n$ mkdir -p hello/1\n$ cd hello/1\n$ go mod init hello\n```\n\nSince the program is not complex we don't have to think a lot about its design and can easily start with a test:\n\n```go\n// hello/1/hello_test.go\npackage hello_test\n\nimport (\n\t\"hello\"\n\t\"testing\"\n)\n\nfunc TestPrintExists(t *testing.T) {\n\thello.Print()\n}\n```\n\nWe named the package `hello_test` instead of `hello`. This is possible and it allows for writing tests that use only the public API (identifiers starting with a capital letter) of the tested package as a real user would. Note that `*_test` packages are the sole exception to Go's standard rule that each source directory can contain only one package. In this test we just call the `Print` function from the `hello` package. Let's try and run the test:\n\n```sh\n$ go test\nhello: no non-test Go files in ~/github.com/go-monk/from-bash-to-go-series/part-ii-cli-tools/hello/1\nFAIL    hello [build failed]\n```\n\nYes, we have not yet written the code we want to test. So let's do it:\n\n```go\n// hello/1/hello.go\npackage hello\n\nfunc Print() {}\n```\n\nIf we re-run the test\n\n```sh\n$ go test\nPASS\nok      hello   0.570s\n```\n\nwe can see that all is good now. Or is it? Well, something must be wrong because an empty function that does nothing at all (except that it exists) passes the test. So the *test* is obviously wrong. Now we need to start thinking a bit. What should be actually tested? \n\n## Making it testable\n\nOkay, we want the function to print the string \"hello\" to terminal. How to test it except by looking at the terminal? In Bash the terminal is the standard output, i.e. the place where the stuff is written to by default. But we can redirect the standard output to a file or store it in a variable:\n\n```bash\n$ echo hello > /tmp/hello.txt\n$ HELLO=$(echo hello)\n```\n\nIn Go you can achieve similar functionality by using the standard library interface called [io.Writer](https://pkg.go.dev/io#Writer) (that is the `Writer` from the `io` package):\n\n```go\n// hello/2/hello.go\nfunc PrintTo(w io.Writer) {\n\ts := \"hello\"\n\tw.Write([]byte(s))\n}\n```\n\nWe write (print) the string \"hello\" to `w` supplied as the function's argument. And since the argument (parameter more precisely) is an interface it can be multiple kinds of things. Or more precisely it can be any type that implements the `io.Writer` interface, i.e. has a function with the `Write(p []byte) (int, error)` signature attached.\n\nThere are many implementations of `io.Writer` in the standard library. Two of them are `bytes.Buffer` and `os.Stdout`. We can write to a bytes buffer in the test\n\n```go\n// hello/2/hello_test.go\nfunc TestPrintToPrintsHelloToWriter(t *testing.T) {\n\tbuf := new(bytes.Buffer)\n\thello.PrintTo(buf) // writing to buffer\n\twant := \"hello\"\n\tgot := buf.String()\n\tif want != got {\n\t\tt.Errorf(\"want %q, got %q\", want, got)\n\t}\n}\n```\n\nand to the standard output in the main function\n\n```go\n// hello/2/cmd/hello/main.go\nfunc main() {\n\thello.PrintTo(os.Stdout) // writing to STDOUT\n}\n```\n\nNow we have a real test that we can rely on:\n\n```sh\n$ cd hello/2\n$ go test\nPASS\nok      hello   0.183s\n```\n\nAs an exercise try to break the test so it doesn't pass.\n\nWe also added the `cmd` folder that holds the binary (command) to be used by the end user like this:\n\n```sh\n$ go install ./cmd/hello\n$ hello\nhello\n```\n\n## Decreasing complexity\n\nTalking about the end user and looking at how the `PrintTo` function is called in `main`\n\n```go\nhello.PrintTo(os.Stdout)\n```\n\nwe might think this is not ideal. Why should a user tell the function to print to standard output? Isn't it what most users want most of the time? Shouldn't it be the default behavior?\n\n### Nil argument\n\nBut the `PrintTo` function *must* have an argument when called. So maybe we can use the approach that's used by the `http.ListenAndServe` standard library function; we use `nil` to indicate we want the default behaviour:\n\n```go\n// hello/3/hello.go\nfunc PrintTo(w io.Writer) {\n\tif w == nil {\n\t\tw = os.Stdout\n\t}\n\ts := \"hello\"\n\tw.Write([]byte(s))\n}\n```\n\n```go\n// hello/3/cmd/hello/main.go\nhello.PrintTo(nil)\n```\n\nHmm, this works but still seems unnecessary complex.\n\n### Global variable\n\nWe could remove the need for an argument altogether by using a global variable that would define where to write:\n\n```go\n// hello/4/hello.go\nvar Output io.Writer = os.Stdout\n```\n\nTo change the default, you change the global variable:\n\n```go\n// hello/4/h",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:20.737972"
  },
  {
    "basic_info": {
      "name": "MeetC2",
      "full_name": "deriv-security/MeetC2",
      "owner": "deriv-security",
      "description": "(MeetC2 a.k.a Meeting C2) - A framework abusing Google Calendar APIs.",
      "url": "https://github.com/deriv-security/MeetC2",
      "clone_url": "https://github.com/deriv-security/MeetC2.git",
      "ssh_url": "git@github.com:deriv-security/MeetC2.git",
      "homepage": null,
      "created_at": "2025-09-04T10:13:40Z",
      "updated_at": "2025-09-22T09:56:30Z",
      "pushed_at": "2025-09-04T13:34:58Z"
    },
    "stats": {
      "stars": 98,
      "forks": 17,
      "watchers": 98,
      "open_issues": 0,
      "size": 21
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 11782,
        "Shell": 3226
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "## MeetC2\n\nA serverless command & control (C2) framework that leverages Google Calendar APIs, as a covert communication channel between operators and a compromised system.\n\n<b>Video Proof-of-concept:</b> https://youtu.be/YkKtQ3Ex8-Q <br>\n\n<b>Setup Instructions here:</b> https://medium.com/deriv-tech/meetc2-a-k-a-meeting-c2-1fc2a6761068\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-23T02:17:21.887592"
  },
  {
    "basic_info": {
      "name": "faroe",
      "full_name": "faroedev/faroe",
      "owner": "faroedev",
      "description": "Faroe is a modular auth server distributed as a Go package.",
      "url": "https://github.com/faroedev/faroe",
      "clone_url": "https://github.com/faroedev/faroe.git",
      "ssh_url": "git@github.com:faroedev/faroe.git",
      "homepage": "https://faroe.dev",
      "created_at": "2025-09-05T06:12:02Z",
      "updated_at": "2025-09-19T11:09:02Z",
      "pushed_at": "2025-09-15T08:52:02Z"
    },
    "stats": {
      "stars": 98,
      "forks": 1,
      "watchers": 98,
      "open_issues": 3,
      "size": 83
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 300201
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# github.com/faroedev/faroe\n\n_Documentation at [faroe.dev](https://faroe.dev)._\n\n_This software is in active development and has only gone through minimal testing._\n\nFaroe is a modular auth server distributed as a Go package.\n\n```\ngo get github.com/faroedev/faroe\n```\n\nSome key features of the server:\n\n1. Takes care of all the hard parts. Passwords, email address verification, sessions, rate limiting, password resets, and more.\n2. Extends your existing user database instead of replacing it. Own and customize your user data. No more data synchronization between servers.\n3. No direct connections to your database.\n4. Only ephemeral data is stored. Less things to manage and worry about.\n\n```ts\nconst result = await client.createSignup(emailAddress);\nif (!result.ok) {\n    console.log(result.errorCode);\n    return;\n}\nconsole.log(result.signup);\nwindow.localStorage.setItem(\"signup_token\", result.signupToken);\n```\n\nThe package has no hard dependencies. All you need is a key-value store and an email server.\n\n```go\npackage main\n\nimport \"github.com/faroedev/faroe\"\n\nfunc main() {\n\tserver := faroe.NewServer(\n\t\tstorage,\n\t\tuserStore,\n\t\tlogger,\n\t\tuserPasswordHashAlgorithms,\n\t\ttemporaryPasswordHashAlgorithm,\n\t\tcpuCount,\n\t\tfaroe.RealClock,\n\t\tfaroe.AllowAllEmailAddresses,\n\t\temailSender,\n\t\tsessionConfig,\n\t)\n}\n```\n\nOnly password authentication is supported. Support for passkeys and 2FA are planned but there are no immediate plans to add social login (e.g. Sign in with Google).\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:23.060753"
  },
  {
    "basic_info": {
      "name": "telemetry-harbor-oss",
      "full_name": "TelemetryHarbor/telemetry-harbor-oss",
      "owner": "TelemetryHarbor",
      "description": "Telemetry Harbor OSS is the open-source ingestion and visualization stack behind Telemetry Harbor",
      "url": "https://github.com/TelemetryHarbor/telemetry-harbor-oss",
      "clone_url": "https://github.com/TelemetryHarbor/telemetry-harbor-oss.git",
      "ssh_url": "git@github.com:TelemetryHarbor/telemetry-harbor-oss.git",
      "homepage": null,
      "created_at": "2025-08-27T08:22:01Z",
      "updated_at": "2025-09-16T23:59:07Z",
      "pushed_at": "2025-08-30T19:17:11Z"
    },
    "stats": {
      "stars": 91,
      "forks": 5,
      "watchers": 91,
      "open_issues": 0,
      "size": 53
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 23192
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# Telemetry Harbor OSS\n\n<!-- OSS Badges -->\n![License](https://img.shields.io/github/license/TelemetryHarbor/telemetry-harbor-oss.svg)\n![Docker](https://img.shields.io/badge/Docker-Compose-2496ED.svg)\n![Last Commit](https://img.shields.io/github/last-commit/TelemetryHarbor/telemetry-harbor-oss.svg)\n![Issues](https://img.shields.io/github/issues/TelemetryHarbor/telemetry-harbor-oss.svg)\n![Pull Requests](https://img.shields.io/github/issues-pr/TelemetryHarbor/telemetry-harbor-oss.svg)\n![Repo Size](https://img.shields.io/github/repo-size/TelemetryHarbor/telemetry-harbor-oss.svg)\n![Contributors](https://img.shields.io/github/contributors/TelemetryHarbor/telemetry-harbor-oss.svg)\n<!-- Fun / Community -->\n![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg)\n![Stars](https://img.shields.io/github/stars/TelemetryHarbor/telemetry-harbor-oss.svg?style=social)\n![Forks](https://img.shields.io/github/forks/TelemetryHarbor/telemetry-harbor-oss.svg?style=social)\n\nTelemetry Harbor OSS is the open-source ingestion and visualization stack behind Telemetry Harbor. Self-host your own telemetry backend with full control over your data and infrastructure.\n\n**_Repo Link:_** https://github.com/TelemetryHarbor/telemetry-harbor-oss\n\n\n\n## What's Included\n\n*   üöÄ **API Ingestion Layer** - Go Fiber-based REST API with Redis-backed queue\n*   ‚ö° **Background Worker** - Efficient data processing and TimescaleDB insertion\n*   üìä **Grafana Integration** - Pre-configured dashboards and datasource\n*   üóÑÔ∏è **TimescaleDB** - Optimized time-series database for telemetry data\n*   üîÑ **Redis Queue** - Reliable message queue management\n*   üõ†Ô∏è **SDK Compatible** - Works with all official Telemetry Harbor SDKs\n\n\n\n## üöÄ Quick Start\n\nGet your self-hosted Telemetry Harbor instance running in minutes:\n\n```bash\ngit clone https://github.com/TelemetryHarbor/telemetry-harbor-oss.git\ncd telemetry-harbor-oss\ndocker compose up -d\n```\n\nOnce started:\n*   **API available at** ‚Üí `http://localhost:8000/api/v2`\n*   **Grafana available at** ‚Üí `http://localhost:3000` (default: `admin` / `StrongAdminPassword!`)\n\n\n## üìã System Requirements\n\n*   **Docker** with Docker Compose support\n*   **Minimum 2GB RAM** (4GB+ recommended for production)\n*   **10GB+ disk space** (depends on data retention needs)\n\n\n\n## üîê Security Configuration\n\n:warning: Security Notice\nThis repository ships with default credentials for ease of testing. **Before using in production**, you must change the following in `docker-compose.yml`:\n\n*   `POSTGRES_PASSWORD` - TimescaleDB password\n*   `REDIS_PASSWORD` - Redis authentication password  \n*   `API_KEY` - API authentication key for data ingestion\n*   `GF_SECURITY_ADMIN_PASSWORD` - Grafana admin password\n\nFailure to do so will leave your system vulnerable.\n\n\n## üì° API Ingestion\n\nReplace Telemetry Harbor Cloud URLs with your own domain, omitting the harbor ID.\n\n### Single Data Push\n```\nPOST http://yourdomain.com/api/v2/ingest/\n```\n\n### Batch Data Push  \n```\nPOST http://yourdomain.com/api/v2/ingest/batch\n```\n\nBoth endpoints require the API key set via the `X-API-Key` header.\n\n### Example Usage\n\n**Single Data Point:**\n```bash\ncurl -X POST \"http://localhost:8000/api/v2/ingest/\" \\\n-H \"X-API-Key: your_api_key_here\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\n  \"time\": \"2025-01-18T19:24:00.948Z\",\n  \"ship_id\": \"test_device_single\",\n  \"cargo_id\": \"test_metric\",\n  \"value\": 123.45\n}'\n```\n\n**Batch Data:**\n```bash\ncurl -X POST \"http://localhost:8000/api/v2/ingest/batch\" \\\n-H \"X-API-Key: your_api_key_here\" \\\n-H \"Content-Type: application/json\" \\\n-d '[\n  {\n    \"time\": \"2025-01-18T19:24:00.948Z\",\n    \"ship_id\": \"batch_device\",\n    \"cargo_id\": \"temperature\",\n    \"value\": 25.5\n  },\n  {\n    \"time\": \"2025-01-18T19:24:00.948Z\", \n    \"ship_id\": \"batch_device\",\n    \"cargo_id\": \"humidity\",\n    \"value\": 60.2\n  }\n]'\n```\n\n\n## üìä Visualization with Grafana\n\nGrafana comes pre-configured with:\n*   **Telemetry Harbor Datasource** (TimescaleDB connection)\n*   **Comprehensive Telemetry Dashboard** \n*   **Ready-to-use panels** for time-series visualization\n\nLog into Grafana at `http://localhost:3000` and start exploring your telemetry data immediately.\n\n\n\n## üóÑÔ∏è Data Retention\n\nBy default, your telemetry data is kept for **365 days**.  \nWant a different retention period? Just tweak it in [`init.sql`](https://github.com/TelemetryHarbor/telemetry-harbor-oss/blob/main/init.sql) before starting the stack.\n\n\n## üõ†Ô∏è SDK Compatibility\n\nTelemetry Harbor OSS is fully compatible with all official Telemetry Harbor SDKs:\n\n*   [**Telemetry Harbor SDKs**](/docs/sdks)\n\nJust replace your ingest endpoint with your OSS URL - no code changes needed!\n\n\n## ‚òÅÔ∏è OSS vs Cloud Comparison\n\n| Feature | OSS Self-hosted | Telemetry Harbor Cloud |\n|---------|----------------|-------------------------|\n| **Pricing** | Free | Free/Paid |\n| **Rate Limits** | No rate limits (your hardware) | Rate limits based on plan |\n| **Data Retention** | 365 days (configurable) | Varies by plan |\n| **Storage** | Based On Yo",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:24.233040"
  },
  {
    "basic_info": {
      "name": "ai-infrastructure-agent",
      "full_name": "VersusControl/ai-infrastructure-agent",
      "owner": "VersusControl",
      "description": "AI Infrastructure Agent is an intelligent system that allows you to manage AWS infrastructure using natural language commands.",
      "url": "https://github.com/VersusControl/ai-infrastructure-agent",
      "clone_url": "https://github.com/VersusControl/ai-infrastructure-agent.git",
      "ssh_url": "git@github.com:VersusControl/ai-infrastructure-agent.git",
      "homepage": "https://ai-agent.devopsvn.tech",
      "created_at": "2025-08-30T06:49:43Z",
      "updated_at": "2025-09-22T22:08:16Z",
      "pushed_at": "2025-09-22T07:41:40Z"
    },
    "stats": {
      "stars": 88,
      "forks": 26,
      "watchers": 88,
      "open_issues": 18,
      "size": 3284
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 1067107,
        "JavaScript": 33630,
        "CSS": 13051,
        "Shell": 11196,
        "HTML": 8846
      },
      "license": "Apache License 2.0",
      "topics": [
        "ai",
        "ai-agents",
        "aws",
        "devops",
        "infrastructure",
        "mcp"
      ]
    },
    "content": {
      "readme": "# AI Infrastructure Agent\n\n> ‚ö†Ô∏è **Proof of Concept Project**: This repository contains a proof-of-concept implementation of an AI-powered infrastructure management agent. It is currently in active development and **not intended for production use**. We plan to release a production-ready version in the future. Use at your own risk and always test in development environments first.\n\n<h1 align=\"center\" style=\"border-bottom: none\">\n  <img alt=\"AI Infrastructure Agent\" src=\"docs/images/ai-infrastructure-agent.svg\" width=\"150\" height=\"150\">\n</h1>\n\n<div align=\"center\">\n\n[![Go Version](https://img.shields.io/badge/Go-1.24.2+-00ADD8?style=for-the-badge&logo=go)](https://golang.org/)\n[![AWS](https://img.shields.io/badge/AWS-Cloud-FF9900?style=for-the-badge&logo=amazon-aws)](https://aws.amazon.com/)\n[![MCP](https://img.shields.io/badge/Protocol-MCP-purple?style=for-the-badge)](https://modelcontextprotocol.io/)\n\n*Intelligent AWS infrastructure management through natural language interactions*\n\n</div>\n\n## What is AI Infrastructure Agent?\n\nAI Infrastructure Agent is an intelligent system that allows you to manage AWS infrastructure using natural language commands. Powered by advanced AI models (OpenAI GPT, Google Gemini, or Anthropic Claude), it translates your infrastructure requests into executable AWS operations while maintaining safety through conflict detection and resolution.\n\n<h1 align=\"center\" style=\"border-bottom: none\">\n  <img alt=\"Web Dashboard\" src=\"docs/images/web-dashboard.svg\">\n</h1>\n\n### Key Features\n\n- **Natural Language Interface** - Describe what you want, not how to build it\n- **Multi-AI Provider Support** - Choose between OpenAI, Google Gemini, Anthropic, or AWS Bedrock Nova\n- **Web Dashboard** - Visual interface for infrastructure management, built-in conflict detection and dry-run mode\n- **Terraform-like state** - Maintains accurate infrastructure state\n- **Current Resource Support** - VPC, EC2, SG, Autoscaling Group, ALB. Check the roadmap here: [Core Platform Development](https://github.com/orgs/VersusControl/projects/19)\n\n## Example Usage\n\nImagine you want to create AWS infrastructure with a simple request:\n\n> **\"Create an EC2 instance for hosting an Apache Server with a dedicated security group that allows inbound HTTP (port 80) and SSH (port 22) traffic.\"**\n\n> üí° **Amazon Nova Users**: When using AWS Bedrock Nova models, you may want to specify the region in your request for better context, e.g., *\"Create an EC2 instance in us-east-1 for hosting an Apache Server...\"*\n\nHere's what happens:\n\n### 1. AI Analysis & Planning\n\nThe AI agent analyzes your request and creates a detailed execution plan:\n\n```mermaid\nsequenceDiagram\n    participant U as User\n    participant A as AI Agent\n    participant S as State Manager\n    participant M as MCP Server\n    participant AWS as AWS APIs\n    \n    U->>A: \"Create EC2 instance for Apache Server...\"\n    A->>S: Get current infrastructure state\n    S->>A: Return current state\n    A->>M: Query available tools & capabilities\n    M->>A: Return tool capabilities\n    A->>A: Generate execution plan with LLM\n    A->>AWS: Validate plan (dry-run checks)\n    AWS->>A: Validation results\n    A->>U: Present execution plan for approval\n    \n    Note over A,U: Plan includes:<br/>‚Ä¢ Get Default VPC<br/>‚Ä¢ Create Security Group<br/>‚Ä¢ Add HTTP & SSH rules<br/>‚Ä¢ Get Latest AMI<br/>‚Ä¢ Create EC2 Instance\n```\n\nThe agent presents the plan for your review:\n- Shows exactly what will be created\n- Waits for your approval\n\n### 2. Execution & Monitoring\n\nOnce approved, the agent:\n- Creates resources in the correct order\n- Monitors progress in real-time\n- Handles dependencies automatically\n- Reports completion status\n\n<h1 align=\"center\" style=\"border-bottom: none\">\n  <img alt=\"Execution & Monitoring\" src=\"docs/images/simple-demo.svg\">\n</h1>\n\n### 3. More Examples\n\n- Quick Tutorial: **[AI Infrastructure Agent for AWS](https://github.com/VersusControl/devops-ai-guidelines/blob/main/resources/ai-infrastructure-agent-for-aws.md)**\n- Series Tutorial: **[Building Your Business on AWS with AI Agent](https://github.com/VersusControl/devops-ai-guidelines/blob/main/04-ai-agent-for-aws/00-toc.md)**\n\n## Quick Installation\n\n### Prerequisites\n\n- **AWS Account** - With appropriate IAM permissions\n- **AI Provider API Key** - Choose from: OpenAI API Key, Google Gemini API Key, Anthropic API Key, or use AWS Bedrock Nova (with AWS credentials)\n\n### Automated Installation (Recommended)\n\n```bash\n# Clone the repository\ngit clone https://github.com/VersusControl/ai-infrastructure-agent.git\ncd ai-infrastructure-agent\n\n# Run the installation script\n./scripts/install.sh\n```\n\nThe installation script will:\n- ‚úÖ Check and install Go 1.24.2+\n- ‚úÖ Setup AWS CLI (if needed)\n- ‚úÖ Create necessary directories\n- ‚úÖ Build both MCP server and Web UI\n- ‚úÖ Create configuration files\n- ‚úÖ Generate launcher scripts\n\n### Manual Installation\n\n<details>\n<summary>Click to expand manual installation steps</summary>\n\n```bash\n# 1. Install Go 1.24.2+\n#",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:25.351066"
  },
  {
    "basic_info": {
      "name": "ByteCaster",
      "full_name": "Print3M/ByteCaster",
      "owner": "Print3M",
      "description": "Swiss Army Knife for payload encryption, obfuscation, and conversion to byte arrays ‚Äì all in a single command (14 output formats supported)! ‚ò¢Ô∏è",
      "url": "https://github.com/Print3M/ByteCaster",
      "clone_url": "https://github.com/Print3M/ByteCaster.git",
      "ssh_url": "git@github.com:Print3M/ByteCaster.git",
      "homepage": "",
      "created_at": "2025-09-17T14:45:28Z",
      "updated_at": "2025-09-23T01:48:56Z",
      "pushed_at": "2025-09-20T13:08:55Z"
    },
    "stats": {
      "stars": 79,
      "forks": 18,
      "watchers": 79,
      "open_issues": 0,
      "size": 10756
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 13941
      },
      "license": null,
      "topics": [
        "encryption-tool",
        "golang",
        "maldev",
        "malware-builder",
        "malware-development",
        "obfuscation-script",
        "redteam",
        "security",
        "security-tools",
        "shellcode",
        "shellcode-convert",
        "shellcode-development",
        "shellcode-encoder",
        "shellcode-injection"
      ]
    },
    "content": {
      "readme": "# ByteCaster\n\nSwiss Army Knife for payload encryption, obfuscation, and conversion to byte arrays ‚Äì all in a single command!\n\nIt supports 3 encryption algorithms, 4 encoding / obfuscation algorithms and 14 output formats.\n\n![ByteCaster order of opretaions](_img/img-1.png)\n\n## Installation\n\n[Download the compiled binary](https://github.com/Print3M/ByteCaster/releases/tag/1.0.0) or compile Go source code.\n\n## Usage\n\nExample:\n\n```bash\n# Convert .bin file into C bytes array with XOR encryption and IPv4Fuscation\n./ByteCaster -i shellcode.bin -f c -x xor -k 'Test123' -e ipv4\n\n# Convert .bin file into base64 string with XOR encryption\n./ByteCaster -i shellcode.bin -x xor -k 'Test123' -e base64\n```\n\n![ByteCaster demo](_img/img-2.png)\n\n> **NOTE**: The sequence of operations is always the same:\n>\n> 1. Encryption\n> 2. Encoding\n> 3. Output formatting\n\n**`-i / --input <path>`** [required]\n\nBinary input file.\n\n**`-f / --format <value>`** [optional, default: `raw`]\n\nOutput format of the processed data. This generates the final data as an array of bytes in the selected programming language. Output is always sent to STDOUT.\n\nTo avoid applying any formatting output, use the `raw` value (default).\n\nAvailable values: `raw`, `hex`, `c`, `go`, `powershell`, `php`, `js`, `rust`, `csharp`, `nim`, `zig`, `ruby`, `python`, `java`\n\n**`-x / --enc-alg <value>` + `-k / --enc-key <string>`** [optional]\n\nData encryption. Both parameters, the encryption algorithm and the key string, must be provided.\n\nAvailabe values: `xor`, `aes256`, `rc4`\n\nAll supported encryption algorithms are described in details below.\n\n**`-e / --encoding <value>`** [optional]\n\nData encoding. Often used as obfuscation to confuse analysis or changes in the entropy level of data.\n\nAvailable values: `base32`, `base64`, `ipv4`, `mac`\n\nAll supported encoding algorithms are described in details below.\n\n## Supported encryption algorithms\n\n#### **`xor`** [0% overhead]\n\nTypical simple XOR encryption (`a^b`). Each byte is XORed with the byte from the key.\n\n#### **`aes256`** [28 bytes overhead]\n\nAES-256-GCM with the 32-bytes long key derived from SHA-256 hash function.\n\nCiphertext format: `nonce || ciphertext`. Nonce is stored in the first 12 bytes, followed by the encrypted data and authentication tag (the tag is appended automatically by GCM inside ciphertext).\n\nStandard Go implementation of AES encryption:`crypto/aes`\nStandard Go implementation of SHA-256 key derivation: `crypto/sha256`\n\n#### **`rc4`** [0% overhead]\n\nStandard Go implementation of RC4 encryption: `crypto/rc4`\n\n## Supported encoding algorithms\n\n#### **`base32`** [60‚Äì65% overhead]\n\nStandard Go implementation of Base32 encoding: `encoding/base32`\n\n#### **`base64`** [33%-37% overhead]\n\nStandard Go implementation of Base64 encoding: `encoding/base64`\n\n#### **`ipv4`** [100%-300% overhead]\n\nThis is known as the _IPv4Fuscation_ technique. Each output byte is converted to one octet in the IPv4 address as a decimal number.\n\nExample data:\n\n```text\n{ 0xe9, 0x36, 0x17, 0xbb, 0xbd, 0x7f, 0x22, 0x10 }\n```\n\nThe output (array of bytes) looks exactly like this in memory:\n\n`233.54.23.187\\0189.127.34.16\\0` ...\n\n> NOTE:\n>\n> - Each IP address ends with a null byte!\n> - If the number of bytes is not divisible by 4, the missing bytes added to the last IP address are 255.\n\n#### **`mac`** [200% overhead]\n\nThis is known as the _MACFuscation_ technique. Each output byte is converted to one octet in the MAC address as a hexadecimal number (lowercase).\n\nExample data:\n\n```text\n{ 0xe9, 0x36, 0x17, 0xbb, 0xbd, 0x7f, 0x22, 0x10, 0x84, 0xA7, 0x6f, 0xcc }\n```\n\nThe output (array of bytes) looks exactly like this in memory:\n\n`e9:36:17:bb:bd:7f\\022:10:84:a7:6f:cc\\0`\n\n> NOTE:\n>\n> - Each MAC address ends with a null byte!\n> - Hexadecimal numbers are lowercase.\n> - If the number of bytes is not divisible by 6, the missing bytes added to the last MAC address are 255 (`ff`).\n\n## Credits\n\n- [HellShell](https://github.com/NUL0x4C/HellShell) - inspired me to implement _IPv4Fuscation_ and _MACFuscation_.\n\n## TODO\n\n- Add base32 encoding\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:26.461685"
  },
  {
    "basic_info": {
      "name": "from-bash-to-go-part-i",
      "full_name": "go-monk/from-bash-to-go-part-i",
      "owner": "go-monk",
      "description": "Go for Bash Programmers I - The Language",
      "url": "https://github.com/go-monk/from-bash-to-go-part-i",
      "clone_url": "https://github.com/go-monk/from-bash-to-go-part-i.git",
      "ssh_url": "git@github.com:go-monk/from-bash-to-go-part-i.git",
      "homepage": "https://youtu.be/6DiCscb0gWk",
      "created_at": "2025-08-30T08:55:11Z",
      "updated_at": "2025-09-22T18:59:03Z",
      "pushed_at": "2025-09-01T14:13:33Z"
    },
    "stats": {
      "stars": 79,
      "forks": 1,
      "watchers": 79,
      "open_issues": 0,
      "size": 88
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 2492
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "This is the first part of a series introducing Bash programmers to Go. This part goes through the language building blocks that will be used in later parts.\n\n# Ok but why?\n\n> A language that doesn't affect the way you think about programming is not worth knowing. - Alan J. Perlis\n\nYou might be wondering along these lines - I already kind of know Bash (or a similar language) and can do all I need in it. It's easy and fast. Why should I learn Go? That's a good question. Always ask why because the answer to a why question provides a reason and thus understanding and motivation. In our case I think the answer has to do with the difference between programming and software engineering.\n\nProgramming means writing a program that works and does something useful. Software engineering is programming plus time and other people. It's the initial writing of a program and its being modified by you or other people over time. Programming alone is hard enough. First you need to understand the domain and the concrete problem to solve within the domain. Then you design a solution and implement it in a programming language whose syntax and idioms you should know well. This process can, and *should*, take multiple iterations. When you are done you go work on other stuff. Then you might be asked to modify something in the program (to fix a bug or add new functionality) or to hand over the program to someone else (people come and go).\n\nThe most important thing to do when doing the software engineering is to reduce the cognitive load; to reduce the system's complexity. This requires hard work, attention to detail and using good tools. I think Go is a good tool for software engineering because it includes \"a cultural agenda of radical simplicity\". See https://github.com/go-monk/from-bash-to-go for a practical example of how and why migrate a script from Bash to Go.\n\n# Building blocks\n\nIn this section I swiftly introduce some of the language building blocks that I hope will help you start understanding the Go syntax, semantics and idioms. I recommend actually writing (copying) the code below in your favorite editor. And then running it. And maybe changing it a bit and running again. If you break the code be happy, that's a way to learn :-).\n\n## Writing and running Go code\n\nPackages are Go's way of organizing and (re)using code.\n\nBash is organized mostly via files - each program usually lives in a file:\n\n```\n+------------+\n| script1.sh |\n+------------+\n+------------+\n| script2.sh |\n+------------+\n+------------+\n| script3.sh |\n+------------+\n```\n\nGo code lives in one or more *packages* that are contained in one or more .go files within a single directory. Packages can be grouped into *modules* for versioning and sharing.\n\nIt can be visualized like this:\n\n```\n+--------------------------+\n| module example.net/hello |\n|                          |\n|  +-------------------+   |\n|  |   package main    |   |\n|  |                   |   |\n|  |  +-------------+  |   |\n|  |  | greeting.go |  |   |\n|  |  +-------------+  |   |\n|  |  +-------------+  |   |\n|  |  | hello.go    |  |   |\n|  |  +-------------+  |   |\n|  |                   |   |\n|  +-------------------+   |\n|                          |\n+--------------------------+\n```\n\nGo identifiers - constants, variables, types and functions - are visible (exported) outside of a package when their name starts with an uppercase letter. Otherwise they are confined to the current package.\n\nLet's create our first package. In case you want to run your code (as opposed to using it as an importable library) you need at least the `main` package.\n\nFirst create a directory and change to it:\n\n```\n$ mkdir hello\n$ cd hello\n```\n\nThen create `hello.go` file with the following content:\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello\")\n}\n```\n\nThe `main` function is where the program's execution starts.\n\nThe easiest way to run a Go program is:\n\n```sh\n$ go run hello.go # build the binary and run it\nhello\n```\n\nAs mentioned above, you can spread package code into multiple files within the same directory:\n\n```go\n// hello.go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n        fmt.Println(greeting)\n}\n```\n\n```go\n// greeting.go\npackage main\n\nconst greeting = \"hello\"\n```\n\nNow we need to include both package files:\n\n```sh\n$ go run hello.go greeting.go\nhello\n```\n\nModule is a group of packages that is versioned as a unit. To create a module:\n\n```sh\n$ go mod init github.com/jsmith/hello\n$ go mod tidy # download dependencies\n```\n\nTo build for a different OS and/or CPU architecture than the one you are running:\n\n```sh\nmacOS$ GOOS=linux GOARCH=amd64 go build\n```\n\nTo see the list of all supported OS/ARCH combinations:\n\n```sh\n$ go tool dist list\n```\n\nSee https://go.dev/doc/tutorial/getting-started for more.\n\n## Variables and types\n\nIn Bash all simple variables are strings:\n\n```sh\nname=Jack\nage=40\nactive=true\n\n# this is not a problem in Bash, since there are no types\nage=forty\n```\n\nGo is a statically typed language. It",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:27.588740"
  },
  {
    "basic_info": {
      "name": "frankenphp-grpc",
      "full_name": "dunglas/frankenphp-grpc",
      "owner": "dunglas",
      "description": " A PHP extension to write gRPC servers using the official gRPC library written in Go ",
      "url": "https://github.com/dunglas/frankenphp-grpc",
      "clone_url": "https://github.com/dunglas/frankenphp-grpc.git",
      "ssh_url": "git@github.com:dunglas/frankenphp-grpc.git",
      "homepage": null,
      "created_at": "2025-09-15T13:46:34Z",
      "updated_at": "2025-09-22T13:32:06Z",
      "pushed_at": "2025-09-17T13:33:42Z"
    },
    "stats": {
      "stars": 76,
      "forks": 1,
      "watchers": 76,
      "open_issues": 1,
      "size": 57
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 4367
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# FrankenPHP gRPC Server\n\nA [FrankenPHP](https://frankenphp.dev) extension that allows you to run a [gRPC](https://grpc.io/) server triggering code written either in PHP or Go.\nUnder the hood, this extension uses the [gRPC for Go](https://grpc.io/docs/languages/go/) library and FrankenPHP's [Go extension support](https://frankenphp.dev/docs/extensions/).\n\n> [!WARNING]\n>\n> This extension is highly experimental and not recommended for production use.\n> The public API may change at any time without notice.\n\n## Features\n\n* Run a high performance gRPC server with FrankenPHP (the PHP part is executed in a worker loop)\n* Write gRPC service handlers in PHP\n* Write gRPC service handlers in Go\n* Write gRPC service handlers in a mix of PHP and Go ü§Ø\n* All features supported by the [gRPC for Go](https://grpc.io/docs/languages/go/) library\n* Entirely written in Go, no C code!\n* [API Platform](https://api-platform.com) compatibility!\n\n## Prerequisites\n\n* FrankenPHP extensions prerequisites: https://frankenphp.dev/docs/extensions/#prerequisites\n* gRPC for Go prerequisites: https://grpc.io/docs/languages/go/quickstart/#prerequisites\n\n## Usage\n\n### Create a Go module\n\n```console\ngo mod init example.com/mygrpcserver \n```\n\n### Create a Protobuf Definition:\n\nCreate a `.proto` file describing your gRPC service and messages.\n\nExample (in a `helloworld/helloworld.proto` file):\n\n```protobuf\nsyntax = \"proto3\";\n\noption go_package = \"example.com/mygrpcserver/helloworld\";\n\npackage helloworld;\n\nservice Greeter {\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\nmessage HelloRequest {\n  string name = 1;\n}\n\nmessage HelloReply {\n  string message = 1;\n}\n```\n\nGenerate the Go code:\n\n```console\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative helloworld/helloworld.proto\n```\n\n### Implement the gRPC Server in Go\n\n```go\npackage mygrpcserver\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\tpb \"example.com/mygrpcserver/helloworld\"\n\t\"github.com/dunglas/frankenphp\"\n\tphpGrpc \"github.com/dunglas/frankenphp-grpc\"\n\t\"github.com/go-viper/mapstructure/v2\"\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/reflection\"\n)\n\nfunc init() {\n\tphpGrpc.RegisterGrpcServerFactory(func() *grpc.Server {\n\t\ts := grpc.NewServer()\n\t\tpb.RegisterGreeterServer(s, &server{})\n\t\treflection.Register(s)\n\n\t\treturn s\n\t})\n}\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\n// SayHello implements helloworld.GreeterServer\nfunc (s *server) SayHello(_ context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {\n\tif in.Name == \"\" {\n\t\treturn nil, fmt.Errorf(\"the Name field is required\")\n\t}\n\n    // Convert the request to a map[string]any\n\tvar phpRequest map[string]any\n\tif err := mapstructure.Decode(in, &phpRequest); err != nil {\n\t\treturn nil, err\n\t}\n\n    // Call the PHP code, pass the map as a PHP associative array\n\tphpResponse := phpGrpc.HandleRequest(phpRequest)\n\n    // Convert the PHP response (a map) back to a HelloReply struct\n\tvar response pb.HelloReply\n\tif err := mapstructure.Decode(phpResponse.(frankenphp.AssociativeArray).Map, &response); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &response, nil\n}\n```\n\nRefer to the [gRPC for Go documentation](https://grpc.io/docs/languages/go/) for more details on how to implement your gRPC service in Go.\nRfer to the [FrankenPHP extensions documentation](https://frankenphp.dev/docs/extensions/) for more details on how to pass data from Go to PHP and vice versa.\n\n### Implement the gRPC Service Handler in PHP\n\nCreate a file named `grpc-worker.php` in the same directory as the FrankenPHP binary we'll build later:\n\n```php\n<?php\n\n// Require the Composer autoloader here if needed (API Platform, Symfony, etc.)\n//require __DIR__ . '/vendor/autoload.php';\n\n// Handler outside the loop for better performance (doing less work)\n$handler = static function (array $request): array  {\n\t// Do something with the gRPC request\n\n    return ['message' => \"Hello, {$request['Name']}\"];\n};\n\n$maxRequests = (int)($_SERVER['MAX_REQUESTS'] ?? 0);\nfor ($nbRequests = 0; !$maxRequests || $nbRequests < $maxRequests; ++$nbRequests) {\n    $keepRunning = \\frankenphp_handle_request($handler);\n\n    // Call the garbage collector to reduce the chances of it being triggered in the middle of the handling of a request\n    gc_collect_cycles();\n\n    if (!$keepRunning) {\n      break;\n    }\n}\n```\n\n### Create the `Caddyfile`\n\nCreate a `Caddyfile` in the same directory as the FrankenPHP binary we'll build later:\n\n```caddyfile\n{\n\tfrankenphp\n\tgrpc {\n\t\taddress :50051 # Optional\n\t\tworker grpc-worker.php # Optional\n\t\tmin_threads 50 # Optional, defaults to runtime.NumCPU()\n\t}\n}\n```\n\n### Build and Run the FrankenPHP Binary with the gRPC Extension\n\nRun the server:\n\n```console\nXCADDY_DEBUG=1\n    CGO_ENABLED=1 \\\n\tXCADDY_GO_BUILD_FLAGS=\"-tags=nobadger,nomysql,nopgx\" \\\n\tCGO_CFLAGS=\"$(php-config --includes) -I/opt/homebrew/include/\" \\\n\tCGO_LDFLAGS=\"$(php-config --ldflags) $(php-config --libs) -L/opt/homebrew/lib/ -L/usr/lib\" \\\n\txcaddy build\n\n./caddy run\n```\n\nYour ",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-23T02:17:28.704798"
  }
]