[
  {
    "basic_info": {
      "name": "MicroManipulatorStepper",
      "full_name": "0x23/MicroManipulatorStepper",
      "owner": "0x23",
      "description": "A sub-micrometer 3D motion control plattform.",
      "url": "https://github.com/0x23/MicroManipulatorStepper",
      "clone_url": "https://github.com/0x23/MicroManipulatorStepper.git",
      "ssh_url": "git@github.com:0x23/MicroManipulatorStepper.git",
      "homepage": null,
      "created_at": "2025-08-28T08:25:34Z",
      "updated_at": "2025-09-22T00:08:55Z",
      "pushed_at": "2025-09-21T14:19:59Z"
    },
    "stats": {
      "stars": 819,
      "forks": 99,
      "watchers": 819,
      "open_issues": 4,
      "size": 23902
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 172977,
        "Python": 23876,
        "C": 3235
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "# Open Micro Manipulator\n\nThis project contains an open source low-cost, easy-to-build motorized **XYZ Micro-Manipulator** motion control platform achieving submicron precision.\nIt's designed for applications such as optical alignment, probing electronic components, and microscopy.\n\nCheck out the YouTube video for more information about the device and how it is built:<br>\n[An Open Source Motorized XYZ Micro-Manipulator - Affordable sub ¬µm Motion Control](https://youtu.be/MgQbPdiuUTw)\n\n<div style=\"display: flex; gap: 2%;\">\n  <img src=\"images/overview.gif\" alt=\"Image 1\" width=\"49%\">\n  <img src=\"images/microscopy_die.gif\" alt=\"Image 2\" width=\"49%\">\n</div>\n\nThanks to its parallel kinematic structure and miniature ball joints, it achieves good mechanical stiffness and a large range of motion.\nThe motors are off the shelf stepper motors dr‚Äãiven by a 30 kHz closed loop controller and a very precise PWM signal.\nA 'magnetic gearing' approach increases the resolution of the low-cost magnetic rotary encoders by a factor of 30 allowing for steps down to 50nm\n(**Please mind the difference between resolution and accuracy**. The absolute accuracy is significantly worse.\n\nThe device can be controlled via simple G-Code commands over a USB serial interface and is thus easily integrated into other projects.\nThe firmware implements a complete motion planning stack with look-ahead for smooth and accurate path following capabilities.\n\n## üêç NEW: Python-API\n\nThe lightweight Python API handles all serial communication and provides convenient command execution and debug message printing.\nThe interface includes functions to home, move, and calibrate the device, as well as to query device information.\nSimply copy the [open_micro_stage_api.py](software/PythonAPI/open_micro_stage_api.py) file into your project (also install the dependencies in requirements.txt), and you‚Äôre ready to get started.\n\n## Usage Example\n```python\nfrom open_micro_stage_api import OpenMicroStageInterface\n\n# create interface and connect\noms = OpenMicroStageInterface(show_communication=True, show_log_messages=True)\noms.connect('/dev/ttyACM0')\n\n# run this once to calibrate joints\n# for i in range(3): oms.calibrate_joint(i, save_result=True)\n\n# home device\noms.home()\n\n# move to several x,y,z positions [mm]\noms.move_to(0.0, 0.0, 0.0, f=10)\noms.move_to(3.1, 4.1, 5.9, f=26)\noms.move_to(0.0001, 0.0, 0.0, f=10)\n\n# wait for moves to finish\noms.wait_for_stop()\n```\n\n## API Functions (most relevant functions only)\n```python\nconnect(port, baud_rate=921600)\ndisconnect()\nset_workspace_transform(transform)\nget_workspace_transform()\nhome(axis_list=None)\ncalibrate_joint(joint_index, save_result)\nmove_to(x, y, z, f, move_immediately, blocking, timeout)\nset_pose(x, y, z)\ndwell(time_s, blocking, timeout)\nenable_motors(enable)\nwait_for_stop(polling_interval_ms, disable_callbacks)\nset_max_acceleration(linear_accel, angular_accel)\nset_servo_parameter(pos_kp, pos_ki, vel_kp, vel_ki, vel_filter_tc)\n```\n\n## ‚ú® NEW: Firmware v1.0.1\n\nThis update improves calibration, homing, logging, and adds several new G-Code commands.\n\n### Improvements\n- **Homing**: parallel homing support, higher repeatability, more accurate geometric reference  \n- **Joint calibration**: refined procedure, persistent flash storage (no recalibration after reboot)  \n- **Logging**: clearer and more detailed output  \n\n### New G-Code Commands\n- `G28` ‚Äî Home joints (supports homing multiple axis simultanously for faster startup)\n- `G24` ‚Äî Set pose command (directly sets servo targets, bypassing motion controller)  \n- `M17/M18` ‚Äî Enable/Disable motors (with pose recovery from encoders on enable)  \n- `M51` ‚Äî Read encoder values  \n- `M55` ‚Äî Set servo loop parameters \n- `M56` ‚Äî Joint calibration (with save-to-flash option)  \n- `M57` ‚Äî Read various information about the device state  \n- `M58` ‚Äî Read firmware version\n\n## ‚öô CAD-Files\n\nAll CAD models are made in **FreeCAD** to‚Äã allow everyone to view and modify the design without subscribing or paying for a proprietary CAD solution.\nNote that most components are already designed with the goal to make them easily machinable on a 3-Axis CNC-Mill.\nYou can also 3D-Print the parts but have to live with thermal drift (carbon filled filaments can reduce this problem).\n\n<div style=\"display: flex;\">\n    <img src=\"images/FreeCAD-Model.jpg\" alt=\"FreeCAD Model\" width=\"50%\">\n</div>\n\n<br>\n\nThe CAD files can be found here: [CAD Models](construction).\nPlease note that FreeCAD version **1.1.0dev** was used, and the files might not work with older versions.\n\nSTL files for printing can be found here: [STL Files](construction/STL_3D_Printing/)\n\n## ‚öô Kinematic Model\n\nThe kinematic model is defined here: [kinematic_model_delta3d.cpp](firmware/MotionControllerRP/src/kinemtaic_models/kinematic_model_delta3d.cpp).\nPlease check the dimensions of your build against the values set in the constructor. In particular, make sure the arm length matches.\n\n## ‚öô Electronics\n\nIMPORTANT: If you fabricated PCB verion v1.2 (s",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:40.648021"
  },
  {
    "basic_info": {
      "name": "lunar-test-v1",
      "full_name": "lunarengine/lunar-test-v1",
      "owner": "lunarengine",
      "description": "(OLD) LunarEngine ‚Äì Open-source Luau 3D engine (API-compatible)",
      "url": "https://github.com/lunarengine/lunar-test-v1",
      "clone_url": "https://github.com/lunarengine/lunar-test-v1.git",
      "ssh_url": "git@github.com:lunarengine/lunar-test-v1.git",
      "homepage": "",
      "created_at": "2025-08-23T10:35:44Z",
      "updated_at": "2025-09-20T07:42:44Z",
      "pushed_at": "2025-09-07T23:42:34Z"
    },
    "stats": {
      "stars": 494,
      "forks": 31,
      "watchers": 494,
      "open_issues": 8,
      "size": 14628
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 8988043,
        "Lua": 439515,
        "Luau": 327146,
        "C": 276341,
        "Python": 173734,
        "CMake": 29390,
        "Makefile": 13270,
        "Batchfile": 3875,
        "HTML": 3560,
        "Shell": 3336
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# LunarEngine (demo)\n<div style=\"display:flex; align-items:center; gap:20px; margin:10px 0;\">\n  <a href=\"https://discord.gg/BXbS7RpgMR\" style=\"text-decoration:none;\">\n    <img src=\"https://img.shields.io/badge/Discord-5865F2?logo=discord&logoColor=white&style=for-the-badge\" alt=\"Discord\"/>\n  </a>\n  <a href=\"https://github.com/librebox-devs/librebox-demo/releases\" style=\"text-decoration:none;\">\n    <img src=\"https://img.shields.io/badge/Download_Releases-000000?logo=github&logoColor=white&style=for-the-badge\" alt=\"Download Releases\"/>\n  </a>\n</div>\n\n<br/>\n<p>\n  <img src=\"repo/LunarEngine.png\" alt=\"Alt text\" width=\"350\"/>\n</p>\n\n## Open-source Luau 3D engine (API-compatible)\n\n<div style=\"display:flex; flex-wrap:wrap; align-items:flex-start; gap:10px;\">\n  <img src=\"repo/example2.gif\" alt=\"Demo gif\" width=\"256\"/>\n  <img src=\"repo/example3.gif\" alt=\"Demo gif\" width=\"256\"/>\n  <div style=\"flex-basis:100%; height:0;\"></div> <!-- forces new row -->\n  <img src=\"repo/example4.gif\" alt=\"Demo gif\" style=\"height:256px; width:auto;\">\n</div>\n<img src=\"repo/example6.gif\" alt=\"Demo gif\" width=\"256\"/>\n\n### What is Lunar Engine?\n**LunarEngine** (formerly **Librebox**) is an open-source game engine powered by Luau. It delivers a sandbox-style API and development model inspired by popular sandbox engines, so existing Luau code runs with minimal changes.\n\n### Why Lunar?\nLunar gives developers full agency over their games - from the code to the engine. Build immersive experiences with a familiar interface while maintaining complete ownership of your platform.\n\n### Example\n\nCreate a part in the Workspace, while rotating and cycling its color.\n```lua\n-- examples/part_example.lua\nlocal part = Instance.new(\"Part\") -- Create a part\npart.Anchored = true -- compat\npart.Color = Color3.new(1,0,0) -- Make the part red\npart.Position = Vector3.new(0,2.5,0) -- Position it\npart.Parent = workspace -- Put it into workspace\n\nlocal rs = game:GetService(\"RunService\")\nlocal t = 0\n\nrs.RenderStepped:Connect(function(dt)\n\tt += dt\n\tpart.CFrame = CFrame.new(part.Position) * CFrame.Angles(0, t, 0) -- rotate in place with CFrame\n\tpart.Color = Color3.fromHSV((t*0.2 % 1), 1, 1) -- set part color\nend)\n```\n```\n> ./LunarApp.exe examples/part_example.lua\n```\n<img src=\"repo/example3.gif\" alt=\"Demo gif\" width=\"256\"/>\n\n### Compatibility\n\nLunar Engine is currently in demo stage (it implements a limited subset of its planned API), but here is what is supported:\n\n- Basic scene rendering\n  - Lighting, shadows, ambient, skybox\n    - Parts render within `game.Workspace`\n  - Basic camera movement\n  - Based on 'Libre-1' (to change in the future)\n- Standard data types\n  - `CFrame`, `Vector3`, `Color3`, `Random`\n  - `game`, `script`, `workspace`\n- Instance System\n  - Nearly complete Instance API (missing `:WaitForChild()`)\n  - `<instance>.Parent`\n  - `:Destroy()`, `:Clone()`\n- Parts\n  - Implements `BasePart`\n  - `Instance.new(\"Part\")`\n  - `Part.Color`, `Part.Transparency`, `Part.Size`\n  - `Part.Position`, `Part.CFrame`\n  - More support in the future\n- Client-sided services\n  - `Workspace`\n    - `workspace.CurrentCamera`\n    - Default rendering stage\n  - `RunService`\n    - All five standard stages, including `RenderStep` and `HeartBeat`\n    - `game.RunService.RenderStepped:Wait()`, `:Connect()`\n  - `Lighting`\n    - `game.Lighting.Ambient`\n    - `game.Lighting.ShadowSoftness`\n    - `game.Lighting.ClockTime`\n    - `game.Lighting.Brightness`\n  - `game:GetService()`\n- Luau script support\n  - Highly capable 'Hyperball' task scheduler\n  - `RTScriptSignal`, Event binding, connections\n  - Coroutines, Scripts, LocalScripts\n  - `task.spawn`, `task.wait`, `task.delay`\n  - Luau optimization enabled by default\n- Window handling and fullscreen optimization\n---\n\n### Download\n[Download releases here.](https://github.com/librebox-devs/librebox-demo/releases)\n\n### To Be Added\n\nOf course, this is just a rendering demo. Lunar Engine is extensible and easily supports the additions of new services and features. \n\nIn the next release, we will incorporate `UserInputService` and `StarterPlayer`, turning LunarApp into an actual interactive engine.\n\n### Platforms\nLunar Engine currently supports Windows, but **can easily be ported anywhere**. The only dependencies are 'raylib' -- and raylib is already cross-platform.\n\n* Windows 7+ (`.exe`)\n  * Standalone executable (LunarApp.exe)\n* Linux support immediate priority\n  \n### Future Support\n\nRight now, Lunar Engine compatibility is limited. This is currently a demo (not even a release!). In future releases, you can expect the following:\n\n* Physics\n  * Collision events, aspects\n* Mesh support\n* game.Players, Player\n* UserInputService, ContextActionService\n* Image rendering, decals\n* Onscreen GUIs\n* Materials, stronger rendering\n\nAnd, in the future.\n* Replication support (and Servers)\n\nLunar Engine is on its way to becoming a fully fledged dev platform -- just like Godot, or Unity, you can transfer your current Lua skills into Lunar, and create **games you own.*",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:41.806922"
  },
  {
    "basic_info": {
      "name": "ternfs",
      "full_name": "XTXMarkets/ternfs",
      "owner": "XTXMarkets",
      "description": "A distributed file system",
      "url": "https://github.com/XTXMarkets/ternfs",
      "clone_url": "https://github.com/XTXMarkets/ternfs.git",
      "ssh_url": "git@github.com:XTXMarkets/ternfs.git",
      "homepage": null,
      "created_at": "2025-09-02T09:31:27Z",
      "updated_at": "2025-09-22T02:20:34Z",
      "pushed_at": "2025-09-21T21:22:24Z"
    },
    "stats": {
      "stars": 428,
      "forks": 21,
      "watchers": 428,
      "open_issues": 8,
      "size": 14143
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 1661723,
        "Go": 848300,
        "C": 491238,
        "JavaScript": 25734,
        "Python": 21359,
        "CMake": 13991,
        "Shell": 12670,
        "HTML": 11683,
        "Makefile": 2067
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "<!--\nCopyright 2025 XTX Markets Technologies Limited\n\nSPDX-License-Identifier: GPL-2.0-or-later\n-->\n\n[![TernFS Logo](https://github.com/user-attachments/assets/03c2f7f9-649f-4411-9cd9-e375ff97e3b4 \"TernFS Logo\")](https://ternfs.com)\n\n\nA distributed file system. For a high-level description of TernFS, see [the TernFS blog post on the XTX Markets Tech Blog](https://xtxmarkets.com/tech/2025-ternfs). This document provides a more bare-bones overview and an introduction to the codebase.\n\n## Goals\n\nThe target use case for TernFS is the kind of machine learning we do at XTX: reading and writing large immutable files. By \"immutable\" we mean files that do not need modifying after they are first created. By \"large\" we mean that most of the storage space will be taken up by files bigger than a few MBs.\n\nWe don't expect new directories to be created often, and files (or directories) to be moved between directories often. In terms of numbers, we expect the upper bound for TernFS to roughly be the upper bound for the data we're planning for a single data center:\n\n- 10EB of logical file storage (i.e. if you sum all file sizes = 10EB)\n- 1 trillion files -- average ~10MB file size\n- 100 billion directories -- average ~10 files per directory\n- 1 million clients\n\nWe want to drive the filesystem with commodity hardware and Ethernet networking.\n\nWe want the system to be robust in various ways:\n\n* Witnessing half-written files should be impossible -- a file is fully written by the writer or not readable by other clients\n* Power loss or similar failure of storage or metadata nodes should not result in a corrupted filesystem (be it metadata or filesystem corruption)\n* Corrupted reads due to hard drives bitrot should be exceedingly unlikely\n* Data loss should be exceedingly unlikely, unless we suffer a datacenter-wide catastrophic event (fire, flooding, datacenter-wide vibration, etc.)\n* The filesystem should keep working through maintenance or failure of metadata or storage nodes\n\nWe also want to be able to restore deleted files or directories, using a configurable \"permanent deletion\" policy.\n\nFinally, we want to have the option to replicate TernFS to multiple regions, to be able to scale up compute across multiple data centres, and to remove any single data centre as a point of failure.\n\n## Components\n\n```                                   \n A ‚îÄ‚îÄ‚ñ∫ B means \"A sends requests to B\" \n                                       \n                                       \n ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê                    \n ‚îÇ Metadata Shard ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê          \n ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò         ‚îÇ          \n   ‚îÇ    ‚îÇ                   ‚îÇ          \n   ‚îÇ    ‚îÇ                   ‚îÇ          \n   ‚îÇ ‚îå‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îê                ‚îÇ          \n   ‚îÇ ‚îÇ CDC ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê     ‚îÇ          \n   ‚îÇ ‚îî‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îò          ‚îÇ     ‚îÇ          \n   ‚îÇ    ‚îÇ             ‚îÇ ‚îå‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îê     \n   ‚îÇ    ‚îÇ             ‚îî‚îÄ‚î§        ‚îÇ     \n ‚îå‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îê          ‚îÇ Client ‚îÇ     \n ‚îÇ Registry  ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§        ‚îÇ     \n ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚îÄ‚îÄ‚îÄ‚îÄ‚îò          ‚îî‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò     \n        ‚îÇ                 ‚îÇ            \n        ‚îÇ                 ‚îÇ            \n ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê        ‚îÇ            \n ‚îÇ Block Service ‚óÑ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò            \n ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò                     \n```\n\n* **servers**\n  * **registry**\n    * 1 logical instance\n    * `ternregistry`, C++ binary\n    * TCP bincode req/resp\n    * UDP replication\n    * stores metadata about a specific TernFS deployment\n      * shard/cdc addresses\n      * block services addresses and storage statistics\n    * state persisted through RocksDB with 5-node distributed consensus through LogsDB\n  * **filesystem data**\n    * **metadata**\n      * **shard**\n        * 256 logical instances\n        * `ternshard`, C++ binary\n        * stores all metadata for the filesystem\n          * file attributes (size, mtime, atime)\n          * directory attributes (mtime)\n          * directories listings (includes file/directory names)\n          * file to blocks mapping\n          * block service to file mapping\n        * UDP bincode req/resp\n        * state persisted through RocksDB with 5-node distributed consensus through LogsDB\n        * communicates with registry to fetch block services, register itself, insert statistics\n    * **CDC**\n      * 1 logical instance\n      * `terncdc`, C++ binary\n      * coordinates actions which span multiple directories\n        * create directory\n        * remove directory\n        * move file or directory between from one directory to the other\n        * \"Cross Directory Coordinator\"\n      * UDP bincode req/resp\n      * very little state required\n        * information about which transactions are currently being executed and which are queued (currently transactions are executed serially)\n        * directory -> parent directory mapping to perform \"no loops\" checks\n      * state persisted through RocksDB with 5-node distributed consensus through LogsDB\n      * communicates with the shards to perform the cross-directory actions\n      * communicates with registry to register itself",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:42.977228"
  },
  {
    "basic_info": {
      "name": "WSASS",
      "full_name": "TwoSevenOneT/WSASS",
      "owner": "TwoSevenOneT",
      "description": "This is the tool to dump the LSASS process on modern Windows 11",
      "url": "https://github.com/TwoSevenOneT/WSASS",
      "clone_url": "https://github.com/TwoSevenOneT/WSASS.git",
      "ssh_url": "git@github.com:TwoSevenOneT/WSASS.git",
      "homepage": null,
      "created_at": "2025-09-13T03:18:26Z",
      "updated_at": "2025-09-22T01:51:16Z",
      "pushed_at": "2025-09-15T13:40:45Z"
    },
    "stats": {
      "stars": 337,
      "forks": 39,
      "watchers": 337,
      "open_issues": 1,
      "size": 39
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 15722
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "### WSASS\n\nThis is a tool that uses the old WerfaultSecure.exe program to dump the memory of processes protected by PPL (Protected Process Light), such as LSASS.EXE.\nThe output is in Windows MINIDUMP format.\n\n*This tool automatically replaces the __\"MDMP\"__ magic header with a PNG magic header.\nAfter the dump is complete, you need to restore the original 4-byte magic at the beginning of the file with the original 4 bytes: __{0x4D, 0x44, 0x4D, 0x50}__ \"MDMP\".*\n\n### Command Line Syntax\n\n**WSASS.exe path_to_werfaultsecure.exe target_PID**\n\n*Example: __WSASS.exe C:\\TMP\\WerfaultSecure.exe 888__*\n\n## Links\n\n[Using WSASS to dump LSASS](https://www.zerosalarium.com/2025/09/Dumping-LSASS-With-WER-On-Modern-Windows-11.html)\n\n[Tool to run process with PPL without driver](https://github.com/TwoSevenOneT/CreateProcessAsPPL)\n\n## Author:\n\n[Two Seven One Three](https://x.com/TwoSevenOneT)\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-22T02:26:44.096661"
  },
  {
    "basic_info": {
      "name": "nvshmem",
      "full_name": "NVIDIA/nvshmem",
      "owner": "NVIDIA",
      "description": "NVIDIA NVSHMEM is a parallel programming interface for NVIDIA GPUs based on OpenSHMEM. NVSHMEM can significantly reduce multi-process communication and coordination overheads by allowing programmers to perform one-sided communication from within CUDA kernels and on CUDA streams.",
      "url": "https://github.com/NVIDIA/nvshmem",
      "clone_url": "https://github.com/NVIDIA/nvshmem.git",
      "ssh_url": "git@github.com:NVIDIA/nvshmem.git",
      "homepage": "",
      "created_at": "2025-08-27T15:37:11Z",
      "updated_at": "2025-09-20T10:44:48Z",
      "pushed_at": "2025-09-15T21:51:11Z"
    },
    "stats": {
      "stars": 317,
      "forks": 23,
      "watchers": 317,
      "open_issues": 6,
      "size": 887
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 1698885,
        "Cuda": 1051121,
        "C": 703430,
        "Cython": 656689,
        "Python": 156373,
        "CMake": 88341,
        "Shell": 2284
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "NVSHMEM Overview\n****************\n\nNVSHMEM‚Ñ¢ is a parallel programming interface based on OpenSHMEM that provides efficient and\nscalable communication for NVIDIA GPU clusters. NVSHMEM creates a global address space for\ndata that spans the memory of multiple GPUs and can be accessed with fine-grained \nGPU-initiated operations, CPU-initiated operations, and operations on CUDA¬Æ streams.\n\nQuick Links\n****************\n\nPlease see the following public links for information on building and working wih NVSHMEM:\n\n[Project Homepage](https://developer.nvidia.com/nvshmem)\n\n[Release Notes](https://docs.nvidia.com/nvshmem/release-notes-install-guide/release-notes/index.html)\n\n[Installation Guide](https://docs.nvidia.com/nvshmem/release-notes-install-guide/install-guide/index.html)\n\n[Best Practice Guide](https://docs.nvidia.com/nvshmem/release-notes-install-guide/best-practice-guide/index.html)\n\n[API Documentation](https://docs.nvidia.com/nvshmem/api/index.html)\n\n[Devzone Topic Page](https://forums.developer.nvidia.com/tag/nvshmem)\n\nThe maintainers of the NVSHMEM project can also be contacted by e-mail at nvshmem@nvidia.com\n",
      "default_branch": "devel"
    },
    "fetched_at": "2025-09-22T02:26:45.253924"
  },
  {
    "basic_info": {
      "name": "rko_lio",
      "full_name": "PRBonn/rko_lio",
      "owner": "PRBonn",
      "description": "A Robust Approach for LiDAR-Inertial Odometry Without Sensor-Specific Modelling",
      "url": "https://github.com/PRBonn/rko_lio",
      "clone_url": "https://github.com/PRBonn/rko_lio.git",
      "ssh_url": "git@github.com:PRBonn/rko_lio.git",
      "homepage": "https://arxiv.org/abs/2509.06593",
      "created_at": "2025-09-03T14:19:50Z",
      "updated_at": "2025-09-21T14:01:31Z",
      "pushed_at": "2025-09-19T11:20:23Z"
    },
    "stats": {
      "stars": 259,
      "forks": 8,
      "watchers": 259,
      "open_issues": 3,
      "size": 4029
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 137227,
        "Python": 95071,
        "CMake": 15446,
        "Makefile": 700
      },
      "license": "MIT License",
      "topics": [
        "imu",
        "inertial",
        "lidar",
        "lidar-inertial-odometry",
        "mapping",
        "odometry",
        "robotics",
        "ros",
        "ros2",
        "slam"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <h1>RKO LIO - LiDAR-Inertial Odometry<br />Without Sensor-Specific Modelling</h1>\n</div>\n\n<p align=\"center\">\nROS Distros:\n<br />\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_humble.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_humble.yaml/badge.svg?branch=master\" alt=\"Humble\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_jazzy.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_jazzy.yaml/badge.svg?branch=master\" alt=\"Jazzy\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_kilted.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_kilted.yaml/badge.svg?branch=master\" alt=\"Kilted\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_rolling.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_rolling.yaml/badge.svg?branch=master\" alt=\"Rolling\" /></a>\n</p>\n\n<p align=\"center\">\nPython Bindings:\n<br />\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2204.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2204.yaml/badge.svg?branch=master\" alt=\"Ubuntu 22.04\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2204_arm.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2204_arm.yaml/badge.svg?branch=master\" alt=\"Ubuntu 22.04 ARM\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2404.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2404.yaml/badge.svg?branch=master\" alt=\"Ubuntu 24.04\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2404_arm.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2404_arm.yaml/badge.svg?branch=master\" alt=\"Ubuntu 24.04 ARM\" /></a>\n<br />\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_macos_14.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_macos_14.yaml/badge.svg?branch=master\" alt=\"macOS 14\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_macos_15.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_macos_15.yaml/badge.svg?branch=master\" alt=\"macOS 15\" /></a>\n<br />\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_windows_2022.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_windows_2022.yaml/badge.svg?branch=master\" alt=\"Windows 2022\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_windows_11_arm.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_windows_11_arm.yaml/badge.svg?branch=master\" alt=\"Windows 11 ARM\" /></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.youtube.com/watch?v=NNpzXdf9XmU\">\n    <img src=\"https://raw.githubusercontent.com/PRBonn/rko_lio/refs/heads/master/docs/example_multiple_platforms.png\" alt=\"Visualization of odometry system running on data from four different platforms in four different environments\" />\n  </a>\n  <br />\n  <em>Four different platforms, four different environments, one odometry system</em>\n</p>\n\n## Quick Start\n\n### Python\n\nIn case you already have a rosbag (ROS1 or ROS2) which contains a TF tree, you can inspect the results of our odometry system with the following two steps\n\n```bash\npip install rko_lio rosbags rerun-sdk\n```\n\n`rko_lio` is our odometry package, `rosbags` is required for using our rosbag dataloader, and `rerun-sdk` is what we use for our optional visualizer.\nNext, run\n\n```bash\nrko_lio -v /path/to/rosbag_folder # <- has to be a directory! with either *.bag files or metadata.yaml from ROS2\n```\n\nand you should be good to go!\n\n<details>\n<summary><b>Click here for some more details on how the above works and how to use RKO LIO!</b></summary>\n<br />\n\nThe `-v` flag enables visualization.\n\nYou can specify a dataloader to use with `-d`, but if you don't, we try to guess the format based on the layout of the data.\n\nOur rosbag dataloader works with either ROS1 or ROS2 bags.\nPlace split ROS1 bags in a single folder and pass the folder as the data path.\nNote that we don't support running RKO LIO on partial or incomplete bags, though you can try (and maybe raise an issue if you think we should support this).\nROS2 especially will need a `metadata.yaml` file.\n\nBy default, we assume there is just one IMU topic and one LiDAR topic in the bag, in which case we automatically pick up the topic names and proceed further.\nIf there are multiple topics per sensor, you will be prompted to select one via the `--imu` or `--lidar` flags, which you can pass to `rko_lio`.\n\nNext, we assume there is a (static) TF tree in the bag.\nIf so, we take th",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-22T02:26:46.384518"
  },
  {
    "basic_info": {
      "name": "CreateProcessAsPPL",
      "full_name": "TwoSevenOneT/CreateProcessAsPPL",
      "owner": "TwoSevenOneT",
      "description": "This is the loader that supports running a program with Protected Process Light (PPL) protection functionality.",
      "url": "https://github.com/TwoSevenOneT/CreateProcessAsPPL",
      "clone_url": "https://github.com/TwoSevenOneT/CreateProcessAsPPL.git",
      "ssh_url": "git@github.com:TwoSevenOneT/CreateProcessAsPPL.git",
      "homepage": null,
      "created_at": "2025-08-23T03:50:35Z",
      "updated_at": "2025-09-22T01:32:16Z",
      "pushed_at": "2025-09-15T13:40:17Z"
    },
    "stats": {
      "stars": 196,
      "forks": 26,
      "watchers": 196,
      "open_issues": 0,
      "size": 17
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 9121
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "### CreateProcessAsPPL\n\nIf you want to run a program with PPL protection enabled, then this tool will help you do that.\n\n### Command Line Syntax\n\n**CreateProcessAsPPL.exe Mode:0-4 path_to_exe arg0 arg1 ...**\n\n**Mode:**\n\n* PROTECTION_LEVEL_WINTCB_LIGHT       0\n* PROTECTION_LEVEL_WINDOWS            1\n* PROTECTION_LEVEL_WINDOWS_LIGHT      2\n* PROTECTION_LEVEL_ANTIMALWARE_LIGHT  3\n* PROTECTION_LEVEL_LSA_LIGHT          4\n\n## Links\n\n[An article about exploiting the PPL program to destroy Windows Defender](https://www.zerosalarium.com/2025/08/countering-edrs-with-backing-of-ppl-protection.html)\n\n[WSASS - Tool to dump the LSASS process on modern Windows 11](https://github.com/TwoSevenOneT/WSASS)\n\n[An article about exploiting WerFaultSecure.exe to dump LSASS](https://www.zerosalarium.com/2025/09/Dumping-LSASS-With-WER-On-Modern-Windows-11.html)\n\n## Author:\n\n[Two Seven One Three](https://x.com/TwoSevenOneT)\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-22T02:26:47.510436"
  },
  {
    "basic_info": {
      "name": "KittyLoader",
      "full_name": "tlsbollei/KittyLoader",
      "owner": "tlsbollei",
      "description": "KittyLoader is a highly evasive loader written in C / Assembly",
      "url": "https://github.com/tlsbollei/KittyLoader",
      "clone_url": "https://github.com/tlsbollei/KittyLoader.git",
      "ssh_url": "git@github.com:tlsbollei/KittyLoader.git",
      "homepage": "",
      "created_at": "2025-08-29T00:01:49Z",
      "updated_at": "2025-09-21T06:12:40Z",
      "pushed_at": "2025-09-16T16:29:52Z"
    },
    "stats": {
      "stars": 189,
      "forks": 26,
      "watchers": 189,
      "open_issues": 1,
      "size": 325
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 29165,
        "CMake": 3067,
        "C": 2888,
        "PowerShell": 1457,
        "Shell": 1356,
        "Batchfile": 1157,
        "Assembly": 772
      },
      "license": null,
      "topics": [
        "assembly",
        "c",
        "cybersecurity",
        "evasion",
        "loader",
        "malware",
        "offense",
        "offensive-security",
        "redteam",
        "security",
        "windows"
      ]
    },
    "content": {
      "readme": "<p style=\"text-align:center;\">\n  <em>¬´ La force se cache dans l‚Äôinvisible, et l‚Äôinvisible gouverne tout. ¬ª</em>\n</p>\n\n<div style=\"text-align:center; margin-top:8px;\">\n  <img src=\"asset/charles-chevalier.jpg\"\n       alt=\"Charles Chevalier (Blue Lock)\"\n       width=\"400\">\n</div>\n\n# KittyLoader\n![GitHub Stars](https://img.shields.io/github/stars/tlsbollei/KittyLoader?style=social&logo=github)\n![GitHub Repo forks](https://img.shields.io/github/forks/tlsbollei/KittyLoader?style=social&logo=github)\n\n\n> [!CAUTION]\n> **Disclaimer & Legal Notice**  \n> This repository, **KittyLoader**, and all associated code, techniques, and information are provided strictly for **educational and academic research purposes**.  \n>\n> This sample and its methodologies have been **proactively disclosed to relevant cybersecurity defense organizations and vendors**. It is actively used by defensive engineers to research attack patterns, develop detection capabilities, and enhance security products.  \n>\n> You are required to use this knowledge and these tools **only on systems you own or have explicit, written permission to test**.  \n> Any unauthorized use against systems you do not own is **illegal and strictly prohibited**.  \n>\n> This tool was created to advance the field of defensive cybersecurity. The author, *tlsbollei*, assumes **no liability** and is not responsible for any misuse or damage caused by this software.  \n>\n> By accessing this repository, you acknowledge that you understand its purpose is to learn about **modern malware techniques, evasion tactics**, and ultimately to **improve our collective ability to defend against them**.\n\n\nBy proceeding, you agree to use this information responsibly and legally.\n\n\n### About\nKittyLoader is a highly evasive loader written in C / Assembly.\n\n### Features\n- Hijacks early execution by replacing the C runtime entrypoint (__scrt_common_main_seh) with custom assembly.\n  \n- Hides all modules by walking PEB->Ldr lists and unlinking its module entry (LDR_DATA_TABLE_ENTRY) from :\n    - InLoadOrderModuleList\n    - InInitializationOrderModuleList\n    - InMemoryOrderModuleList\n      \n- Deploys a wide variety of anti-analysis techniques, including :\n    - Multilayer scoring (debugger, sandbox/resources, API integrity/hook checks, human-input entropy, contextual cues like domain/time of day) combined into a weighted overall confidence that continuously re-evaluates\n    - Picks an operational state (full ‚Üí halted) and throttles/pauses with jittered, CPU-cycle-based delays in a loop that keeps reassessing the environment.\n    - API integrity/inline-hook heuristics and light tamper probes; human-interaction entropy sampling; randomized yet precise timing jitter to throw off debuggers\n    - Adds controlled noise (junk calcs + jittered delays) and spreads logic across multiple signals, reducing single-indicator detection.\n  \n- Embedded payload is encrypted at rest, with key and nonce derived at runtime from entropy sources: PID, TID, QPC, memory load, CPU info (CPUID), tick count.\n- Preferred algo is ChaCha20, but in case of failure falls back to RC4, decryption occurs in place after the encrypted blob is copied into memory.\n- APIs are initially attempted to be resolved via tprtdll.dll, which is quite the modern technique, it does so using GetModuleHandleW(L\"tprtdll.dll\") with DONT_RESOLVE_DLL_REFERENCES to minimize operation footprint.\n- Uses high-entropy randomness (PID/TID/GetTickCount/__rdtsc and more) to vary scan starts, delays, and sizes‚Äîreducing deterministic patterns and signature matches to cripple static.\n  \n- Searches for (RX/RWX/RW, non-guarded) and guards behind additional is_region_safe() heuristic, and does the following :\n    - Resolves sensitive APIs via stealthy, hash-based lookups instead of plain export walking‚Äîshrinks observable footprints and evades basic hooks\n    - Loads libraries with quiet flags (DONT_RESOLVE_DLL_REFERENCES, LOAD_LIBRARY_SEARCH_SYSTEM32) which minimizes I/O usage and loader footprint\n\n- Writes and decrypts payload in scattered, variably sized chunks with micro-jitter‚Äîdisrupts linear memory-write/decrypt heuristics and timing correlations\n    - Performs staged protection flips (RW ‚Üí RWX ‚Üí RX) and later restores RW before wipe/free‚Äîmimics legitimate behavior and lowers post-execution forensics   \n\n- Execute via LdrCallEnclave, normally intended for SGX/VBS enclaves, instead of jumping to a secure enclave, we jump to an arbitrary function pointer in normal (VTL0) user memory - latest version adds timing camouflage and a plausible execution context\n\n- Cleans up carefully (I-cache flush, SecureZeroMemory, free) with randomized post-execution timing‚Äîlimits residue and timeline clustering\n\n> [!NOTE]\n> To fix in the future -  ChaCha20 implementation bug, entry hijack ASM prologue/epilogue issues, control flow and compile hazards, and silence anti analysis more. Add fallbacks if LdrCallEnclave fails, and implement more stable key derivation. Or just fix it yourself!\n<img",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:48.640545"
  },
  {
    "basic_info": {
      "name": "refx",
      "full_name": "mosaico-labs/refx",
      "owner": "mosaico-labs",
      "description": "Compile-time safe C++ library for accurate coordinate transformations and navigation in mobile robotics.",
      "url": "https://github.com/mosaico-labs/refx",
      "clone_url": "https://github.com/mosaico-labs/refx.git",
      "ssh_url": "git@github.com:mosaico-labs/refx.git",
      "homepage": "https://mosaico.dev",
      "created_at": "2025-09-09T18:21:38Z",
      "updated_at": "2025-09-21T20:08:31Z",
      "pushed_at": "2025-09-18T19:12:37Z"
    },
    "stats": {
      "stars": 141,
      "forks": 5,
      "watchers": 141,
      "open_issues": 0,
      "size": 133
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 308663,
        "CMake": 2143,
        "C": 1061
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# refx\n\n**refx** is a modern header-only C++ library designed for mobile robotics and navigation. Its core philosophy is to leverage the C++ type system to provide compile-time safety for all geometric and geodetic calculations. This prevents a wide class of common and difficult-to-debug errors that arise from incorrect handling of coordinate reference frames.\n\n> [!WARNING]\n> refx is still in development (0.x.y) and API interface may change between minor revisions. Please use the releases packages for direct import or specify a commit tag if you are using refx with CMake `FetchContent`\n\n## Documentation\n\nRead the **[Full Documentation](https://mosaico-labs.github.io/refx-doc)**, to dive in ‚Äî explore APIs and classes to help you build and contribute faster.\n\nFor a collection of practical, real-world recipes designed to help you solve common problems in robotics and navigation, read ***The refx [Cookbook](https://mosaico-labs.github.io/refx-doc/cookbook)***.\n\n## Who is this for?\n\nThis library is intended for robotics engineers, researchers, and students working on applications that require a high degree of navigational accuracy and reliability, such as:\n\n  * Sensor fusion for Inertial Navigation Systems (INS)\n  * UAV/drone flight control and guidance\n  * Autonomous ground vehicle (AGV) localization\n  * Marine and sub-surface navigation\n  * Geodetic surveying and mapping\n\n## Key Features\n\n  * **Type-Safe Frames**: Each coordinate frame (e.g., NED, ECEF, FRD) is a unique type, preventing accidental mixing of incompatible data.\n  * **Mathematical Correctness**: A strict semantic distinction is enforced between absolute positions (`Coordinate3D`) and displacement vectors (`Vector3D`). Operations are designed to reflect their true mathematical meaning.\n  * **High-Fidelity Models**: Includes standard geodetic models (WGS-84), gravity models, and a concrete implementation of the World Magnetic Model (WMM2020) for high-accuracy applications.\n  * **Compile-Time Dispatch**: A powerful template-based system automatically selects the correct mathematical logic for linear vs. angular coordinates, ensuring correctness for geodetic calculations.\n\n## Ecosystem Integration\nrefx is designed to be a self-contained, lightweight library. However, for maximum utility, it provides optional, first-class support for **Eigen3**.\n\n## Installation\nHere's the code you'd add to your project's `CMakeLists.txt` file to import the refx library.\n```cmake\ninclude(FetchContent)\nFetchContent_Declare(\n  refx\n  GIT_REPOSITORY https://github.com/mosaico-labs/refx.git/\n  GIT_TAG        v0.1.0\n)\nFetchContent_MakeAvailable(refx)\n```\n\nFrom this point on, the `refx::refx` target is available to your project and this command can be used to to link refx.\n```cmake\ntarget_link_libraries(my_target PRIVATE refx::refx)\n```\n\n## Requirements\nDeveloping with refx requires only a C++17 compatible compiler, running tests requires Google Test as dependency (downloaded automatically by CMake).\n\n## Getting Started\n\nUsing `refx` is straightforward. The following example demonstrates the core features of the library: creating frame-aware vectors and coordinates, leveraging compile-time safety, and performing transformations.\n\n\n### A Practical Example\n\nThe code below simulates a common scenario: taking a vehicle's body-frame velocity, rotating it into the world frame, and projecting a global GPS coordinate into a local navigation frame.\n\n```cpp\n//getting_started.cpp\n#include <iostream>\n#include <cmath>\n#include <refx/geometry.h>  // for Vector3D, Coordinate3D, Rotation and YawPitchRoll\n#include <refx/transformations.h> // frame_cast, frame_transform\n\nusing namespace refx;\n\nint main() {\n    // 1. Create frame-aware vectors. Types are tagged with their frame.\n    Vector3D<ned> velocity_ned{10.0, -2.0, 0.5};  // {N, E, D}\n    Vector3D<frd> omega_body{0.0, 0.0, 0.03};     // {F, R, D}\n\n    std::cout << \"Velocity in NED frame: \" << velocity_ned << std::endl;\n\n    // 2. COMPILE-TIME SAFETY: Mixing frames is a compiler error.\n    // Uncommenting the line below will cause a compile-time error, preventing a common bug.\n    // velocity_ned + thrust_in_body;  // ERROR: Incompatible frames!\n\n    // 3. Define a rotation from the body frame to the world (NED) frame.\n    // Let's assume a 45-degree yaw (pi/4 radians).\n    auto yaw_pitch_roll = YawPitchRoll<double>(M_PI / 4.0, 0.0, 0.0);\n    auto R_world_from_body = Rotation<ned, frd>(yaw_pitch_roll);\n\n    // 4. Correctly transform the thrust vector to the world frame.\n    Vector3D<frd> velocity_body = R_world_from_body.inverse() * velocity_ned;\n    // This will generate a compile-time error:\n    // Vector3D<frd> velocity_body = R_world_from_body * velocity_ned; //need .inverse() to rotation\n    // Vector3D<flu> velocity_body = R_world_from_body.inverse() * velocity_ned; //result is <frd>\n\n    std::cout << \"Velocity in Body Frame: \" << velocity_body << std::endl;\n\n    // 5. Compute centripetal acceleration.\n    Vector3D<frd> centripetal",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:49.769546"
  },
  {
    "basic_info": {
      "name": "gemini_icpc2025",
      "full_name": "google-deepmind/gemini_icpc2025",
      "owner": "google-deepmind",
      "description": "Gemini 2025 ICPC World Finals Code Submissions",
      "url": "https://github.com/google-deepmind/gemini_icpc2025",
      "clone_url": "https://github.com/google-deepmind/gemini_icpc2025.git",
      "ssh_url": "git@github.com:google-deepmind/gemini_icpc2025.git",
      "homepage": "",
      "created_at": "2025-09-17T10:57:24Z",
      "updated_at": "2025-09-22T00:15:49Z",
      "pushed_at": "2025-09-17T11:09:46Z"
    },
    "stats": {
      "stars": 140,
      "forks": 12,
      "watchers": 140,
      "open_issues": 0,
      "size": 27
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 54237
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# Gemini ICPC 2025 Submissions\n\nThis repository contains the code submissions from an advanced version of\n[Gemini 2.5 Deep Think](https://blog.google/products/gemini/gemini-2-5-deep-think/)\nfor the 2025 International Collegiate Programming Contest World Finals.\n\n## License and disclaimer\n\nCopyright 2025 Google LLC\n\nAll software is licensed under the Apache License, Version 2.0 (Apache 2.0);\nyou may not use this file except in compliance with the Apache 2.0 license.\nYou may obtain a copy of the Apache 2.0 license at:\nhttps://www.apache.org/licenses/LICENSE-2.0\n\nAll other materials are licensed under the Creative Commons Attribution 4.0\nInternational License (CC-BY). You may obtain a copy of the CC-BY license at:\nhttps://creativecommons.org/licenses/by/4.0/legalcode\n\nUnless required by applicable law or agreed to in writing, all software and\nmaterials distributed here under the Apache 2.0 or CC-BY licenses are\ndistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\neither express or implied. See the licenses for the specific language governing\npermissions and limitations under those licenses.\n\nThis is not an official Google product.\n",
      "default_branch": "release"
    },
    "fetched_at": "2025-09-22T02:26:50.907538"
  },
  {
    "basic_info": {
      "name": "WatchDogKiller",
      "full_name": "j3h4ck/WatchDogKiller",
      "owner": "j3h4ck",
      "description": "PoC exploit for the vulnerable WatchDog Anti-Malware driver (amsdk.sys) ‚Äì weaponized to kill protected EDR/AV processes via BYOVD.",
      "url": "https://github.com/j3h4ck/WatchDogKiller",
      "clone_url": "https://github.com/j3h4ck/WatchDogKiller.git",
      "ssh_url": "git@github.com:j3h4ck/WatchDogKiller.git",
      "homepage": "",
      "created_at": "2025-09-10T18:41:21Z",
      "updated_at": "2025-09-21T13:07:52Z",
      "pushed_at": "2025-09-11T00:58:17Z"
    },
    "stats": {
      "stars": 136,
      "forks": 12,
      "watchers": 136,
      "open_issues": 0,
      "size": 1246
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 4134
      },
      "license": null,
      "topics": [
        "av-bypass",
        "av-evasion",
        "byovd",
        "edr",
        "edr-bypass",
        "edr-evasion"
      ]
    },
    "content": {
      "readme": "# WatchDogKiller ‚Äì Weaponizing the WatchDog Anti-Malware Driver Vulnerability\n\n## üìñ Research Article\nThis repository is the Proof-of-Concept (PoC) accompanying my technical write-up on the WatchDog Anti-Malware (amsdk.sys) BYOVD vulnerability.  \nüëâ Full research available here: [Researching an APT Attack and Weaponizing It: The WatchDog BYOVD Story](https://medium.com/@jehadbudagga/researching-an-apt-attack-and-weaponizing-it-56daabee11c9)\n\n---\n\n## ‚ö° Overview\nThe Silver Fox APT group leveraged a vulnerable Microsoft-signed driver (`wamsdk.sys`) in recent attacks to disable security products.  \nI reversed the latest WatchDog driver (`amsdk.sys v1.1.100`) and discovered that the arbitrary process termination vulnerability was still exploitable.\n\nThe driver as of this date 11/9/2025 isnt listed on either LolDriver or HVCI blocked\n\nThis PoC demonstrates:\n- Registering a process with the driver (`IOCTL_REGISTER_PROCESS`)\n- Using the termination routine (`IOCTL_TERMINATE_PROCESS`)\n- Bypassing the driver‚Äôs authorization mechanism\n- Killing protected EDR/AV processes (Bitdefender, Sophos, Kaspersky, etc.)\n\n---\n\n## üõ†Ô∏è Usage\n> ‚ö†Ô∏è **Disclaimer**: This code is for educational and research purposes only. Do not use it on systems you do not own.\n\n1. Load the vulnerable driver:\n   ```powershell\n   sc.exe create killer binPath=\"C:\\Path\\To\\wamsdk.sys\" type=kernel\n   sc.exe start killer\n   ```\n\n 2. Run the PoC\n```\n.\\WatchDogKiller.exe\n\nWatchDog EDR Terminator Tool @j3h4ck\n================================================\n\nSuccessfully opened Zam device\nAttempting to register process 9444...\nSuccessfully registered process 9444\n\nEnter PID to terminate: 30724\nWait for process exit? (0 = No, 1 = Yes): 0\n\nAttempting to terminate PID 30724...\nSuccessfully sent terminate request for PID 30724\nTerminate request completed successfully.\n\nEnter PID to terminate:\n```\n## References\n- Research Article: https://medium.com/p/56daabee11c9/  \n- The Hacker News ‚Äì Silver Fox Exploits Microsoft-Signed Driver: https://thehackernews.com/2025/09/silver-fox-exploits-microsoft-signed.html  \n\n---\n\n## Author\nJehad Abudagga  \n- LinkedIn: https://www.linkedin.com/in/jehadabudagga/  \n- GitHub: https://github.com/j3h4ck  \n\n---\n\n## Disclaimer\nThis project is released for educational and security research purposes only.  \nThe author does not endorse or condone the misuse of this information.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:52.036963"
  },
  {
    "basic_info": {
      "name": "NTSleuth",
      "full_name": "xaitax/NTSleuth",
      "owner": "xaitax",
      "description": "Comprehensive Windows Syscall Extraction & Analysis Framework",
      "url": "https://github.com/xaitax/NTSleuth",
      "clone_url": "https://github.com/xaitax/NTSleuth.git",
      "ssh_url": "git@github.com:xaitax/NTSleuth.git",
      "homepage": null,
      "created_at": "2025-08-30T16:11:09Z",
      "updated_at": "2025-09-21T11:44:45Z",
      "pushed_at": "2025-08-30T16:29:51Z"
    },
    "stats": {
      "stars": 125,
      "forks": 17,
      "watchers": 125,
      "open_issues": 0,
      "size": 228
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 371054,
        "Batchfile": 9213,
        "CMake": 5124
      },
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "topics": []
    },
    "content": {
      "readme": "# üîç NTSleuth\n\n<div align=\"center\">\n\n![NTSleuth Banner](https://img.shields.io/badge/NTSleuth-Windows%20Syscall%20Hunter-purple?style=for-the-badge&logo=windows&logoColor=white)\n\n[![Version](https://img.shields.io/badge/Version-1.0.0-blue?style=for-the-badge)](https://github.com/xaitax/NTSleuth/releases)\n[![Platform](https://img.shields.io/badge/Platform-ARM64%20%7C%20x64%20%7C%20x86-orange?style=for-the-badge)](https://github.com/xaitax/NTSleuth)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-green?style=for-the-badge)](LICENSE)\n[![C++](https://img.shields.io/badge/C++-20-red?style=for-the-badge&logo=cplusplus)](https://isocpp.org/)\n\n**Comprehensive Windows Syscall Extraction & Analysis Framework**\n\n*Discover every syscall. Resolve every parameter. Map the undocumented.*\n\nIf you find this research valuable, I'd appreciate a coffee:\n\n[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/M4M61EP5XL)\n\n</div>\n\n---\n\n## ‚ö†Ô∏è Early Development Notice\n\n> **Important**: This project is in early development. While functional and tested on multiple systems, it certainly has bugs and edge cases that haven't been discovered yet. I'm actively working on improvements and welcome feedback! Despite its early stage, I hope NTSleuth proves helpful for your Windows internals research and reverse engineering projects.\n>\n> Please report any issues you encounter - your feedback helps make this tool better for everyone!\n\n## üéØ What is NTSleuth?\n\nNTSleuth is an advanced Windows syscall extraction and analysis framework that automatically discovers, documents, and analyzes system calls across all Windows architectures. It's a comprehensive reverse engineering tool that provides deep insights into Windows internals with high accuracy.\n\n### üöÄ Key Achievements\n\n- **2,400+ Syscalls Extracted** - Complete coverage of ntdll.dll and win32u.dll\n- **1,100+ Function Signatures** - Integrated PHNT database from System Informer\n- **3 Architectures Supported** - Native ARM64, x64, and x86 analysis\n- **100% Automated** - From extraction to parameter resolution\n- **< 4 Second Extraction** - Lightning-fast analysis engine\n\n## ‚ú® Core Features\n\n### üî¨ Syscall Extraction Engine\n- **Multi-Architecture Disassembly** - ARM64 (SVC), x64 (SYSCALL), x86 (INT 2E/SYSENTER)\n- **Complete Module Coverage** - ntdll.dll, win32u.dll, and WOW64 variants\n- **Stub Analysis** - Extracts and analyzes syscall stub bytes\n- **Alias Detection** - Identifies Nt/Zw function relationships\n- **True Syscall Verification** - Distinguishes actual syscalls from regular exports\n\n### üß† Advanced Parameter Resolution\n- **PHNT Database Integration** - 1,100+ authoritative function signatures\n- **SAL Annotation Support** - Complete _In_, _Out_, _Inout_, _opt_ preservation\n- **Multi-Method Resolution**:\n  - Primary: PHNT database lookup\n  - Secondary: Pattern-based matching\n  - Tertiary: Assembly code analysis\n  - Quaternary: Heuristic inference\n  - Quinary: Cross-reference learning\n- **Confidence Scoring** - Reliability ratings for each resolution (0.0-1.0)\n\n### üìä Output Formats\n- **JSON Export** - Structured data with complete metadata\n- **C/C++ Headers** - Ready-to-use header files with prototypes\n- **Interactive Lookup** - Query individual syscalls with rich formatting\n- **Documentation Links** - Direct references to ntdoc.m417z.com\n\n### üõ†Ô∏è Professional Features\n- **Symbol Resolution** - Automatic PDB download from Microsoft Symbol Server\n- **Local Caching** - Intelligent cache management for symbols and PHNT data\n- **Offline Mode** - Works without internet after initial cache population\n\n## üì∏ Screenshots\n\n```\n    ‚ñà‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà   ‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà\n    ‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà\n    ‚ñà‚ñà ‚ñà‚ñà ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\n    ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà         ‚ñà‚ñà ‚ñà‚ñà      ‚ñà‚ñà      ‚ñà‚ñà   ‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà\n    ‚ñà‚ñà   ‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà    ‚ñà‚ñà    ‚ñà‚ñà  ‚ñà‚ñà\n\n\n  +===================================================================+\n  |  Windows Syscall Extraction & Automated Parameter Resolution Tool |\n  |                 ARM64 | x64 | x86 Syscall Analysis                |\n  |               v1.0.0 by Alexander Hagenah ‚Ä¢ @xaitax               |\n  +===================================================================+\n\n[*] INITIALIZATION\n\n[+] Initializing NtSleuth Engine...\n[+] Output directory: output\n[+] Symbol cache: cache\\symbols\n\n[*] PARAMETER DATABASE\n\n[+] Loading PHNT database for parameter resolution...\n[+] PHNT database initialized with 1109 function signatures\n\n[*] SYSCALL EXTRACTION\n\n[+] Extracting syscalls from system modules...\n\n[*] PARAMETER RESOLUTION\n\n[+] Resolving parameters from PHNT database...\n[+] Resolved parameters for 1103 syscalls from PHNT\n\n[*] EXTRACTION RESULTS\n\n> System Information\n  * Target OS: 10.0.26220.5770 (ARM64)\n  * Build: 26220.5770\n\n> Syscall Statistics\n  * Total syscalls found: 2461\n    -> ntdll.dll: 978 total\n    -> win32u",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:53.185291"
  },
  {
    "basic_info": {
      "name": "based-cpp",
      "full_name": "SheafificationOfG/based-cpp",
      "owner": "SheafificationOfG",
      "description": "C++ is the based interpreted language",
      "url": "https://github.com/SheafificationOfG/based-cpp",
      "clone_url": "https://github.com/SheafificationOfG/based-cpp.git",
      "ssh_url": "git@github.com:SheafificationOfG/based-cpp.git",
      "homepage": "https://youtu.be/cFtymODJEjs",
      "created_at": "2025-09-06T02:50:29Z",
      "updated_at": "2025-09-22T02:10:15Z",
      "pushed_at": "2025-09-22T01:20:21Z"
    },
    "stats": {
      "stars": 121,
      "forks": 6,
      "watchers": 121,
      "open_issues": 4,
      "size": 28
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 65250,
        "Python": 18949
      },
      "license": null,
      "topics": [
        "gcc",
        "interpreter",
        "metaprogramming"
      ]
    },
    "content": {
      "readme": "# Based C++\n\nThis repo provides an implementation of the GNU Interface Layer (GIL) and standard library for `g++`.\n\n### C++ is the best interpreted language\n\n[![C++ is the best interpreted language!](https://img.youtube.com/vi/cFtymODJEjs/0.jpg)](https://youtu.be/cFtymODJEjs)\n\n## Usage\n\nHere is a simple \"Hello, world!\" in C++.\n\n```cpp\n#include \"gil/std.hpp\"\nusing namespace gil::std;\n\nvolatile auto run = main<{\n  str::puts(str::literal(\"Hello, world!\\n\"))\n}>;\n```\n\nTo run the program, run\n\n```sh\ng++ -std=c++23 -Based hello_world.cpp -o -\n```\n\n> [!NOTE]\n> The above command only works if you invoke `g++` from the root of this repo; otherwise, you will have to provide the full path to the required abstract system emulator drivers (`ased`) folder.\n\n## Examples\n\n- `hello_world.cpp`\n  > Be greeted in all of the languages supported by YVR!\n- `hello_world_vmi.cpp`\n  > Same as above, but without using the standard library.\n- `calculator.cpp`\n  > Perform a single binary operation on a pair of 64-bit signed integers.\n- `mergesort.cpp`\n  > Merge sort a comma-separated list of 64-bit signed integers.\n\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:54.317429"
  },
  {
    "basic_info": {
      "name": "SplineTrajectory",
      "full_name": "Bziyue/SplineTrajectory",
      "owner": "Bziyue",
      "description": null,
      "url": "https://github.com/Bziyue/SplineTrajectory",
      "clone_url": "https://github.com/Bziyue/SplineTrajectory.git",
      "ssh_url": "git@github.com:Bziyue/SplineTrajectory.git",
      "homepage": null,
      "created_at": "2025-09-05T12:14:08Z",
      "updated_at": "2025-09-21T10:18:37Z",
      "pushed_at": "2025-09-21T06:02:54Z"
    },
    "stats": {
      "stars": 117,
      "forks": 8,
      "watchers": 117,
      "open_issues": 1,
      "size": 220
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 409484,
        "CMake": 5627
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# SplineTrajectory\n\nSplineTrajectory is a high-performance, header-only C++ library for generating smooth, N-dimensional spline trajectories. This library provides **MINCO-equivalent** cubic„ÄÅquintic and septic spline interpolation with boundary conditions support, making it ideal for robotics, path planning, and trajectory generation applications.\n\n**English** | [‰∏≠Êñá](README_zh.md)\n\n\n## Key Features\n\n- **MINCO Equivalent**: Achieves minimum acceleration, jerk, and snap trajectories, just like MINCO.\n    \n- **High Performance**: Outperforms traditional methods by using a specialized **block tridiagonal matrix solver** (Thomas algorithm) instead of general LU decomposition.\n    \n- **Template-Based**: Fully templated for **arbitrary dimensions** (1D to ND) with compile-time optimizations.\n    \n- **Flexible & Efficient**: Supports multiple time specifications, optimized batch evaluation, and provides derivatives (velocity, acceleration, jerk, snap).\n    \n- **Eigen Integration**: Seamlessly uses the Eigen library for all linear algebra operations.\n    \n- **Header-Only**: Easy to integrate into any project by just including the header.\n\n## Requirements\n\n- C++11 or later\n- Eigen 3.3 or later\n- CMake 3.10+ (for building examples and tests)\n\n## Quick Start\n\n```bash\ngit clone https://github.com/Bziyue/SplineTrajectory.git\n# git clone git@github.com:Bziyue/SplineTrajectory.git\n\ncd SplineTrajectory\n\n# Install Eigen3 (if not installed)\nsudo apt install libeigen3-dev\n\n# Build and test\nmkdir build && cd build\ncmake ..\nmake\n\n# Run performance comparisons\n./test_cubic_spline_vs_minco_nd\n./test_quintic_spline_vs_minco_nd\n./test_septic_spline_vs_minco_nd\n\n# Run examples\n./basic_cubic_spline\n./quintic_spline_comparison\n./robot_trajectory_planning\n./test_with_min_jerk_3d\n./test_with_min_snap_3d\n```\nSplineTrajectory also outperforms [large_scale_traj_optimizer](https://github.com/ZJU-FAST-Lab/large_scale_traj_optimizer) in both trajectory generation and evaluation. To see the test results, run ./test_with_min_jerk_3d.\n\nFor a complete motion planning toolkit that integrates this library, check out [ST-opt-tools](https://github.com/MarineRock10/ST-opt-tools). It's a motion planning toolkit featuring ESDF mapping, A* path planning, and L-BFGS trajectory optimization integrated with SplineTrajectory library.\n\n## Comparison with MINCO\nThis library is mathematically equivalent to MINCO but implemented with more efficient algorithms.\n| Feature         | SplineTrajectory                             | MINCO                      |\n| --------------- | -------------------------------------------- | -------------------------- |\n| **Algorithm**   | **Thomas Algorithm** (Block Tridiagonal)     | LU Decomposition           |\n| **Performance** | **Faster** Generation & Evaluation           | Baseline                   |\n| **Core Theory** | Classical Spline Theory (Minimum Norm)       | Minimum Control Effort     |\n| **Flexibility** | Fully templated for **arbitrary dimensions** | Fixed to 3D |\n| **Evaluation**  | Optimized segmented batch evaluation with coefficient caching        | Standard evaluation        |\n\n## Spline Types & Energy Minimization\nThe library provides splines that are optimal solutions, minimizing the integral of the squared norm of a derivative, which has a direct physical meaning.\n\n| Spline Type             | MINCO Equivalent     | \n| ----------------------- | -------------------- | \n| **Cubic** (3rd order)   | Minimum Acceleration | \n| **Quintic** (5th order) | Minimum Jerk         | \n| **Septic** (7th order)  | Minimum Snap         |\n\n---\n## Usage Example\nHere's a concise example of how to create and evaluate a 3D trajectory.\n```cpp\n#include \"SplineTrajectory.hpp\"\n#include <iostream>\n#include <vector>\n#include <Eigen/Dense>\n#include <iomanip>\n\nint main() {\n    using namespace SplineTrajectory;\n\n    std::cout << \"=== SplineTrajectory Complete Interface Usage Example ===\" << std::endl;\n\n    // 1. Define 3D waypoints and boundary conditions\n    SplineVector<SplinePoint3d> waypoints = {\n        {0.0, 0.0, 0.0}, {1.0, 2.0, 1.0}, {3.0, 1.0, 2.0}, {4.0, 3.0, 0.5}, {5.0, 0.5, 1.5}\n    };\n    \n    // Define detailed boundary conditions (including velocity, acceleration, jerk)\n    BoundaryConditions<3> boundary; //default velocity„ÄÅacceleration and jerk are zero\n    // or BoundaryConditions<3> boundary(SplinePoint3d(0.1, 0.0, 0.0),SplinePoint3d(0.2, 0.0, 0.1)); default acceleration and jerk are zero\n    boundary.start_velocity = SplinePoint3d(0.1, 0.0, 0.0); // cubic splines only use velocity \n    boundary.end_velocity = SplinePoint3d(0.2, 0.0, 0.1);\n    boundary.start_acceleration = SplinePoint3d(0.0, 0.0, 0.0);// quintic use velocity and acceleration\n    boundary.end_acceleration = SplinePoint3d(0.0, 0.0, 0.0);\n    boundary.start_jerk = SplinePoint3d(0.0, 0.0, 0.0); // septic use velocity, acceleration and jerk\n    boundary.end_jerk = SplinePoint3d(0.0, 0.0, 0.0);\n\n    std::cout << \"\\n--- Construction Methods Comparison ---\" << std:",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:55.435747"
  },
  {
    "basic_info": {
      "name": "EDR-Freeze",
      "full_name": "TwoSevenOneT/EDR-Freeze",
      "owner": "TwoSevenOneT",
      "description": "EDR-Freeze is a tool that puts a process of EDR, AntiMalware into a coma state.",
      "url": "https://github.com/TwoSevenOneT/EDR-Freeze",
      "clone_url": "https://github.com/TwoSevenOneT/EDR-Freeze.git",
      "ssh_url": "git@github.com:TwoSevenOneT/EDR-Freeze.git",
      "homepage": null,
      "created_at": "2025-09-21T01:21:06Z",
      "updated_at": "2025-09-22T02:15:50Z",
      "pushed_at": "2025-09-21T02:36:08Z"
    },
    "stats": {
      "stars": 99,
      "forks": 22,
      "watchers": 99,
      "open_issues": 0,
      "size": 15
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 18937
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "### EDR-Freeze\n\nThis is a tool that exploits the software vulnerability of WerFaultSecure to suspend the processes of EDRs and antimalware without needing to use the BYOVD (Bring Your Own Vulnerable Driver) attack method.\n\nEDR-Freeze operates in user mode, so you don't need to install any additional drivers. It can run on the latest version of Windows.\n\n*The experiment was conducted with the latest version of Windows at the time of the project creation: __Windows 11 24H2__*\n\n### Command Line Syntax\n\n**EDR-Freeze.exe [TargetPID] [SleepTime]**\n\n*Example: __EDR-Freeze.exe 1234 10000__*\n\n*Freeze the target for 10000 milliseconds*\n\n## Links\n\n[EDR-Freeze: A Tool That Puts EDRs And Antivirus Into A Coma State](https://www.zerosalarium.com/2025/09/EDR-Freeze-Puts-EDRs-Antivirus-Into-Coma.html)\n\n[Tool to run process with PPL without driver](https://github.com/TwoSevenOneT/CreateProcessAsPPL)\n\n## Author:\n\n[Two Seven One Three](https://x.com/TwoSevenOneT)\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-22T02:26:56.582407"
  },
  {
    "basic_info": {
      "name": "COMouflage",
      "full_name": "zero2504/COMouflage",
      "owner": "zero2504",
      "description": "COM-based DLL Surrogate Injection",
      "url": "https://github.com/zero2504/COMouflage",
      "clone_url": "https://github.com/zero2504/COMouflage.git",
      "ssh_url": "git@github.com:zero2504/COMouflage.git",
      "homepage": "",
      "created_at": "2025-09-06T20:13:49Z",
      "updated_at": "2025-09-21T18:40:49Z",
      "pushed_at": "2025-09-06T21:06:00Z"
    },
    "stats": {
      "stars": 95,
      "forks": 10,
      "watchers": 95,
      "open_issues": 0,
      "size": 14
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 3712
      },
      "license": "MIT License",
      "topics": [
        "com",
        "dll-injection",
        "dll-sideloading",
        "malware",
        "windows"
      ]
    },
    "content": {
      "readme": "# COMouflage\n\n\n# COM-based DLL Surrogate Injection\n\n\n## Abstract\n\nThis paper analyzes a sophisticated injection technique that leverages the Component Object Model (COM) and DLL Surrogate processes for stealthy code execution. Unlike traditional COM hijacking methods focused primarily on persistence, this technique exploits the surrogate hosting capabilities to achieve process injection with several operational advantages, including parent process masquerading and reduced detection footprint.\n\n\n## 1. Introduction\n\nComponent Object Model (COM) hijacking has been extensively documented as a persistence mechanism in the MITRE ATT&CK framework. This paper examines the technical mechanics of COM-based DLL Surrogate injection.\n\n\n## 2. Technical Background\n\n### 2.1 What is COM?\n\nThe Component Object Model (COM) is a Microsoft technology that enables software components to communicate regardless of the programming language used to create them. COM objects are identified by globally unique identifiers (GUIDs) called Class Identifiers (CLSIDs) and can be instantiated through various mechanisms including:\n\n- **In-process servers** (DLLs loaded into the calling process)\n- **Out-of-process servers** (Separate executable processes)\n- **Surrogate processes** (System-provided hosts for DLL-based COM objects)\n\n\n### 2.2 Understanding dllhost.exe and DLL Surrogates\n\n`dllhost.exe` is a legitimate Windows system process that serves as a surrogate host for COM objects implemented as DLLs. This mechanism, known as ‚ÄúDLL Surrogate,‚Äù allows DLL-based COM objects to run in a separate process space, providing:\n\n- **Process isolation**: Protects the calling application from DLL crashes\n- **Security boundaries**: Enables different security contexts\n- **Stability**: Prevents unstable DLLs from affecting the parent process\n\nThe surrogate is configured through registry entries, specifically the `DllSurrogate` value under the AppID registry key.\n\n\n## 3. Attack Technique Analysis\n\n### 3.1 Registry Manipulation for HKCU Hijacking\n\nThe technique operates by creating specific registry entries in `HKEY_CURRENT_USER` rather than `HKEY_LOCAL_MACHINE`, which provides several advantages:\n\n1. **Reduced privileges required**: No administrator rights needed\n1. **User-specific targeting**: Affects only the current user context\n1. **Stealth**: Less likely to be monitored compared to HKLM modifications\n\n#### Registry Structure Created:\n\n```\nHKCU\\Software\\Classes\\AppID\\{CLSID}\n‚îú‚îÄ‚îÄ (Default) = \"MyStealthObject\"\n‚îî‚îÄ‚îÄ DllSurrogate = \"\"\n\nHKCU\\Software\\Classes\\CLSID\\{CLSID}\n‚îú‚îÄ‚îÄ (Default) = \"MyStealthObject\"\n‚îú‚îÄ‚îÄ AppID = \"{CLSID}\"\n‚îî‚îÄ‚îÄ InprocServer32\\\n    ‚îú‚îÄ‚îÄ (Default) = \"C:\\Path\\To\\Malicious.dll\"\n    ‚îî‚îÄ‚îÄ ThreadingModel = \"Apartment\"\n```\n\n\n### 3.2 Process Tree Masquerading\n\nWhen the malicious COM object is instantiated with `CLSCTX_LOCAL_SERVER`, Windows automatically launches `dllhost.exe` as a surrogate process. This creates a deceptive process tree:\n\n```\nsvchost.exe (COM+ System Application)\n‚îî‚îÄ‚îÄ dllhost.exe /Processid:{CLSID}\n    ‚îî‚îÄ‚îÄ [Malicious DLL loaded in-process]\n```\n\n**Key Advantages:**\n\n- The parent process appears as `svchost.exe`, a highly trusted system process\n- The initiating malicious process is not the direct parent of the injection target\n- Standard parent-child process monitoring may miss the true attack chain\n\n## 4. Detailed Code Analysis\n\n### 4.1 CLSID Definition and Constants\n\n```cpp\nstatic const wchar_t* CLSID_STR = L\"{F00DBABA-2504-2025-2016-666699996666}\";\n```\n\nThe technique begins with a custom CLSID (Class Identifier), a 128-bit GUID that uniquely identifies the COM object. This particular CLSID is crafted to appear distinctive while avoiding conflicts with legitimate system components. The format follows the standard GUID structure: `{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}`.\n\n### 4.2 Registry Manipulation Function\n\n```cpp\nbool SetRegStr(HKEY root, const std::wstring& key, \n               const std::wstring& name, const std::wstring& val) {\n    HKEY h;\n    if (RegCreateKeyExW(root, key.c_str(), 0, nullptr,\n        REG_OPTION_NON_VOLATILE, KEY_WRITE, nullptr, &h, nullptr) != ERROR_SUCCESS)\n        return false;\n    \n    if (RegSetValueExW(h,\n        name.empty() ? nullptr : name.c_str(),\n        0, REG_SZ,\n        (const BYTE*)val.c_str(),\n        DWORD((val.size() + 1) * sizeof(wchar_t))) != ERROR_SUCCESS)\n    {\n        RegCloseKey(h);\n        return false;\n    }\n    RegCloseKey(h);\n    return true;\n}\n```\n\n**Technical Breakdown:**\n\n1. **`RegCreateKeyExW`**: Creates or opens the specified registry key with `KEY_WRITE` permissions\n1. **Error Handling**: Each registry operation includes proper error checking\n1. **`REG_OPTION_NON_VOLATILE`**: Ensures the key persists across reboots -> Could be changed with **`REG_OPTION_VOLATILE`** (Stored in memory and is not preserved when the corresponding registry hive is unloaded)\n\n### 4.3 AppID Registry Configuration\n\n```cpp\nstd::wstring appidKey = LR\"(Software\\Classes\\AppID\\)\" + std::wstring(CLSID_STR);\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:57.741639"
  },
  {
    "basic_info": {
      "name": "SmallVmp",
      "full_name": "NiTianErXing666/SmallVmp",
      "owner": "NiTianErXing666",
      "description": "ÁÆÄÂçïÁöÑÂü∫‰∫éllvmÂÆûÁé∞vmp‰øùÊä§",
      "url": "https://github.com/NiTianErXing666/SmallVmp",
      "clone_url": "https://github.com/NiTianErXing666/SmallVmp.git",
      "ssh_url": "git@github.com:NiTianErXing666/SmallVmp.git",
      "homepage": null,
      "created_at": "2025-09-11T05:51:29Z",
      "updated_at": "2025-09-20T16:12:50Z",
      "pushed_at": "2025-09-11T06:50:25Z"
    },
    "stats": {
      "stars": 92,
      "forks": 34,
      "watchers": 92,
      "open_issues": 1,
      "size": 179745
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 368793292,
        "LLVM": 308849353,
        "C": 116806797,
        "Assembly": 82058921,
        "Python": 9857632,
        "MLIR": 8283564,
        "Objective-C": 4281255,
        "Fortran": 4032931,
        "CMake": 2825046,
        "HTML": 1848088,
        "Objective-C++": 1079422,
        "Cuda": 690390,
        "FIRRTL": 656504,
        "Starlark": 577041,
        "OCaml": 367047,
        "Perl": 360953,
        "Shell": 256227,
        "HIP": 180701,
        "Scilab": 160404,
        "JavaScript": 152936,
        "Go": 146596,
        "Awk": 127345,
        "Makefile": 93087,
        "CSS": 69384,
        "Roff": 61204,
        "Emacs Lisp": 57495,
        "Julia": 49676,
        "Batchfile": 43195,
        "NASL": 31808,
        "HLSL": 31627,
        "Vim Script": 28088,
        "C#": 27909,
        "TypeScript": 24542,
        "Pawn": 17068,
        "Dockerfile": 16648,
        "Lua": 11939,
        "Cool": 9533,
        "GDB": 8568,
        "M": 8541,
        "MATLAB": 4803,
        "SWIG": 3809,
        "TeX": 2141,
        "POV-Ray SDL": 1631,
        "AppleScript": 1429,
        "Mathematica": 1136,
        "RenderScript": 749,
        "Limbo": 303,
        "Swift": 271,
        "Rust": 200,
        "Linker Script": 65,
        "PHP": 52,
        "RPC": 28
      },
      "license": "GNU Affero General Public License v3.0",
      "topics": []
    },
    "content": {
      "readme": "# SmallVMP: ‰∏Ä‰∏™Âü∫‰∫é LLVM ÁöÑÊïôÂ≠¶ÊÄß VMP ÂÆûÁé∞\n\n**‚Äú‰∏çÈÄ†ËΩÆÂ≠êÔºå‰Ωï‰ª•Áü•ËΩÆ‰πãÁ≤æÈ´ìÔºü‚Äù ‚Äî To truly understand the wheel, you must build one.**\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n---\n\n## ÁõÆÂΩï\n\n- [ÂÖ≥‰∫éÈ°πÁõÆ](#ÂÖ≥‰∫éÈ°πÁõÆ)\n- [Ê†∏ÂøÉÁâπÊÄß](#Ê†∏ÂøÉÁâπÊÄß)\n- [Â∑•‰ΩúÂéüÁêÜ](#Â∑•‰ΩúÂéüÁêÜ)\n- [ÁéØÂ¢ÉÂáÜÂ§á](#ÁéØÂ¢ÉÂáÜÂ§á)\n- [Â¶Ç‰Ωï‰ΩøÁî®](#Â¶Ç‰Ωï‰ΩøÁî®)\n- [ÊïàÊûúÂ±ïÁ§∫](#ÊïàÊûúÂ±ïÁ§∫)\n- [Â±ÄÈôêÊÄß](#Â±ÄÈôêÊÄß)\n- [Êú™Êù•Â±ïÊúõ](#Êú™Êù•Â±ïÊúõ)\n- [Ëá¥Ë∞¢](#Ëá¥Ë∞¢)\n\n## ÂÖ≥‰∫éÈ°πÁõÆ\n\n`SmallVMP` ÊòØ‰∏Ä‰∏™‰ªéÈõ∂ÂºÄÂßãÊûÑÂª∫ÁöÑ„ÄÅÁî®‰∫éÂ≠¶‰π†ÂíåÁ†îÁ©∂ÁöÑËôöÊãüÊú∫‰øùÊä§ÔºàVirtual Machine ProtectionÔºâÈ°πÁõÆ„ÄÇÂÆÉÂπ∂Èùû‰∏Ä‰∏™Áîü‰∫ßÁ∫ßÁöÑÂÆâÂÖ®Ëß£ÂÜ≥ÊñπÊ°àÔºåËÄåÊòØÊàë‰∏™‰∫∫Âú®Êé¢Á¥¢ VMP ÊäÄÊúØÂéüÁêÜËøáÁ®ã‰∏≠ÁöÑ‰∫ßÁâ©„ÄÇ\n\nÈ°πÁõÆÁöÑÊ†∏ÂøÉÁõÆÊ†áÊòØÔºö\n1.  ‰∫≤ÊâãÂÆûÁé∞‰∏Ä‰∏™ÂæÆÂûãËôöÊãüÊú∫ÔºàVMÔºâÔºåÂåÖÊã¨ÂÖ∂Êåá‰ª§ÈõÜ„ÄÅËß£ÈáäÂô®ÂíåÂ≠óËäÇÁ†ÅÊ†ºÂºè„ÄÇ\n2.  Âà©Áî® **LLVM Pass** ÊäÄÊúØÔºåÂú®ÁºñËØëÊúüÈó¥Ëá™Âä®Â∞ÜË¢´‰øùÊä§ÂáΩÊï∞ÁöÑ LLVM IR ËΩ¨Êç¢‰∏∫Êàë‰ª¨Ëá™ÂÆö‰πâÁöÑÂ≠óËäÇÁ†Å„ÄÇ\n3.  Ëß£ÂÜ≥Âú® VMP ‰∏≠Â§ÑÁêÜÂ§ñÈÉ®ÂáΩÊï∞Ë∞ÉÁî®ÂíåÂÖ®Â±ÄÂèòÈáèËÆøÈóÆÁ≠âÂÖ≥ÈîÆÈóÆÈ¢ò„ÄÇ\n\nÊú¨È°πÁõÆÊ∑±Â∫¶ÈõÜÊàê‰∫ÜÂº∫Â§ßÁöÑ **Hikari Obfuscator** Ê°ÜÊû∂Ôºå‰∏ç‰ªÖÂÆûÁé∞‰∫ÜÂü∫Á°ÄÁöÑ VMP ÂäüËÉΩÔºåËøòËÉΩÂà©Áî® Hikari ÂØπ VMP ÁöÑÊ†∏ÂøÉ‚Äî‚ÄîËß£ÈáäÂô®Êú¨Ë∫´‚Äî‚ÄîËøõË°åÊ∑∑Ê∑ÜÔºå‰ªéËÄåÊûÅÂ§ßÊèêÂçá‰∫ÜÂàÜÊûêÈöæÂ∫¶„ÄÇ\n\n## Ê†∏ÂøÉÁâπÊÄß\n\n- **Âü∫‰∫é LLVM Pass**: Âú®ÁºñËØëÊó∂Ëá™Âä®ÂÆåÊàêËôöÊãüÂåñÔºåÂØπÊ∫ê‰ª£Á†ÅÊó†‰æµÂÖ•„ÄÇ\n- **Ëá™ÂÆö‰πâÊåá‰ª§ÈõÜ (ISA)**: ÂåÖÂê´‰∏ÄÂ•óÁ≤æÁÆÄÁöÑ Êåá‰ª§ÈõÜÔºåÁî®‰∫éÁÆóÊúØ„ÄÅÈÄªËæë„ÄÅËÆøÂ≠òÂíåÊéßÂà∂ÊµÅÊìç‰Ωú„ÄÇ\n- **Thunk Êú∫Âà∂**: Â∑ßÂ¶ôÂú∞ÈÄöËøáÁîüÊàêÂéüÁîü‚ÄúÊ°•Êé•ÂáΩÊï∞ (Thunk)‚ÄùÊù•Â§ÑÁêÜÂØπÂ§ñÈÉ®ÂáΩÊï∞ÂíåÂÖ®Â±ÄÂèòÈáèÁöÑÂºïÁî®ÔºåÈÅøÂÖç‰∫ÜÊâãÂä®Ê®°ÊãüÈìæÊé•Âô®ÁöÑÂ§çÊùÇÊÄß„ÄÇ\n- **‰∏é Hikari Ê∑±Â∫¶ÈõÜÊàê**: ÂèØ‰ª•ËΩªÊùæÂú∞Â∞Ü Hikari ÁöÑÂ§öÁßçÊ∑∑Ê∑ÜÁ≠ñÁï•ÔºàÂ¶Ç BCF, CFF, SPL, SUBÔºâÂ∫îÁî®‰∫é VMP Ëß£ÈáäÂô®ÂíåÈ°πÁõÆ‰∏≠ÁöÑÂÖ∂‰ªñÂéüÁîü‰ª£Á†Å„ÄÇ\n- **Ë∑®Âπ≥Âè∞**: ‰Ωú‰∏∫ LLVM ÁöÑ‰∏ÄÈÉ®ÂàÜÔºåÁêÜËÆ∫‰∏äÊîØÊåÅÊâÄÊúâ LLVM/Clang ÊîØÊåÅÁöÑÁõÆÊ†áÂπ≥Âè∞„ÄÇ\n\n## Â∑•‰ΩúÂéüÁêÜ\n\n`SmallVMP` ÁöÑ‰øùÊä§ÊµÅÁ®ãÂèØ‰ª•Ê¶ÇÊã¨‰∏∫‰ª•‰∏ãÂá†‰∏™Ê≠•È™§Ôºö\n\n1.  **Ê†áËÆ∞**: ÂºÄÂèëËÄÖ‰ΩøÁî® `IRVM_SECTION` ÂÆèÊ†áËÆ∞ÈúÄË¶Å‰øùÊä§ÁöÑ C/C++ ÂáΩÊï∞„ÄÇ\n2.  **IR ËΩ¨Êç¢ (LLVM Pass)**:\n    - Âú®ÁºñËØëËøáÁ®ã‰∏≠Ôºå`SmallVMP` ÁöÑ Pass ‰ºöËØÜÂà´Âá∫Ë¢´Ê†áËÆ∞ÁöÑÂáΩÊï∞„ÄÇ\n    - ÂÆÉÈÅçÂéÜÂáΩÊï∞ÁöÑ LLVM IRÔºåÂπ∂Â∞ÜÂÖ∂ÈÄêÊù°ÁøªËØëÊàêÊàë‰ª¨Ëá™ÂÆö‰πâÁöÑÂ≠óËäÇÁ†Å„ÄÇ\n    - ÊâÄÊúâÂØπÂ§ñÈÉ®ÂáΩÊï∞ÊàñÂÖ®Â±ÄÂèòÈáèÁöÑÂºïÁî®ÈÉΩ‰ºöË¢´ËÆ∞ÂΩï‰∏ãÊù•ÔºåÂπ∂‰∏∫‰πãÁîüÊàê‰∏Ä‰∏™ÂéüÁîü‰ª£Á†ÅÁöÑ**Ê°•Êé•ÂáΩÊï∞ (Thunk)**„ÄÇÂ≠óËäÇÁ†Å‰∏≠Â∞ÜÂè™‰øùÁïôÂØπËøô‰∏™ Thunk ÁöÑË∞ÉÁî® ID„ÄÇ\n3.  **ÂáΩÊï∞ÊõøÊç¢**:\n    - ÂéüÂßãÂáΩÊï∞‰ΩìË¢´Ê∏ÖÁ©∫„ÄÇ\n    - ÊõøÊç¢‰∏∫‰∏Ä‰∏™**Ë∑≥Êùø (Stub)** ÂáΩÊï∞„ÄÇËøô‰∏™ Stub ÁöÑÂîØ‰∏Ä‰ΩúÁî®Â∞±ÊòØË∞ÉÁî® VM Ëß£ÈáäÂô® (`vm_exec`)ÔºåÂπ∂Â∞ÜÂ≠óËäÇÁ†Å„ÄÅÂØÑÂ≠òÂô®‰∏ä‰∏ãÊñáÁ≠â‰ø°ÊÅØ‰º†ÈÄíÁªôÂÆÉ„ÄÇ\n4.  **ËøêË°åÊó∂ÊâßË°å**:\n    - ÂΩìÁ®ãÂ∫èË∞ÉÁî®Ë¢´‰øùÊä§ÁöÑÂáΩÊï∞Êó∂ÔºåÂÆûÈôÖ‰∏äÊòØÂú®Ë∞ÉÁî®Ëøô‰∏™ Stub„ÄÇ\n    - Stub ÂêØÂä® VM Ëß£ÈáäÂô®ÔºåËß£ÈáäÂô®ÂºÄÂßãÈÄêÊù°ÊâßË°åÂ≠óËäÇÁ†ÅÔºåÊ®°ÊãüÂéüÂßãÂáΩÊï∞ÁöÑÈÄªËæë„ÄÇ\n    - ÂΩìÈÅáÂà∞ÈúÄË¶ÅË∞ÉÁî®Â§ñÈÉ®ÂáΩÊï∞ÔºàÂ¶Ç `printf`ÔºâÁöÑÊåá‰ª§Êó∂ÔºåËß£ÈáäÂô®‰ºöÈÄöËøá ID Êü•ÊâæÂà∞ÂØπÂ∫îÁöÑ Thunk ÂáΩÊï∞Âπ∂ÊâßË°åÂÆÉ„ÄÇ\n\n## ÁéØÂ¢ÉÂáÜÂ§á\n\n`SmallVMP` ÊòØ‰Ωú‰∏∫ LLVM ÁöÑ‰∏Ä‰∏™ Pass ÂÆûÁé∞ÁöÑÔºåÂπ∂‰æùËµñ‰∫éÁâπÂÆöÁöÑ Hikari Ê∑∑Ê∑ÜÊ°ÜÊû∂„ÄÇÂõ†Ê≠§ÔºåÊÇ®ÈúÄË¶ÅÂÖàÁºñËØëÂíåÈÖçÁΩÆÂ•ΩÈõÜÊàê‰∫Ü `SmallVMP` ÁöÑ LLVM/Clang Â∑•ÂÖ∑Èìæ„ÄÇ\n\n1.  **Ëé∑ÂèñÂ∑•ÂÖ∑Èìæ**:\n    - ÂÖãÈöÜÊàñ‰∏ãËΩΩÈõÜÊàê‰∫Ü `SmallVMP` ÁöÑ LLVM/Hikari Ê∫êÁ†Å„ÄÇ\n    - `[(https://github.com/NiTianErXing666/SmallVmp)]`\n2.  **ÁºñËØë LLVM/Clang**:\n    - Ê†πÊçÆËØ•‰ªìÂ∫ìÁöÑËØ¥ÊòéÊñáÊ°£ÁºñËØëÂ∑•ÂÖ∑Èìæ„ÄÇ\n3.  **ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáè**:\n    - Â∞ÜÁºñËØëÂ•ΩÁöÑ `bin` ÁõÆÂΩïÔºàÂåÖÂê´ `clang`, `clang++` Á≠âÔºâÊ∑ªÂä†Âà∞ÊÇ®ÁöÑÁ≥ªÁªü `PATH` ‰∏≠Ôºå‰ª•Á°Æ‰øùÂêéÁª≠ÂëΩ‰ª§ËÉΩË∞ÉÁî®Ëøô‰∏™ÂÆöÂà∂ÁâàÁöÑÁºñËØëÂô®„ÄÇ\n\n## Â¶Ç‰Ωï‰ΩøÁî®\n\n‰ΩøÁî® `SmallVMP` ÈùûÂ∏∏ÁÆÄÂçïÔºö\n\n1.  **ÂºïÂÖ•Â§¥Êñá‰ª∂**: Âú®ÊÇ®ÁöÑ C/C++ ‰ª£Á†Å‰∏≠ÔºåÂåÖÂê´ `VMP.h`„ÄÇ\n\n    ```c\n    #include \"VMP.h\"\n    ```\n\n2.  **Ê†áËÆ∞ÁõÆÊ†áÂáΩÊï∞**: ‰ΩøÁî® `IRVM_SECTION` ÂÆèÊù•Ê†áËÆ∞ÊÇ®Â∏åÊúõËøõË°å VMP ‰øùÊä§ÁöÑÂáΩÊï∞„ÄÇ\n\n    ```c\n    // Á§∫‰æã‰ª£Á†ÅÔºåÂåÖÂê´ÂÖ®Â±ÄÂèòÈáèÂíåÂ§ñÈÉ®ÂáΩÊï∞Ë∞ÉÁî®\n    int gArr[10] = {0};\n    const char* gMsg = \"Hello, VMP!\";\n    \n    IRVM_SECTION\n    int test_calls(int a, int b) {\n        puts(\"call puts(const)\");\n        int *p = &gArr[4];\n        *p = a + b;\n        printf(\"gArr[4]=%d, gMsg=%s\n    \", gArr[4], gMsg);\n        return a + b;\n    }\n    ```\n\n3.  **ÁºñËØë‰ª£Á†Å**: ‰ΩøÁî®ÂÆöÂà∂ÁöÑ `clang` ËøõË°åÁºñËØë„ÄÇ`SmallVMP` ÈªòËÆ§ÂêØÁî®ÔºåÊó†ÈúÄÈ¢ùÂ§ñÂèÇÊï∞„ÄÇ\n\n    ```bash\n    /path/to/your/custom/clang test.c -o app\n    ```\n\n    ÁºñËØëÊó∂ÔºåÊÇ®‰ºöÁúãÂà∞Á±ª‰ººÂ¶Ç‰∏ãÁöÑÊó•ÂøóÔºåË°®Êòé `SmallVMP` Â∑≤ÊàêÂäüÂ§ÑÁêÜÁõÆÊ†áÂáΩÊï∞Ôºö\n    ```\n    [irvm] emit code global: test_calls_code (266 bytes)\n    [irvm]   + bytes initialized\n    [irvm]   + rewritten to vm_exec stub: test_calls\n    ```\n\n4.  **(ÂèØÈÄâ) Âè†Âä† Hikari Ê∑∑Ê∑Ü**: ÊÇ®ÂèØ‰ª•ÈôÑÂä† Hikari ÁöÑ `-mllvm` ÂèÇÊï∞Êù•Ê∑∑Ê∑Ü VM Ëß£ÈáäÂô®Êú¨Ë∫´ÔºåÊàñÈ°πÁõÆ‰∏≠ÁöÑÂÖ∂‰ªñÂéüÁîü‰ª£Á†ÅÔºå‰ª•ËææÂà∞ÂèåÈáç‰øùÊä§„ÄÇ\n\n    ```bash\n    # ÂºÄÂêØ‰º™ÊéßÂà∂ÊµÅ (Bogus Control Flow)\n    clang test.c -o app -mllvm -enable-bcfobf\n    \n    # ÂºÄÂêØÊéßÂà∂ÊµÅÂπ≥Âù¶Âåñ (Control Flow Flattening)\n    clang test.c -o app -mllvm -enable-cffobf\n    \n    # ÂºÄÂêØÊâÄÊúâÊ∑∑Ê∑Ü\n    clang test.c -o app -mllvm -enable-allobf\n    ```\n\n## ÊïàÊûúÂ±ïÁ§∫\n\n ÂèØ‰ª•ÂéªÁúãÈõ™ËÆ∫ÂùõÁúãÊïàÊûúÔºöhttps://bbs.kanxue.com/thread-288435-1.html\n\n\n##  Â±ÄÈôêÊÄß\nSmallVMP ÁõÆÂâç‰ªçÊòØ‰∏Ä‰∏™ÂÆûÈ™åÊÄßÈ°πÁõÆÔºåÂ≠òÂú®‰∏Ä‰∫õÂ±ÄÈôêÔºö\n\nÊåá‰ª§ÊîØÊåÅ‰∏çÂÆåÊï¥: ÂØπÊüê‰∫õÂ§çÊùÇÁöÑ LLVM IR Êåá‰ª§ÔºàÂ¶Ç select, phi ÁöÑÂ§çÊùÇÁî®Ê≥ïÁ≠âÔºâÂ∞öÊú™ÊîØÊåÅ„ÄÇ‰∏∫‰øùËØÅÁºñËØëÁ®≥ÂÆöÊÄßÔºåÈÅáÂà∞‰∏çÊîØÊåÅÁöÑÊåá‰ª§Êó∂ÔºåPass ‰ºöËá™Âä®ÊîæÂºÉÂØπËØ•ÂáΩÊï∞ÁöÑËôöÊãüÂåñ„ÄÇ\nÊÄßËÉΩÂºÄÈîÄ: ÂíåÊâÄÊúâ VMPÊñπÊ°à‰∏ÄÊ†∑ÔºåËß£ÈáäÊâßË°å‰ºöÂ∏¶Êù•ÊòæËëóÁöÑÊÄßËÉΩ‰∏ãÈôç„ÄÇ‰∏çÈÄÇÂêàÁî®‰∫éÊÄßËÉΩÊïèÊÑüÁöÑÁÉ≠ÁÇπÂáΩÊï∞„ÄÇ\nÂÆâÂÖ®ÊÄß: Â≠óËäÇÁ†ÅÁõÆÂâçÊòØÊòéÊñáÂ≠òÂÇ®ÁöÑÔºåÂÆπÊòìË¢´ Dump ÂíåÂàÜÊûê„ÄÇ\n## Êú™Êù•Â±ïÊúõ\nÂ≠óËäÇÁ†ÅÂä†ÂØÜ: ÂØπÁîüÊàêÁöÑÂ≠óËäÇÁ†ÅËøõË°åÂä†ÂØÜÔºåÂú®Ëß£ÈáäÂô®ÊâßË°åÂâçÂä®ÊÄÅËß£ÂØÜÔºåÂØπÊäóÈùôÊÄÅÂàÜÊûê„ÄÇ\nÂä®ÊÄÅÂàÜÂèëÂô® (Dynamic Dispatcher): ‰ΩøÊìç‰ΩúÁ†Å (Opcode) ‰∏éÂ§ÑÁêÜÂáΩÊï∞ (Handler) ÁöÑÊò†Â∞ÑÂÖ≥Á≥ªÂú®ËøêË°åÊó∂Âä®ÊÄÅÁîüÊàêÔºåÂØπÊäóÂü∫‰∫éÁâπÂæÅÁ†ÅÁöÑÂàÜÊûê„ÄÇ\nÂµåÂ•ó VM (Nested VM): ÂÆûÁé∞‰∫åÁ∫ß VMÔºåÁî®‰∏Ä‰∏™ VM Êù•‰øùÊä§Âè¶‰∏Ä‰∏™ VM ÁöÑËß£ÈáäÂô®ÔºåÂΩ¢ÊàêÂ±ÇÂ±ÇÂµåÂ•óÔºåÂ∞ÜÂàÜÊûêÈöæÂ∫¶ÊèêÂçáÂà∞Êñ∞ÁöÑÈ´òÂ∫¶„ÄÇ\n## Ëá¥Ë∞¢\nÊú¨È°πÁõÆÊ∑±Âèó Hikari Obfuscator È°πÁõÆÁöÑÂêØÂèëÔºåÂπ∂Áõ¥Êé•Âü∫‰∫éÂÖ∂Ê°ÜÊû∂ËøõË°åÊûÑÂª∫„ÄÇÊÑüË∞¢ Hikari Âõ¢ÈòüÁöÑÊù∞Âá∫Â∑•‰Ωú„ÄÇhttps://github.com/HikariObfuscator/Hikari\nÊÑüË∞¢ LLVM Á§æÂå∫Êèê‰æõÁöÑÂº∫Â§ßËÄåÁÅµÊ¥ªÁöÑÁºñËØëÂô®Âü∫Á°ÄËÆæÊñΩ„ÄÇ\nÊÑüË∞¢ Xvmp ÁöÑÊÄùË∑ØÔºÅÊÑüË∞¢ Xvmp Âõ¢ÈòüÁöÑÊù∞Âá∫Â∑•‰Ωú https://github.com/GANGE666/xVMP\n## Ë¥°ÁåÆ\nÊú¨È°πÁõÆÊó®Âú®Â≠¶‰π†Âíå‰∫§ÊµÅÔºå‰ª£Á†ÅÂ∞ö‰∏çÂÆåÁæéÔºåÊ¨¢Ëøé‰ªª‰ΩïÂΩ¢ÂºèÁöÑË¥°ÁåÆÔºÅÂ¶ÇÊûúÊÇ®Êúâ‰ªª‰ΩïÂª∫ËÆÆ„ÄÅÂèëÁé∞ Bug ÊàñÂ∏åÊúõÊ∑ªÂä†Êñ∞ÂäüËÉΩÔºåËØ∑ÈöèÊó∂Êèê‰∫§ Pull Request ÊàñÂàõÂª∫ Issue„ÄÇ\n\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:26:58.904122"
  },
  {
    "basic_info": {
      "name": "gdbw",
      "full_name": "iilegacyyii/gdbw",
      "owner": "iilegacyyii",
      "description": "Scriptable CLI debugger for windows, inspired by pwndbg ‚ù§",
      "url": "https://github.com/iilegacyyii/gdbw",
      "clone_url": "https://github.com/iilegacyyii/gdbw.git",
      "ssh_url": "git@github.com:iilegacyyii/gdbw.git",
      "homepage": null,
      "created_at": "2025-08-27T00:22:42Z",
      "updated_at": "2025-09-18T12:18:31Z",
      "pushed_at": "2025-09-17T16:51:32Z"
    },
    "stats": {
      "stars": 83,
      "forks": 6,
      "watchers": 83,
      "open_issues": 2,
      "size": 4673
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 52586,
        "Lua": 46333,
        "PowerShell": 1489,
        "C": 384
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "![GDBW LOGO](/_assets/gdbw.png)\n\n# gdbw\n`gdbw` is a scriptable CLI debugger for windows, built using the windows debug tools DbgEng backend. Inspired by pwndbg ‚ù§\n\nEvery piece of gdbw is designed to be customizable, the UI, prompt, commands and all libraries the commands use are all implemented in lua (check out `/plugins`).\n\n> [!NOTE]\n> This project is still experimental. Expect frequent changes, new features, and bug fixes.\n\n<img width=\"1215\" height=\"654\" alt=\"image\" src=\"https://github.com/user-attachments/assets/aad66aa8-dd59-4adf-8b2f-332a99900481\" />\n\n\n## Installation\n\n[Installation instructions can be found in our wiki](https://github.com/iilegacyyii/gdbw/wiki)\n\n## Contributing\n\nBoth pull requests and feedback are welcome! Once this is a little more fleshed out we plan on having a proper contribution format.\n\n## Acknowledgements\n\nZopazz, co-author. Wouldn't have gotten this to a functional state if it weren't for his help.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:27:00.065877"
  },
  {
    "basic_info": {
      "name": "capture",
      "full_name": "Mr-brillianter/capture",
      "owner": "Mr-brillianter",
      "description": "ËøôÊòØ‰∏Ä‰∏™Âü∫‰∫é PcapPlusPlus„ÄÅPF_RING Âíå ClickHouse ÊûÑÂª∫ÁöÑÈ´òÊÄßËÉΩÁΩëÁªúÊµÅÈáèÂàÜÊûêÁ≥ªÁªüÔºå‰∏ìÊ≥®‰∫éÂÆûÊó∂ÊµÅÈáèÊçïËé∑„ÄÅËß£Êûê‰∏éÂ≠òÂÇ®„ÄÇ",
      "url": "https://github.com/Mr-brillianter/capture",
      "clone_url": "https://github.com/Mr-brillianter/capture.git",
      "ssh_url": "git@github.com:Mr-brillianter/capture.git",
      "homepage": "https://mr-brillianter.github.io/capture/",
      "created_at": "2025-08-27T07:30:00Z",
      "updated_at": "2025-09-19T11:07:17Z",
      "pushed_at": "2025-09-11T13:33:19Z"
    },
    "stats": {
      "stars": 81,
      "forks": 9,
      "watchers": 81,
      "open_issues": 6,
      "size": 12315
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 106543,
        "CMake": 1626
      },
      "license": "Apache License 2.0",
      "topics": [
        "traffic-analysis"
      ]
    },
    "content": {
      "readme": "# È´òÊÄßËÉΩÁΩëÁªúÊµÅÈáèÂàÜÊûêÁ≥ªÁªü\n\n## Á≥ªÁªüÊ¶ÇËø∞\nËøôÊòØ‰∏Ä‰∏™Âü∫‰∫é PcapPlusPlus„ÄÅPF_RING Âíå ClickHouse ÊûÑÂª∫ÁöÑÈ´òÊÄßËÉΩÁΩëÁªúÊµÅÈáèÂàÜÊûêÁ≥ªÁªüÔºå‰∏ìÊ≥®‰∫éÂÆûÊó∂ÊµÅÈáèÊçïËé∑„ÄÅËß£Êûê‰∏éÂ≠òÂÇ®„ÄÇ\n\n## Ê†∏ÂøÉÁâπÊÄß\n### Êï∞ÊçÆÊçïËé∑ËÉΩÂäõ\n- ‚ú® ÂÆûÊó∂Âú®Á∫øÊµÅÈáèÊçïËé∑ÂíåËß£Êûê\n- üì¶ Á¶ªÁ∫øÊï∞ÊçÆÂåÖÊñá‰ª∂Ëß£ÊûêÊîØÊåÅ\n- üöÄ Â§ÑÁêÜÊÄßËÉΩË∂ÖËøá 2Gbps\n\n### ÊµÅÈáèÂàÜÊûêÂºïÊìé\n- üîÑ Áª¥Êä§Âä®ÊÄÅÊµÅË°®ÔºàLUTÔºâÁªìÊûÑ\n- üåê ÊîØÊåÅÁΩëÁªúÂ±ÇÂíå‰º†ËæìÂ±ÇÁöÑÁªü‰∏ÄÊµÅÁ∫ßË°®ÂæÅ\n- üìä Êèê‰æõÂü∫Á°ÄÊµÅÈáèÁªüËÆ°ÂàÜÊûêÂäüËÉΩ\n\n### Á≥ªÁªüÊû∂ÊûÑ\n- üíæ ÈááÁî® ClickHouse ‰Ωú‰∏∫È´òÊÄßËÉΩÊï∞ÊçÆ‰ªìÂ∫ì\n- üîå ÈõÜÊàê Python Socket ÈÄö‰ø°Êé•Âè£ÔºàÁ´ØÂè£ 8888Ôºâ\n- üõ†Ô∏è Âü∫‰∫é PcapPlusPlus Âíå PF_RING ÁöÑÈ´òÊïàÊï∞ÊçÆÂåÖÂ§ÑÁêÜ\n\n### ÊäÄÊúØ‰ºòÂäø\n- È´òÊÄßËÉΩÔºöÁ™ÅÁ†¥ 2Gbps Â§ÑÁêÜÈÄüÁéá\n- ÁÅµÊ¥ªÊÄßÔºöÊîØÊåÅÂú®Á∫ø/Á¶ªÁ∫øÂèåÊ®°ÂºèËß£Êûê\n- ÂèØÊâ©Â±ïÔºöÂÆåÊï¥ÁöÑÊï∞ÊçÆÂ≠òÂÇ®‰∏éÂàÜÊûêÁÆ°ÈÅì\n\nËøô‰∏™Á≥ªÁªüÂÆåÁæéÁªìÂêà‰∫ÜÈ´òÊÄßËÉΩÁΩëÁªúÊï∞ÊçÆÊçïËé∑ÂíåÁé∞‰ª£Êï∞ÊçÆ‰ªìÂ∫ìÊäÄÊúØÔºå‰∏∫ÁΩëÁªúÊµÅÈáèÂàÜÊûêÊèê‰æõ‰∫Ü‰∏Ä‰∏™Âº∫Â§ßËÄåÂÆåÊï¥ÁöÑËß£ÂÜ≥ÊñπÊ°à„ÄÇ\n# ÁºñËØëÂíåËøêË°å\nÂèØ‰ª•Áõ¥Êé•Âú®ÁªàÁ´Ø-ÊâßË°å‰ªªÂä°ÔºåÈÄâÊã©‰ªªÂä°Âç≥ÂèØÔºå‰πüÂèØ‰ª•ËøêË°å‰∏ãÂàóÂëΩ‰ª§\n```sh\n# ÁºñËØë\nsudo cmake --build build/\n# ËøêË°å\nsudo ./bin/live_uni_pac_attr\n# Â¶ÇÊûúÊ≤°ÊúâÂä†ËΩΩpfringÂÜÖÊ†∏Ê®°Âùó\nsudo insmod /home/njust/program/PF_RING/kernel/pf_ring.ko\n```\n# sudoÁâàÊú¨Ë∞ÉËØï\nÂú®VscodeË∞ÉËØï‰∏ã‰ΩøÁî®Debug with sudoÂç≥ÂèØÔºåÈÖçÁΩÆÂ∑≤ÁªèÂú®launch.jsonÂíåtasks.json\n# Â∏∏Áî®ÂëΩ‰ª§ÂèÇËÄÉÊåáÂçó\n## ÂºÄÂèëÁéØÂ¢ÉÈÖçÁΩÆ\n\n### VSCode Áõ∏ÂÖ≥\n```bash\n# rootÊùÉÈôêÊâìÂºÄVScode\nsudo code . --no-sandbox --user-data-dir='./usr-data/'\n\n# ‰øÆÊîπÊñá‰ª∂ÂΩíÂ±û‰ª•Ëß£ÂÜ≥Êèê‰∫§commit„ÄÅ‰øÆÊîπÂíåÊâìÂºÄvscodeÁöÑÊùÉÈôêÈóÆÈ¢ò\nsudo chown njust:njust .\n```\n### ÊµÅÈáèÈáçÊîæ\n```sh\napt install tcpreplay\n\nsudo tcpreplay --topspeed -i enp7s0 \"/home/njust/Êï∞ÊçÆÈõÜ/Êï∞ÊçÆÈõÜË∞ÉÁ†î/pcap/synthetic_attack/dataset/anonymized/full_anonymized/Sunday_2021-05-02_1206_adjusted.pcap\"\n```\n###  ÂàóÂá∫pfringÁΩëÂç°\n```sh\n/home/njust/program/pfringPcapPlusPlus/PcapPlusPlus/build/examples_bin# ./PfRingTrafficFilter --list\n    -> Name: enp7s0   Index: 3     MAC address: 14:d8:64:92:f0:cb   Available RX channels: 8   MTU: 1518\n    -> Name: any      Index: N/A   MAC address: N/A                 Available RX channels: 0   MTU: 18\n    -> Name: lo       Index: 1     MAC address: N/A                 Available RX channels: 1   MTU: 65554\n    -> Name: eno1     Index: 2     MAC address: e8:9c:25:98:aa:2a   Available RX channels: 1   MTU: 1518\n    -> Name: docker0  Index: 4     MAC address: 02:42:3a:d5:a3:68   Available RX channels: 1   MTU: 1518\n    -> Name: br-e5358eb32785 Index: 5     MAC address: 02:42:a1:26:60:29   Available RX channels: 1   MTU: 1518\n```\n\n\n###  ÊµãËØïpfring\n```sh\n./PfRingTrafficFilter -n enp7s0\n```\n\n###  clickhouse\n```sh\nclickhouse-server\n```\n###  clickhouseÁöÑcppÈÄö‰ø°Â∫ìÂÆâË£Ö\n```sh\ngit clone https://github.com/ClickHouse/clickhouse-cpp.git\ncd clickhouse-cpp\ngit submodule update --init --recursive\ncmake . -B build -DCMAKE_BUILD_TYPE=Debug\ncmake --build build\ncd build \nmake install\n```\n# ÈÖçÁΩÆËØ¥ÊòéÊñáÊ°£\n\n## 1. ÁºñËØëÈÖçÁΩÆ\n\n### ‰ΩøÁî®libpcapÁâàÊú¨\n```bash\ncmake -S . -B build -DPcapPlusPlus_ROOT=/home/njust/program/pcapplusplus-23.09-ubuntu-20.04-gcc-9.4.0-x86_64\n```\n\n### ‰ΩøÁî®PFRingÁâàÊú¨\n```bash\ncmake -S . -B build -DPcapPlusPlus_ROOT=/home/njust/program/pfringPcapPlusPlus/LibPcapPlusPlus\n```\n\n## 2. ÊÄßËÉΩÊµãËØïÂëΩ‰ª§\n\n### Á®ãÂ∫èÊâßË°å‰∏éËÆ°Êó∂\n```bash\n# Âü∫Êú¨ËÆ°Êó∂ÂëΩ‰ª§\ntime ./bin/pcap2csv /home/njust/program/pcapplusplus-23.09-ubuntu-20.04-gcc-9.4.0-x86_64/backend-demo/data/traffic/Êï∞ÊçÆÈõÜ1/TrafficSets.txt /home/njust/program/pcapplusplus-23.09-ubuntu-20.04-gcc-9.4.0-x86_64/backend-demo/data/traffic/Êï∞ÊçÆÈõÜ1/FlowAttr.csv\n\n# ËØ¶ÁªÜËÆ°Êó∂ÔºàÂèØÈÄâÔºâ\n/usr/bin/time -v ./example-app \"$1\"\n\n# ÊµÅÈáèÂõûÊîæ\ntcpreplay --topspeed -i enp7s0 \"/home/njust/Êï∞ÊçÆÈõÜ/Êï∞ÊçÆÈõÜË∞ÉÁ†î/pcap/synthetic_attack/dataset/anonymized/full_anonymized/Sunday_2021-05-02_1206_adjusted.pcap\"\n```\n\n## 3. ClickHouseÊï∞ÊçÆÂ∫ìÊìç‰Ωú\n\n### Ë°®Êìç‰Ωú\n```sql\n-- ÂàõÂª∫Êï∞ÊçÆÂåÖË°®\nCREATE TABLE IF NOT EXISTS default.packets (\n    insertTime DateTime DEFAULT now(),\n    hashVal UInt32,\n    packetLen Int32,\n    tvSec UInt32,\n    tvNsec UInt32,\n    srcIp String,\n    dstIp String,\n    ttl UInt8,\n    tos UInt8,\n    id UInt16,\n    offset UInt16,\n    protocolIP UInt8,\n    protocol UInt8,\n    lenLoad UInt16,\n    srcPort UInt16,\n    dstPort UInt16,\n    ackNum UInt32,\n    seqNum UInt32,\n    flag UInt16,\n    window UInt16,\n    lenUdp UInt16,\n    icmpType UInt8,\n    icmpCode UInt8\n) \nENGINE = MergeTree()\nORDER BY (insertTime,hashVal)\n\n-- Âà†Èô§Ë°®\nDROP TABLE default.packets\nDROP TABLE default.hashVal_summary\nDROP TABLE default.protocol_hash_table\nDROP TABLE default.src_ip_hash_table\n```\n\n### Êü•ËØ¢Êìç‰Ωú\n```sql\n-- Êü•ÁúãË°®Ë°åÊï∞\nSELECT count() FROM default.packets\n\n-- Êü•ÁúãË°®Â§ßÂ∞è\nSELECT formatReadableSize(sum(data_compressed_bytes)) AS table_size\nFROM system.parts\nWHERE active AND database = 'default' AND table = 'numbers'\n\n-- ÁªüËÆ°ÂàÜÊûê\nSELECT count(tvSec), min(tvSec), max(tvSec),\n       avg(tvSec), stddevSamp(tvSec)\nFROM default.packets;\n\n-- ËÆ°ÁÆó‰∏≠‰ΩçÊï∞\nSELECT quantile(0.5)(tvSec) as median\nFROM default.packets;\n```\n\n### Â§çÊùÇÊü•ËØ¢Á§∫‰æã\n```sql\nWITH filtered_hashVals AS (\n    SELECT hashVal \n    FROM hashVal_summary \n    WHERE packet_count > 50 \n          AND latest_insertTime < now() - INTERVAL 5 SECOND \n          AND packet_count - calculated_packet_count > 50\n)\nSELECT \n    hashVal,\n    groupArray(ttl),\n    groupArray(tos),\n    groupArray(id),\n    groupArray(offset),\n    groupArray(packetLen),\n    groupArray(tvNsec),\n    groupArray(lenLoad),\n    groupArray(ackNum),\n    groupArray(seqNum),\n    groupArray(flag),\n    groupArray(window),\n    groupArray(lenUdp),\n    groupArray(icmpType),\n    groupArray(icmpCode)\nFROM packets\nWHERE hashVal IN filtered_hashVals\nGROUP BY hashVal;\n```\n## Êü•ÁúãÁâàÊú¨ÂíåÁâπÂÆöIP\n```\nquery clickhouse version\nSELECT version();\nSELECT hashVal FROM default.src_ip_hash_table WHERE srcIp = '8.8.4.4';\n```\n\n##  ÂàóÂá∫ÊâÄÊúâÁöÑË°®ÂíåÊï∞ÊçÆÂ∫ì\n```\nSHOW DATABASES;\nSHOW TABLES;\n```\n\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-22T02:27:01.278774"
  },
  {
    "basic_info": {
      "name": "mac-angle",
      "full_name": "ufoym/mac-angle",
      "owner": "ufoym",
      "description": "C++ library for reading MacBook lid angle sensor data",
      "url": "https://github.com/ufoym/mac-angle",
      "clone_url": "https://github.com/ufoym/mac-angle.git",
      "ssh_url": "git@github.com:ufoym/mac-angle.git",
      "homepage": null,
      "created_at": "2025-09-08T05:02:59Z",
      "updated_at": "2025-09-15T20:21:35Z",
      "pushed_at": "2025-09-08T05:03:02Z"
    },
    "stats": {
      "stars": 75,
      "forks": 3,
      "watchers": 75,
      "open_issues": 0,
      "size": 10
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 17012,
        "CMake": 2837,
        "Shell": 1852
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# MacBook Lid Angle Sensor C++ Library\n\nA C++ library for reading MacBook lid angle sensor data, based on reverse engineering of HID device specifications.\n\n## Features\n\n- üîç Direct access to MacBook's built-in lid angle sensor\n- üìè Real-time precise angle measurements (0-360 degree range)\n- ‚ö° High-performance C++ implementation with modern C++14 standard support\n- üõ°Ô∏è Comprehensive exception handling mechanism\n- üîß Clean and easy-to-use API interface\n- üì¶ CMake build system support\n\n## Device Compatibility\n\n### Supported Devices\n- MacBook Pro 16-inch (2019) and newer models\n- MacBook Pro M2/M3/M4 series\n\n### Known Incompatible Devices\n- M1 MacBook Air/Pro (sensor access restricted)\n\n### Technical Specifications\n- Device identification: Apple VID=0x05AC, PID=0x8104\n- HID usage: Sensor page (0x0020), Orientation usage (0x008A)\n- Data format: 16-bit angle value with 0.01-degree precision\n- Data range: 0-360 degrees\n\n## Quick Start\n\n### System Requirements\n\n- macOS 10.15 or later\n- Xcode Command Line Tools\n- CMake 3.15 or later\n\n### Build and Installation\n\n```bash\n# Clone the repository\ngit clone <repository-url>\ncd mac-angle\n\n# Create build directory\nmkdir build && cd build\n\n# Configure build\ncmake ..\n\n# Compile\nmake\n\n# Run example program\n./lid_angle_example\n```\n\n### Basic Usage\n\n```cpp\n#include \"angle.h\"\n#include <iostream>\n\nusing namespace MacBookLidAngle;\n\nint main() {\n    try {\n        // Create sensor instance\n        LidAngleSensor sensor;\n        \n        // Check if sensor is available\n        if (sensor.isAvailable()) {\n            // Read current angle\n            double angle = sensor.readAngle();\n            std::cout << \"Current lid angle: \" << angle << \"¬∞\" << std::endl;\n        }\n        \n    } catch (const SensorNotSupportedException& e) {\n        std::cerr << \"Device not supported: \" << e.what() << std::endl;\n    } catch (const SensorInitializationException& e) {\n        std::cerr << \"Initialization failed: \" << e.what() << std::endl;\n    } catch (const SensorReadException& e) {\n        std::cerr << \"Read failed: \" << e.what() << std::endl;\n    }\n    \n    return 0;\n}\n```\n\n### Continuous Monitoring\n\n```cpp\n#include \"angle.h\"\n#include <iostream>\n#include <chrono>\n#include <thread>\n\nusing namespace MacBookLidAngle;\n\nint main() {\n    try {\n        LidAngleSensor sensor;\n        \n        while (true) {\n            double angle = sensor.readAngle();\n            std::cout << \"Angle: \" << angle << \"¬∞\" << std::endl;\n            std::this_thread::sleep_for(std::chrono::milliseconds(500));\n        }\n        \n    } catch (const std::exception& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    }\n    \n    return 0;\n}\n```\n\n## API Documentation\n\n### Class: `MacBookLidAngle::LidAngleSensor`\n\nThe main sensor interface class providing access to MacBook lid angle sensor.\n\n#### Constructor\n\n```cpp\nLidAngleSensor();\n```\n\nAutomatically initializes and connects to the sensor. Throws appropriate exceptions if the sensor is unavailable or initialization fails.\n\n**Exceptions:**\n- `SensorNotSupportedException` - Device doesn't support sensor hardware\n- `SensorInitializationException` - Sensor initialization failed\n\n#### Member Functions\n\n##### `bool isAvailable() const noexcept`\n\nChecks if the sensor is available and ready for reading.\n\n**Returns:** `true` if sensor is available, `false` otherwise\n\n##### `double readAngle()`\n\nReads the current lid angle.\n\n**Returns:** Angle value (0-360 degrees)\n\n**Exceptions:**\n- `SensorReadException` - Read operation failed\n- `SensorNotSupportedException` - Sensor unavailable\n\n#### Static Functions\n\n##### `static bool isDeviceSupported()`\n\nChecks if this device should support the lid angle sensor.\n\n**Returns:** `true` if device model should support the sensor\n\n##### `static std::string getVersion()`\n\nGets library version information.\n\n**Returns:** Version string\n\n### Exception Classes\n\n#### `SensorNotSupportedException`\n\nThrown when the lid angle sensor is not supported on this device.\n\n#### `SensorInitializationException`\n\nThrown when sensor initialization fails.\n\n#### `SensorReadException`\n\nThrown when sensor read operation fails.\n\n## CMake Integration\n\n### Using as Subdirectory\n\n```cmake\nadd_subdirectory(macbook-lid-angle)\ntarget_link_libraries(your_target macbook_lid_angle)\n```\n\n### Using After Installation\n\n```cmake\nfind_package(MacBookLidAngle REQUIRED)\ntarget_link_libraries(your_target MacBookLidAngle::macbook_lid_angle)\n```\n\n## Example Program\n\nThe project includes a complete example program `example.cpp` demonstrating:\n\n- Device compatibility checking\n- Basic angle reading\n- Continuous monitoring mode\n\nRun the example:\n```bash\n# Basic demonstration\n./lid_angle_example\n\n# Continuous monitoring demonstration\n./lid_angle_example --continuous\n```\n\n## Troubleshooting\n\n### \"Sensor not supported\" Error\n\n1. Confirm your device is in the supported list\n2. Check if other applications are using the sensor\n3. Try restarting your MacBook\n\n### \"Sensor initialization failed\" Erro",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-22T02:27:02.472600"
  }
]