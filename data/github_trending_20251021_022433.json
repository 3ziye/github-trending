[
  {
    "basic_info": {
      "name": "beads",
      "full_name": "steveyegge/beads",
      "owner": "steveyegge",
      "description": "Beads - A memory upgrade for your coding agent",
      "url": "https://github.com/steveyegge/beads",
      "clone_url": "https://github.com/steveyegge/beads.git",
      "ssh_url": "git@github.com:steveyegge/beads.git",
      "homepage": "",
      "created_at": "2025-10-12T03:09:46Z",
      "updated_at": "2025-10-21T01:24:18Z",
      "pushed_at": "2025-10-20T22:48:40Z"
    },
    "stats": {
      "stars": 1848,
      "forks": 98,
      "watchers": 1848,
      "open_issues": 18,
      "size": 13564
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 913662,
        "Python": 155101,
        "Shell": 13700,
        "Ruby": 2993,
        "Nix": 1297
      },
      "license": "MIT License",
      "topics": [
        "agents",
        "claude-code",
        "coding"
      ]
    },
    "content": {
      "readme": "# bd - Beads Issue Tracker üîó\n\n**Give your coding agent a memory upgrade**\n\n> **üö® CRITICAL WARNING - Do Not Use for Multiple Workstreams**\n>\n> **v0.9.x has data duplication and data loss bugs when handling multiple workstreams.** This creates a mess that's difficult even for agents to clean up. Until further notice, **use only for single-workstream projects**. A fix is in progress.\n\n> **üö® MCP SERVER WARNING - Single Project Only**\n>\n> **Do NOT use the MCP server if you have multiple beads repositories/projects.** The MCP server currently routes issues to the wrong database when working across multiple repos. **The beads binary (bd command, v0.9.9+) works fine for multi-workstream scenarios** - instruct your agents to use the binary directly via shell commands instead of the MCP server. A fix for the MCP server is in progress.\n\n> **‚ö†Ô∏è Alpha Status**: This project is in active development. The core features work well, but expect API changes before 1.0. Use for development/internal projects first.\n\nBeads is a lightweight memory system for coding agents, using a graph-based issue tracker. Four kinds of dependencies work to chain your issues together like beads, making them easy for agents to follow for long distances, and reliably perform complex task streams in the right order.\n\nDrop Beads into any project where you're using a coding agent, and you'll enjoy an instant upgrade in organization, focus, and your agent's ability to handle long-horizon tasks over multiple compaction sessions. Your agents will use issue tracking with proper epics, rather than creating a swamp of rotten half-implemented markdown plans.\n\nInstant start:\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/steveyegge/beads/main/scripts/install.sh | bash\n```\n\nThen tell your coding agent to start using the `bd` tool instead of markdown for all new work, somewhere in your `AGENTS.md` or `CLAUDE.md`. That's all there is to it!\n\nYou don't use Beads directly as a human. Your coding agent will file and manage issues on your behalf. They'll file things they notice automatically, and you can ask them at any time to add or update issues for you.\n\nBeads gives agents unprecedented long-term planning capability, solving their amnesia when dealing with complex nested plans. They can trivially query the ready work, orient themselves, and land on their feet as soon as they boot up.\n\nAgents using Beads will no longer silently pass over problems they notice due to lack of context space -- instead, they will automatically file issues for newly-discovered work as they go. No more lost work, ever.\n\nBeads issues are backed by git, but through a clever design it manages to act like a managed, centrally hosted SQL database shared by all of the agents working on a project (repo), even across machines.\n\nBeads even improves work auditability. The issue tracker has a sophisticated audit trail, which agents can use to reconstruct complex operations that may have spanned multiple sessions.\n\nAgents report that they enjoy working with Beads, and they will use it spontaneously for both recording new work and reasoning about your project in novel ways. Whether you are a human or an AI, Beads lets you have more fun and less stress with agentic coding.\n\n![AI Agent using Beads](https://raw.githubusercontent.com/steveyegge/beads/main/.github/images/agent-using-beads.jpg)\n\n## Features\n\n- ‚ú® **Zero setup** - `bd init` creates project-local database (and your agent will do it)\n- üîó **Dependency tracking** - Four dependency types (blocks, related, parent-child, discovered-from)\n- üìã **Ready work detection** - Automatically finds issues with no open blockers\n- ü§ñ **Agent-friendly** - `--json` flags for programmatic integration\n- üì¶ **Git-versioned** - JSONL records stored in git, synced across machines\n- üåç **Distributed by design** - Agents on multiple machines share one logical database via git\n- üèóÔ∏è **Extensible** - Add your own tables to the SQLite database\n- üîç **Multi-project isolation** - Each project gets its own database, auto-discovered by directory\n- üå≤ **Dependency trees** - Visualize full dependency graphs\n- üé® **Beautiful CLI** - Colored output for humans, JSON for bots\n- üíæ **Full audit trail** - Every change is logged\n- ‚ö° **High performance** - Batch operations for bulk imports (1000 issues in ~950ms)\n- üóúÔ∏è **Memory decay** - Semantic compaction gracefully reduces old closed issues\n\n## Installation\n\n### Homebrew (macOS/Linux)\n\n```bash\nbrew tap steveyegge/beads\nbrew install bd\n```\n\n**Why Homebrew?**\n- ‚úÖ Simple one-command install\n- ‚úÖ Automatic updates via `brew upgrade`\n- ‚úÖ No need to install Go\n- ‚úÖ Handles PATH setup automatically\n\n### Quick Install Script (All Platforms)\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/steveyegge/beads/main/scripts/install.sh | bash\n```\n\nThe installer will:\n- Detect your platform (macOS/Linux, amd64/arm64)\n- Install via `go install` if Go is available\n- Fall back to building from source if needed\n- Guide you through PATH setup if necess",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:33.940089"
  },
  {
    "basic_info": {
      "name": "blaze",
      "full_name": "wizenheimer/blaze",
      "owner": "wizenheimer",
      "description": "Full Text Search Engine - built for Hackers not Hyperscalers",
      "url": "https://github.com/wizenheimer/blaze",
      "clone_url": "https://github.com/wizenheimer/blaze.git",
      "ssh_url": "git@github.com:wizenheimer/blaze.git",
      "homepage": "https://wizenheimer.github.io/blaze",
      "created_at": "2025-10-07T07:28:01Z",
      "updated_at": "2025-10-20T22:25:05Z",
      "pushed_at": "2025-10-14T08:34:59Z"
    },
    "stats": {
      "stars": 471,
      "forks": 11,
      "watchers": 471,
      "open_issues": 1,
      "size": 1194
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 241240,
        "Makefile": 3689
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Blaze\n\n<div align=\"center\">\n  <img alt=\"image\" src=\"./media/image.png\" />\n  <p>\n    <a href=\"https://wizenheimer.github.io/blaze/\"><strong>Docs </strong> </a>\n  </p>\n</div>\n\n**Built for hackers, not hyperscalers.**  \nA tiny, hackable full-text search engine you can actually fit in your head. Features inverted indexing, boolean queries, phrase search, proximity queries, and BM25 ranking‚Äîpowered by a flexible query engine, roaring bitmaps, and skip lists.\n\n> [!NOTE]\n> This focuses on keyword-based full-text search. For semantic search with embeddings, see [Comet](https://github.com/wizenheimer/comet) ([docs](https://pkg.go.dev/github.com/wizenheimer/comet)).\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Not for Everyone](#not-for-everyone)\n- [Installation](#installation)\n- [Quick Start](#quick-start)\n- [Core Concepts](#core-concepts)\n  - [Inverted Index](#inverted-index)\n  - [Skip Lists](#skip-lists)\n  - [Text Analysis Pipeline](#text-analysis-pipeline)\n  - [Search Operations](#search-operations)\n- [Query Builder API](#query-builder-api)\n  - [Why Use Builder Pattern](#why-use-builder-pattern)\n  - [Quick Start](#query-builder-quick-start)\n  - [Core Methods](#query-builder-core-methods)\n  - [Boolean Operations](#boolean-operations)\n  - [Query Patterns](#query-patterns)\n  - [Performance](#query-builder-performance)\n  - [Best Practices](#query-builder-best-practices)\n- [API Reference](#api-reference)\n- [Examples](#examples)\n- [Performance Characteristics](#performance-characteristics)\n- [Configuration](#configuration)\n- [Use Cases](#use-cases)\n- [Testing](#testing)\n- [Architecture](#architecture)\n- [Best Practices](#best-practices)\n- [Contributing](#contributing)\n- [Related Projects](#related-projects)\n- [License](#license)\n\n## Overview\n\nBlaze is a Go engine that provides fast, full-text search capabilities through an inverted index implementation. It's designed for applications that need to search through text documents efficiently without relying on external search engines.\n\n> [!TIP]\n> Blaze handles keyword-based search (BM25, phrase matching, boolean queries). If you need vector embeddings or hybrid retrieval, [Comet](https://github.com/wizenheimer/comet) ([docs](https://pkg.go.dev/github.com/wizenheimer/comet)) implements HNSW, IVF, and quantization-based indexes with metadata filtering. It's a hybrid vector store written from scratch in Go, purpose built for hackers, not hyperscalers.\n\n**Key Highlights:**\n\n- **Inverted Index**: Maps terms to document positions for instant lookups\n- **Skip Lists**: Probabilistic data structure providing O(log n) operations\n- **Query Builder**: Type-safe, fluent API for boolean queries with roaring bitmaps\n- **Advanced Search**: Phrase search, BM25 ranking, proximity ranking, and boolean queries\n- **BM25 Algorithm**: Industry-standard relevance scoring with IDF and length normalization\n- **Text Analysis**: Tokenization, stemming, stopword filtering, and case normalization\n- **Thread-Safe**: Concurrent indexing with mutex protection\n- **Serialization**: Efficient binary format for persistence\n\n## Features\n\n### Search Capabilities\n\n- **Term Search**: Find documents containing specific terms\n- **Phrase Search**: Exact multi-word matching (\"quick brown fox\")\n- **Boolean Queries**: Type-safe AND, OR, NOT operations with query builder\n- **BM25 Ranking**: Industry-standard relevance scoring (used by Elasticsearch, Solr)\n- **Proximity Ranking**: Score results by term proximity\n- **Position Tracking**: Track exact word positions within documents\n- **Roaring Bitmaps**: Compressed bitmap operations for fast boolean queries\n\n### Text Processing\n\n- **Tokenization**: Unicode-aware text splitting\n- **Stemming**: Snowball (Porter2) stemmer for English\n- **Stopword Filtering**: Remove common words (the, a, is, etc.)\n- **Case Normalization**: Case-insensitive search\n- **Configurable Pipeline**: Customize analysis behavior\n\n### Data Structures\n\n- **Skip Lists**: O(log n) search, insert, and delete operations\n- **Inverted Index**: Efficient term-to-position mapping\n- **Binary Serialization**: Compact storage format\n\n## Not for Everyone\n\n> [!CAUTION]\n> Blaze is an educational implementation. For production use, see [Bleve](https://github.com/blevesearch/bleve) - a mature, battle-tested full-text search library.\n\nBlaze focuses on keyword-based full-text search with inverted indexes. If you need semantic search with vector embeddings, [Comet](https://github.com/wizenheimer/comet) ([docs](https://pkg.go.dev/github.com/wizenheimer/comet)) implements various vector indexes (Flat, HNSW, IVF, PQ, IVFPQ) along with hybrid retrieval combining BM25 and vector similarity.\n\nBlaze is purpose-built to be hackable‚Äîsmall enough to understand completely. If you've ever wondered how inverted indexes are structured, how BM25 scoring works, or how boolean queries execute, Blaze provides a readable implementation to learn from.\n\n## Installation\n\n```bash\ngo get github.com/wizenheimer/blaze",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:35.097218"
  },
  {
    "basic_info": {
      "name": "rapid-cipher-819",
      "full_name": "coyer1986/rapid-cipher-819",
      "owner": "coyer1986",
      "description": null,
      "url": "https://github.com/coyer1986/rapid-cipher-819",
      "clone_url": "https://github.com/coyer1986/rapid-cipher-819.git",
      "ssh_url": "git@github.com:coyer1986/rapid-cipher-819.git",
      "homepage": null,
      "created_at": "2025-10-14T14:35:12Z",
      "updated_at": "2025-10-21T00:31:30Z",
      "pushed_at": "2025-10-14T14:54:30Z"
    },
    "stats": {
      "stars": 382,
      "forks": 0,
      "watchers": 382,
      "open_issues": 0,
      "size": 2
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 64
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# rapid-cipher-819\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:36.210125"
  },
  {
    "basic_info": {
      "name": "stoic-engine-25",
      "full_name": "coyer1986/stoic-engine-25",
      "owner": "coyer1986",
      "description": null,
      "url": "https://github.com/coyer1986/stoic-engine-25",
      "clone_url": "https://github.com/coyer1986/stoic-engine-25.git",
      "ssh_url": "git@github.com:coyer1986/stoic-engine-25.git",
      "homepage": null,
      "created_at": "2025-10-14T14:35:41Z",
      "updated_at": "2025-10-21T00:31:41Z",
      "pushed_at": "2025-10-14T14:53:22Z"
    },
    "stats": {
      "stars": 382,
      "forks": 0,
      "watchers": 382,
      "open_issues": 0,
      "size": 2
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 64
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# stoic-engine-25\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:37.327540"
  },
  {
    "basic_info": {
      "name": "clever-marble-821",
      "full_name": "coyer1986/clever-marble-821",
      "owner": "coyer1986",
      "description": null,
      "url": "https://github.com/coyer1986/clever-marble-821",
      "clone_url": "https://github.com/coyer1986/clever-marble-821.git",
      "ssh_url": "git@github.com:coyer1986/clever-marble-821.git",
      "homepage": null,
      "created_at": "2025-10-14T14:36:27Z",
      "updated_at": "2025-10-21T00:30:22Z",
      "pushed_at": "2025-10-14T14:50:47Z"
    },
    "stats": {
      "stars": 382,
      "forks": 0,
      "watchers": 382,
      "open_issues": 0,
      "size": 2
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 64
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# clever-marble-821\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:38.439701"
  },
  {
    "basic_info": {
      "name": "go-web-server",
      "full_name": "coyer1986/go-web-server",
      "owner": "coyer1986",
      "description": "üêπ Go web server",
      "url": "https://github.com/coyer1986/go-web-server",
      "clone_url": "https://github.com/coyer1986/go-web-server.git",
      "ssh_url": "git@github.com:coyer1986/go-web-server.git",
      "homepage": null,
      "created_at": "2025-10-14T16:53:11Z",
      "updated_at": "2025-10-21T00:31:00Z",
      "pushed_at": "2025-10-14T17:01:55Z"
    },
    "stats": {
      "stars": 382,
      "forks": 0,
      "watchers": 382,
      "open_issues": 0,
      "size": 2
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 86
      },
      "license": null,
      "topics": [
        "go",
        "web"
      ]
    },
    "content": {
      "readme": "# Go Server",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:39.571328"
  },
  {
    "basic_info": {
      "name": "resterm",
      "full_name": "unkn0wn-root/resterm",
      "owner": "unkn0wn-root",
      "description": "Terminal client for .http/.rest files with HTTP, GraphQL and gRPC support, workflows, profiling and response diffs.",
      "url": "https://github.com/unkn0wn-root/resterm",
      "clone_url": "https://github.com/unkn0wn-root/resterm.git",
      "ssh_url": "git@github.com:unkn0wn-root/resterm.git",
      "homepage": "",
      "created_at": "2025-09-30T11:47:23Z",
      "updated_at": "2025-10-20T16:52:30Z",
      "pushed_at": "2025-10-20T08:50:52Z"
    },
    "stats": {
      "stars": 381,
      "forks": 11,
      "watchers": 381,
      "open_issues": 0,
      "size": 6972
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 916289,
        "Shell": 4468,
        "PowerShell": 3682
      },
      "license": "Apache License 2.0",
      "topics": [
        "go",
        "golang",
        "rest",
        "rest-api",
        "rest-client",
        "tui",
        "tui-app"
      ]
    },
    "content": {
      "readme": "<h1 align=\"center\">Resterm</h1>\n\n<p align=\"center\">\n  <em>a terminal-based REST/GraphQL/gRPC client.</em>\n</p>\n\n<p align=\"center\">\n  <img src=\"_media/resterm_base.png\" alt=\"Screenshot of resterm TUI base\" width=\"720\" />\n</p>\n\n<p align=\"center\">\n  <strong>split in horizontal view</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"_media/resterm_hsplit.png\" alt=\"Screenshot of resterm TUI in horizontal split\" width=\"720\" />\n</p>\n\n<p align=\"center\">\n  <strong>split panes with response diffing side-by-side</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"_media/resterm_full.png\" alt=\"Screenshot of resterm TUI fulleditor\" width=\"720\" />\n</p>\n\n<p align=\"center\">\n  <strong>Split panes response and profiler</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"_media/resterm_profiler.png\" alt=\"Screenshot of resterm profiler\" width=\"720\" />\n</p>\n\n<p align=\"center\">\n  <strong>Workflow run with step-by-step validation</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"_media/resterm_workflow.png\" alt=\"Screenshot of resterm workflow run\" width=\"720\" />\n</p>\n\nResterm is a terminal-first client for working with **HTTP**, **GraphQL**, and **gRPC** services. No cloud sync, no signups, no heavy desktop app. Simple, yet feature rich, terminal client for .http/.rest files.\nIt pairs a Vim-like-style editor with a workspace explorer, response diff, history, profiler and scripting so you can iterate on requests without leaving the keyboard.\n\n## Highlights\n- **Editor** with inline syntax highlighting, search (`Ctrl+F`), clipboard motions, and inline metadata completions (type `@` for contextual hints).\n- **Workspace** navigator that filters `.http` / `.rest` files, supports recursion and keeps request lists in sync as you edit.\n- **Inline** requests and **curl** import for one-off calls (`Ctrl+Enter` on a URL or curl block).\n- **Pretty/Raw/Header/Diff/History** views with optional split panes and pinned comparisons.\n- **Variable** scopes, captures, JavaScript hooks, and multi-step workflows with per-step expectations and overrides.\n- **GraphQL** helpers (`@graphql`, `@variables`, `@query`) and gRPC directives (`@grpc`, `@grpc-descriptor`, reflection, metadata).\n- **Built-in** OAuth 2.0 client plus support for basic, bearer, API key, and custom header auth.\n- **Latency** with `@profile` to benchmark endpoints and render histograms right inside the TUI.\n- **Multi-step workflows** let you compose several named requests into one workflow (`@workflow` + `@step`), override per-step variables, and review aggregated results in History.\n\n## Installation\n\n### Quick Install\n\n**Linux / macOS:**\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/unkn0wn-root/resterm/main/install.sh | bash\n```\n\nor with `wget`:\n\n```bash\nwget -qO- https://raw.githubusercontent.com/unkn0wn-root/resterm/main/install.sh | bash\n```\n\n**Windows (PowerShell):**\n\n```powershell\niwr -useb https://raw.githubusercontent.com/unkn0wn-root/resterm/main/install.ps1 | iex\n```\n\nThese scripts will automatically detect your architecture, download the latest release, and install the binary.\n\n### Manual Installation\n\n> [!NOTE]\n> The manual install helper uses `curl` and `jq`. Install `jq` with your package manager (`brew install jq`, `sudo apt install jq`, etc.).\n\n#### Linux / macOS\n\n```bash\n# Detect latest tag\nLATEST_TAG=$(curl -fsSL https://api.github.com/repos/unkn0wn-root/resterm/releases/latest | jq -r .tag_name)\n\n# Download the matching binary (Darwin/Linux + amd64/arm64)\ncurl -fL -o resterm \"https://github.com/unkn0wn-root/resterm/releases/download/${LATEST_TAG}/resterm_$(uname -s)_$(uname -m)\"\n\n# Make it executable and move it onto your PATH\nchmod +x resterm\nsudo install -m 0755 resterm /usr/local/bin/resterm\n```\n\n#### Windows (PowerShell)\n\n```powershell\n$latest = Invoke-RestMethod https://api.github.com/repos/unkn0wn-root/resterm/releases/latest\n$asset  = $latest.assets | Where-Object { $_.name -like 'resterm_Windows_*' } | Select-Object -First 1\nInvoke-WebRequest -Uri $asset.browser_download_url -OutFile resterm.exe\n# Optionally relocate to a directory on PATH, e.g.:\nMove-Item resterm.exe \"$env:USERPROFILE\\bin\\resterm.exe\"\n```\n\n#### From source\n\n```bash\ngo install github.com/unkn0wn-root/resterm/cmd/resterm@latest\n```\n\n## Update\n\n```bash\nresterm --check-update\nresterm --update\n```\n\nThe first command reports whether a newer release is available; the second downloads and installs it (Windows users receive a staged binary to swap on restart).\n\n## Quick Start\n\n1. Create or open a directory that contains `.http` / `.rest` files (see `_examples/` for samples). If you want to start right away without any .http - just open resterm...\n2. ... or launch Resterm: `resterm --workspace path/to/project` (or if your .http/.rest file is in the same dir. - just type `resterm` and it will be autodiscovered).\n3. Pick a request from the sidebar and press `Ctrl+Enter` to send it. Responses appear in the right pane. If you don't have any .http file, just switch to the editor (`Tab`) and type `https://<some_url_dot_",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:40.705533"
  },
  {
    "basic_info": {
      "name": "ro",
      "full_name": "samber/ro",
      "owner": "samber",
      "description": "üèéÔ∏è Reactive Programming paradigm for Go: declarative and composable API for event-driven applications",
      "url": "https://github.com/samber/ro",
      "clone_url": "https://github.com/samber/ro.git",
      "ssh_url": "git@github.com:samber/ro.git",
      "homepage": "http://ro.samber.dev",
      "created_at": "2025-10-14T12:06:01Z",
      "updated_at": "2025-10-21T02:13:24Z",
      "pushed_at": "2025-10-20T22:06:44Z"
    },
    "stats": {
      "stars": 296,
      "forks": 10,
      "watchers": 296,
      "open_issues": 115,
      "size": 3262
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 1678865,
        "Makefile": 1644
      },
      "license": "Other",
      "topics": [
        "event-driven",
        "generics",
        "go",
        "golang",
        "hacktoberfest",
        "observable",
        "observer",
        "pipe",
        "pipeline",
        "reactive",
        "reactive-extensions",
        "reactive-programming",
        "reactive-streams",
        "reactivex",
        "rx",
        "rxjs",
        "stream",
        "subscription"
      ]
    },
    "content": {
      "readme": "\n# ro - Reactive programming for Go\n\n[![tag](https://img.shields.io/github/tag/samber/ro.svg)](https://github.com/samber/ro/releases)\n![Go Version](https://img.shields.io/badge/Go-%3E%3D%201.18-%23007d9c)\n[![GoDoc](https://godoc.org/github.com/samber/ro?status.svg)](https://pkg.go.dev/github.com/samber/ro)\n![Build Status](https://github.com/samber/ro/actions/workflows/test.yml/badge.svg)\n[![Go report](https://goreportcard.com/badge/github.com/samber/ro)](https://goreportcard.com/report/github.com/samber/ro)\n[![Coverage](https://img.shields.io/codecov/c/github/samber/ro)](https://app.codecov.io/gh/samber/ro)\n[![Contributors](https://img.shields.io/github/contributors/samber/ro)](https://github.com/samber/ro/graphs/contributors)\n\n> A *Go* implementation of the [ReactiveX](https://reactivex.io/) spec.\n\nThe purpose of Reactive Programming is to simplify the development of event-driven and asynchronous applications by providing a declarative and composable way to handle streams of data or events.\n\n----\n\n<h3 align=\"center\">üíñ Support This Project</h3>\n\n<p align=\"center\">\n\tI‚Äôm going all-in on open-source for the coming months.\n\t<br>\n\tHelp sustain development: Become an <a href=\"http://github.com/sponsors/samber\">individual sponsor</a> or join as a <a href=\"mailto:hey@samuel-berthe.fr\">corporate sponsor</a>.\n</p>\n\n----\n\n![cover](/docs/static/img/cover.png)\n\n**See also:**\n\n- [samber/lo](https://github.com/samber/lo): A Lodash-style Go library based on Go 1.18+ Generics\n- [samber/do](https://github.com/samber/do): A dependency injection toolkit based on Go 1.18+ Generics\n- [samber/mo](https://github.com/samber/mo): Monads based on Go 1.18+ Generics (Option, Result, Either...)\n\nWhat makes it different from **samber/lo**?\n- lo: synchronous helpers across finite sequences (maps, slices...)\n- ro: processing of infinite data streams for event-driven scenarios\n\n## The Reactive Programming paradigm\n\nReactive Programming is focused on handling asynchronous data streams where values (like user input, API responses, or sensor data) are emitted over time. Instead of pulling data or waiting for events manually, you react to changes as they occur using `Observable`, `Observer`, and `Operator`. This approach simplifies building systems that are responsive, resilient, and scalable, especially in event-driven or real-time applications.\n\n```go\nobservable := ro.Pipe(\n    ro.RangeWithInterval(0, 10, 1*time.Second),\n    ro.Filter(func(x int) bool {\n        return x%2 == 0\n    }),\n    ro.Map(func(x int) string {\n        return fmt.Sprintf(\"even-%d\", x)\n    }),\n)\n\n// Start consuming on subscription\nobservable.Subscribe(ro.OnNext(func(s string) {\n    fmt.Println(s)\n}))\n\n// Output:\n//   \"even-0\"\n//   \"even-2\"\n//   \"even-4\"\n//   \"even-6\"\n//   \"even-8\"\n```\n\nNow you discovered the paradigm, follow the documentation and turn reactive: [üöÄ Getting started](https://ro.samber.dev/docs/getting-started)\n\n## Core package\n\n[Full documentation here](https://ro.samber.dev/docs/operator).\n\nThe `ro` library provides all basic operators:\n- **Creation operators**: The data source, usually the first argument of `ro.Pipe`\n- **Chainable operators**: They filter, validate, transform, enrich... messages\n  - **Transforming operators**: They transform items emitted by an `Observable`\n  - **Filtering operators**: They selectively emit items from a source `Observable`\n  - **Conditional operators**: Boolean operators\n  - **Math and aggregation operators**: They perform basic math operations\n  - **Error handling operators**: They help to recover from error notifications from an `Observable`\n  - **Combining operators**: Combine multiple `Observable` into one\n  - **Connectable operators**: Convert cold into hot `Observable`\n  - **Other**: manipulation of context, utility, async scheduling...\n- **Plugins**: External operators (mostly IOs and library wrappers)\n\n## Plugins\n\nThe `ro` library provides a rich ecosystem of plugins for various use cases:\n\n[Full documentation here](https://ro.samber.dev/docs/plugins).\n\n### Data Manipulation\n- **Bytes** (`plugins/bytes`) - String and byte slice manipulation operators\n- **Strings** (`plugins/strings`) - String manipulation operators\n- **Sort** (`plugins/sort`) - Sorting operators\n- **Type Conversion** (`plugins/strconv`) - String conversion operators\n\n### Encoding & Serialization\n- **JSON** (`plugins/encoding/json`) - JSON marshaling and unmarshaling\n- **CSV** (`plugins/encoding/csv`) - CSV reading and writing\n- **Base64** (`plugins/encoding/base64`) - Base64 encoding and decoding\n- **Gob** (`plugins/encoding/gob`) - Go binary serialization\n\n### Scheduling & Timing\n- **Cron** (`plugins/cron`) - Schedule jobs using cron expressions or duration intervals\n\n### Network & I/O\n- **HTTP** (`plugins/http`) - HTTP request operators\n- **I/O** (`plugins/io`) - File and stream I/O operators\n- **File System** (`plugins/fsnotify`) - File system monitoring operators\n\n### Observability & Logging\n- **Log** (`plugins/observability/log`) - Standard lo",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:41.907384"
  },
  {
    "basic_info": {
      "name": "tunn",
      "full_name": "strandnerd/tunn",
      "owner": "strandnerd",
      "description": "SSH tunnels made simple: Launch and monitor SSH tunnels from a single YAML config and your existing OpenSSH setup.",
      "url": "https://github.com/strandnerd/tunn",
      "clone_url": "https://github.com/strandnerd/tunn.git",
      "ssh_url": "git@github.com:strandnerd/tunn.git",
      "homepage": "",
      "created_at": "2025-09-23T03:13:27Z",
      "updated_at": "2025-10-19T08:16:27Z",
      "pushed_at": "2025-09-24T02:21:54Z"
    },
    "stats": {
      "stars": 240,
      "forks": 9,
      "watchers": 240,
      "open_issues": 3,
      "size": 46
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 64829,
        "Shell": 2298
      },
      "license": "MIT License",
      "topics": [
        "golang",
        "ssh",
        "ssh-tunnel",
        "tunneling"
      ]
    },
    "content": {
      "readme": "![GitHub License](https://img.shields.io/github/license/strandnerd/tunn) ![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/strandnerd/tunn/ci.yml) ![GitHub Release](https://img.shields.io/github/v/release/strandnerd/tunn) ![GitHub Issues or Pull Requests](https://img.shields.io/github/issues/strandnerd/tunn)\n\n\n\n# tunn - SSH Tunnel Manager\n\n`tunn` is a developer-friendly wrapper around OpenSSH that makes it easy to manage multiple SSH tunnels defined in a simple configuration file\n\n<img width=\"1536\" height=\"649\" alt=\"tunn-gophers\" src=\"https://github.com/user-attachments/assets/9b88aa87-721b-4577-b0c1-2cf61af4d160\" />\n\n## Features\n\n- üöÄ **Simple Configuration**: Define all your tunnels in a single YAML file\n- üîß **Selective Tunnels**: Run all tunnels or specific ones by name\n- üîå **Multiple Ports**: Support for multiple port mappings per tunnel\n- üîê **SSH Integration**: Leverages your existing SSH configuration\n- ‚ö° **Parallel Execution**: All tunnels run concurrently\n- üß© **Daemon Mode**: Background service with status reporting via IPC\n- üßº **Lean Go Module**: Depends only on `gopkg.in/yaml.v3`, keeping builds clean and portable\n- üîß **Native SSH Sessions**: Spawns the system `ssh` binary for each mapping, so keys and config behave exactly like your shell\n- üéöÔ∏è **Per-Port Processes**: Launches one PID per port to pave the way for fine-grained lifecycle controls\n\n\n\n![Screencast from 2025-09-23 22-19-13 (online-video-cutter com)](https://github.com/user-attachments/assets/dbce86b1-c40c-47b9-a89c-6e188ad6e4ee)\n\n\n\n\n## Installation\n\n### Quick Install\n\n```bash\ncurl -sSL https://raw.githubusercontent.com/strandnerd/tunn/main/scripts/install.sh | sudo sh\n```\n\n### From Go Install\n\n```bash\ngo install github.com/strandnerd/tunn@latest\n```\n\n### Build Locally\n\n```bash\ngit clone https://github.com/strandnerd/tunn.git\ncd tunn\ngo build -o tunn\nsudo mv tunn /usr/local/bin/\n```\n\n## Configuration\n\nCreate a `~/.tunnrc` file in your home directory:\n\n```yaml\ntunnels:\n  api:\n    host: myserver          # SSH host from ~/.ssh/config\n    ports:\n      - 3000:3000           # local:remote port mapping\n      - 4000:4001\n    user: apiuser           # optional: SSH user\n    identity_file: ~/.ssh/id_rsa  # optional: SSH key\n\n  db:\n    host: database\n    ports:\n      - 3306:3306           # MySQL\n      - 5432:5432           # PostgreSQL\n    user: dbadmin           # optional: overrides SSH config\n\n  cache:\n    host: cacheserver\n    ports:\n      - 6379:6379           # Redis\n```\n\n### Configuration Fields\n\n- `tunnels`: Map of tunnel names\n- `host`: SSH host alias from `~/.ssh/config`\n- `ports`: List of port mappings in `local:remote` format\n- `user` (optional): SSH username (overrides `~/.ssh/config`)\n- `identity_file` (optional): Path to SSH private key\n\n## Usage\n\n### Run All Tunnels\n\n```bash\ntunn\n```\n\n### Run Specific Tunnels\n\n```bash\n# Single tunnel\ntunn api\n\n# Multiple tunnels\ntunn api db\n\n# All database-related tunnels\ntunn db cache\n```\n\n### Run Tunnels in the Background\n\n```bash\ntunn --detach\n\n# Or only specific tunnels\ntunn --detach api db\n```\n\nThe CLI respawns itself as a daemon, stores metadata under `$XDG_RUNTIME_DIR/tunn` (or `~/.cache/tunn` when the runtime dir is unavailable), and immediately returns control to the terminal.\n\n### Check Daemon Status\n\n```bash\ntunn status\n```\n\nThe status command contacts the daemon's Unix socket, reporting the PID, mode, and the latest port states for each managed tunnel. If no daemon is running, a friendly message is printed instead.\n\n### Stop the Daemon\n\n```bash\ntunn stop\n```\n\nThe stop command asks the daemon to shut down cleanly, waits for it to exit, and reports success.\n\n### Output Example\n\n```\nTunnels Ready\n\n[api]\n    3000 ‚ûú 3000 [active]\n    4000 ‚ûú 4001 [active]\n[db]\n    3306 ‚ûú 3306 [connecting]\n    5432 ‚ûú 5432 [active]\n```\n\n## SSH Configuration\n\n`tunn` uses your system's SSH configuration. Make sure your hosts are defined in `~/.ssh/config`:\n\n```ssh\nHost myserver\n    HostName 192.168.1.100\n    User myuser\n    Port 22\n\nHost database\n    HostName db.example.com\n    User dbuser\n    IdentityFile ~/.ssh/db_key\n```\n\n## Requirements\n\n- Go 1.21 or higher (for building)\n- OpenSSH client (`ssh` command)\n- Valid SSH configuration\n- macOS and Linux are supported today; Windows support is planned but not available yet\n\n## Daemon Runtime Files\n\nWhile running in detached mode, `tunn` stores the following files in its runtime directory:\n\n- `daemon.pid` ‚Äì PID of the active daemon; used to prevent duplicate launches.\n- `daemon.sock` ‚Äì Unix domain socket for control commands (e.g., `tunn status`).\n- `daemon.log` ‚Äì Aggregated stdout/stderr from the daemon process.\n\nThe directory is created with `0700` permissions, and files are cleaned up automatically when the daemon exits or when stale state is detected on the next launch.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:43.047883"
  },
  {
    "basic_info": {
      "name": "soloops-cli",
      "full_name": "Desmond-Osy/soloops-cli",
      "owner": "Desmond-Osy",
      "description": "SoloOps CLI",
      "url": "https://github.com/Desmond-Osy/soloops-cli",
      "clone_url": "https://github.com/Desmond-Osy/soloops-cli.git",
      "ssh_url": "git@github.com:Desmond-Osy/soloops-cli.git",
      "homepage": null,
      "created_at": "2025-09-30T05:01:35Z",
      "updated_at": "2025-10-19T07:20:51Z",
      "pushed_at": "2025-10-07T23:44:54Z"
    },
    "stats": {
      "stars": 203,
      "forks": 46,
      "watchers": 203,
      "open_issues": 0,
      "size": 76
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 46560,
        "Shell": 7097,
        "JavaScript": 5932,
        "HTML": 5179,
        "CSS": 4339,
        "PowerShell": 4208,
        "Python": 3475,
        "Makefile": 3239,
        "Dockerfile": 1349
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# SoloOps CLI\n\n[![CI](https://github.com/Desmond-Osy/soloops-cli/workflows/CI/badge.svg)](https://github.com/Desmond-Osy/soloops-cli/actions)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE)\n[![Go Report Card](https://goreportcard.com/badge/github.com/Desmond-Osy/soloops-cli)](https://goreportcard.com/report/github.com/Desmond-Osy/soloops-cli)\n\nSoloOps is a command-line tool for scaffolding, validating, and managing infrastructure blueprints described in a YAML manifest (`soloops.yaml`). It generates Terraform code from your declarative configuration, making it easy to provision cloud resources with best practices built-in.\n\n## Features\n\n- **Declarative Infrastructure**: Define your infrastructure in a simple YAML manifest\n- **Blueprint System**: Pre-built templates for common patterns (serverless APIs, static sites, databases)\n- **Multi-Cloud Support**: AWS, GCP, and Azure (AWS fully implemented in MVP)\n- **Budget Aware**: Automatic budget alerts and cost controls\n- **Security First**: Built-in WAF, HTTPS enforcement, and compliance policies\n- **Terraform Generation**: Generates clean, readable Terraform code\n- **Easy to Use**: Simple CLI commands for the entire lifecycle\n\n## Quick Start\n\n### Installation\n\n**No Go installation required!** Choose your preferred method:\n\n#### One-Line Installer (Recommended)\n\n**Linux/macOS:**\n```bash\ncurl -fsSL https://raw.githubusercontent.com/Desmond-Osy/soloops-cli/main/scripts/install.sh | bash\n```\n\n**Windows (PowerShell):**\n```powershell\nirm https://raw.githubusercontent.com/Desmond-Osy/soloops-cli/main/scripts/install.ps1 | iex\n```\n\n#### Manual Download\n\nDownload pre-built binaries from the [releases page](https://github.com/Desmond-Osy/soloops-cli/releases):\n\n```bash\n# Linux (amd64)\nwget https://github.com/Desmond-Osy/soloops-cli/releases/latest/download/soloops-linux-amd64.tar.gz\ntar xzf soloops-linux-amd64.tar.gz\nsudo mv soloops-linux-amd64 /usr/local/bin/soloops\n\n# macOS (Apple Silicon)\nwget https://github.com/Desmond-Osy/soloops-cli/releases/latest/download/soloops-darwin-arm64.tar.gz\ntar xzf soloops-darwin-arm64.tar.gz\nsudo mv soloops-darwin-arm64 /usr/local/bin/soloops\n\n# Windows: Download soloops-windows-amd64.zip from releases and extract\n```\n\n#### Using Docker\n\n```bash\ndocker pull soloops/soloops-cli:latest\ndocker run --rm -v $(pwd):/workspace soloops/soloops-cli:latest init\n```\n\n#### Build from Source (for developers)\n\n```bash\ngit clone https://github.com/Desmond-Osy/soloops-cli.git\ncd soloops-cli\nmake build\n# Or: go install github.com/Desmond-Osy/soloops-cli/cmd/soloops@latest\n```\n\n### Basic Usage\n\n1. **Initialize a new project**:\n\n```bash\nsoloops init\n```\n\nThis creates a `soloops.yaml` manifest with sensible defaults.\n\n2. **Customize your configuration**:\n\nEdit `soloops.yaml` to define your infrastructure:\n\n```yaml\nproject: my-awesome-app\ncloud: aws\nenvironments:\n  - name: prod\n    region: us-east-1\n    budget_usd: 150\n    blueprints:\n      web_api:\n        runtime: node18\n        ingress: edge\n      static_site:\n        domain: myapp.com\npolicies:\n  require_https: true\n  deny_public_s3: true\n```\n\n3. **Validate your configuration**:\n\n```bash\nsoloops validate\n```\n\n4. **Generate Terraform code**:\n\n```bash\nsoloops generate\n```\n\nThis creates Terraform files in the `infra/` directory.\n\n5. **Preview changes**:\n\n```bash\nsoloops preview\n```\n\nShows what infrastructure will be created (runs `terraform plan`).\n\n6. **Apply changes**:\n\n```bash\nsoloops apply\n```\n\nProvisions your infrastructure (runs `terraform apply`).\n\n7. **Destroy when done**:\n\n```bash\nsoloops destroy\n```\n\n## Commands\n\n| Command | Description |\n|---------|-------------|\n| `soloops init` | Create a new soloops.yaml manifest |\n| `soloops validate` | Validate the configuration |\n| `soloops generate` | Generate Terraform files |\n| `soloops preview` | Preview infrastructure changes |\n| `soloops apply` | Provision infrastructure |\n| `soloops destroy` | Destroy infrastructure |\n| `soloops version` | Show version information |\n\n### Global Flags\n\n- `--file, -f`: Path to soloops.yaml (default: `soloops.yaml`)\n- `--env, -e`: Target environment (defaults to first in manifest)\n\n## Configuration\n\n### Project Structure\n\n```\nmy-project/\n‚îú‚îÄ‚îÄ soloops.yaml          # Your infrastructure manifest\n‚îú‚îÄ‚îÄ infra/                # Generated Terraform files\n‚îÇ   ‚îú‚îÄ‚îÄ provider.tf\n‚îÇ   ‚îú‚îÄ‚îÄ variables.tf\n‚îÇ   ‚îú‚îÄ‚îÄ main.tf\n‚îÇ   ‚îú‚îÄ‚îÄ budget.tf\n‚îÇ   ‚îî‚îÄ‚îÄ outputs.tf\n‚îî‚îÄ‚îÄ terraform.tfstate     # Terraform state (created after apply)\n```\n\n### Example soloops.yaml\n\n```yaml\nproject: acme-api\ncloud: aws\nenvironments:\n  - name: prod\n    region: us-east-1\n    budget_usd: 150\n    blueprints:\n      web_api:\n        runtime: node18\n        ingress: edge\n      static_site:\n        domain: acme.com\n      database:\n        type: aurora_serverless_v2\npolicies:\n  require_https: true\n  deny_public_s3: true\n```\n\n## Supported Blueprints\n\n### Web API (AWS)\n\nCreates a serverless API with:\n- AWS Lambda function\n- API Gateway HTTP API\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:44.260549"
  },
  {
    "basic_info": {
      "name": "friendly-potato",
      "full_name": "bingcicle/friendly-potato",
      "owner": "bingcicle",
      "description": "jsonl-tool",
      "url": "https://github.com/bingcicle/friendly-potato",
      "clone_url": "https://github.com/bingcicle/friendly-potato.git",
      "ssh_url": "git@github.com:bingcicle/friendly-potato.git",
      "homepage": null,
      "created_at": "2025-09-29T15:09:04Z",
      "updated_at": "2025-10-17T13:52:58Z",
      "pushed_at": "2025-09-29T15:11:09Z"
    },
    "stats": {
      "stars": 150,
      "forks": 0,
      "watchers": 150,
      "open_issues": 2,
      "size": 7
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 2030
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# jsonl-tool\nMerge or filter JSON Lines.\n\n## Build & Run\n```bash\ngo build -o jsonl-tool\n./jsonl-tool --mode merge --in a.jsonl,b.jsonl > merged.jsonl\n./jsonl-tool --mode filter --in merged.jsonl --field exchange --eq bybit\n./jsonl-tool --mode filter --in merged.jsonl --field symbol --rex \"BTC|ETH\"\n```\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:45.439080"
  },
  {
    "basic_info": {
      "name": "konbini",
      "full_name": "whyrusleeping/konbini",
      "owner": "whyrusleeping",
      "description": null,
      "url": "https://github.com/whyrusleeping/konbini",
      "clone_url": "https://github.com/whyrusleeping/konbini.git",
      "ssh_url": "git@github.com:whyrusleeping/konbini.git",
      "homepage": null,
      "created_at": "2025-10-03T20:20:00Z",
      "updated_at": "2025-10-20T06:02:37Z",
      "pushed_at": "2025-10-18T15:56:21Z"
    },
    "stats": {
      "stars": 134,
      "forks": 11,
      "watchers": 134,
      "open_issues": 0,
      "size": 364
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 206416,
        "TypeScript": 56069,
        "CSS": 25038,
        "HTML": 1719,
        "Dockerfile": 1010
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Konbini - A Cozy Bluesky AppView\n\nKonbini is a partially indexed bluesky appview. It's aim is to provide a \"Friends of Friends\" experience to the bluesky network.\n\nIt is currently _very_ jank and I really just hacked this together in a day. More work to come when I get time.\n\n## Prerequisites\n\n- Go 1.25.1 or later\n- PostgreSQL database\n- Node.js and npm (for frontend)\n- Docker (optional, for easy PostgreSQL setup)\n- Bluesky account credentials\n\n## Quick Start with Docker Compose\n\nThe easiest way to run Konbini is with Docker Compose, which will start PostgreSQL, the backend, and frontend all together.\n\n### Prerequisites\n\n- Docker and Docker Compose installed\n- Creating an app password (via: https://bsky.app/settings/app-passwords)\n\n### Setup\n\n1. Create a `.env` file with your credentials:\n\n```bash\ncp .env.example .env\n# Edit .env and add:\n# - BSKY_HANDLE=your-handle.bsky.social\n# - BSKY_PASSWORD=your-app-password\n```\n\n2. Start all services:\n\n```bash\ndocker-compose up -d\n```\n\n3. Wait for the backend to index posts from the firehose (this may take a few minutes for initial indexing)\n\n4. Open your browser to http://localhost:3000\n\n### Stopping the services\n\n```bash\ndocker-compose down\n```\n\nTo also remove the database volume:\n\n```bash\ndocker-compose down -v\n```\n\n## Manual Setup\n\n### 1. PostgreSQL Database Setup\n\n#### Using Docker (Recommended)\n\n```bash\n# Start PostgreSQL container\ndocker run --name konbini-postgres \\\n  -e POSTGRES_DB=konbini \\\n  -e POSTGRES_USER=konbini \\\n  -e POSTGRES_PASSWORD=your_password \\\n  -p 5432:5432 \\\n  -d postgres:15\n\n# The database will be available at: postgresql://konbini:your_password@localhost:5432/konbini\n```\n\n### 2. Environment Configuration\n\nSet the following environment variables:\n\n```bash\n# Database connection\nexport DATABASE_URL=\"postgresql://konbini:your_password@localhost:5432/konbini\"\n\n# Bluesky credentials\nexport BSKY_HANDLE=\"your-handle.bsky.social\"\nexport BSKY_PASSWORD=\"your-app-password\"\n```\n\n### 3. Build and Run the Go Application\n\n```bash\ngo build\n\n# Run with environment variables\n./konbini\n```\n\n### 4. Frontend Setup\n\n```bash\n# Navigate to frontend directory\ncd frontend\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm start\n```\n\nThe frontend will be available at http://localhost:3000 and will connect to the API at http://localhost:4444.\n\n## Running the Bluesky App against Konbini\n\nKonbini implements a large portion of the app.bsky.\\* appview endpoints that\nare required for pointing the main app to it and having it work reasonably\nwell.\n\nTo accomplish this you will need a few things:\n\n### Service DID\n\nYou will need a DID, preferably a did:web for your appview that points at a\npublic endpoint where your appview is accessible via https.\nI'll get into the https proxy next, but for the did, I've just pointed a domain\nI own (in my case appview1.bluesky.day) to a VPS, and used caddy to host a file\nat `/.well-known/did.json`.\nThat file should look like this:\n\n```json\n{\n  \"@context\": [\n    \"https://www.w3.org/ns/did/v1\",\n    \"https://w3id.org/security/multikey/v1\"\n  ],\n  \"id\": \"did:web:appview1.bluesky.day\",\n  \"verificationMethod\": [\n    {\n      \"id\": \"did:web:api.bsky.app#atproto\",\n      \"type\": \"Multikey\",\n      \"controller\": \"did:web:api.bsky.app\",\n      \"publicKeyMultibase\": \"zQ3shpRzb2NDriwCSSsce6EqGxG23kVktHZc57C3NEcuNy1jg\"\n    }\n  ],\n  \"service\": [\n    {\n      \"id\": \"#bsky_notif\",\n      \"type\": \"BskyNotificationService\",\n      \"serviceEndpoint\": \"YOUR APPVIEW HTTPS URL\"\n    },\n    {\n      \"id\": \"#bsky_appview\",\n      \"type\": \"BskyAppView\",\n      \"serviceEndpoint\": \"YOUR APPVIEW HTTPS URL\"\n    }\n  ]\n}\n```\n\nThe verificationMethod isn't used but i'm not sure if _something_ is required\nthere or not, so i'm just leaving that there, it works on my machine.\n\n### HTTPS Endpoint\n\nI've been using ngrok to proxy traffic from a publicly accessible https url to my appview.\nYou can simply run `ngrok http 4446` and it will give you an https url that you\ncan then put in your DID doc above.\n\n### The Social App\n\nNow, clone and build the social app:\n\n```\ngit clone https://github.com/bluesky-social/social-app\ncd social-app\nyarn\n```\n\nAnd then set this environment variable that tells it to use your appview:\n\n```\nexport EXPO_PUBLIC_BLUESKY_PROXY_DID=did:web:YOURDIDWEB\n```\n\nAnd finally run the app:\n\n```\nyarn web\n```\n\nThis takes a while on first load since its building everything.\nAfter that, load the localhost url it gives you and it _should_ work.\n\n## Selective Backfill\n\nIf you'd like to backfill a particular repo, just hit the following endpoint:\n\n```\ncurl http://localhost:4444/rescan/<DID OR HANDLE>\n\n```\n\nIt will take a minute but it should pull all records from that user.\n\n## Upstream Firehose Configuration\n\nKonbini supports both standard firehose endpoints as well as jetstream. If\nbandwidth and CPU usage is a concern, and you trust the jetstream endpoint,\nthen it may be worth trying that out.\n\nThe configuration file is formatted as follows:\n\n```json\n{\n  \"backen",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-21T02:24:46.592121"
  },
  {
    "basic_info": {
      "name": "sysc-greet",
      "full_name": "Nomadcxx/sysc-greet",
      "owner": "Nomadcxx",
      "description": "A tui greeter (not built in rust) ",
      "url": "https://github.com/Nomadcxx/sysc-greet",
      "clone_url": "https://github.com/Nomadcxx/sysc-greet.git",
      "ssh_url": "git@github.com:Nomadcxx/sysc-greet.git",
      "homepage": "",
      "created_at": "2025-10-14T03:41:26Z",
      "updated_at": "2025-10-21T00:42:34Z",
      "pushed_at": "2025-10-20T22:07:35Z"
    },
    "stats": {
      "stars": 130,
      "forks": 3,
      "watchers": 130,
      "open_issues": 2,
      "size": 106146
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 290967,
        "Shell": 4168,
        "Makefile": 2018
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# sysc-greet\n\nA graphical console greeter for [greetd](https://git.sr.ht/~kennylevinsen/greetd), written in Go with the Bubble Tea framework.\n\n![Preview](https://github.com/Nomadcxx/sysc-greet/raw/master/assets/showcase.gif)\n\n## Features\n\n- **Mucho themes**: Dracula, Gruvbox, Material, Nord, Tokyo Night, Catppuccin, Solarized, Monochrome, TransIsHardJob\n- **Background Effects**: Fire (DOOM PSX), Matrix rain, ASCII rain, Static patterns\n- **Border Styles**: Classic, Modern, Minimal (best), ASCII-1, ASCII-2, Wave, Pulse\n- **Screensaver**: Configurable idle timeout with ASCII art cycling\n- **Video Wallpapers**: Multi-monitor support via gslapper\n- **Preference Caching**: Theme, background, border, session persistence\n\n## Installation\n\n### Arch Linux (AUR)\nFirst, decide which compositor you want. sysc-greet will install the recommended default (niri), sysc-greet-hyperland installs the Hyprland variant, and sysc-greet-sway installs the Sway variant.\n```bash RECOMMENDED\nyay -S sysc-greet\n```\n```bash\nyay -S sysc-greet-hyprland\n```\n```bash\nyay -S sysc-greet-sway\n```\n\n### Installer (Recommended)\n\nThe installer lets you choose your compositor and handles all configuration:\n\n```bash\ngit clone https://github.com/Nomadcxx/sysc-greet\ncd sysc-greet/sysc-greet\ngo run ./cmd/installer/\n```\n\n### Quick Install Script\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/Nomadcxx/sysc-greet/master/install.sh | sudo bash\n```\n\n### Manual Build\n\n**Requirements:**\n- Go 1.21+\n- greetd\n- Wayland compositor (niri, hyprland, or sway)\n- kitty (terminal)\n- swww (wallpaper daemon)\n- gslapper (optional, for video wallpapers)\n\n**Build and install:**\n\n```bash\ngit clone https://github.com/Nomadcxx/sysc-greet\ncd sysc-greet\ngo build -o sysc-greet ./cmd/sysc-greet/\nsudo install -Dm755 sysc-greet /usr/local/bin/sysc-greet\n```\n\n**Install assets:**\n\n```bash\nsudo mkdir -p /usr/share/sysc-greet/{ascii_configs,fonts,wallpapers}\nsudo cp -r ascii_configs/* /usr/share/sysc-greet/ascii_configs/\nsudo cp -r fonts/* /usr/share/sysc-greet/fonts/\nsudo cp -r wallpapers/* /usr/share/sysc-greet/wallpapers/\nsudo cp config/kitty-greeter.conf /etc/greetd/kitty.conf\n```\n\n**Configure greetd** (`/etc/greetd/config.toml`):\n\nChoose your compositor and update the command below:\n\n```toml\n[terminal]\nvt = 1\n\n[default_session]\n# Pick one:\ncommand = \"niri -c /etc/greetd/niri-greeter-config.kdl\"\n# command = \"Hyprland -c /etc/greetd/hyprland-greeter-config.conf\"\n# command = \"sway --unsupported-gpu -c /etc/greetd/sway-greeter-config\"\nuser = \"greeter\"\n```\n\n**Create compositor config:**\n\nCopy the appropriate config file to `/etc/greetd/`:\n\n```bash\n# For niri:\nsudo cp config/niri-greeter-config.kdl /etc/greetd/\n\n# For hyprland:\nsudo cp config/hyprland-greeter-config.conf /etc/greetd/\n\n# For sway:\nsudo cp config/sway-greeter-config /etc/greetd/\n```\n\n**Create greeter user:**\n\n```bash\nsudo useradd -M -G video -s /usr/bin/nologin greeter\nsudo mkdir -p /var/cache/sysc-greet /var/lib/greeter/Pictures/wallpapers\nsudo chown -R greeter:greeter /var/cache/sysc-greet /var/lib/greeter\nsudo chmod 755 /var/lib/greeter\n```\n\n**Enable service:**\n\n```bash\nsudo systemctl enable greetd.service\n```\n\n## Customization\n\n### Wallpapers\n\nThere are two types of wallpapers you can use:\n\n#### 1. Themed Wallpapers (Static Images)\n\nThese auto-match your selected theme and are stored in `/usr/share/sysc-greet/wallpapers/`.\n\n**Format:** `sysc-greet-{theme}.png`\n\n**Example:** `sysc-greet-nord.png` automatically shows when Nord theme is active.\n\n**Adding themed wallpapers:**\n```bash\nsudo cp ~/my-nord-bg.png /usr/share/sysc-greet/wallpapers/sysc-greet-nord.png\nsudo chown greeter:greeter /usr/share/sysc-greet/wallpapers/sysc-greet-nord.png\n```\n\n#### 2. Custom Wallpapers (Videos)\n\nVideo wallpapers are managed by [gSlapper](https://github.com/Nomadcxx/gSlapper) and stored in `/var/lib/greeter/Pictures/wallpapers/`.\n\n**Supported formats:** MP4, WebM\n\n**Adding video wallpapers:**\n```bash\nsudo cp ~/Videos/cool-animation.mp4 /var/lib/greeter/Pictures/wallpapers/\nsudo chown greeter:greeter /var/lib/greeter/Pictures/wallpapers/cool-animation.mp4\n```\n\n**Accessing wallpapers:**\nPress `F1` (Settings) ‚Üí Backgrounds ‚Üí Select your wallpaper or video\n\n### ASCII Art Format\n\nCustom ASCII art configs in `/usr/share/sysc-greet/ascii_configs/`:\n\n```\n# cinnamon.conf\nname=My Session\n\nascii_1=\n ü¨≠ü¨≠ü¨≠ü¨≠ ü¨ûü¨≠ü¨≠ü¨≠ü¨èü¨ûü¨≠ü¨º ü¨ûü¨≠ü¨èü¨ûü¨≠ü¨º ü¨ûü¨≠ü¨è ü¨≠ü¨≠ü¨≠ü¨≠ ü¨ûü¨≠ü¨Ω  ü≠àü¨≠ü¨è ü¨≠ü¨≠ü¨≠ü¨≠ ü¨ûü¨≠ü¨º ü¨ûü¨≠ü¨è\n‚ñê‚ñí‚ñå ü≠£ü¨Ä ‚ñê‚ñí‚ñå ‚ñê‚ñíü≠åü¨ø‚ñê‚ñí‚ñå‚ñê‚ñíü≠åü¨ø‚ñê‚ñí‚ñå‚ñê‚ñí‚ñå‚ñê‚ñí‚ñå‚ñê‚ñí‚ñàü≠çü≠Ç‚ñà‚ñí‚ñå‚ñê‚ñí‚ñå‚ñê‚ñí‚ñå‚ñê‚ñíü≠åü¨ø‚ñê‚ñí‚ñå\n‚ñê‚îÄ‚ñå    ‚ñê‚îÄ‚ñå ‚ñê‚îÄ‚ñåü≠•ü≠í‚îÄ‚ñå‚ñê‚îÄ‚ñåü≠•ü≠í‚îÄ‚ñå‚ñê‚îÄü¨õü¨´‚îÄ‚ñå‚ñê‚îÄ‚ñåü≠£ü≠ò‚ñê‚îÄ‚ñå‚ñê‚îÄ‚ñå‚ñê‚îÄ‚ñå‚ñê‚îÄ‚ñåü≠•ü≠í‚îÄ‚ñå\n‚ñê‚ñë‚ñå ü≠àü¨è ‚ñê‚ñë‚ñå ‚ñê‚ñë‚ñå ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå  ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå ‚ñê‚ñë‚ñå\n ü¨Çü¨Çü¨Çü¨Ç ü¨Åü¨Çü¨Çü¨Çü¨Äü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Äü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Äü¨Åü¨Çü¨Äü¨Åü¨Çü¨Äü¨Åü¨Çü¨Ä  ü¨Åü¨Çü¨Ä ü¨Çü¨Çü¨Çü¨Ç ü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Ä\nascii_2=\nú∫†úµ°ú∂úú∫£¬†ú∂úúµ°¬†‚ñÑú∫£‚ñó‚ññ‚ñÑú∫£‚ñó‚ññ¬†ú∑ãú∫£¬†‚ñÑú∫£ú∑ã‚ññú∑ãú¥ßú∂úú∫£‚ñÑú∫£‚ñó‚ññ\n‚ñà¬†¬†ú∫®¬†‚ñê‚ñå¬†‚ñàú¥¶ú∑•‚ñå‚ñàú¥¶ú∑•‚ñåú∑•ú∂¨ú∑ñúµà‚ñàú¥¶‚ñú‚ñå‚ñà¬†‚ñê‚ñå‚ñàú¥¶ú∑•‚ñå\nú¥¶ú∂ªú∑ãüØ¶¬†ú∑ïú∑Ä¬†‚ñà¬†‚ñê‚ñå‚ñà¬†‚ñê‚ñå‚ñà¬†‚ñê‚ñå‚ñà¬†‚ñê‚ñåú∂´‚ñÇú∑ïú¥ç‚ñà¬†‚ñê‚ñå\n\n```\n\n**For more customization options (screensaver, compositor configs, etc.), see [CONFIGURATION.md](https://github.com/Nomadcxx/sysc-greet/blob/master/CONFIGURATION.md)**\n\n## Usage\n\n### Key Bindings\n\n- **F1** - Settings menu (themes, borders, backgrounds)\n- **F2** - Session selection",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-21T02:24:47.693833"
  },
  {
    "basic_info": {
      "name": "wellness-ping",
      "full_name": "micr0-dev/wellness-ping",
      "owner": "micr0-dev",
      "description": "A simple dead man's switch service. Get pinged regularly to confirm you're okay. If you don't respond, your emergency contacts get alerted.",
      "url": "https://github.com/micr0-dev/wellness-ping",
      "clone_url": "https://github.com/micr0-dev/wellness-ping.git",
      "ssh_url": "git@github.com:micr0-dev/wellness-ping.git",
      "homepage": null,
      "created_at": "2025-10-14T20:14:48Z",
      "updated_at": "2025-10-20T21:13:52Z",
      "pushed_at": "2025-10-17T00:00:06Z"
    },
    "stats": {
      "stars": 126,
      "forks": 4,
      "watchers": 126,
      "open_issues": 2,
      "size": 51
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 19886,
        "HTML": 9194,
        "CSS": 154
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Wellness Ping\n\nA simple dead man's switch service. Get pinged regularly to confirm you're okay. If you don't respond, your emergency contacts get alerted.\n\n[https://wellness-p.ing](https://wellness-p.ing)\n\n## Contact\n\nFeature requests: [micr0@micr0.dev](mailto:micr0@micr0.dev)\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:48.811805"
  },
  {
    "basic_info": {
      "name": "ssh-dashboard",
      "full_name": "AlpinDale/ssh-dashboard",
      "owner": "AlpinDale",
      "description": "Monitor GPU/CPU Usage on SSH servers, with NVIDIA and AMD support.",
      "url": "https://github.com/AlpinDale/ssh-dashboard",
      "clone_url": "https://github.com/AlpinDale/ssh-dashboard.git",
      "ssh_url": "git@github.com:AlpinDale/ssh-dashboard.git",
      "homepage": "",
      "created_at": "2025-10-12T13:09:29Z",
      "updated_at": "2025-10-21T02:01:01Z",
      "pushed_at": "2025-10-15T11:52:24Z"
    },
    "stats": {
      "stars": 119,
      "forks": 14,
      "watchers": 119,
      "open_issues": 1,
      "size": 374
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 54027,
        "Makefile": 2207,
        "Shell": 1225
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# SSH Dashboard\n\nMonitor CPU, GPU, RAM, and disk usage on your remote servers with a live-updating terminal dashboard.\n\n### Single-host monitoring:\n<div align=\"center\">\n  <img src=\"assets/screenshot.png\" alt=\"SSH Dashboard Screenshot\" width=\"800\">\n</div>\n\n### Multi-host monitoring:\n<div align=\"center\">\n  <img src=\"assets/screenshot2.png\" alt=\"SSH Dashboard Screenshot\" width=\"800\">\n</div>\n\n## Installation\n\n### Pre-built Binaries\n\nDownload the latest release for your platform from the [Releases page](https://github.com/AlpinDale/ssh-dashboard/releases).\n\n**Quick install (Linux/macOS):**\n```bash\n# Download the binary for your platform\n# Example for Linux AMD64:\ncurl -L -o ssh-dashboard https://github.com/AlpinDale/ssh-dashboard/releases/download/v0.0.1/ssh-dashboard-v0.0.1-linux-amd64\n\n# Make it executable and move to PATH\nchmod +x ssh-dashboard\nsudo mv ssh-dashboard /usr/local/bin/\n```\n\n**Supported platforms:**\n- `linux-amd64`, `linux-arm64`\n- `darwin-amd64` (Intel Mac), `darwin-arm64` (Apple Silicon)\n- `windows-amd64.exe`, `windows-arm64.exe`\n\n### From Source\n\n#### AUR\n```bash\nyay -S ssh-dashboard-git\n```\n\n#### Manual\n\n```bash\ngit clone https://github.com/AlpinDale/ssh-dashboard.git\ncd ssh-dashboard\nmake install\n```\n\nThis will install to `~/.local/bin`. Make sure this directory is in your PATH (it usually is):\n\n```bash\nexport PATH=\"$HOME/.local/bin:$PATH\"\n```\n\n### Prerequisites\n\n- Go 1.21 or higher\n- SSH access to remote hosts\n- SSH keys loaded in your SSH agent\n\n## Usage\n\nSimply run:\n\n```bash\nssh-dashboard\n```\n\nThe tool will:\n1. Scan your `~/.ssh/config` for available hosts\n2. Present an interactive list to select from\n3. Connect and display a live dashboard\n4. Update stats every 5 seconds (configurable)\n\n**Multi-host workflow:**\n- Start by selecting one or more hosts (use `Space` to toggle selection)\n- Press `Enter` to connect and view the dashboard\n- While in the dashboard, press `c` to return to host selection to add/remove hosts\n- Press `n` to cycle through connected hosts (like tmux sessions)\n- Press `t` to toggle overview mode, showing all selected hosts at once with GPU pressure summaries\n- Press `s` to exit the dashboard and drop into an interactive SSH shell with the current host\n- All connections remain active - no need to reconnect!\n\n### Configuration\n\n**Update Interval:**\n\nControl how often the dashboard refreshes in seconds (default: 5). Supports decimal values for sub-second updates:\n\n```bash\n# Update every second\nssh-dashboard -n 1\n\n# Update 10 times per second (100ms)\nssh-dashboard -n 0.1\n\n# or with an env var\nexport SSH_DASHBOARD_INTERVAL=0.5\nssh-dashboard\n```\n\n**Keybindings:**\n- `q` or `Ctrl+C` - Quit\n- `Space` - Select/deselect hosts (in host selection screen)\n- `Enter` - Connect to selected host(s)\n- `n` - Switch to next host (when multiple hosts selected)\n- `t` - Toggle overview screen (shows all hosts at once)\n- `s` - Exit and SSH into current host\n- `c` - Add hosts (from dashboard, returns to host selection)\n\n## SSH Configuration\n\nMake sure your `~/.ssh/config` is properly configured:\n\n```\nHost myserver\n    HostName 192.168.1.100\n    User username\n    Port 22  # optional\n    IdentityFile ~/.ssh/id_rsa  # optional\n\nHost gpu-server\n    HostName gpu.example.com\n    User admin\n    IdentityFile ~/.ssh/id_ed25519  # optional\n```\n\n### SSH Agent\n\nThe dashboard uses SSH agent for authentication. Make sure your keys are loaded:\n\n```bash\nssh-add ~/.ssh/id_rsa\nssh-add ~/.ssh/id_ed25519\n\n# verify\nssh-add -l\n```\n\n## Remote Requirements\n\nThe remote hosts should have these commands available:\n- `lscpu` - CPU information\n- `top` - CPU usage\n- `free` - RAM information\n- `df` - Disk usage\n- `nvidia-smi` - GPU information (NVIDIA GPUs only)\n- `amd-smi` or `rocm-smi` - GPU information (AMD GPUs only)\n\nMost Linux distributions include these by default.\n\n## Development\n\n### Build\n\n```bash\nmake build\n```\n\n### Run\n\n```bash\nmake run\n```\n\n### Build for Multiple Platforms\n\nThe project uses [GoReleaser](https://goreleaser.com/) for multi-platform builds and releases.\n\n**Test the release locally:**\n```bash\ngoreleaser release --snapshot --clean\n```\n\n**Build all platforms with Make:**\n```bash\nmake build-all\n```\n\nThis creates binaries for:\n- Linux (amd64, arm64)\n- macOS (amd64, arm64)\n- Windows (amd64, arm64)\n\n### Clean\n\n```bash\nmake clean\n```\n\n## License\n\nMIT License - see LICENSE file for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Troubleshooting\n\n### Connection Issues\n- Verify your SSH config is correct\n- Test manual connection: `ssh hostname`\n- Ensure SSH keys are loaded: `ssh-add -l`\n\n### Missing GPU Information\n- (NVIDIA) Verify NVIDIA drivers are installed: `ssh hostname nvidia-smi`\n- (AMD) Verify AMD drivers are installed: `ssh hostname amd-smi` or `ssh hostname rocm-smi`\n\n### Permission Denied\n- Check SSH key permissions (should be 600)\n- Verify the user has appropriate access rights\n\n## Acknowledgments\n\nBuilt with:\n- [Bubble Tea](https://github.com/c",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-21T02:24:49.954027"
  },
  {
    "basic_info": {
      "name": "brrtfetch",
      "full_name": "ferrebarrat/brrtfetch",
      "owner": "ferrebarrat",
      "description": "Render animated ASCII art from a GIF for your sysinfo fetcher of choice.",
      "url": "https://github.com/ferrebarrat/brrtfetch",
      "clone_url": "https://github.com/ferrebarrat/brrtfetch.git",
      "ssh_url": "git@github.com:ferrebarrat/brrtfetch.git",
      "homepage": "",
      "created_at": "2025-10-05T19:04:58Z",
      "updated_at": "2025-10-20T11:07:36Z",
      "pushed_at": "2025-10-07T09:43:47Z"
    },
    "stats": {
      "stars": 92,
      "forks": 2,
      "watchers": 92,
      "open_issues": 3,
      "size": 126605
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 9370,
        "Nix": 811
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "<h3 align=\"center\"><img src=\"./docs/readme-md-brrtfetch-main-textlogo.png\" alt=\"logo\" height=\"100px\"></h3>\n<p align=\"center\"><img src=\"./docs/readme-md-main.gif\" height=\"400px\"></p>\n<p align=\"center\"><i>Fastfetch config: https://github.com/xerolinux/xero-layan-git</i></p>\n\n**Brrtfetch** is an animated system information fetcher written mainly in Go. Please keep in mind that it is still in it's very early stage of development. It displays the user specified **GIF rendered as animated ASCII art** alongside the system information from your favourite fetcher.\n\nThink of it like a renderer that replaces the ASCII art for your fetcher with **animated** art. You only need to provide a .gif file.\n\nBroken on MacOS. It does not display sysinfo. I do not own any Apple devices so apologies if this takes a while to fix.\n\nIn the next version I plan to use a new way of deciding what to put where in the terminal. It should be way more stable. No more color bugs, already confirmed hyfetch works(no workaround needed),the issue with illegal flags for the script binary on MacOS will also be resolved in the upcoming release. You can also expect a very cool new feature which I have not seen on any other animated fetchers when the new update is released.\n\n---\n \n## ‚ú® Features\n\n* Render animated GIFs as **colorful ASCII art** directly in your terminal.\n* Side-by-side system information via `fastfetch`, `neofetch`, or your fetcher of choice. I have only tested with `fastfetch`, `neofetch` and `hyfetch`. Hyfetch requires a small workaround and even then it's still a bit buggy with hyfetch. See examples below. \n* **True color (24-bit ANSI)** support with optional white monochrome mode via `-color=false`.\n* **Multithreaded prerendering** for smooth playback.\n* Configurable:\n\n  * Width / height to render at\n  * FPS to render at (impacts animation speed)\n  * Brightness multiplier (controls density of ASCII mapping)\n  * Vertical offset for aligning sysinfo height relative to  ASCII art\n* Attempts to preserves **ANSI color codes** from sysinfo commands (broken for hyfetch and Windows CMD/Powershell. WSL does show color for the sysinfo. Only tested this with Ubuntu for WSL).\n* If you can somehow render DOOM in GIF format you could technically use this to play DOOM in your fetcher. It would only be (re)rendered in brrtfetch, not actually run inside of it, at least for now ;)\n\n---\n\n## üì¶ Installation\n\nMore comprehensive instructions for different distros and support for various package managers will be coming soon.\n\nDebian/Ubuntu based steps only for the initial release, it should work on any linux system as long as you replace apt with your package manager for the dependencies. You can install it on Windows and Mac if you want. Just translate the steps to Windows. Will try to add Winget support later so i don't have to make an install script/instructions for Powershell. I will also attempt to add support for all major Linux package managers and Brew.\n\n\n### Prerequisites\n\n* A terminal that supports ANSI colors and escape sequences. Almost all modern terminals do.\n* `Script` (Linux only) \n\n  Optional but highly recommended for sysinfo color support. Part of the **bsdutils** package. Comes by default on most systems. Check with \"which script\"\n* `Unbuffer` (Linux only)\n\n  Optional but recommended. Part of the `expect` package. Install with \"apt install expect\" or any other package manager. Brrtfetch will attempt to fallback on `unbuffer` if `script` is not available. \n* A fetch application with an option to omit the ASCII art.\n\n  * [fastfetch](https://github.com/fastfetch-cli/fastfetch) (default)\n  * [hyfetch](https://github.com/hykilpikonna/hyfetch)\n  * Or any command you like, it can be specified with `-info \"neofetch --off\"` or even `-info \"echo $USER\"` or anything custom if you want.\n\n  ```bash\n  apt install fastfetch # only works on Debian 13+, see fastfetch docs for other version and distros\n  apt install bsdutils expect\n  ```\n\n### Build from source\n\nAdditional prerequisite:\n* Go 1.20+ (I used Go 1.23.3, will assume 1.20+ works)\n\n  ```bash\n  # Install Go (replace apt with your package manager like brew, yum, pacman etc)\n  sudo apt install golang\n\n  # Build\n  git clone https://github.com/ferrebarrat/brrtfetch\n  cd brrtfetch \n  go build -o ./bin/brrtfetch ./go/main.go && chmod +x ./bin/brrtfetch\n\n  # Add to path\n  sudo cp ./bin/brrtfetch /usr/local/bin/brrtfetch\n\n  # Optional - Save gifs from repo before cleanup\n  mkdir -p /home/$USER/Pictures/brrtfetch/gifs\n  cp -r ./gifs/* /home/$USER/Pictures/brrtfetch/gifs\n\n  # Cleanup\n  cd .. && rm -rf brrtfetch\n  ```\n\n---\n\n## üéÆ Usage\n\n  ```bash\n  brrtfetch [options] /path/to/file.gif\n  ```\n\n* **Ctrl-C** ‚Üí attempts to exit the animation gracefully, clears and restores terminal, prints first frame with sysinfo and returns you to your prompt as if it was just a static fetcher.\n* Animation loops endlessly until interrupted with **CTRL-C**.\n\n<p><img src=\"./docs/readme-md-example-run.gif\" height=\"300px\"></p>\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:51.075908"
  },
  {
    "basic_info": {
      "name": "SLiteIO",
      "full_name": "beankeji-cloud/SLiteIO",
      "owner": "beankeji-cloud",
      "description": "SLiteIO is a cloud-native block storage solution for Kubernetes, using LVM and SPDK to provide both local volumes and high-performance NVMe-oF remote volumes. Its minimal I/O path delivers excellent performance even with standard SSDs, enabling dynamic block device provisioning in hyper-converged clusters.",
      "url": "https://github.com/beankeji-cloud/SLiteIO",
      "clone_url": "https://github.com/beankeji-cloud/SLiteIO.git",
      "ssh_url": "git@github.com:beankeji-cloud/SLiteIO.git",
      "homepage": "",
      "created_at": "2025-09-26T02:18:16Z",
      "updated_at": "2025-10-10T03:15:01Z",
      "pushed_at": "2025-10-01T01:21:13Z"
    },
    "stats": {
      "stars": 91,
      "forks": 11,
      "watchers": 91,
      "open_issues": 0,
      "size": 1488
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 947455,
        "Shell": 9780,
        "Makefile": 6080
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\"><img src=doc/image/logo.png alt=\"logo.png\" width=\"300\" /></p>\n<p align=\"center\"><b>‰∫ëÂéüÁîüÂ≠òÂÇ®Ëß£ÂÜ≥ÊñπÊ°à</b></p>\n<p align=\"center\">\n  [<a href=\"README.md\">‰∏≠Êñá</a>] | [<a href=\"README-en.md\">English</a>] \n</p>\n\n\n\n# SLiteIO \nÊú¨È°πÁõÆÂü∫‰∫é[eosphoros-ai/liteio]ÂºÄÂèëÔºåÈÅµÂæ™Apache-2.0 licenseÂçèËÆÆ„ÄÇ\n**SLiteIO** ÊòØ‰∏ÄÊ¨æ‰∫ëÂéüÁîüÊúâÁä∂ÊÄÅÂÆπÂô®ÂåñÁöÑÂ≠òÂÇ®Ëß£ÂÜ≥ÊñπÊ°àÔºå‰æùËµñ‰∫éLVMÂ≠òÂÇ®ÂºïÊìéÔºåÂèØ‰Ωú‰∏∫Êú¨Âú∞Âç∑Áõ¥Êé•‰ΩøÁî®Ôºå‰πüÂèØÈÄöËøáSPDKÂØºÂá∫NVME-OFËøúÁ´ØÂç∑„ÄÇÁî±‰∫éÂÖ∂ÊûÅÁÆÄÁöÑÂ≠òÂÇ®IOË∑ØÂæÑÔºåÂç≥‰ΩøÊòØÊôÆÈÄöSSD‰πüËÉΩÂèëÊå•Âá∫‰∏çÈîôÁöÑÊÄßËÉΩ„ÄÇËØ•ÊñπÊ°à‰∏ì‰∏∫Ë∂ÖËûçÂêàÊû∂ÊûÑ‰∏ãÁöÑ Kubernetes ËÆæËÆ°ÔºåÂèØÂÆûÁé∞ÈõÜÁæ§ËåÉÂõ¥ÁöÑÂùóËÆæÂ§áÂä®ÊÄÅ‰æõÁªô„ÄÇ\n\n## ÁâπÊÄß\n\n1. **‰ΩéÈó®Êßõ**: ‰∏ç‰ªÖÊîØÊåÅNVMEÂíåRDMAÁΩëÁªúÔºåÊª°Ë∂≥ÂØπÊûÅËá¥È´òÊÄßËÉΩÁöÑËøΩÊ±ÇÔºõËøòÊîØÊåÅÊôÆÈÄöSSDÂíåÁΩëÁªúÔºå‰πüËÉΩÊèê‰æõ‰∏ç‰øóÁöÑÊÄßËÉΩÔºå‰∏∫ÂàùÂàõ‰ºÅ‰∏öÊàñËÄÖËÆæÂ§áÂà©ÊóßÊèê‰æõ‰æøÂà©„ÄÇ                                                                                                                                                                                                      \n2. **‰∫ëÂéüÁîü**: SLiteIOÈÄöËøáCSIÊéßÂà∂Âô®ÂíåÈ©±Âä®ÂÆûÁé∞‰∏éKubernetesÈõÜÊàêÔºåÊèê‰æõ‰∫ëÂéüÁîüÁî®Êà∑Êé•Âè£„ÄÇÁî®Êà∑ÂèØ‰ª•ÈÄöËøáPVCÂä®ÊÄÅÂàÜÈÖçÂíåÈîÄÊØÅSLiteIOÂç∑„ÄÇ\n3. **ÊòìÂÆâË£Ö**: Èô§‰∫Ü‰∏Ä‰∫õÂ∞ëÈáèÁöÑÈÖçÁΩÆ‰æùËµñÔºåSLiteIOÂèØ‰ª•ÈÄöËøá‰∏ÄÊù°ÂëΩ‰ª§Ë°åÂø´ÈÄüÁöÑÂÆâË£ÖÈÉ®ÁΩ≤„ÄÇ\n4. **ÊûÅÁ®≥ÂÆö**: Áõ¥Êé•Âà©Áî®LVM‰Ωú‰∏∫Êï∞ÊçÆÂºïÊìéÔºåÊú¨Âú∞Âç∑Áõ¥Êé•ËÆøÈóÆÔºåËøúÁ´ØÂç∑ÈÄöËøáSPDKÂØºÂá∫„ÄÇÊï¥‰∏™ËøêË°åÊó∂Êï∞ÊçÆÈìæË∑ØÈùûÂ∏∏ÁÆÄÂçïÔºå‰ªéËÄåÂ∏¶Êù•ÊûÅËá¥ÁöÑÁ®≥ÂÆö„ÄÇ\n5. **ÁúÅÊàêÊú¨**: ÊîØÊåÅÁ≤æÁÆÄÊ®°ÂºèÔºåÂèØ‰ª•ÂÅöÂà∞Â≠òÂÇ®Á©∫Èó¥Áî®Â§öÂ∞ëÂàÜÈÖçÂ§öÂ∞ëÔºåÈÅøÂÖçËøáÂ§öÂàÜÈÖçÂ∏¶Êù•ÁöÑÂ≠òÂÇ®Á©∫Èó¥Êµ™Ë¥π„ÄÇ\n6. **‰∏∞ÂØåÁöÑË∞ÉÂ∫¶Á≠ñÁï•**: ÊîØÊåÅË∑®ËäÇÁÇπ„ÄÅË∑®Êú∫Êüú„ÄÅË∑®Êé•ÂÖ•Á≠âÂ§öÁßçÈ´òÂèØÁî®Ë∞ÉÂ∫¶Á≠ñÁï•ÔºåÊª°Ë∂≥‰∏çÂêåÁ≠âÁ∫ßÁöÑÁîü‰∫ßÁ≥ªÁªüÈ´òÂèØÁî®Ë¶ÅÊ±Ç„ÄÇ\n\n## ÁõÆÁöÑ\n\nÂΩìÂâçÊúâÂæàÂ§öÁ≥ªÁªüËøêË°åÂú®ËôöÊú∫ÊàñËÄÖÁâ©ÁêÜÊú∫‰∏äÔºåÂú®ÈõÜÁæ§Âà∞Ëææ‰∏ÄÂÆöËßÑÊ®°ÂêéÔºåÂ≠òÂú®Â§ßÈáèÁöÑËµÑÊ∫êÂà©Áî®ÁéáÂ§±Ë°°ÔºöÊØîÂ¶ÇÊúâÁöÑËäÇÁÇπÂá∫Áé∞CPUÊàñÂÜÖÂ≠ò‰∏çË∂≥ÔºåÂç¥ÊúâÂ§ßÈáèÁöÑÂ≠òÂÇ®Èó≤ÁΩÆËµÑÊ∫ê„ÄÇÂõ†Ê≠§Âú®ÂÅöÂÆπÂô®ÂåñÊîπÈÄ†Êó∂ÔºåÊúâÁä∂ÊÄÅÁöÑÁ≥ªÁªüÊØîÂ¶ÇÊï∞ÊçÆÂ∫ìÈááÁî®Âì™ÁßçÂ≠òÂÇ®ÊñπÊ°àÔºåÂÖÖÂàÜÂà©Áî®Ëøô‰∫õÈó≤ÁΩÆÂ≠òÂÇ®ËµÑÊ∫êÔºåÊàê‰∏∫Êñ∞ÁöÑÈöæÈ¢ò„ÄÇ‰∏∫Ëß£ÂÜ≥Ëøô‰∏ÄÈóÆÈ¢òÔºåÊàë‰ª¨ÁöÑÁõÆÊ†áÊòØÂºÄÂèë‰∏ÄÁßçÁ≥ªÁªüÔºåËÉΩÂ§üÂú®‰øùÊåÅÊé•ËøëÊú¨Âú∞Á£ÅÁõòÊÄßËÉΩÁöÑÂêåÊó∂ÔºåÊúâÊïàÊï¥ÂêàËøô‰∫õÁ¢éÁâáÂåñÁöÑÂ≠òÂÇ®ËµÑÊ∫ê„ÄÇ\n\n## Êû∂ÊûÑ\n\nSLiteIOÁî±ÂÖ≠‰∏™ÁªÑ‰ª∂ÁªÑÊàêÔºö\n\n1. **Disk-Agent**: Disk-AgentÂÆâË£ÖÂú®ÊØè‰∏™ÂêéÁ´ØËäÇÁÇπ‰∏äÔºåÂπ∂‰∏îÁÆ°ÁêÜËØ•ËäÇÁÇπ‰∏äÁöÑÂ≠òÂÇ®Ê±†ÔºåËØ•Ê®°Âùó‰∏éÊï∞ÊçÆÂºïÊìé‰∫§‰∫íÔºåÂÆûÁé∞Âç∑‰∏éÂø´ÁÖßÁöÑÂàõÂª∫‰∏éÂà†Èô§ÂäüËÉΩ„ÄÇÈ¢ùÂ§ñÁöÑÔºåDisk-AgentËøòÁªôÊéßÂà∂ËäÇÁÇπ‰∏äÊä•‰∫ÜÂ≠òÂÇ®Ê±†Áä∂ÊÄÅÂπ∂ÁªôPrometheusÊèê‰æõÂç∑ÁªüËÆ°‰ø°ÊÅØ„ÄÇ\n2. **Disk-Controller**: Disk-ControllerÊéåÊè°‰∫ÜÈõÜÁæ§ÁßçÊâÄÊúâÁöÑÂ≠òÂÇ®Ê±†ÂíåÂç∑ÁöÑÂÖ®Â±ÄÁä∂ÊÄÅ‰ø°ÊÅØ„ÄÇÂÆÉÁöÑ‰∏ªË¶Å‰ªªÂä°Êó∂Â∞ÜÂç∑Ë∞ÉÂ∫¶Âà∞ÂêàÈÄÇÁöÑÂ≠òÂÇ®Ê±†„ÄÇ\n3. **nvme-tcp**: nvme-tcpÊòØ‰∏Ä‰∏™ÂÜÖÊ†∏Ê®°ÂùóÔºåÊèê‰æõ‰∫ÜÂü∫‰∫éTCPÁöÑNVME-OFÂçèËÆÆ„ÄÇ\n4. **nvmf_tgt**: nvmf_tgtÊèê‰æõ‰∫ÜÂ∞ÜLVMÂç∑ÂØºÂá∫Êàênvme targetÔºå‰ªéËÄåÂÆûÁé∞ËøúÁ´ØÂç∑„ÄÇ\n5. **CSI-Driver**: CSI-DriverÂÆûÁé∞‰∫ÜKubernetes CSIÊ†áÂáÜÊé•Âè£ÔºåÂπ∂‰ª•PodÂΩ¢ÂºèÈÉ®ÁΩ≤Âú®ËÆ°ÁÆóËäÇÁÇπ‰∏ä„ÄÇÂÆÉÈÄöËøálvmÂíånvme-cliÂ∑•ÂÖ∑ÈìæÂÆûÁé∞‰∏éÂêéÁ´ØÂ≠òÂÇ®ÁöÑËøûÊé•„ÄÇ\n6. **CSI-Controller**: CSI-ControllerÊòØ‰∏™‰∏≠ÂøÉÂåñÊúçÂä°ÔºåÊèê‰æõPVÁöÑÂàõÂª∫‰∫éÂà†Èô§Â§ÑÁêÜ„ÄÇ \n\nÊÄª‰ΩìËÄåË®ÄÔºåSLiteIOÊû∂ÊûÑ‰∏∫‰∫ëÂéüÁîüÂùóÂ≠òÂÇ®Êèê‰æõ‰∫Ü‰∏ÄÁßçÂèØÊâ©Â±ï‰∏îÈ´òÊïàÁöÑÂÆûÁé∞ÊñπÊ°à„ÄÇÈÄöËøáÂ§öÁªÑ‰ª∂ÂçèÂêå‰∏éÊé•Âè£ÊäΩË±°ÔºåËØ•Êû∂ÊûÑËÉΩÂ§üÁÅµÊ¥ªÈÄÇÈÖç‰∏çÂêåÂ≠òÂÇ®Âú∫ÊôØÁöÑÈúÄÊ±Ç„ÄÇ\n\n![](doc/image/architecture.jpg)\n\n## Âø´ÈÄüÂºÄÂßã\n\nÂø´ÈÄüÂºÄÂßãÊåáÂçóÂ∏ÆÂä©ÊÇ®Âø´ÈÄüÂÆâË£Ö‰∏Ä‰∏™K8sÈõÜÁæ§ÔºåÂπ∂Âú®‰∏äÈù¢ÈÉ®ÁΩ≤SLiteio„ÄÇ\n\n- [Âø´ÈÄüÂºÄÂßã](doc/zh/install.md)\n- [‰ΩøÁî®kubeadmÂÆâË£ÖK8s](doc/zh/kubeadm-install.md)\n\n## MYSQLÊï∞ÊçÆÂ∫ìÂú∫ÊôØÊÄßËÉΩÊµãËØï\n**ÊµãËØïÁéØÂ¢É**Ôºö40C/256GÔºå7 * 900GB SSD Raid5Ôºå2 * 10Gb   3Âè∞                    \n**ÊµãËØïÂ∑•ÂÖ∑**ÔºöSysbench               \n**ÊµãËØïÊñπÊ≥ï**ÔºöÈÄöËøáKubernetesÂÆπÂô®ÂåñÂú∫ÊôØÂíåKVMËôöÊãüÂåñÂú∫ÊôØËøõË°åÂØπÊØîÊµãËØï                                                                                               \n**ÊÄßËÉΩÊµãËØïÂú∫ÊôØ**ÔºöK8S + SLiteIO Êú¨Âú∞Âç∑ „ÄÅK8S + SLiteIO ËøúÁ´ØÂç∑„ÄÅKVM Êú¨Âú∞Âç∑\n\nÂàõÂª∫5ÂØπ‰∏Ä‰∏ª‰∏Ä‰ªé8C/16G/75GBÁöÑMYSQLÂÆû‰æãÔºåÂàùÂßãÂàõÂª∫300Âº†Ë°®ÔºåÊØèÂº†Ë°®ÊèíÂÖ•100‰∏áÊù°ÊµãËØïÊï∞ÊçÆÔºåÈÄöËøáSysbentchÊ®°Êãü8„ÄÅ16„ÄÅ32„ÄÅ64„ÄÅ128Á∫øÁ®ãÂπ∂ÂèëÂàÜÂà´ËøõË°åÂè™ËØª„ÄÅÂè™ÂÜôÂíåÊ∑∑ÂêàËØªÂÜôÁöÑÊµãËØïÔºåÊµãËØïÊó∂Èïø180S„ÄÇ \n\n### Âè™ËØªÔºàoltp_read_onlyÔºâ     \n\nUnit: TPS\n\n|    Threads  |  K8S + SLiteIO Local | K8S + SLiteIO Remote | KVM Local |\n|-------------|-------------|----------|----------|\n| 8   | 8441.26       | 8452.56   | 2659.97  |\n| 16  | 9533.01       | 9597.72   | 3478.41  |\n| 32  | 9656.76       | 9625.8    | 4082.99  |\n| 64  | 9843          | 9850      | 4577.7   |\n| 128 | 9623.68       | 9623.37   | 5002.31  |\n\n### Âè™ÂÜôÔºàoltp_write_onlyÔºâ\n\nUnit: TPS\n\n|    Threads  |  K8S + SLiteIO Local | K8S + SLiteIO Remote | KVM Local |\n|-------------|-------------|----------|----------|\n| 8   | 13409.11     | 7926.2   | 8694.35  |\n| 16  | 17677.05     | 12203.34 | 12237.73 |\n| 32  | 20760.74     | 17277.57 | 15532.35 |\n| 64  | 21864.19     | 20428.38 | 17265.81 |\n| 128 | 25056.6      | 24343.81 | 19032.64 |\n\n### ËØªÂÜôÔºàoltp_read_writeÔºâ\n\nUnit: TPS\n\n|    Threads  |  K8S + SLiteIO Local | K8S + SLiteIO Remote | KVM Local |\n|-------------|-------------|----------|----------|\n| 8   | 5159.63     | 4355.29  | 2077.54|\n| 16  | 6115.72     | 5908.65  | 2499.74|\n| 32  | 6339.87     | 6365.55  | 2904.73|\n| 64  | 6861.48     | 6851.73  | 3254.35|\n| 128 | 6997.42     | 6989.52  | 3658.97|\n\nÊÄª‰ΩìÊù•ËØ¥ÔºåMYSQLÂÆπÂô®Âåñ‰ΩøÁî®SLiteIOÂ≠òÂÇ®ÊñπÊ°àÔºåÂú®Âπ∂ÂèëËæÉÈ´òÊó∂ÔºåÊú¨Âú∞Âç∑ÂíåËøúÁ®ãÂç∑ÁöÑÊÄßËÉΩÂá†‰πéÊåÅÂπ≥„ÄÇÂπ∂‰∏îÂÆπÂô®ÂåñÂêéÁöÑÊÄßËÉΩËøúË∂ÖÂá∫ËôöÊãüÂåñÂú∫ÊôØ„ÄÇ\n\n\n## Â∫îÁî®Âú∫ÊôØ\nÂå∫Âà´‰∫é‰º†ÁªüÂàÜÂ∏ÉÂºèÂ≠òÂÇ®ÔºåSliteioÊú¨Ë∫´Ê≤°ÊúâÂÅöÊï∞ÊçÆÂÜó‰ΩôÔºåÂõ†Ê≠§ÈÄÇÁî®‰∫é‰∏öÂä°Êàñ‰∏äÂ±Ç‰∏≠Èó¥‰ª∂Ëá™Ë∫´ÊúâÊï∞ÊçÆÂÜó‰ΩôÊú∫Âà∂ÁöÑÂú∫ÊôØ‰∏ãÔºåÊØîÂ¶ÇÊï∞ÊçÆÂ∫ì„ÄÅÂàÜÂ∏ÉÂºèÁºìÂ≠òÁ≠â„ÄÇSliteioÁâπÂà´ÈÄÇÂêàÂÆπÂô®ÂåñÁöÑÂú∫ÊôØÁöÑÊúâÁä∂ÊÄÅÊúçÂä°ÔºåÈ¢ÑÁÆóÊúâÈôêÈúÄË¶ÅÂà©Êóß‰º†ÁªüÊúçÂä°Âô®ÔºåÂèØ‰ª•ÂÖÖÂàÜÁöÑÂà©Áî®ÂíåÂàÜÈÖçÂ≠òÂÇ®ËµÑÊ∫êÔºåÂπ∂Ëé∑Âæó‰∏çÈîôÁöÑÊÄßËÉΩ„ÄÇ\n\n\n\n## È´òÁ∫ß‰∏ªÈ¢ò\n\n- [ÊûÑÂª∫ÊåáÂçó](doc/zh/build.md)\n- [Êèí‰ª∂ÂÆöÂà∂ÊåáÂçó](doc/zh/plugins.md)\n\n\n## ÂèëÂ±ïË∑ØÁ∫ø\n\n\n## ËÅîÁ≥ªÊàë‰ª¨\n\n**ÈÇÆÁÆ±**Ôºö13515105030@163.com\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:52.191340"
  },
  {
    "basic_info": {
      "name": "go-shirei",
      "full_name": "hasenj/go-shirei",
      "owner": "hasenj",
      "description": "Go based GUI framework: practical, immediate mode, flexbox model",
      "url": "https://github.com/hasenj/go-shirei",
      "clone_url": "https://github.com/hasenj/go-shirei.git",
      "ssh_url": "git@github.com:hasenj/go-shirei.git",
      "homepage": "https://judi.systems/shirei/",
      "created_at": "2025-09-30T04:56:54Z",
      "updated_at": "2025-10-21T01:48:35Z",
      "pushed_at": "2025-10-06T11:18:15Z"
    },
    "stats": {
      "stars": 88,
      "forks": 2,
      "watchers": 88,
      "open_issues": 1,
      "size": 138
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 154677
      },
      "license": "zlib License",
      "topics": [
        "gioui",
        "gui",
        "imgui",
        "immediate-mode"
      ]
    },
    "content": {
      "readme": "shi‚Ä¢rei\n\nGUI framework for utility style programs\n\n* Immediate Mode: describe what the UI looks like each frame\n* Cross Platform: same UI code works on macOS, Linux, and Windows\n* Complex Text: shaping and bidirectional layout\n* Flexbox: containers arrange items horizontally or vertically, with options for\n  padding, gaps, alignment, wrapping, floating, scrolling, and size expansion.\n\nGetting started documentation available at: https://judi.systems/shirei\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-21T02:24:53.302472"
  },
  {
    "basic_info": {
      "name": "yzma",
      "full_name": "hybridgroup/yzma",
      "owner": "hybridgroup",
      "description": "yzma lets you use Go for local inference+embedding with Vision Language Models (VLMs) and Large Language Models (LLMs) using llama.cpp without CGo.",
      "url": "https://github.com/hybridgroup/yzma",
      "clone_url": "https://github.com/hybridgroup/yzma.git",
      "ssh_url": "git@github.com:hybridgroup/yzma.git",
      "homepage": "",
      "created_at": "2025-09-21T17:57:17Z",
      "updated_at": "2025-10-21T00:22:22Z",
      "pushed_at": "2025-10-20T11:56:55Z"
    },
    "stats": {
      "stars": 83,
      "forks": 3,
      "watchers": 83,
      "open_issues": 0,
      "size": 525
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 153648,
        "Shell": 2716
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "# yzma\n\n[![Go Reference](https://pkg.go.dev/badge/github.com/hybridgroup/yzma.svg)](https://pkg.go.dev/github.com/hybridgroup/yzma) [![Linux](https://github.com/hybridgroup/yzma/actions/workflows/linux.yml/badge.svg)](https://github.com/hybridgroup/yzma/actions/workflows/linux.yml) [![macOS](https://github.com/hybridgroup/yzma/actions/workflows/macos.yml/badge.svg)](https://github.com/hybridgroup/yzma/actions/workflows/macos.yml) [![Windows](https://github.com/hybridgroup/yzma/actions/workflows/windows.yml/badge.svg)](https://github.com/hybridgroup/yzma/actions/workflows/windows.yml) ![llama.cpp Release](https://img.shields.io/github/v/release/ggml-org/llama.cpp?label=llama.cpp)\n\n`yzma` lets you use Go for local inference with Vision Language Models (VLMs), Large Language Models (LLMs), Small Language Models (SLMs), and Tiny Language Models (TLMs) using [`llama.cpp`](https://github.com/ggml-org/llama.cpp) libraries all running on your own hardware.\n\nYou can use VLMs and other language models with full hardware acceleration on Linux, on macOS, and on Windows. It uses the [`purego`](https://github.com/ebitengine/purego) and [`ffi`](https://github.com/JupiterRider/ffi) packages so CGo is not needed. This means that `yzma` works with the very latest `llama.cpp` releases.\n\nThis example uses the [SmolLM-135M](https://huggingface.co/QuantFactory/SmolLM-135M-GGUF) model:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/hybridgroup/yzma/pkg/llama\"\n)\n\nvar (\n\tmodelFile            = \"./models/SmolLM-135M.Q2_K.gguf\"\n\tprompt               = \"Are you ready to go?\"\n\tlibPath              = os.Getenv(\"YZMA_LIB\")\n\tresponseLength int32 = 12\n)\n\nfunc main() {\n\tllama.Load(libPath)\n\tllama.Init()\n\n\tmodel := llama.ModelLoadFromFile(modelFile, llama.ModelDefaultParams())\n\tlctx := llama.InitFromModel(model, llama.ContextDefaultParams())\n\n\tvocab := llama.ModelGetVocab(model)\n\n\t// call once to get the size of the tokens from the prompt\n\tcount := llama.Tokenize(vocab, prompt, nil, true, false)\n\n\t// now get the actual tokens\n\ttokens := make([]llama.Token, count)\n\tllama.Tokenize(vocab, prompt, tokens, true, false)\n\n\tbatch := llama.BatchGetOne(tokens)\n\n\tsampler := llama.SamplerChainInit(llama.SamplerChainDefaultParams())\n\tllama.SamplerChainAdd(sampler, llama.SamplerInitGreedy())\n\n\tfor pos := int32(0); pos+batch.NTokens < count+responseLength; pos += batch.NTokens {\n\t\tllama.Decode(lctx, batch)\n\t\ttoken := llama.SamplerSample(sampler, lctx, -1)\n\n\t\tif llama.VocabIsEOG(vocab, token) {\n\t\t\tfmt.Println()\n\t\t\tbreak\n\t\t}\n\n\t\tbuf := make([]byte, 36)\n\t\tlen := llama.TokenToPiece(vocab, token, buf, 0, true)\n\n\t\tfmt.Print(string(buf[:len]))\n\n\t\tbatch = llama.BatchGetOne([]llama.Token{token})\n\t}\n\n\tfmt.Println()\n}\n```\n\nProduces the following output:\n\n```shell\n$ go run ./examples/hello/ 2>/dev/null\n\nThe first thing you need to do is to get your hands on a computer.\n```\n\nWhat's with the `2>/dev/null` at the end? That is the \"easy way\" to suppress the logging from `llama.cpp`.\n\nDidn't get any output? Run it again without the `2>/dev/null` to see any errors.\n\n## Installation\n\nYou will need to download the `llama.cpp` prebuilt libraries for your platform.\n\nSee [INSTALL.md](./INSTALL.md) for detailed information on installation on Linux, macOS, and Windows.\n\n## Examples\n\n### Vision Language Model (VLM) multimodal example\n\nThis example uses the [`Qwen2.5-VL-3B-Instruct-Q8_0`](https://huggingface.co/ggml-org/Qwen2.5-VL-3B-Instruct-GGUF) VLM model to process both a text prompt and an image, then displays the result.\n\n```shell\n$ go run ./examples/vlm/ -model ./models/Qwen2.5-VL-3B-Instruct-Q8_0.gguf -mmproj ./models/mmproj-Qwen2.5-VL-3B-Instruct-Q8_0.gguf -image ./images/domestic_llama.jpg -p \"What is in this picture?\" 2>/dev/null\n\nLoading model ./models/Qwen2.5-VL-3B-Instruct-Q8_0.gguf\nencoding image slice...\nimage slice encoded in 966 ms\ndecoding image batch 1/1, n_tokens_batch = 910\nimage decoded (batch 1/1) in 208 ms\n\nThe picture shows a white llama standing in a fenced-in area, possibly a zoo or a wildlife park. The llama is the main focus of the image, and it appears to be looking to the right. The background features a grassy area with trees and a fence, and there are some vehicles visible in the distance.\n```\n\n[See the code here](./examples/vlm/main.go).\n\n### Small Language Model (SLM) interactive chat example\n\nYou can use `yzma` to do inference on text language models. This example uses the [`qwen2.5-0.5b-instruct-fp16.gguf `](https://huggingface.co/Qwen/Qwen2.5-0.5B-Instruct-GGUF) model for an interactive chat session.\n\n```shell\n$ go run ./examples/chat/ -model ./models/qwen2.5-0.5b-instruct-fp16.gguf\nEnter prompt: Are you ready to go?\n\nYes, I'm ready to go! What would you like to do?\n\nEnter prompt: Let's go to the zoo\n\n\nGreat! Let's go to the zoo. What would you like to see?\n\nEnter prompt: I want to feed the llama \n\n\nSure! Let's go to the zoo and feed the llama. What kind of llama are you interested in feeding?\n```\n\n[See the code here](./examples/chat/m",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:54.424860"
  },
  {
    "basic_info": {
      "name": "upgradelink",
      "full_name": "toolsetlink/upgradelink",
      "owner": "toolsetlink",
      "description": "UpgradeLink - application upgrade platform, Supports android tauri electron",
      "url": "https://github.com/toolsetlink/upgradelink",
      "clone_url": "https://github.com/toolsetlink/upgradelink.git",
      "ssh_url": "git@github.com:toolsetlink/upgradelink.git",
      "homepage": "https://www.toolsetlink.com/",
      "created_at": "2025-09-23T02:58:38Z",
      "updated_at": "2025-10-21T02:19:20Z",
      "pushed_at": "2025-10-21T02:19:16Z"
    },
    "stats": {
      "stars": 80,
      "forks": 5,
      "watchers": 80,
      "open_issues": 12,
      "size": 236513
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 1799306,
        "Vue": 1344457,
        "TypeScript": 991841,
        "PLpgSQL": 309476,
        "CSS": 38831,
        "Shell": 26379,
        "Makefile": 20553,
        "Dockerfile": 15991,
        "JavaScript": 10589,
        "HTML": 4830,
        "PHP": 3363,
        "SCSS": 2417
      },
      "license": "Apache License 2.0",
      "topics": [
        "android",
        "electron",
        "golang",
        "tauri",
        "update",
        "upgrade"
      ]
    },
    "content": {
      "readme": "# Upgradelink\n\n![](https://img.shields.io/badge/free-pricing?logo=free&color=%20%23155EEF&label=pricing&labelColor=%20%23528bff)\n[![GitHub Repo stars](https://img.shields.io/github/stars/toolsetlink/upgradelink)](https://github.com/toolsetlink/upgradelink)\n![](https://github.com/toolsetlink/upgradelink/actions/workflows/release.yml/badge.svg?branch=release)\n![star](https://gitcode.com/toolsetlink/upgradelink/star/badge.svg)\n![star](https://gitee.com/toolsetlink/upgradelink/badge/star.svg)\n\n## Language\n\n- [English](README.md)\n- [‰∏≠Êñá](README_zh.md)\n\n## What is it\nUpgradeLink is a **full-platform supported application upgrade system and application distribution platform** that provides one-stop application upgrade and distribution solutions. Whether you develop ‚Äã‚ÄãAndroid native, Tauri lightweight cross-platform, or Electron desktop applications, you can use UpgradeLink to implement unified upgrade logic.\n\nCore values include:\n- Effectively lowering technical barriers\n- Reducing R&D costs\n- Helping businesses quickly build stable and high-quality applications\n\n# Introduction\n\n## 1. Full-platform Application Upgrade Support\nCovers mainstream application development frameworks/systems and provides targeted upgrade capabilities:\n\n| Supported Type | Core Function Description |\n|-------------|---------------------------------------|\n| Android App Upgrade | Supports APK file upload and management, provides dedicated upgrade strategies for application updates |\n| Tauri App Upgrade | Fully compatible with Tauri official upgrade component interface, provides standardized upgrade strategies and process management |\n| Electron Upgrade | Fully compatible with Electron official upgrade component interface, provides standardized upgrade strategies and process management |\n\n\n## 2. Core Functional Modules\n\n#### Enterprise-level Security Protection (üîê)\n- API services have multiple built-in security mechanisms, adopting technologies such as **signature verification, anti-replay attacks, and request frequency limiting**\n- Ensuring zero risks during the application upgrade process\n#### Out-of-the-box API-SDK (üì¶)\n| [Go](https://github.com/toolsetlink/upgradelink-api-go) \n| [Java](https://github.com/toolsetlink/upgradelink-api-java) \n| [Python](https://github.com/toolsetlink/upgradelink-api-python) \n| [Dart](https://github.com/toolsetlink/upgradelink-api-dart) \n| [Android](https://github.com/toolsetlink/upgradelink-api-android) \n| [TypeScript](https://github.com/toolsetlink/upgradelink-api-ts) |\n\n- Supports mainstream development languages: Go, Java, Python, Dart, Android, TypeScript\n- Advantage: Provides convenient SDK integration methods to help quickly implement application upgrade functions\n#### Flexible Upgrade Strategies (üìÅ)\n- Supported dimensions: devices, models, etc.\n- Management method: Accurate management of upgrade package distribution through the visual console\n\n\n# Quick Start in Just 4 Steps.\n\n### 1. Environment Preparation\nYou need to install [Docker](https://www.docker.com/).\n### 2. Download the Project\n#### 2.1\nDownload from GitHub\n```shell\ngit clone https://github.com/toolsetlink/upgradelink.git\n```\nDownload from GitCode\n```shell\ngit clone https://gitcode.com/toolsetlink/upgradelink.git\n```\n\n### 3. Enter the Project and Start mysql and redis in the development Directory\n> Note: If you have independent mysql and redis environments, refer to the self-build documentation.\n\n#### 3.1 Start mysql\n\n```shell\ncd upgradelink/development/mysql-8.4.3\n```\n\n```shell\ndocker-compose up -d\n```\n\n\n#### 3.2 Start redis\n\n```shell\ncd upgradelink/development/redis-6.0.20\n```\n\n```shell\ndocker-compose up -d\n```\n\n### 4. Start UpgradeLink\n\nWhen executing the command for the first time, the required Docker images will be automatically downloaded. The waiting time depends on the network speed. You can also download the relevant images in advance to shorten the waiting time for deployment commands.\n\n```shell\ndocker run -d --add-host=host.docker.internal:host-gateway -p 8081:8080 -p 8888:8888 toolsetlink/upgradelink-standalone:v2.0.6\n```\n\n## Other Quick Start Methods:\n- [Standalone build documentation](https://www.toolsetlink.com/upgrade/deploy/quick-start-docker2.html)\n- [docker-compose quick start documentation](https://www.toolsetlink.com/upgrade/deploy/docker-compose.html)\n- [Clustered deployment](https://www.toolsetlink.com/upgrade/deploy/cluster-docker.html)\n\n\n# Documentation\nYou can view the complete documentation from the [UpgradeLink](https://www.toolsetlink.com/upgrade/) website.\n\nAll latest and long-term notifications can also be found here [UpgradeLink Notification Issues](https://github.com/toolsetlink/upgradelink/issues).\n\n# Contribution\nContributors are welcome to join the UpgradeLink project. Please [join the group](https://www.toolsetlink.com/upgrade/communication-group.html) to learn how to contribute to this project.\n\n> This project is developed based on [Go Zero](https://go-zero.dev/) and [simple-admin](https://doc.ryansu.tech",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-21T02:24:55.552919"
  }
]