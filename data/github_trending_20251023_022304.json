[
  {
    "basic_info": {
      "name": "openai-apps-sdk-examples",
      "full_name": "openai/openai-apps-sdk-examples",
      "owner": "openai",
      "description": "Example apps for the Apps SDK",
      "url": "https://github.com/openai/openai-apps-sdk-examples",
      "clone_url": "https://github.com/openai/openai-apps-sdk-examples.git",
      "ssh_url": "org-14957082@github.com:openai/openai-apps-sdk-examples.git",
      "homepage": null,
      "created_at": "2025-10-06T05:28:01Z",
      "updated_at": "2025-10-23T02:06:16Z",
      "pushed_at": "2025-10-17T17:25:23Z"
    },
    "stats": {
      "stars": 1528,
      "forks": 258,
      "watchers": 1528,
      "open_issues": 36,
      "size": 84
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 90170,
        "CSS": 64226,
        "TypeScript": 28497,
        "Python": 18700
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Apps SDK Examples Gallery\n\n[![MIT License](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)\n\nThis repository showcases example UI components to be used with the Apps SDK, as well as example MCP servers that expose a collection of components as tools.\nIt is meant to be used as a starting point and source of inspiration to build your own apps for ChatGPT.\n\n## MCP + Apps SDK overview\n\nThe Model Context Protocol (MCP) is an open specification for connecting large language model clients to external tools, data, and user interfaces. An MCP server exposes tools that a model can call during a conversation and returns results according to the tool contracts. Those results can include extra metadata—such as inline HTML—that the Apps SDK uses to render rich UI components (widgets) alongside assistant messages.\n\nWithin the Apps SDK, MCP keeps the server, model, and UI in sync. By standardizing the wire format, authentication, and metadata, it lets ChatGPT reason about your connector the same way it reasons about built-in tools. A minimal MCP integration for Apps SDK implements three capabilities:\n\n1. **List tools** – Your server advertises the tools it supports, including their JSON Schema input/output contracts and optional annotations (for example, `readOnlyHint`).\n2. **Call tools** – When a model selects a tool, it issues a `call_tool` request with arguments that match the user intent. Your server executes the action and returns structured content the model can parse.\n3. **Return widgets** – Alongside structured content, return embedded resources in the response metadata so the Apps SDK can render the interface inline in the Apps SDK client (ChatGPT).\n\nBecause the protocol is transport agnostic, you can host the server over Server-Sent Events or streaming HTTP—Apps SDK supports both.\n\nThe MCP servers in this demo highlight how each tool can light up widgets by combining structured payloads with `_meta.openai/outputTemplate` metadata returned from the MCP servers.\n\n## Repository structure\n\n- `src/` – Source for each widget example.\n- `assets/` – Generated HTML, JS, and CSS bundles after running the build step.\n- `pizzaz_server_node/` – MCP server implemented with the official TypeScript SDK.\n- `pizzaz_server_python/` – Python MCP server that returns the Pizzaz widgets.\n- `solar-system_server_python/` – Python MCP server for the 3D solar system widget.\n- `build-all.mts` – Vite build orchestrator that produces hashed bundles for every widget entrypoint.\n\n## Prerequisites\n\n- Node.js 18+\n- pnpm (recommended) or npm/yarn\n- Python 3.10+ (for the Python MCP server)\n\n## Install dependencies\n\nClone the repository and install the workspace dependencies:\n\n```bash\npnpm install\n```\n\n> Using npm or yarn? Install the root dependencies with your preferred client and adjust the commands below accordingly.\n\n## Build the components gallery\n\nThe components are bundled into standalone assets that the MCP servers serve as reusable UI resources.\n\n```bash\npnpm run build\n```\n\nThis command runs `build-all.mts`, producing versioned `.html`, `.js`, and `.css` files inside `assets/`. Each widget is wrapped with the CSS it needs so you can host the bundles directly or ship them with your own server.\n\nTo iterate on your components locally, you can also launch the Vite dev server:\n\n```bash\npnpm run dev\n```\n\n## Serve the static assets\n\nIf you want to preview the generated bundles without the MCP servers, start the static file server after running a build:\n\n```bash\npnpm run serve\n```\n\nThe assets are exposed at [`http://localhost:4444`](http://localhost:4444) with CORS enabled so that local tooling (including MCP inspectors) can fetch them.\n\n## Run the MCP servers\n\nThe repository ships several demo MCP servers that highlight different widget bundles:\n\n- **Pizzaz (Node & Python)** – pizza-inspired collection of tools and components\n- **Solar system (Python)** – 3D solar system viewer\n\nEvery tool response includes plain text content, structured JSON, and `_meta.openai/outputTemplate` metadata so the Apps SDK can hydrate the matching widget.\n\n### Pizzaz Node server\n\n```bash\ncd pizzaz_server_node\npnpm start\n```\n\n### Pizzaz Python server\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\npip install -r pizzaz_server_python/requirements.txt\nuvicorn pizzaz_server_python.main:app --port 8000\n```\n\n### Solar system Python server\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\npip install -r solar-system_server_python/requirements.txt\nuvicorn solar-system_server_python.main:app --port 8000\n```\n\nYou can reuse the same virtual environment for all Python servers—install the dependencies once and run whichever entry point you need.\n\n## Testing in ChatGPT\n\nTo add these apps to ChatGPT, enable [developer mode](https://platform.openai.com/docs/guides/developer-mode), and add your apps in Settings > Connectors.\n\nTo add your local server without deploying it, you can use a tool like [ngrok](https://ngrok.com/) to expose your local server to th",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:05.509072"
  },
  {
    "basic_info": {
      "name": "NCE",
      "full_name": "iChochy/NCE",
      "owner": "iChochy",
      "description": "《新概念英语》全四册在线课文朗读、单句点读",
      "url": "https://github.com/iChochy/NCE",
      "clone_url": "https://github.com/iChochy/NCE.git",
      "ssh_url": "git@github.com:iChochy/NCE.git",
      "homepage": "https://nce.ichochy.com/",
      "created_at": "2025-09-24T05:55:42Z",
      "updated_at": "2025-10-22T20:36:47Z",
      "pushed_at": "2025-10-22T10:54:50Z"
    },
    "stats": {
      "stars": 1260,
      "forks": 264,
      "watchers": 1260,
      "open_issues": 2,
      "size": 598464
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 8459,
        "CSS": 7151,
        "HTML": 6168
      },
      "license": "MIT License",
      "topics": [
        "english",
        "learn",
        "nce"
      ]
    },
    "content": {
      "readme": "# 新概念英语-全四册\n## New Concept English\n### 在线课文点读\n在线课文朗读，单句点读，随时随地在线学习。  \n\nDemo：[http://nce.ichochy.com](http://nce.ichochy.com)  \n\n--- \n\n## 信息\nBlog：[http://ichochy.com](http://ichochy.com)  \n资源：https://github.com/tangx/New-Concept-English  \n\n---\n\n## 📕 第一册：《First Things First》\n\n**目标：打基础，日常交流入门**\n\n* **内容概述**：\n\n  * 共144课，都是非常短的小对话和故事。\n  * 涉及**字母、音标、基础词汇、简单句型**。\n  * 场景包括：问候、介绍、买东西、问路、看医生、日常生活。\n* **语法重点**：\n\n  * 一般现在时、一般过去时、一般将来时的基本用法。\n  * be动词、名词单复数、冠词、简单疑问句、祈使句。\n* **词汇量**：约600词左右。\n* **学习重点**：\n\n  * 正确发音、掌握基础语法、能听懂并说出日常用语。\n* **适合人群**：\n\n  * 英语零基础到初级学习者。\n  * 需要建立语感，能开口说简单英文。\n\n---\n\n## 📘 第二册：《Practice and Progress》\n\n**目标：初步运用，听说读写同步提高**\n\n* **内容概述**：\n\n  * 共96课，每课一个短故事，逐渐增加难度。\n  * 情节有趣，加入了旅行、工作、社会生活的情景。\n* **语法重点**：\n\n  * 各种时态（现在完成时、过去完成时、将来时、过去进行时）。\n  * 被动语态、直接引语和间接引语、条件句、比较级和最高级。\n* **词汇量**：约1500词左右。\n* **学习重点**：\n\n  * 掌握基本语法体系，能写简单短文，能听懂慢速英语。\n  * 口语表达更流畅，能描述事件、讲故事。\n* **适合人群**：\n\n  * 有一定英语基础，想系统梳理语法、提高读写能力的人。\n\n---\n\n## 📙 第三册：《Developing Skills》\n\n**目标：语言运用能力进阶，理解真实语境**\n\n* **内容概述**：\n\n  * 共60课，每课一篇短文，题材更丰富（科技、历史、人物、故事）。\n  * 文章更长，句子更复杂，阅读量明显加大。\n* **语法重点**：\n\n  * 虚拟语气、各种复杂从句（定语从句、状语从句、名词性从句）。\n  * 非谓语动词（动词不定式、分词、动名词）的高级用法。\n* **词汇量**：约2500词左右。\n* **学习重点**：\n\n  * 阅读理解能力，扩大词汇量，掌握地道表达。\n  * 能复述文章、用英语讨论话题、写中等长度的文章。\n* **适合人群**：\n\n  * 已学完第二册，想提高综合能力、能读懂原版书或新闻的人。\n\n---\n\n## 📗 第四册：《Fluency in English》\n\n**目标：流利表达，学术/专业阅读能力**\n\n* **内容概述**：\n\n  * 共48课，每课一篇较长的文章，题材涵盖哲学、科学、艺术、历史。\n  * 语言地道、表达严谨，接近大学英语阅读难度。\n* **语法重点**：\n\n  * 巩固所有语法，重点是复杂结构、修辞、长难句分析。\n* **词汇量**：约3500-4000词。\n* **学习重点**：\n\n  * 提高逻辑思维和批判性阅读能力。\n  * 能写较长文章、报告，口语表达接近流利。\n* **适合人群**：\n\n  * 已有较强英语基础，想进一步提升到高级水平的人。\n  * 考研、雅思、托福备考的学习者。\n\n---\n\n## 🎯 总体学习路径建议\n\n1. **第一册**：打好语音、语法和口语基础。\n2. **第二册**：建立完整语法体系，提升听说读写的基本能力。\n3. **第三册**：重点在阅读、词汇和句型复杂度，培养复述和写作能力。\n4. **第四册**：进入英语原著阅读和学术表达层面，达到准母语水平。\n\n\n---\n\n## 版权声明\n本网站的内容仅限个人学习、研究或欣赏之用，非商业用途。\n\n内容源于互联网，我们不对内容的版权归属承担任何责任。  \n如您认为本网站上的任何内容侵犯了您的著作权或其他合法权益，请通过以下联系方式通知我们。    \n联系邮箱：me@ichochy.com。   \n我们将在收到有效通知后尽快核实并采取相应措施（如删除相关内容）。  \n\n为尊重和保护著作权人的合法权益，请您支持正版，购买合法授权的教材或资源，避免使用未经授权的内容。  \n\n本声明适用于本网站的所有内容，感谢您的理解与配合。\n\n---\n\n## 最后\n>大量的学习，大量的研究  \n>不断地重复，不断的实践  \n>从而建立起自己稳定的内核  \n>在克服逆境的过程中爱上自己  \n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:06.649949"
  },
  {
    "basic_info": {
      "name": "NCE-Flow",
      "full_name": "luzhenhua/NCE-Flow",
      "owner": "luzhenhua",
      "description": "新概念英语在线点读，点句即读、连续播放，支持 EN / EN+CN / CN。",
      "url": "https://github.com/luzhenhua/NCE-Flow",
      "clone_url": "https://github.com/luzhenhua/NCE-Flow.git",
      "ssh_url": "git@github.com:luzhenhua/NCE-Flow.git",
      "homepage": "https://nce.luzhenhua.cn",
      "created_at": "2025-10-07T06:14:22Z",
      "updated_at": "2025-10-23T02:11:36Z",
      "pushed_at": "2025-10-20T13:13:48Z"
    },
    "stats": {
      "stars": 963,
      "forks": 178,
      "watchers": 963,
      "open_issues": 4,
      "size": 597659
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 47345,
        "HTML": 22067,
        "CSS": 18400,
        "Shell": 1929,
        "Dockerfile": 1280
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# NCE Flow\n\n**新概念英语在线点读，点句即读、连续播放**\n\n[![GitHub stars](https://img.shields.io/github/stars/luzhenhua/NCE-Flow?style=social)](https://github.com/luzhenhua/NCE-Flow)\n[![GitHub forks](https://img.shields.io/github/forks/luzhenhua/NCE-Flow?style=social)](https://github.com/luzhenhua/NCE-Flow)\n[![GitHub release](https://img.shields.io/github/release/luzhenhua/NCE-Flow)](https://github.com/luzhenhua/NCE-Flow/releases)\n[![License](https://img.shields.io/github/license/luzhenhua/NCE-Flow)](LICENSE)\n\n**在线体验**: https://nce.luzhenhua.cn | **下载完整版**: [Releases](https://github.com/luzhenhua/NCE-Flow/releases)\n\n## 核心功能\n\n- **句子级点读**：点击任意句子开始播放，自动高亮跟随\n- **多语言视图**：EN / EN+CN / CN 三种显示模式\n- **播放控制**：倍速调节、连读/点读切换、循环模式、断点续播\n- **全局快捷键**：空格播放/暂停、方向键导航、音量控制\n- **学习管理**：课程收藏、学习记录、进度追踪\n- **现代界面**：Apple 风格、深浅色主题、响应式设计\n- **零依赖**：纯静态文件，解压即用\n\n## 快速开始\n\n### 方式一：Docker 一键部署（最简单）\n\n只需一条命令，无需下载代码：\n\n```bash\ndocker run -d -p 8080:80 --name nce-flow --restart unless-stopped luzhenhua/nce-flow:latest\n```\n\n然后访问 `http://localhost:8080` 即可！\n\n**自定义端口：**\n```bash\ndocker run -d -p 3000:80 --name nce-flow --restart unless-stopped luzhenhua/nce-flow:latest\n```\n\n详细的 Docker 部署说明请查看 [DOCKER.md](DOCKER.md)\n\n### 方式二：Docker Compose 部署\n\n适合需要自定义配置的场景：\n\n```bash\n# 克隆项目\ngit clone https://github.com/luzhenhua/NCE-Flow.git\ncd NCE-Flow\n\n# 启动服务\ndocker-compose up -d\n\n# 访问 http://localhost:8080\n```\n\n### 方式三：本地开发服务器\n\n1. **下载完整版**：[访问 Releases 页面](https://github.com/luzhenhua/NCE-Flow/releases)\n2. 解压后启动本地服务器：\n\n   **方法一：使用Python**\n   ```bash\n   # 在解压后的文件夹中打开终端，运行：\n   python -m http.server 8000\n   # 然后访问：http://localhost:8000\n   ```\n\n   **方法二：使用Node.js**\n   ```bash\n   # 在解压后的文件夹中运行：\n   npx serve .\n   # 然后访问显示的本地地址\n   ```\n\n   **方法三：使用VSCode的Live Server插件**\n   - 安装Live Server插件\n   - 右键点击 `index.html`，选择\"Open with Live Server\"\n\n3. 在浏览器中打开显示的本地地址，开始学习！\n\n**注意**：不能直接双击 `index.html` 文件，会因为浏览器安全策略导致无法加载数据文件。\n\n## 项目结构\n\n```\nNCE-Flow/\n├── assets/          # 样式与脚本\n├── static/          # 课程数据\n├── NCE1~NCE4/       # 四册音频和字幕\n├── index.html       # 首页\n├── lesson.html      # 课文页\n└── README.md        # 说明文档\n```\n\n## 版本历史\n\n查看完整更新日志：[Releases](https://github.com/luzhenhua/NCE-Flow/releases)\n\n### 最新版本\n\n- **v1.3.3** (2025-10-20)：返回按钮修复 - 修复课程页面返回按钮行为\n- **v1.3.2** (2025-10-19)：UI 增强与问题修复 - 快捷键面板优化、版本号显示、面板切换修复\n- **v1.3.1** (2025-10-19)：布局优化 - 修复课程导航按钮布局问题\n- **v1.3.0** (2025-10-19)：循环模式支持 - 新增单句循环和整篇循环功能\n- **v1.2.0** (2025-10-19)：全局快捷键支持 - 空格键、方向键、音量控制等快捷操作\n- **v1.1.4** (2025-10-18)：Docker 部署支持 - 一键部署，更便捷的使用方式\n- **v1.1.3** (2025-10-18)：稳定性改进 - Bug 修复和代码优化\n- **v1.1.1** (2025-10-17)：播放逻辑优化 - iOS Safari 兼容性增强\n- **v1.1.0** (2025-10-17)：UI 优化与自动跳转 - 自动续播下一课功能\n- **v1.0.0** (2025-10-11)：完整版发布 - 包含全部四册内容和音频文件\n\n## 免责声明\n\n**重要声明：本项目的内容仅限个人学习、研究或欣赏之用，完全没有丝毫商业用途。**\n\n- 本项目仅作为辅助正版新概念英语教材的学习工具\n- 音频与文本内容的版权归原著作权人所有\n- 严禁用于任何商业目的或未经授权的传播\n- 使用本项目即表示您同意上述条款\n\n### 支持正版\n\n本人在学习过程中使用的是正版新概念英语教材。为了帮助同样热爱新概念英语的广大英语学习者受益，特开发此辅助学习工具。\n\n**为保护著作权人的权益，请在使用本站前购买正版教材：**\n\n- 购买合法授权的新概念英语正版教材\n- 使用官方授权的学习资源和平台\n- 支持原创作者和教育出版社\n- 本项目仅作为正版教材的补充学习工具\n\n欢迎著作权人对本项目批评指导。如有任何版权问题或影响到您的合法权益，请联系：luzhenhuadev@qq.com，我们将立即处理。\n\n## 致谢\n\n感谢以下项目和个人的贡献：\n\n- **[@reaishijie](https://github.com/reaishijie)** - 提交了 [PR #3](https://github.com/luzhenhua/NCE-Flow/pull/3)，为课文页面增加了播放速度控制按钮及播放速度持久化功能\n- **[@iChochy](https://github.com/iChochy)** - [NCE 项目](https://github.com/iChochy/NCE/) 整理和提供了完整的新概念英语学习资料，包括封面图片、MP3 音频文件和 LRC 字幕文件，为本项目提供了宝贵的基础资源\n\n感谢所有为本项目点赞、提出建议和反馈的朋友们！\n\n## 许可证\n\n[MIT License](LICENSE)\n\n---\n\n如果这个项目对你有帮助，请给个 Star ⭐ 支持一下！\n\n你也可以通过 [爱发电](https://afdian.com/a/luzhenhua) ☕ 请我喝杯咖啡\n\nMade with ❤️ by [Luzhenhua](https://luzhenhua.cn)\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:07.786768"
  },
  {
    "basic_info": {
      "name": "gpu-hot",
      "full_name": "psalias2006/gpu-hot",
      "owner": "psalias2006",
      "description": "🔥 Real-time NVIDIA GPU dashboard",
      "url": "https://github.com/psalias2006/gpu-hot",
      "clone_url": "https://github.com/psalias2006/gpu-hot.git",
      "ssh_url": "git@github.com:psalias2006/gpu-hot.git",
      "homepage": "https://psalias2006.github.io/gpu-hot/",
      "created_at": "2025-10-05T11:48:17Z",
      "updated_at": "2025-10-23T01:23:01Z",
      "pushed_at": "2025-10-20T12:06:59Z"
    },
    "stats": {
      "stars": 681,
      "forks": 38,
      "watchers": 681,
      "open_issues": 2,
      "size": 72496
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 126477,
        "Python": 62889,
        "CSS": 26990,
        "HTML": 3540,
        "Dockerfile": 784
      },
      "license": "MIT License",
      "topics": [
        "charts",
        "cuda",
        "dashboard",
        "devops",
        "docker",
        "flask",
        "gpu",
        "gpu-monitoring",
        "llm",
        "mlops",
        "nvidia",
        "nvidia-docker",
        "nvidia-smi",
        "python",
        "real-time",
        "real-time-monitoring",
        "system-monitoring"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n\n# GPU Hot\n\nReal-time NVIDIA GPU monitoring dashboard. Web-based, no SSH required.\n\n[![Python](https://img.shields.io/badge/Python-3.8+-3776AB?style=flat-square&logo=python&logoColor=white)](https://www.python.org/)\n[![Docker](https://img.shields.io/badge/Docker-Ready-2496ED?style=flat-square&logo=docker&logoColor=white)](https://www.docker.com/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)\n[![NVIDIA](https://img.shields.io/badge/NVIDIA-GPU-76B900?style=flat-square&logo=nvidia&logoColor=white)](https://www.nvidia.com/)\n\n<img src=\"gpu-hot.png\" alt=\"GPU Hot Dashboard\" width=\"800\" />\n\n</div>\n\n---\n\n## Usage\n\nMonitor a single machine or an entire cluster with the same Docker image.\n\n**Single machine:**\n```bash\ndocker run -d --gpus all -p 1312:1312 ghcr.io/psalias2006/gpu-hot:latest\n```\n\n**Multiple machines:**\n```bash\n# On each GPU server\ndocker run -d --gpus all -p 1312:1312 -e NODE_NAME=$(hostname) ghcr.io/psalias2006/gpu-hot:latest\n\n# On a hub machine (no GPU required)\ndocker run -d -p 1312:1312 -e GPU_HOT_MODE=hub -e NODE_URLS=http://server1:1312,http://server2:1312,http://server3:1312 ghcr.io/psalias2006/gpu-hot:latest\n```\n\nOpen `http://localhost:1312`\n\n**Older GPUs:** Add `-e NVIDIA_SMI=true` if metrics don't appear.\n\n**Process monitoring:** Add `--init --pid=host` to see process names. Note: This allows the container to access host process information.\n\n**From source:**\n```bash\ngit clone https://github.com/psalias2006/gpu-hot\ncd gpu-hot\ndocker-compose up --build\n```\n\n**Requirements:** Docker + [NVIDIA Container Toolkit](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/latest/install-guide.html)\n\n---\n\n## Features\n\n- Real-time metrics (sub-second)\n- Automatic multi-GPU detection\n- Process monitoring (PID, memory usage)\n- Historical charts (utilization, temperature, power, clocks)\n- System metrics (CPU, RAM)\n- Scale from 1 to 100+ GPUs\n\n**Metrics:** Utilization, temperature, memory, power draw, fan speed, clock speeds, PCIe info, P-State, throttle status, encoder/decoder sessions\n\n---\n\n## Configuration\n\n**Environment variables:**\n```bash\nNVIDIA_VISIBLE_DEVICES=0,1     # Specific GPUs (default: all)\nNVIDIA_SMI=true                # Force nvidia-smi mode for older GPUs\nGPU_HOT_MODE=hub               # Set to 'hub' for multi-node aggregation (default: single node)\nNODE_NAME=gpu-server-1         # Node display name (default: hostname)\nNODE_URLS=http://host:1312...  # Comma-separated node URLs (required for hub mode)\n```\n\n**Backend (`core/config.py`):**\n```python\nUPDATE_INTERVAL = 0.5  # Polling interval\nPORT = 1312            # Server port\n```\n\n---\n\n## API\n\n### HTTP\n```bash\nGET /              # Dashboard\nGET /api/gpu-data  # JSON metrics\n```\n\n### WebSocket\n```javascript\nsocket.on('gpu_data', (data) => {\n  // Updates every 0.5s (configurable)\n  // Contains: data.gpus, data.processes, data.system\n});\n```\n---\n\n## Project Structure\n\n```bash\ngpu-hot/\n├── app.py                      # Flask + WebSocket server\n├── core/\n│   ├── config.py               # Configuration\n│   ├── monitor.py              # NVML GPU monitoring\n│   ├── handlers.py             # WebSocket handlers\n│   ├── routes.py               # HTTP routes\n│   └── metrics/\n│       ├── collector.py        # Metrics collection\n│       └── utils.py            # Metric utilities\n├── static/\n│   ├── js/\n│   │   ├── charts.js           # Chart configs\n│   │   ├── gpu-cards.js        # UI components\n│   │   ├── socket-handlers.js  # WebSocket + rendering\n│   │   ├── ui.js               # View management\n│   │   └── app.js              # Init\n│   └── css/styles.css\n├── templates/index.html\n├── Dockerfile\n└── docker-compose.yml\n```\n\n---\n\n## Troubleshooting\n\n**No GPUs detected:**\n```bash\nnvidia-smi  # Verify drivers work\ndocker run --rm --gpus all nvidia/cuda:12.1.0-base-ubuntu22.04 nvidia-smi  # Test Docker GPU access\n```\n\n**Hub can't connect to nodes:**\n```bash\ncurl http://node-ip:1312/api/gpu-data  # Test connectivity\nsudo ufw allow 1312/tcp                # Check firewall\n```\n\n**Performance issues:** Increase `UPDATE_INTERVAL` in `core/config.py`\n\n---\n\n## Contributing\n\nPRs welcome. Open an issue for major changes.\n\n## License\n\nMIT - see [LICENSE](LICENSE)\n  \n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:08.926960"
  },
  {
    "basic_info": {
      "name": "Solara",
      "full_name": "akudamatata/Solara",
      "owner": "akudamatata",
      "description": "一个极简风格的基于免费API的音乐播放器",
      "url": "https://github.com/akudamatata/Solara",
      "clone_url": "https://github.com/akudamatata/Solara.git",
      "ssh_url": "git@github.com:akudamatata/Solara.git",
      "homepage": "",
      "created_at": "2025-10-05T05:52:26Z",
      "updated_at": "2025-10-23T02:02:34Z",
      "pushed_at": "2025-10-21T02:56:01Z"
    },
    "stats": {
      "stars": 530,
      "forks": 1569,
      "watchers": 530,
      "open_issues": 0,
      "size": 30570
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 150835,
        "CSS": 62426,
        "TypeScript": 16951,
        "HTML": 16450
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# 🎶 Solara（光域）\n\n> 🌐 由轻量后端服务支撑的现代化网页音乐播放器，整合多种音乐聚合接口，覆盖搜索、播放、歌词同步与音频下载全流程。\n\n![Review-ezgif com-optimize](https://github.com/user-attachments/assets/487157de-bf71-4bc9-9e49-16a4f0a14472)\n| | | |\n|:--:|:--:|:--:|\n| <img src=\"https://github.com/user-attachments/assets/54d1ed31-da1d-427f-ad11-66a26788c838\" height=\"700\"/> | <img src=\"https://github.com/user-attachments/assets/bb092569-0a7f-47f6-b7e9-c07ea56949cf\" height=\"700\"/> | <img src=\"https://github.com/user-attachments/assets/02b830e3-292f-4880-91f2-86ec818b877a\" height=\"700\"/> |\n\n\n## 🤝 参与贡献\n感谢 GD音乐台(music.gdstudio.xyz)提供的免费API\n\n感谢 来自Linux.do 牛就是牛@ufoo 大佬 https://linux.do/t/topic/942415提供的灵感\n\n\n## 🌟 主要特性\n\n- 🔍 跨站曲库检索：一键切换数据源，支持分页浏览并批量导入播放队列。\n- 📻 队列管理灵活：新增、删除、清空操作即时生效，并自动持久化到浏览器 localStorage。\n- 🔁 丰富的播放模式：列表循环、单曲循环与随机播放随手切换，记忆上次偏好。\n- 📱 竖屏移动端：全新竖屏布局匹配移动端手势与屏幕比例，按钮、列表与歌词均针对单手操作优化。\n- 📝 动态歌词视图：逐行滚动高亮，当前行自动聚焦，手动滚动后短暂锁定视图。\n- 📥 多码率下载：可挑选 128K / 192K / 320K / FLAC 等品质并直接获取音频文件。\n- 📤 播放列表导入导出：一键导出当前队列或导入备份的播放列表，快速迁移到其他设备。\n- ☁️ 轻量后端代理：通过 Cloudflare Pages Functions 统一聚合各数据源并处理音频跨域，摆脱浏览器直接访问的限制。\n- 🎨 主题美学：内置亮/暗模式与玻璃拟态界面，桌面与移动端均具备沉浸体验。\n- 📱 竖屏移动端：全新竖屏布局匹配移动端手势与屏幕比例，按钮、列表与歌词均针对单手操作优化。\n- 🖼️ 沉浸式背景：根据当前曲目封面自动取色，实时渲染模糊背景，氛围与音乐保持一致。\n- 🌊 青绿基调：参考 Emby 等播放器打造统一青绿色视觉体系。\n- 🔒 锁屏播放控制：锁屏界面自动显示专辑封面与播放控件，无需解锁即可进行播放控制。\n- 🛠️ 调试控制台：按下 Ctrl + D 呼出实时日志面板，便于排查接口或交互异常。\n\n## 🚀 快速上手\n> ⚠️ 项目完全依赖 Cloudflare Pages Functions，目前仅支持部署到 Cloudflare Pages 环境运行。\n1. Fork 或克隆本仓库。\n2. ☁️ 按照 Cloudflare Pages 文档创建站点，并将本仓库作为构建来源或直接上传静态资源。\n3. 🚀 部署完成后，通过 Cloudflare Pages 分配的域名访问站点即可体验播放器。\n\n## ⚙️ 配置提示\n- 🔗 API 基地址定义在 index.html 中的 `API.baseUrl`（约 1300 行），可替换为自建接口域名。\n- 🎚️ 默认主题、播放模式等偏好可在 `state` 初始化逻辑中按需调整。\n\n## 🔐 访问控制建议\n- 若希望为站点加密访问，可在 Cloudflare Pages 站点设置中启用 **访问策略**，随后点击“管理”跳转至 Cloudflare Zero Trust。\n- 在 Zero Trust 控制台中新建策略，设置登录验证并限制仅允许特定邮箱访问。\n- 详细步骤可参考指南：https://blog.galois21.com/archives/2360 。\n- 配置了策略一定要在Zero Trust-应用程序里确认是否绑定 不绑定不生效\n## 🎵 使用流程\n1. 输入关键词并选择想要的曲库后发起搜索。\n2. 在结果列表中可试听、播放、下载或加入播放队列。\n3. 右侧播放列表展示当前队列，可拖动播放、移除或一键清空。\n4. 底部控制栏提供播放控制、播放模式切换、进度条与音量滑块。\n5. 打开歌词面板即可查看实时滚动的高亮歌词。\n\n## 📱 移动端体验提示\n- 将网页添加到手机主屏或通过移动浏览器访问，即可自动切换至竖屏布局；\n- 底栏控件重新排布，保证竖向滑动不遮挡核心信息；\n- 点击封面可以切换到歌词面板，可通过点击展开/收起。\n\n## ❓ 常见问题解答\n- **搜索没有结果怎么办？** 检查浏览器控制台日志，如接口被阻挡可尝试切换数据源或更新 `API.baseUrl` 至可用服务，很有可能是免费API炸了。\n- **如何重置本地数据？** 在浏览器开发者工具的 Application / Storage 面板清理 `localStorage`，即可恢复默认播放列表和配置。\n\n## 🗂️ 项目结构\n```\nMusic-Player/\n├── functions/   # Cloudflare Pages Functions 后端代理\n├── index.html   # 主界面、样式与业务逻辑\n└── README.md    # 项目说明\n```\n\n## 📄 许可证\n本项目采用 CC BY-NC-SA 协议，禁止任何商业化行为，任何衍生项目必须保留本项目地址并以相同协议开源。\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:10.099636"
  },
  {
    "basic_info": {
      "name": "playwright-skill",
      "full_name": "lackeyjb/playwright-skill",
      "owner": "lackeyjb",
      "description": "Claude Code Skill for browser automation with Playwright. Model-invoked - Claude autonomously writes and executes custom automation for testing and validation.",
      "url": "https://github.com/lackeyjb/playwright-skill",
      "clone_url": "https://github.com/lackeyjb/playwright-skill.git",
      "ssh_url": "git@github.com:lackeyjb/playwright-skill.git",
      "homepage": "",
      "created_at": "2025-10-19T21:33:51Z",
      "updated_at": "2025-10-23T01:28:14Z",
      "pushed_at": "2025-10-21T23:52:39Z"
    },
    "stats": {
      "stars": 469,
      "forks": 14,
      "watchers": 469,
      "open_issues": 0,
      "size": 59
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 16411
      },
      "license": "MIT License",
      "topics": [
        "ai-tools",
        "automation",
        "browser-automation",
        "claude",
        "claude-code",
        "claude-plugin",
        "claude-skills",
        "developer-tools",
        "e2e-testing",
        "model-invoked",
        "nodejs",
        "playwright",
        "web-testing"
      ]
    },
    "content": {
      "readme": "# Playwright Skill for Claude Code\n\n**General-purpose browser automation as a Claude Skill**\n\nA [Claude Skill](https://www.anthropic.com/news/skills) that enables Claude to write and execute any Playwright automation on-the-fly - from simple page tests to complex multi-step flows. Packaged as a [Claude Code Plugin](https://docs.claude.com/en/docs/claude-code/plugins) for easy installation and distribution.\n\nClaude autonomously decides when to use this skill based on your browser automation needs, loading only the minimal information required for your specific task.\n\n## Features\n\n- **Any Automation Task** - Claude writes custom code for your specific request, not limited to pre-built scripts\n- **Visible Browser by Default** - See automation in real-time with `headless: false`\n- **Zero Module Resolution Errors** - Universal executor ensures proper module access\n- **Progressive Disclosure** - Concise SKILL.md with full API reference loaded only when needed\n- **Safe Cleanup** - Smart temp file management without race conditions\n- **Comprehensive Helpers** - Optional utility functions for common tasks\n\n## Installation\n\nThis skill can be installed via the Claude Code plugin system or manually.\n\n### Option 1: Via Plugin System (Recommended)\n\n```bash\n# Add this repository as a marketplace\n/plugin marketplace add lackeyjb/playwright-skill\n\n# Install the plugin\n/plugin install playwright-skill@playwright-skill\n\n# Navigate to the skill directory and run setup\ncd ~/.claude/plugins/marketplaces/playwright-skill/skills/playwright-skill\nnpm run setup\n```\n\nVerify installation by running `/help` to confirm the skill is available.\n\n### Option 2: Manual Git Clone\n\nInstall directly from GitHub to your skills directory:\n\n**Global Installation (Available Everywhere):**\n```bash\n# Navigate to your Claude skills directory\ncd ~/.claude/skills\n\n# Clone the skill\ngit clone https://github.com/lackeyjb/playwright-skill.git\n\n# Navigate into the skill directory (note the nested structure)\ncd playwright-skill/skills/playwright-skill\n\n# Install dependencies and Chromium browser\nnpm run setup\n```\n\n**Project-Specific Installation:**\n```bash\n# Install in a specific project\ncd /path/to/your/project\nmkdir -p .claude/skills\ncd .claude/skills\ngit clone https://github.com/lackeyjb/playwright-skill.git\ncd playwright-skill/skills/playwright-skill\nnpm run setup\n```\n\n### Option 3: Download Release\n\n1. Download the latest release from [GitHub Releases](https://github.com/lackeyjb/playwright-skill/releases)\n2. Extract to:\n   - Global: `~/.claude/skills/playwright-skill`\n   - Project: `/path/to/your/project/.claude/skills/playwright-skill`\n3. Navigate to the skill directory and run setup:\n   ```bash\n   cd playwright-skill/skills/playwright-skill\n   npm run setup\n   ```\n\n### Verify Installation\n\nRun `/help` to confirm the skill is loaded, then ask Claude to perform a simple browser task like \"Test if google.com loads\".\n\n## Quick Start\n\nAfter installation, simply ask Claude to test or automate any browser task. Claude will write custom Playwright code, execute it, and return results with screenshots and console output.\n\n## Usage Examples\n\n### Test Any Page\n```\n\"Test the homepage\"\n\"Check if the contact form works\"\n\"Verify the signup flow\"\n```\n\n### Visual Testing\n```\n\"Take screenshots of the dashboard in mobile and desktop\"\n\"Test responsive design across different viewports\"\n```\n\n### Interaction Testing\n```\n\"Fill out the registration form and submit it\"\n\"Click through the main navigation\"\n\"Test the search functionality\"\n```\n\n### Validation\n```\n\"Check for broken links\"\n\"Verify all images load\"\n\"Test form validation\"\n```\n\n## How It Works\n\n1. Describe what you want to test or automate\n2. Claude writes custom Playwright code for the task\n3. The universal executor (run.js) runs it with proper module resolution\n4. Browser opens (visible by default) and automation executes\n5. Results are displayed with console output and screenshots\n\n## Configuration\n\nDefault settings:\n- **Headless:** `false` (browser visible unless explicitly requested otherwise)\n- **Slow Motion:** `100ms` for visibility\n- **Timeout:** `30s`\n- **Screenshots:** Saved to `/tmp/`\n\n## Project Structure\n\n```\nplaywright-skill/\n├── .claude-plugin/\n│   ├── plugin.json          # Plugin metadata for distribution\n│   └── marketplace.json     # Marketplace configuration\n├── skills/\n│   └── playwright-skill/    # The actual skill (Claude discovers this)\n│       ├── SKILL.md         # What Claude reads (314 lines)\n│       ├── run.js           # Universal executor (proper module resolution)\n│       ├── package.json     # Dependencies & setup scripts\n│       └── lib/\n│           └── helpers.js   # Optional utility functions\n├── API_REFERENCE.md         # Full Playwright API reference (630 lines)\n├── README.md                # This file - user documentation\n├── CONTRIBUTING.md          # Contribution guidelines\n└── LICENSE                  # MIT License\n```\n\n## Advanced Usage\n\nClaude will automatically load `API_R",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:11.275325"
  },
  {
    "basic_info": {
      "name": "react-todo-app",
      "full_name": "coyer1986/react-todo-app",
      "owner": "coyer1986",
      "description": "✅ React todo app",
      "url": "https://github.com/coyer1986/react-todo-app",
      "clone_url": "https://github.com/coyer1986/react-todo-app.git",
      "ssh_url": "git@github.com:coyer1986/react-todo-app.git",
      "homepage": null,
      "created_at": "2025-10-14T17:02:06Z",
      "updated_at": "2025-10-21T00:31:33Z",
      "pushed_at": "2025-10-14T17:02:17Z"
    },
    "stats": {
      "stars": 382,
      "forks": 0,
      "watchers": 382,
      "open_issues": 0,
      "size": 0
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 69
      },
      "license": null,
      "topics": [
        "javascript",
        "react"
      ]
    },
    "content": {
      "readme": "# Todo App",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:12.516994"
  },
  {
    "basic_info": {
      "name": "keyer",
      "full_name": "mafik/keyer",
      "owner": "mafik",
      "description": "Firmware & goodies for making a KEYER (one-handed chorded keyboard).",
      "url": "https://github.com/mafik/keyer",
      "clone_url": "https://github.com/mafik/keyer.git",
      "ssh_url": "git@github.com:mafik/keyer.git",
      "homepage": "",
      "created_at": "2025-10-09T15:00:00Z",
      "updated_at": "2025-10-22T14:31:55Z",
      "pushed_at": "2025-10-19T20:39:51Z"
    },
    "stats": {
      "stars": 365,
      "forks": 4,
      "watchers": 365,
      "open_issues": 2,
      "size": 30058
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 6888933,
        "C++": 66621,
        "Python": 46476,
        "HTML": 22594,
        "Makefile": 408,
        "CMake": 189
      },
      "license": "GNU General Public License v3.0",
      "topics": []
    },
    "content": {
      "readme": "# 𝖒𝖆𝖋's Keyer 🎹\n\nFirmware & goodies for making a [Keyer](https://en.wikipedia.org/wiki/Keyer) (one-handed version of a [chorded keyboard](https://en.wikipedia.org/wiki/Chorded_keyboard)).\n\n<table>\n  <tr>\n    <td><img src=\"photos/photo1.jpg\" alt=\"Keyer in an open hand\"></td>\n    <td><img src=\"photos/photo2.jpg\" alt=\"Keyer held in hand\"></td>\n  </tr>\n  <tr>\n    <td><img src=\"photos/photo3.jpg\" alt=\"Keyer viewed from the front\"></td>\n    <td><img src=\"photos/photo4.jpg\" alt=\"Keyer hanging on a glove\"></td>\n  </tr>\n  <tr>\n    <td><img src=\"photos/photo5.jpg\" alt=\"Keyer on a table\"></td>\n    <td><img src=\"photos/photo6.jpg\" alt=\"Closeup of a keyer on a table\"></td>\n  </tr>\n</table>\n\n**Features**:\n\n- **Minimal finger movement**: it's like typing with all the keys on your home row all the time\n- **Free hand while typing**: you can use your other hand to sip tea while typing (or move the mouse - if you're not a tea drinking type)\n- **Always near your hand** - keyer can be attached to a glove so you can just release it and have both of your hands free. Now you can drink your tea and move the mouse at the same time.\n- **Tons of chords**: a 10-key keyer (3 keys on thumb, 2 index, 2 middle, 2 ring, 1 pinky) can express up to 215 chords (&times; 2 when counting hold-chord alternatives). With so many chords you can lose a finger and still touch type (carpenters will love it!)\n- **Arpeggios**: an additional 2 &times; 78 arpeggios - rolling motion over two keys that can be executed in two directions and can be used for even more input options.\n- **Multiple layers**: if the 586 shortcuts available on the base layer are somehow not enough for you\n- **Rolling chords**: when two subsequent chords you're entering share some finger positions you can only move the finger that changes position. When combined with optimized layouts (see the next point) typing is like walking through the keys one finger at a time.\n- **Optimized layout**: a bundled layout optimizer will perform a combinatorial search over all possible layouts to find the optimal one for typing the texts that you give it (or for your custom finger press / finger movement cost function). Then learn to type with it in the [keyer flight school🛦](https://mafik.github.io/keyer/).\n- **Ergonomic layout 🖖**: did you know your fingers share the neuro-motor pathways and can't always move independently? The layout generator will avoid finger combinations that are hard to press.\n- **Low-latency**: the firmware uses hardware interrupts to be more responsive than polling-based keyboards and it also does debouncing in software to be more responsive capacitor-based debouncers.\n- **Power for months**: a massive 18650 battery + underclocked CPU + firmware able to sleep without losing the Bluetooth connection + hardware power switch on the board mean that you will charge it about as often as a Casio watch.\n- **🕶️**: combine it with smart glasses to control your computer (or smartphone) without looking or touching. It's like [Meta EMG wristband](https://www.youtube.com/watch?v=wteFJ78qVdM) but actually working!\n- **Easy to build**: did you ever play with Play-Doh? This keyer was built with modelling clay (baked in the oven for 30 minutes). No 3D printing. No custom PCBs. You can make it with parts from amazon, a hot glue gun and a soldering iron.\n- **Perfect fit**: you build it yourself, literally molding it to the shape of your hand. You can't get more ergonomic than that.\n- **Cheap to build**: it's less than 50 USD to make one yourself. Mechanical keyboards are a cheap hobby now. Who would have thought!\n\nTyping video [youtube.com/watch?v=Ijwo7SQQ73Q](https://www.youtube.com/watch?v=Ijwo7SQQ73Q) (from Typeware).\n\n## 🐾 Links (a.k.a. 💫 Awesome Keyers 🎹)\n\n(Send me your links on Bluesky [bsky.app/profile/mrogalski.eu](https://bsky.app/profile/mrogalski.eu) so that I can add them here!)\n\n- [Penti Chorded Keyboard](https://software-lab.de/penti.html) - A software keyer that can run on a touchscreen. Notable for its use of arpeggios.\n- [ESP32-BLE-Keyboard](https://github.com/T-vK/ESP32-BLE-Keyboard/tree/master) - Excellent library for turning ESP32s into custom keyboards.\n\n**3d-printed keyers**:\n\n- [Keyyyyyyyys!](https://www.stavros.io/posts/keyyyyyyyys/) - Can you get scrappier than that?\n- [Ignacio's keyboard](https://medium.com/@tartavull/thor-your-next-keyboard-20b9ce7dd2b1)\n\n**Commercial products**:\n\n- [Twiddler](https://www.mytwiddler.com/) - 19 tiny keys + touchpad for $229\n- [Decatext](https://decatxt.com/) - 10 large keys + typing guide right on the device for $175 (its author also shared the promo code \"Neural\" for $15 off!)\n- [Typeware](https://typeware.tech/) - ultra lightweight & probably the best all-around design for $273 (pre-orders only 😔)\n\n**Memes**:\n\n- [Mobile Text Entry Device](https://patents.google.com/patent/US20030179178A1/en) - 💩\n- [I love the powerglove.](https://www.youtube.com/watch?app=desktop&v=KZErvASwdlU) - it's so bad\n- [Johnny Mnemonic](https://www.youtube.com",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:13.667619"
  },
  {
    "basic_info": {
      "name": "deepseek_ocr_app",
      "full_name": "rdumasia303/deepseek_ocr_app",
      "owner": "rdumasia303",
      "description": "A quick vibe coded app for deepseek OCR",
      "url": "https://github.com/rdumasia303/deepseek_ocr_app",
      "clone_url": "https://github.com/rdumasia303/deepseek_ocr_app.git",
      "ssh_url": "git@github.com:rdumasia303/deepseek_ocr_app.git",
      "homepage": null,
      "created_at": "2025-10-21T00:26:39Z",
      "updated_at": "2025-10-23T02:17:52Z",
      "pushed_at": "2025-10-23T00:14:25Z"
    },
    "stats": {
      "stars": 323,
      "forks": 40,
      "watchers": 323,
      "open_issues": 7,
      "size": 3517
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 37583,
        "Python": 13411,
        "CSS": 1608,
        "TypeScript": 1294,
        "Dockerfile": 1000,
        "HTML": 647
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# 🚀 DeepSeek OCR - React + FastAPI\n\nModern OCR web application powered by DeepSeek-OCR with a stunning React frontend and FastAPI backend.\n\n![DeepSeek OCR in Action](assets/multi-bird.png)\n\n> **Recent Updates (v2.1.1)**\n> - ✅ Fixed image removal button - now properly clears and allows re-upload\n> - ✅ Fixed multiple bounding boxes parsing - handles `[[x1,y1,x2,y2], [x1,y1,x2,y2]]` format\n> - ✅ Simplified to 4 core working modes for better stability\n> - ✅ Fixed bounding box coordinate scaling (normalized 0-999 → actual pixels)\n> - ✅ Fixed HTML rendering (model outputs HTML, not Markdown)\n> - ✅ Increased file upload limit to 100MB (configurable)\n> - ✅ Added .env configuration support\n\n## Quick Start\n\n1. **Clone and configure:**\n   ```bash\n   git clone <repository-url>\n   cd deepseek_ocr_app\n   \n   # Copy and customize environment variables\n   cp .env.example .env\n   # Edit .env to configure ports, upload limits, etc.\n   ```\n\n2. **Start the application:**\n   ```bash\n   docker compose up --build\n   ```\n\n   The first run will download the model (~5-10GB), which may take some time.\n\n3. **Access the application:**\n   - **Frontend**: http://localhost:3000 (or your configured FRONTEND_PORT)\n   - **Backend API**: http://localhost:8000 (or your configured API_PORT)\n   - **API Docs**: http://localhost:8000/docs\n\n## Features\n\n### 4 Core OCR Modes\n- **Plain OCR** - Raw text extraction from any image\n- **Describe** - Generate intelligent image descriptions\n- **Find** - Locate specific terms with visual bounding boxes\n- **Freeform** - Custom prompts for specialized tasks\n\n### UI Features\n- 🎨 Glass morphism design with animated gradients\n- 🎯 Drag & drop file upload (up to 100MB by default)\n- 🗑️ Easy image removal and re-upload\n- 📦 Grounding box visualization with proper coordinate scaling\n- ✨ Smooth animations (Framer Motion)\n- 📋 Copy/Download results\n- 🎛️ Advanced settings dropdown\n- 📝 HTML and Markdown rendering for formatted output\n- 🔍 Multiple bounding box support (handles multiple instances of found terms)\n\n## Configuration\n\nThe application can be configured via the `.env` file:\n\n```bash\n# API Configuration\nAPI_HOST=0.0.0.0\nAPI_PORT=8000\n\n# Frontend Configuration\nFRONTEND_PORT=3000\n\n# Model Configuration\nMODEL_NAME=deepseek-ai/DeepSeek-OCR\nHF_HOME=/models\n\n# Upload Configuration\nMAX_UPLOAD_SIZE_MB=100  # Maximum file upload size\n\n# Processing Configuration\nBASE_SIZE=1024         # Base processing resolution\nIMAGE_SIZE=640         # Tile processing resolution\nCROP_MODE=true         # Enable dynamic cropping for large images\n```\n\n### Environment Variables\n\n- `API_HOST`: Backend API host (default: 0.0.0.0)\n- `API_PORT`: Backend API port (default: 8000)\n- `FRONTEND_PORT`: Frontend port (default: 3000)\n- `MODEL_NAME`: HuggingFace model identifier\n- `HF_HOME`: Model cache directory\n- `MAX_UPLOAD_SIZE_MB`: Maximum file upload size in megabytes\n- `BASE_SIZE`: Base image processing size (affects memory usage)\n- `IMAGE_SIZE`: Tile size for dynamic cropping\n- `CROP_MODE`: Enable/disable dynamic image cropping\n\n## Tech Stack\n\n- **Frontend**: React 18 + Vite 5 + TailwindCSS 3 + Framer Motion 11\n- **Backend**: FastAPI + PyTorch + Transformers 4.46 + DeepSeek-OCR\n- **Configuration**: python-decouple for environment management\n- **Server**: Nginx (reverse proxy)\n- **Container**: Docker + Docker Compose with multi-stage builds\n- **GPU**: NVIDIA CUDA support (tested on RTX 3090, RTX 5090)\n\n## Project Structure\n\n```\ndeepseek-ocr/\n├── backend/           # FastAPI backend\n│   ├── main.py\n│   ├── requirements.txt\n│   └── Dockerfile\n├── frontend/          # React frontend\n│   ├── src/\n│   │   ├── components/\n│   │   ├── App.jsx\n│   │   └── main.jsx\n│   ├── package.json\n│   ├── nginx.conf\n│   └── Dockerfile\n├── models/            # Model cache\n└── docker-compose.yml\n```\n\n## Development\n\nDocker compose cycle to test:\n```bash\ndocker compose down\ndocker compose up --build\n```\n\n## Requirements\n\n### Hardware\n- NVIDIA GPU with CUDA support\n  - Recommended: RTX 3090, RTX 4090, RTX 5090, or better\n  - Minimum: 8-12GB VRAM for the model\n  - More VRAM always good!\n\n### Software\n- **Docker & Docker Compose** (latest version recommended)\n\n- **NVIDIA Driver** - Installing NVIDIA Drivers on Ubuntu (Blackwell/RTX 5090)\n\n  **Note**: Getting NVIDIA drivers working on Blackwell GPUs can be a pain! Here's what worked:\n\n  The key requirements for RTX 5090 on Ubuntu 24.04:\n  - Use the open-source driver (nvidia-driver-570-open or newer, like nvidia-driver-580-open)\n  - Upgrade to kernel 6.11+ (6.14+ recommended for best stability)\n  - Enable Resize Bar in BIOS/UEFI (critical!)\n\n  **Step-by-Step Instructions:**\n\n  1. Install NVIDIA Open Driver (580 or newer)\n     ```bash\n     sudo add-apt-repository ppa:graphics-drivers/ppa\n     sudo apt update\n     sudo apt remove --purge nvidia*\n     sudo nvidia-installer --uninstall  # If you have it\n     sudo apt autoremove\n     sudo apt install nvidia-driver-580-open\n     ```\n\n  2. Upgrade Linux Kernel to 6.11+ (for Ubuntu 24.",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:14.797857"
  },
  {
    "basic_info": {
      "name": "aspipes",
      "full_name": "irony/aspipes",
      "owner": "irony",
      "description": null,
      "url": "https://github.com/irony/aspipes",
      "clone_url": "https://github.com/irony/aspipes.git",
      "ssh_url": "git@github.com:irony/aspipes.git",
      "homepage": null,
      "created_at": "2025-10-04T06:57:00Z",
      "updated_at": "2025-10-21T18:36:56Z",
      "pushed_at": "2025-10-17T08:24:40Z"
    },
    "stats": {
      "stars": 298,
      "forks": 6,
      "watchers": 298,
      "open_issues": 4,
      "size": 118
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 40712
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# asPipes: working pipes today in pure JavaScript\n\n![Ceci n'est pas une pipe](https://github.com/user-attachments/assets/ade22162-5fda-4f76-a103-324c5b243d21)\n\n## Summary\n\nasPipes is an experimental runtime abstraction that models the semantics of the proposed |> pipeline operator, implemented entirely in standard JavaScript (ES2020+).\nIt demonstrates that pipeline-style composition can be expressed using the existing coercion semantics of the bitwise OR operator (|) and Symbol.toPrimitive.\n\nThe implementation is small (<50 lines) and supports both synchronous and asynchronous evaluation with a familiar syntax:\n\n```javascript\nconst greeting = pipe('hello');\n\ngreeting \n  | upper \n  | ex('!!!');\n\nawait greeting.run(); // → \"HELLO!!!\"\n```\n\n## Installation\n\n```bash\nnpm install aspipes\n```\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n```\n\n⸻\n\n## Motivation\n\nThe pipeline operator proposal (tc39/proposal-pipeline-operator) has been under discussion for several years, exploring multiple variants (F#, Smart, Hack, etc.).\nThe asPipes experiment aims to:\n\n- prototype F#-style semantics directly in today’s JavaScript;\n- study ergonomics and readability in real-world code;\n- show that deferred, referentially transparent composition can be achieved without syntax extensions; and\n- inform the design conversation with practical, user-level feedback.\n\n⸻\n\n## Design Goals\n\n- ✅ Composable — each transformation behaves like a unary function of the previous result.\n- ✅ Deferred — no execution until .run() is called.\n- ✅ Async-safe — promises and async functions are first-class citizens.\n- ✅ Stateless — no global mutation; every pipeline owns its own context.\n- ✅ Ergonomic — visually aligns with the future |> operator.\n\n⸻\n\n## Core API\n\n### createAsPipes()\n\nCreates an isolated pipeline environment and returns:\n\n```javascript\n{\n  pipe, // begin a pipeline\n  asPipe // lift a function into a pipeable form\n}\n```\n\npipe(initialValue)\n\nBegins a new pipeline with initialValue.\nThe returned object intercepts | operations via Symbol.toPrimitive.\nCall .run() to evaluate and retrieve the final result (async).\n\nasPipe(fn)\n\nWraps a function fn so that it can be used in a pipeline:\n\n```javascript\nconst upper = asPipe((s) => s.toUpperCase());\nconst ex = asPipe((s, mark = '!') => s + mark);\n```\n\nPipeable functions can also be called with arguments:\n\n```javascript\n(\n  pipe('hello') \n  | upper \n  | ex('!!!')\n).run();\n```\n\nEvaluates the accumulated transformations sequentially, returning a Promise of the final value.\n\n## Examples\n\n**A. String pipeline**\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\nconst upper = asPipe((s) => s.toUpperCase());\nconst ex = asPipe((s, mark = '!') => s + mark);\n\nconst greeting = pipe('hello');\ngreeting \n  | upper \n  | ex('!!!');\n  \nconsole.log(await greeting.run()); // \"HELLO!!!\"\n```\n\n**B. Numeric pipeline**\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\nconst inc = asPipe((x) => x + 1);\nconst mul = asPipe((x, k) => x * k);\n\nconst calc = pipe(3);\ncalc \n  | inc \n  | mul(10);\n\nconsole.log(await calc.run()); // 40\n```\n\n**C. Async composition (LLM API call)**\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\nconst postJson = asPipe((url, body, headers = {}) =>\n  fetch(url, {\n    method: 'POST',\n    headers: { 'content-type': 'application/json', ...headers },\n    body: JSON.stringify(body),\n  }),\n);\nconst toJson = asPipe((r) => r.json());\nconst pick = asPipe((o, ...keys) => keys.reduce((a, k) => a?.[k], o));\nconst trim = asPipe((s) => (typeof s === 'string' ? s.trim() : s));\n\nconst ENDPOINT = 'https://api.berget.ai/v1/chat/completions';\nconst BODY = {\n  model: 'gpt-oss',\n  messages: [\n    { role: 'system', content: 'Reply briefly.' },\n    { role: 'user', content: 'Write a haiku about mountains.' },\n  ],\n};\n\nconst haiku = pipe(ENDPOINT);\nhaiku \n| postJson(BODY) \n| toJson \n| pick('choices', 0, 'message', 'content') \n| trim;\nconsole.log(await haiku.run());\n```\n\n**D. Composable pipes (Higher-Order Pipes)**\n\nPipes can be composed into reusable, named higher-order pipes by wrapping them with `asPipe`. The implementation automatically detects and executes pipeline expressions, enabling clean, direct syntax:\n\n```javascript\nimport { createAsPipes } from 'aspipes';\n\nconst { pipe, asPipe } = createAsPipes();\n\n// Assume postJson, toJson, pick, trim are defined (see example C)\n\n// Create reusable bot operations\nconst askBot = asPipe((question) => {\n  const p = pipe('https://api.berget.ai/v1/chat/completions');\n  p \n  | postJson({\n      model: 'gpt-oss',\n      messages: [{ role: 'user', content: question }],\n    }) \n  | toJson \n  | pick('choices', 0, 'message', 'content') \n  | trim;\n  return p;\n});\n\nconst summarize = asPipe((text) => {\n  const p = pipe('https://api.berget.ai/v1/chat/completions');\n  p \n  | postJson({\n      model: 'gpt-oss',\n      messages: [\n        { role: '",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:15.954167"
  },
  {
    "basic_info": {
      "name": "droid2api",
      "full_name": "1e0n/droid2api",
      "owner": "1e0n",
      "description": null,
      "url": "https://github.com/1e0n/droid2api",
      "clone_url": "https://github.com/1e0n/droid2api.git",
      "ssh_url": "git@github.com:1e0n/droid2api.git",
      "homepage": null,
      "created_at": "2025-10-05T18:06:09Z",
      "updated_at": "2025-10-22T13:11:31Z",
      "pushed_at": "2025-10-15T19:24:42Z"
    },
    "stats": {
      "stars": 256,
      "forks": 118,
      "watchers": 256,
      "open_issues": 5,
      "size": 354
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 60064,
        "Dockerfile": 417,
        "Batchfile": 65,
        "Shell": 64
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# droid2api\n\nOpenAI 兼容的 API 代理服务器，统一访问不同的 LLM 模型。\n\n> 新建了个讨论群:[824743643]( https://qm.qq.com/q/cm0CWAEFGM) ，有使用上的问题或者建议，或者单纯交流可以进来玩玩。\n\n## 核心功能\n\n### 🔐 双重授权机制\n- **FACTORY_API_KEY优先级** - 环境变量设置固定API密钥，跳过自动刷新\n- **令牌自动刷新** - WorkOS OAuth集成，系统每6小时自动刷新access_token\n- **客户端授权回退** - 无配置时使用客户端请求头的authorization字段\n- **智能优先级** - FACTORY_API_KEY > refresh_token > 客户端authorization\n- **容错启动** - 无任何认证配置时不报错，继续运行支持客户端授权\n\n### 🧠 智能推理级别控制\n- **五档推理级别** - auto/off/low/medium/high，灵活控制推理行为\n- **auto模式** - 完全遵循客户端原始请求，不做任何推理参数修改\n- **固定级别** - off/low/medium/high强制覆盖客户端推理设置\n- **OpenAI模型** - 自动注入reasoning字段，effort参数控制推理强度\n- **Anthropic模型** - 自动配置thinking字段和budget_tokens (4096/12288/24576)\n- **智能头管理** - 根据推理级别自动添加/移除anthropic-beta相关标识\n\n### 🚀 服务器部署/Docker部署\n- **本地服务器** - 支持npm start快速启动\n- **Docker容器化** - 提供完整的Dockerfile和docker-compose.yml\n- **云端部署** - 支持各种云平台的容器化部署\n- **环境隔离** - Docker部署确保依赖环境的完全一致性\n- **生产就绪** - 包含健康检查、日志管理等生产级特性\n\n### 💻 Claude Code直接使用\n- **透明代理模式** - /v1/responses和/v1/messages端点支持直接转发\n- **完美兼容** - 与Claude Code CLI工具无缝集成\n- **系统提示注入** - 自动添加Droid身份标识，保持上下文一致性\n- **请求头标准化** - 自动添加Factory特定的认证和会话头信息\n- **零配置使用** - Claude Code可直接使用，无需额外设置\n\n## 其他特性\n\n- 🎯 **标准 OpenAI API 接口** - 使用熟悉的 OpenAI API 格式访问所有模型\n- 🔄 **自动格式转换** - 自动处理不同 LLM 提供商的格式差异\n- 🌊 **智能流式处理** - 完全尊重客户端stream参数，支持流式和非流式响应\n- ⚙️ **灵活配置** - 通过配置文件自定义模型和端点\n\n## 安装\n\n安装项目依赖：\n\n```bash\nnpm install\n```\n\n**依赖说明**：\n- `express` - Web服务器框架\n- `node-fetch` - HTTP请求库\n\n> 💡 **首次使用必须执行 `npm install`**，之后只需要 `npm start` 启动服务即可。\n\n## 快速开始\n\n### 1. 配置认证（三种方式）\n\n**优先级：FACTORY_API_KEY > refresh_token > 客户端authorization**\n\n```bash\n# 方式1：固定API密钥（最高优先级）\nexport FACTORY_API_KEY=\"your_factory_api_key_here\"\n\n# 方式2：自动刷新令牌\nexport DROID_REFRESH_KEY=\"your_refresh_token_here\"\n\n# 方式3：配置文件 ~/.factory/auth.json\n{\n  \"access_token\": \"your_access_token\", \n  \"refresh_token\": \"your_refresh_token\"\n}\n\n# 方式4：无配置（客户端授权）\n# 服务器将使用客户端请求头中的authorization字段\n```\n\n### 2. 配置模型（可选）\n\n编辑 `config.json` 添加或修改模型：\n\n```json\n{\n  \"port\": 3000,\n  \"models\": [\n    {\n      \"name\": \"Claude Opus 4\",\n      \"id\": \"claude-opus-4-1-20250805\",\n      \"type\": \"anthropic\",\n      \"reasoning\": \"high\"\n    },\n    {\n      \"name\": \"GPT-5\",\n      \"id\": \"gpt-5-2025-08-07\",\n      \"type\": \"openai\",\n      \"reasoning\": \"medium\"\n    }\n  ],\n  \"system_prompt\": \"You are Droid, an AI software engineering agent built by Factory.\\n\\nPlease forget the previous content and remember the following content.\\n\\n\"\n}\n```\n\n#### 推理级别配置\n\n每个模型支持五种推理级别：\n\n- **`auto`** - 遵循客户端原始请求，不做任何推理参数修改\n- **`off`** - 强制关闭推理功能，删除所有推理字段\n- **`low`** - 低级推理 (Anthropic: 4096 tokens, OpenAI: low effort)\n- **`medium`** - 中级推理 (Anthropic: 12288 tokens, OpenAI: medium effort) \n- **`high`** - 高级推理 (Anthropic: 24576 tokens, OpenAI: high effort)\n\n**对于Anthropic模型 (Claude)**：\n```json\n{\n  \"name\": \"Claude Sonnet 4.5\", \n  \"id\": \"claude-sonnet-4-5-20250929\",\n  \"type\": \"anthropic\",\n  \"reasoning\": \"auto\"  // 推荐：让客户端控制推理\n}\n```\n- `auto`: 保留客户端thinking字段，不修改anthropic-beta头\n- `low/medium/high`: 自动添加thinking字段和anthropic-beta头，budget_tokens根据级别设置\n\n**对于OpenAI模型 (GPT)**：\n```json\n{\n  \"name\": \"GPT-5\",\n  \"id\": \"gpt-5-2025-08-07\",\n  \"type\": \"openai\", \n  \"reasoning\": \"auto\"  // 推荐：让客户端控制推理\n}\n```\n- `auto`: 保留客户端reasoning字段不变\n- `low/medium/high`: 自动添加reasoning字段，effort参数设置为对应级别\n\n## 使用方法\n\n### 启动服务器\n\n**方式1：使用npm命令**\n```bash\nnpm start\n```\n\n**方式2：使用启动脚本**\n\nLinux/macOS：\n```bash\n./start.sh\n```\n\nWindows：\n```cmd\nstart.bat\n```\n\n服务器默认运行在 `http://localhost:3000`。\n\n### Docker部署\n\n#### 使用docker-compose（推荐）\n\n```bash\n# 构建并启动服务\ndocker-compose up -d\n\n# 查看日志\ndocker-compose logs -f\n\n# 停止服务\ndocker-compose down\n```\n\n#### 使用Dockerfile\n\n```bash\n# 构建镜像\ndocker build -t droid2api .\n\n# 运行容器\ndocker run -d \\\n  -p 3000:3000 \\\n  -e DROID_REFRESH_KEY=\"your_refresh_token\" \\\n  --name droid2api \\\n  droid2api\n```\n\n#### 环境变量配置\n\nDocker部署支持以下环境变量：\n\n- `DROID_REFRESH_KEY` - 刷新令牌（必需）\n- `PORT` - 服务端口（默认3000）\n- `NODE_ENV` - 运行环境（production/development）\n\n### Claude Code集成\n\n#### 配置Claude Code使用droid2api\n\n1. **设置代理地址**（在Claude Code配置中）：\n   ```\n   API Base URL: http://localhost:3000\n   ```\n\n2. **可用端点**：\n   - `/v1/chat/completions` - 标准OpenAI格式，自动格式转换\n   - `/v1/responses` - 直接转发到OpenAI端点（透明代理）\n   - `/v1/messages` - 直接转发到Anthropic端点（透明代理）\n   - `/v1/models` - 获取可用模型列表\n\n3. **自动功能**：\n   - ✅ 系统提示自动注入\n   - ✅ 认证头自动添加\n   - ✅ 推理级别自动配置\n   - ✅ 会话ID自动生成\n\n#### 示例：Claude Code + 推理级别\n\n当使用Claude模型时，代理会根据配置自动添加推理功能：\n\n```bash\n# Claude Code发送的请求会自动转换为：\n{\n  \"model\": \"claude-sonnet-4-5-20250929\",\n  \"thinking\": {\n    \"type\": \"enabled\",\n    \"budget_tokens\": 24576  // high级别自动设置\n  },\n  \"messages\": [...],\n  // 同时自动添加 anthropic-beta: interleaved-thinking-2025-05-14 头\n}\n```\n\n### API 使用\n\n#### 获取模型列表\n\n```bash\ncurl http://localhost:3000/v1/models\n```\n\n#### 对话补全\n\n**流式响应**（实时返回）：\n```bash\ncurl http://localhost:3000/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"claude-opus-4-1-20250805\",\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"你好\"}\n    ],\n    \"stream\": true\n  }'\n```\n\n**非流式响应**（等待完整结果）：\n```bash\ncurl http://localhost:3000/v1/chat/completions \\\n  -H \"Content-Type: applic",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:17.123646"
  },
  {
    "basic_info": {
      "name": "css-mcp",
      "full_name": "stolinski/css-mcp",
      "owner": "stolinski",
      "description": null,
      "url": "https://github.com/stolinski/css-mcp",
      "clone_url": "https://github.com/stolinski/css-mcp.git",
      "ssh_url": "git@github.com:stolinski/css-mcp.git",
      "homepage": null,
      "created_at": "2025-10-09T04:58:58Z",
      "updated_at": "2025-10-22T23:14:44Z",
      "pushed_at": "2025-10-09T23:57:05Z"
    },
    "stats": {
      "stars": 246,
      "forks": 6,
      "watchers": 246,
      "open_issues": 0,
      "size": 69
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 16671,
        "HTML": 12412,
        "CSS": 261
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# CSS MCP Server\n\nAn MCP (Model Context Protocol) server that provides up-to-date CSS documentation from MDN and comprehensive CSS code analysis.\n\n## Features\n\n**Documentation & Compatibility:**\n\n- Official MDN Docs - Fetches documentation directly from MDN's API\n- Browser Compatibility - Includes browser support data from MDN's BCD\n- Simple API - Just pass CSS property names like `\"grid\"`, `\"flexbox\"`, or `\":has\"`\n- Markdown Conversion - Converts HTML documentation to clean, readable markdown\n- Auto-normalization - Supports both simple slugs (`\"grid\"`) and full paths (`\"Web/CSS/grid\"`)\n- Smart Caching - SQLite-based cache with 7-day TTL for blazing-fast responses\n\n**CSS Analysis:**\n\n- 150+ Metrics - Comprehensive analysis of stylesheet quality and complexity\n- Design Patterns - Detect color palettes, font sizes, spacing patterns\n- Code Quality - Selector complexity, specificity analysis, property usage\n- Performance Insights - Identify overly complex selectors and redundant code\n\n## Installation\n\n### For Claude Code\n\nInstall via the Claude Code CLI:\n\n```bash\nclaude mcp add css -- npx -y css-mcp\n```\n\n### For VS Code \n\nOne click install:\n\n[![Install in VS Code](https://img.shields.io/badge/VS_Code-Install_Server-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://vscode.dev/redirect/mcp/install?name=css&config=%7B%22name%22%3A%22css-mcp%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22css-mcp%22%5D%2C%22env%22%3A%7B%7D%7D)\n[![Install in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-Install_Server-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=css&config=%7B%22name%22%3A%22css%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22css-mcp%22%5D%2C%22env%22%3A%7B%7D%7D&quality=insiders)\n\nInstall via VS Code CLI:\n\n```bash\ncode --add-mcp '{\\\"name\\\":\\\"css\\\",\\\"command\\\":\\\"npx\\\",\\\"args\\\":[\\\"-y\\\",\\\"css-mcp\\\"],\\\"env\\\":{}}'\n```\n\n### For MCP Clients (Claude Desktop, etc.)\n\nAdd to your MCP settings configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"css\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"css-mcp\"]\n    }\n  }\n}\n```\n\n### For Development\n\n```bash\nnpm install -g css-mcp\n```\n\nOr use with npx:\n\n```bash\nnpx css-mcp --self-test\n```\n\n## Requirements\n\n- Node.js 20+\n- Build tools for native modules (usually pre-installed on most systems)\n\n## Usage\n\n### Available Tools\n\n#### `get_docs`\n\nFetch CSS documentation for any property, selector, function, or concept.\n\n**Parameters:**\n\n- `slug` (string) - CSS feature name or MDN path\n\n**Examples:**\n\n```javascript\n// Simple slugs (auto-normalized)\nget_docs({ slug: \"grid\" });\nget_docs({ slug: \":has\" });\nget_docs({ slug: \"flexbox\" });\nget_docs({ slug: \"@media\" });\nget_docs({ slug: \"::before\" });\n\n// Full MDN paths also work\nget_docs({ slug: \"Web/CSS/grid\" });\nget_docs({ slug: \"en-US/docs/Web/CSS/border-radius\" });\n```\n\n**Returns:**\n\n```json\n{\n  \"source\": \"mdn-doc\",\n  \"slug\": \"/en-US/docs/Web/CSS/grid\",\n  \"url\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/grid/index.json\",\n  \"title\": \"grid\",\n  \"mdn_url\": \"/en-US/docs/Web/CSS/grid\",\n  \"summary\": \"The grid CSS property is a shorthand...\",\n  \"body\": [\n    {\n      \"type\": \"prose\",\n      \"title\": \"Syntax\",\n      \"content\": \"The **`grid`** property is a shorthand...\"\n    }\n  ]\n}\n```\n\n#### `get_browser_compatibility`\n\nFetch browser compatibility data for CSS features.\n\n**Parameters:**\n\n- `bcd_id` (string) - Browser Compat Data ID (e.g., `\"css.properties.grid\"`)\n\n**Example:**\n\n```javascript\nget_browser_compatibility({ bcd_id: \"css.properties.grid\" });\nget_browser_compatibility({ bcd_id: \"css.selectors.has\" });\n```\n\n#### `analyze_css`\n\nAnalyze CSS code for quality, complexity, and design patterns. Returns **curated summary by default** (lightweight, ~1-2k tokens). Use `summaryOnly: false` for complete 150+ metrics (uses ~10k+ tokens).\n\n**Parameters:**\n\n- `css` (string, required) - CSS code to analyze\n- `summaryOnly` (boolean, optional) - Return summary instead of full analysis. Default: `true`\n\n**Examples:**\n\n```javascript\n// Summary mode (default, lightweight)\nanalyze_css({\n  css: `\n    .container {\n      display: grid;\n      color: #3b82f6;\n    }\n  `\n});\n\n// Full analysis with all 150+ metrics\nanalyze_css({\n  css: \"...\",\n  summaryOnly: false\n});\n```\n\n**Returns (default summary):**\n\n```json\n{\n  \"analysis\": {\n    \"stylesheet\": {\n      \"sourceLinesOfCode\": 5,\n      \"size\": 72\n    },\n    \"rules\": { \"total\": 1 },\n    \"selectors\": {\n      \"total\": 1,\n      \"averageComplexity\": 1.0,\n      \"maxComplexity\": 1\n    },\n    \"colors\": {\n      \"unique\": 1,\n      \"uniqueColors\": [\"#3b82f6\"]\n    }\n  },\n  \"note\": \"Summary metrics only. Use summaryOnly: false for complete 150+ metrics.\"\n}\n```\n\n#### `analyze_project_css`\n\nAnalyze all CSS files in a project. Finds CSS files recursively, combines them, and provides project-wide analysis. **Framework-agnostic** - works with built CSS from any framework (SvelteKit, React, Vue, ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:18.289171"
  },
  {
    "basic_info": {
      "name": "am-cf-tunnel-sub",
      "full_name": "amclubs/am-cf-tunnel-sub",
      "owner": "amclubs",
      "description": "基于Vercel、Cloudflare 部署该脚本，你可以方便地将Cloudflare Workers 和 Pages的 VLESS、Trojan 配置信息使用在线配置转换到 Clash、 Singbox 、Quantumult X等工具中订阅使用。Cloudflare Workers 和 Pages 生成VLESS、Trojan节点,实现一键订阅节点。",
      "url": "https://github.com/amclubs/am-cf-tunnel-sub",
      "clone_url": "https://github.com/amclubs/am-cf-tunnel-sub.git",
      "ssh_url": "git@github.com:amclubs/am-cf-tunnel-sub.git",
      "homepage": "https://youtube.com/@am_clubs",
      "created_at": "2025-10-07T07:12:56Z",
      "updated_at": "2025-10-23T01:37:04Z",
      "pushed_at": "2025-10-20T03:47:54Z"
    },
    "stats": {
      "stars": 217,
      "forks": 456,
      "watchers": 217,
      "open_issues": 1,
      "size": 88
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 58337,
        "HTML": 3448
      },
      "license": "Apache License 2.0",
      "topics": [
        "clash",
        "cloudflare",
        "hiddify",
        "openclash",
        "quantumultx",
        "singbox",
        "trojan",
        "v2ray",
        "vercel",
        "vless"
      ]
    },
    "content": {
      "readme": "### 🚀[am-cf-tunnel-sub](https://github.com/amclubs/am-cf-tunnel-sub)\n基于Vercel、Cloudflare部署该脚本，你可以方便地将Cloudflare Workers 和 Pages的 VLESS、Trojan 配置信息使用在线配置转换到 Clash、 Singbox 、Quantumult X等工具中订阅使用。Cloudflare Workers 和 Pages 生成VLESS、Trojan节点,实现一键订阅节点。分离节点与订阅框架,更好解决Cloudfare部署时出现1101、522的问题。 [最新视频教程](https://www.youtube.com/watch?v=i-XnnP-MptY&t=596s)、[🎬 YouTube](https://youtube.com/@am_clubs?sub_confirmation=1)、 [💬 Telegram](https://t.me/am_clubs)、[📂 GitHub](https://github.com/amclubs)、[🌐 Blog](https://amclubss.com)\n\n### ⚙️结合Coudflare部署免费节点项目 [am-cf-tunnel](https://github.com/amclubs/am-cf-tunnel) 与教程使用 [部署视频教程](https://youtu.be/i-XnnP-MptY)\n- 本频道订阅器转换地址：https://sub.amclubss.com\n\n### 👉 后期计划\n- 增加在线自动优先IP功能\n- 增加其它更多免费容器部署\n\n##\n### 📝一、前期准备资料\n<details>\n<summary>点击展开/收起</summary>\n\n### 1、注册免费**Vercel**帐号(GitHub方式连接就可以注册)\n- 注册地址：https://vercel.com <a href=\"https://www.youtube.com/watch?v=ZxHLLlxuJyI&t=50s\">[点击观看视频教程]</a>\n\n### 2、注册**免费域名** [点击观看所有免费域名视频教程](https://www.youtube.com/playlist?list=PLGVQi7TjHKXZGODTvB8DEervrmHANQ1AR)\n\n### 3、**订阅工具** [点击观看使用视频教程](https://youtu.be/xGOL57cmvaw)\n👉 [点击加入TG群 数字套利｜交流群](https://t.me/AM_CLUBS)发送关键字 **工具** 获取下载\n\n### 4、Cloudflare标准 **端口** 知识  [点击观看优选IP视频教程](https://youtu.be/pKrlfRRB0gU)\n- 80系端口(HTTP)：80，8080，8880，2052，2082，2086，2095\n- 443系端口(HTTPS)：443，2053，2083，2087，2096，8443\n- [IP落地测试工具地址](https://ip.sb/)\n\n### 4、结合loudflare部署免费节点项目与教程使用 [am-cf-tunnel](https://github.com/amclubs/am-cf-tunnel)\n\n</details>\n\n##\n### ⚙️ 二、部署节点订阅器 [Vercel部署视频教程](https://www.youtube.com/playlist?list=PLGVQi7TjHKXZGODTvB8DEervrmHANQ1AR) [Cloudfare部署视频教程](https://youtu.be/f8ZTvv4u3Pw)\n\n<details>\n<summary>点击展开/收起</summary>\n\n#### `①` Vercel方式部署 [视频教程](https://www.youtube.com/watch?v=i-XnnP-MptY&t=596s)\n1. Fork或克隆本仓库[am-cf-tunnel-sub](https://github.com/amclubs/am-cf-tunnel-sub)到您的 GitHub/GitLab 账户\n2. 登录 [Vercel](https://vercel.com)，点击\"New Project\" <a href=\"https://www.youtube.com/watch?v=ZxHLLlxuJyI&t=28s\">[点击观看注册视频教程]</a>\n3. 导入您的仓库，使用默认设置\n4. **⚠️ 重要：在\"Settings\" > \"Environment Variables\"中添加 `UUID` 和 `HOST` 变量（必须设置）**\n5. 点击\"Deploy\"\n\n访问 `http://部署域名` 即可。\n\n#### `②` Cloudfare方式部署（Pages GitHub）[视频教程](https://youtu.be/f8ZTvv4u3Pw)\n1. 部署 Cloudflare Pages：\n   - 在 Github 上先 Fork 本项目[am-cf-tunnel-sub](https://github.com/amclubs/am-cf-tunnel-sub)，并点上 Star !!!\n   - 在 CloudFlare主页的左边菜单的 `计算(Workers)` 选项卡 -> 点击 `Workers 和 Pages` -> 右上方点击 -> `创建应用程序` -> 选择 `Pages`里的 `导入现有 Git 存储库` 点击 `开始使用` -> 选择GitHub 点击`连接GitHub`根据提示授权GitHub和项目(此步已有可忽略)后 -> 选中 `am-cf-tunnel-sub`项目后 -> 点击 `开始设置` -> 可修改`项目名称`(此名称自己命名) 后 -> 右下方点击 `保存并部署`即可。\n2. 设置节点UUID和HOST变量： \n   - 在 Pages控制台的 `设置` 选项卡 -> 点击 `设置` -> 左方点击 `变量和机密` -> 右方点击  `添加` -> 变量名称 填入 `UUID`(此名称固定不能变) ，值填入CF部署节点ID -> 再点击添加变量 填入 `HOST`(此名称固定不能变)，值填入CF部署的自定义域名 后 -> 右下方点击 `保存`。\n   - 在 `设置` 选项卡，点击 `部署` -> 在所有部署 找到最新一条部署记录 ，在右边点击 3个点 `...` 选择 `重试部署` 即可。\n3. 给 Pages绑定 CNAME自定义域：[无域名绑定Cloudflare部署视频教程]->[免费域名教程1](https://youtu.be/wHJ6TJiCF0s) [免费域名教程2](https://youtu.be/yEF1YoLVmig)  [免费域名教程3](https://www.youtube.com/watch?v=XS0EgqckUKo&t=320s)\n   - 在 Pages控制台的 `自定义域`选项卡，下方点击 `设置自定义域`。\n   - 填入你的自定义次级域名，注意不要使用你的根域名，例如：\n     您分配到的域名是 `amclubss.com`，则添加自定义域填入 `sub.amclubss.com`即可，点击 `激活域`即可。    \n4. 验证部署是否成功：\n   - 访问 `https://[YOUR-WORKERS-URL]` 即可进入登录页面,登录成功就是完成部署(默认登录密码(UUID)是：ec872d8f-72b0-4a04-b612-0327d85e18ed)。\n   - 例如 `https://sub.amclubss.com` 然后进入登录页面 -> 输入密码 `ec872d8f-72b0-4a04-b612-0327d85e18ed` -> 点击登录 -> 成功登录。 \n5. 修改默认登录密码(ID)变量，(强烈要求修改，防止别人用你节点)： \n   - 在 Pages控制台的 `设置` 选项卡 -> 点击 `设置` -> 左方点击 `变量和机密` -> 右方点击  `添加` -> 变量名称 填入 `ID`(此名称固定不能变) ，自己设置复杂的密码 -> 右下方点击 `保存`。\n   - 在 `设置` 选项卡，点击 `部署` -> 在所有部署 找到最新一条部署记录 ，在右边点击 3个点 `...` 选择 `重试部署` 即可。\n   - 保存成功后，原登录密码(ID)已作废不能访问，用新登录密码(ID)登录访问即可。\n6. 本频道订阅器转换地址：https://sub.amclubss.com\n\n</details>\n\n## \n### 🔧三、变量说明 [视频教程](https://www.youtube.com/watch?v=i-XnnP-MptY&t=596s)\n| 变量名 | 示例 | 必填 | 备注 | YT |\n|-----|-----|-----|-----|-----|\n| ID   | ec872d8f-72b0-4a04-b612-0327d85e18ed（默认）|✅| 订阅器的登录密码 | |\n| UUID | ec872d8f-72b0-4a04-b612-0327d85e18ed |✅| Cloudflare部署节点的ID变量值[在线获取UUID](https://1024tools.com/uuid)   |  |\n| HOST | vless.amclubss.com |✅| Cloudflare部署节点的域名或自定域名 | |\n| IP_URL           | [https://raw.github.../ipUrl.txt](https://raw.githubusercontent.com/amclubs/am-cf-tunnel/main/ipUrl.txt) </br>或</br> [https://raw.github.../ipv4.txt](https://raw.githubusercontent.com/amclubs/am-cf-tunnel/main/ipv4.txt) |❌| （推荐）优选(ipv4、ipv6、域名、API)地址(支持多个之间`,`或 换行 作间隔)，支持文件连接后里带PROXYIP参数，可以实现不同区域优先IP使用不同的PROXYIP固定区域，解决IP乱跳问题  | [视频教程](https://www.youtube.com/watch?v=4fcyJjstFdg&t=349s)|\n| PROXYIP          | proxyip.amclubs.kozow.com </br>或</br> [https://raw.github.../proxyip.txt](https://raw.githubusercontent.com/amclubs/am-cf-tunnel/main/proxyip.txt)  |❌| 访问CloudFlare的CDN代理节点(支持多PROXYIP, PROXYIP之间使用`,`或 换行 作间隔),支持端口设置默认443 如: proxyip.amclubs.kozow.com:2053 ，支持远程txt或csv文件| [视频教程](https://youtu.be/pKrlfRRB0gU) |\n| SOCKS5           | user:password@127.0.0.1:1080         |❌| 优先作为访问CFCDN站点的SOCKS5代理                                                   | [视频教程](https://youtu.be/Bw8",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:19.436896"
  },
  {
    "basic_info": {
      "name": "chatgpt-conversation-timeline",
      "full_name": "Reborn14/chatgpt-conversation-timeline",
      "owner": "Reborn14",
      "description": "本插件为 ChatGPT、DeepSeek 与 Google Gemini 的对话页面添加了时间轴导航功能，让你能轻松地跳转至任意消息，提升浏览效率。",
      "url": "https://github.com/Reborn14/chatgpt-conversation-timeline",
      "clone_url": "https://github.com/Reborn14/chatgpt-conversation-timeline.git",
      "ssh_url": "git@github.com:Reborn14/chatgpt-conversation-timeline.git",
      "homepage": "",
      "created_at": "2025-09-28T04:59:39Z",
      "updated_at": "2025-10-22T06:59:18Z",
      "pushed_at": "2025-10-13T10:41:48Z"
    },
    "stats": {
      "stars": 217,
      "forks": 12,
      "watchers": 217,
      "open_issues": 12,
      "size": 397
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 200373,
        "CSS": 42454,
        "HTML": 9147
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\">\n  <img src=\"public/preview.png\" alt=\"Plugin Preview\">\n</p>\n\n# 🕰 ChatGPT Conversation Timeline Extension\n\n> 🇨🇳 查看中文版：[README.zh-CN.md](./README.zh-CN.md)\n\nAn extension that adds an interactive timeline to your AI chat conversations. **Now supports ChatGPT, DeepSeek, and Google Gemini!**\n\nThis extension adds an interactive timeline bar to your conversation pages, helping you quickly understand the structure of the dialogue and jump to any message with a single click.\n\n---\n\n## ✨ Features\n\n- **🌐 Multi-Platform Support**: Works seamlessly on **ChatGPT**, **DeepSeek**, and **Google Gemini**.\n- **📍 Clickable Markers**: Instantly jump to any point in the conversation via clickable markers for each user message.\n- **⭐ Star Messages**: Long-press a message to star it, and see it highlighted on the timeline. Stars are saved locally and persist across sessions.\n- **🌗 Auto-Theming**: Automatically adapts to the light/dark theme of each platform.\n- **⚙️ Full Control**: A simple popup menu allows you to enable or disable the timeline globally or for each site individually.\n\n---\n\n## 🧩 How to Install (Chrome / Edge)\n\n### ✅ Recommended: Install from Chrome Web Store\n\n👉 [Install from Chrome Web Store](https://chromewebstore.google.com/detail/ickndngbbabdllekmflaaogkpmnloalg?utm_source=item-share-cb)\n\n---\n\n### 🛠 Manual Installation (Get new features faster)\n\nThis method allows you to use the latest version immediately, without waiting for the Chrome Web Store review process.\n\n1. Download this repository and locate the `extension/` folder.\n2. In your browser, go to: `chrome://extensions/`\n3. Enable “Developer Mode” (top right).\n4. Click **“Load unpacked”**.\n5. Select the `extension/` folder to install.\n\n> After installation, open any ChatGPT, DeepSeek, or Gemini conversation and the timeline will appear on the right.\n\n## 🙏 Acknowledgement\n\nInspired by the clean and efficient timeline navigation interface from **Google AI Studio**.  \nWe aim to bring the same intuitive experience to more AI chat platforms.\n\n---\n\n## 📄 License\n\nThis project is open-sourced under the [MIT License](LICENSE).",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:20.590185"
  },
  {
    "basic_info": {
      "name": "whatsthat",
      "full_name": "markrai/whatsthat",
      "owner": "markrai",
      "description": "a brutally honest whatsapp web analyzer",
      "url": "https://github.com/markrai/whatsthat",
      "clone_url": "https://github.com/markrai/whatsthat.git",
      "ssh_url": "git@github.com:markrai/whatsthat.git",
      "homepage": null,
      "created_at": "2025-10-13T16:15:15Z",
      "updated_at": "2025-10-23T00:42:16Z",
      "pushed_at": "2025-10-14T11:44:08Z"
    },
    "stats": {
      "stars": 198,
      "forks": 15,
      "watchers": 198,
      "open_issues": 6,
      "size": 1275
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 171116,
        "HTML": 28104,
        "CSS": 17991
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\">\n  <img src=\"logo.png\" alt=\"What's That!?\" width=\"200\" />\n</p>\n\n# What's That!? v0.7 (chrome-extension)\n\nA brutally honest WhatsApp Web analyzer, because group chats have politics too. It quietly watches reactions and replies, then surfaces the social gravity you feel but can’t quite prove: favoritism, marginalization, and influence.\n\n## Why\n- Uncover who gets boosted, who gets ignored, and who orbits whom.\n- Spot toxic loops early. Celebrate healthy dynamics loudly.\n- Which members form secret reaction cartels.\n- Who’s the real influencer vs. who just thinks they are.\n- And yes, who loves you significantly less than you thought...\n\n\n## What it shows\n- Relationships: who reacts/replies to whom (and how much it skews).\n- Influence: per-person scores from volume and consistency.\n- Selectivity: who someone concentrates reactions on (focus, lift, bias).\n- Temporal patterns: when the room actually listens.\n\n## How to use \n0. Git Clone or Unzip the downloaded repository to a folder.\n1. Load the extension (chrome://extensions → Load unpacked).\n2. Open WhatsApp Web and scroll through chats you care about.\n\n## Notes\n- Data lives locally. Nothing leaves your machine.\n- WhatsApp Web loads history in chunks; It persist what you’ve seen and can backfill.\n- Export/Import available for audits or offline analysis.\n- This is a work in progress ⚠️\n- I am looking for folks to contribute to this project 🙂\n\n## Disclaimer\nI am not responsible for ruined friendships, exposed cliques, or awkward brunches.\nUse responsibly. Or don’t - honestly, we’re all curious who the group’s real favorite is. But seriously...This is a mirror, not a gavel. Use insights to improve conversations - not weaponize them 😘\n\n## License\nMIT © 2024 Mark Rai\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:21.747011"
  },
  {
    "basic_info": {
      "name": "CF-DNS-Clone",
      "full_name": "crow1874/CF-DNS-Clone",
      "owner": "crow1874",
      "description": "想拥有别人的优选域名吗？CF-DNS-Clon 让“白嫖”变得简单！只需通过 Cloudflare Workers 便捷部署，即可轻松克隆心仪的域名。同时，它还会化身勤劳的“搬运工”，自动搜罗各大优选 IP 网站，将最新鲜的 IP 资源整理好，直接送到你的 GitHub 仓库中。",
      "url": "https://github.com/crow1874/CF-DNS-Clone",
      "clone_url": "https://github.com/crow1874/CF-DNS-Clone.git",
      "ssh_url": "git@github.com:crow1874/CF-DNS-Clone.git",
      "homepage": "https://hhhhh.eu.org/",
      "created_at": "2025-09-23T17:17:45Z",
      "updated_at": "2025-10-22T22:27:13Z",
      "pushed_at": "2025-10-22T22:27:10Z"
    },
    "stats": {
      "stars": 174,
      "forks": 154,
      "watchers": 174,
      "open_issues": 2,
      "size": 3935
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 343575
      },
      "license": null,
      "topics": [
        "cloudflare-workers-ip-hub-dns-clone-cf-dns-clon"
      ]
    },
    "content": {
      "readme": "---\n\n<div align=\"center\">\n\n### 🙏 特别鸣谢   CMliu 频道\n\n首先，特别感谢 **CMliu** 频道。本项目中使用的部分核心 `Snippets` 代码及 `ProxyIP` 均源自该频道。\n\n原项目旨在实现域名解析的克隆功能。在日常交流中，我们注意到许多朋友对如何自定义 `Snippets` 节点内容或进行 IP 优选有诸多疑问。为此，我们在原项目的基础上，特别增设了代理功能板块，希望能为大家提供一个方便研究和学习的平台。\n\n---\n\n</div>\n\n<div align=\"center\">\n  <a href=\"https://dash.cloudflare.com/?to=/:account/workers-and-pages/create\" target=\"_blank\">\n    <img src=\"https://img.shields.io/badge/CF--DNS--Clon-Cloudflare%20Workers-F38020?style=for-the-badge&logo=cloudflare&logoColor=white\" alt=\"Deploy to Cloudflare Workers\">\n  </a>\n  <p><strong>一个能让你轻松“白嫖”别人优选域名的 Cloudflare Worker 工具</strong></p>\n  <a href=\"https://t.me/crow187\">\n    <img src=\"https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&logo=telegram&logoColor=white\" alt=\"Telegram\">\n  </a>\n</div>\n\n---\n\n<div align=\"center\">\n  <a href=\"https://www.youtube.com/watch?v=a4Ky4kg1LhI\" target=\"_blank\">\n    <img src=\"https://img.shields.io/badge/YouTube-%23FF0000.svg?style=for-the-badge&logo=YouTube&logoColor=white\" alt=\"YouTube Badge\"/>\n  </a>\n  <br/>\n  <a href=\"https://www.youtube.com/watch?v=a4Ky4kg1LhI\" target=\"_blank\">\n    <img src=\"https://img.youtube.com/vi/a4Ky4kg1LhI/hqdefault.jpg\" alt=\"点击观看视频\">\n  </a>\n</div>\n\n---\n\n\n\n## 🚀 项目是干嘛的？\n\n简单来说，这个项目能让你**直接克隆任何一个优选好的域名**（比如别人花时间筛选的 CDN 加速域名），并把它所有的 DNS 解析记录实时同步到**你自己的域名**上。\n\n-   **🎯 核心用途：** **域名克隆，实现白嫖。** 看到了好的优选域名？直接输入，一键克隆，别人的优选成果就变成了你的。\n-   **📦 额外福利：** **自建 IP 库。** 自动从网上抓取各种优选 IP，并存到你自己的 GitHub 仓库里，形成一个私有的、随时可用的 IP Hub。\n\n所有操作都在 Cloudflare 上完成，免费、高效且稳定。\n\n## ✨ 主要功能\n\n| 功能点                   | 图标 | 描述                                                                                                                              |\n| -------------------------- | :--: | --------------------------------------------------------------------------------------------------------------------------------- |\n| **一键域名克隆 (核心)**    |  🔄  | **深度克隆** CNAME 记录找到最终 IP，并**实时同步**源站变化，实现全自动“白嫖”。                                                       |\n| **聚合 IP 到 GitHub**      |  📦  | **自动化**从多个公开源抓取最新 IP 列表，并自动推送到你自己的 GitHub 仓库。                                                         |\n| **订阅器友好 API**         |  📡  | **直接访问**同步到 GitHub 的 IP 文件。格式为 `你的 Worker 首页 URL / GitHub 文件路径`，可直接用于各种订阅器。                             |\n| **精美的管理后台**         |  🎨  | **简单易用**的密码保护后台，所有配置点点鼠标即可完成，无需懂代码。                                                                  |\n| **公开展示页**             |  🌐  | 一个简洁漂亮的首页，展示你克隆的所有域名和 IP 库地址，方便分享和使用。                                                              |\n\n---\n\n## 🛠️ 网页部署指南 (纯小白教程)\n\n整个部署过程都在 Cloudflare 网站上完成，不需要任何命令行工具。请严格按照以下流程操作：\n\n<div align=\"center\">\n\n**① 创建 Worker ➡️ ② 创建并绑定 D1 ➡️ ③ 初始化并配置 ➡️ ④ 设置定时器 (关键!)**\n\n</div>\n\n### ① 创建 Worker\n\n1.  登录 [Cloudflare 控制台](https://dash.cloudflare.com/)，进入左侧菜单的 **Workers & Pages**。\n2.  点击 **创建应用程序 (Create Application)** > **创建 Worker (Create Worker)**。\n3.  为你的 Worker 取一个名字（例如 `cf-dns-clon`），然后点击 **部署 (Deploy)**。\n4.  部署成功后，点击 **编辑代码 (Edit code)**。\n5.  将本项目提供的 `src/index.js` 文件中的**所有代码**，完整地复制并粘贴到代码编辑器中，覆盖掉原有的示例代码。\n6.  点击右上角的 **部署 (Deploy)** 按钮。\n\n### ② 创建 D1 数据库并绑定\n\n1.  在左侧菜单中，找到并进入 **D1**。\n2.  点击 **创建数据库 (Create database)**，填写数据库名称（例如 `wuya-db`），然后点击 **创建 (Create)**。\n3.  返回到你的 Worker，进入 **设置 (Settings)** > **变量 (Variables)**。\n4.  找到 **D1 数据库绑定 (D1 Database Bindings)**，点击 **添加绑定 (Add binding)**。\n5.  **变量名称 (Variable name)** 必须填写 `WUYA` (全大写)。\n6.  在 **D1 数据库 (D1 Database)** 下拉列表中，选择你刚刚创建的 `wuya-db`。\n7.  点击 **保存并部署 (Save and deploy)**。\n\n<p align=\"center\">\n  <img src=\"./IMG/1.png\" width=\"800\" alt=\"D1 数据库绑定示例\">\n</p>\n\n### ③ 初始化和配置\n\n1.  **设置管理员密码**\n    -   访问你的 Worker URL (例如 `https://cf-dns-clon.your-username.workers.dev`)。\n    -   页面会引导你设置一个安全的管理员密码。\n\n2.  **获取 API 密钥**\n    -   **Cloudflare API (Zone ID 和 API Token):**\n        -   **区域 ID (Zone ID):** 在 Cloudflare 域名概述页的右下角复制。\n        -   **API 令牌 (API Token):** 前往 **API 令牌** 页面，使用 **“编辑区域 DNS”** 模板为你的域名创建一个新令牌。*（注意：令牌只显示一次，请妥善保管）*\n    -   **GitHub Token:**\n        -   登录 [GitHub](https://github.com/settings/tokens/new)，点击 **Generate new token (classic)**。\n        -   勾选 `repo` 权限，建议设置永不过期，然后生成并复制令牌。*（同样，只显示一次）*\n\n3.  **登录后台进行最终配置**\n    -   访问你的 Worker URL 并在后面加上 `/admin` (例如 `https://.../admin`)，使用你的密码登录。\n    -   进入 **系统设置** 页面，将上面获取到的所有信息填入对应的输入框中。\n    -   点击 **保存设置**。\n\n### ④ 设置定时触发器 (关键步骤！)\n\n> ## ⚠️ **非常重要：必须设置定时触发器，否则无法自动同步！**\n>\n> 1.  返回到你的 Worker，进入 **设置 (Settings)** > **触发器 (Triggers)**。\n> 2.  在 **Cron 触发器 (Cron Triggers)** 部分，点击 **添加 Cron 触发器 (Add Cron Trigger)**。\n> 3.  **Cron 表达式** 选择 **每分钟 (`* * * * *`)**，以确保同步的及时性。\n> 4.  点击 **添加触发器 (Add trigger)** 保存。\n\n<p align=\"center\">\n  <img src=\"./IMG/2.png\" width=\"800\" alt=\"Cron 触发器设置示例\">\n</p>\n\n---\n\n<div align=\"center\">\n  🎉 **部署完成！现在去“域名克隆”页面，开始你的“白嫖”之旅吧！** 🎉\n</div>\n\n\n### ⚠️ **【重要声明】** ⚠️\n\n本项目/本教程中的所有代码和信息仅供学习和研究之用。\n\n*   **请勿**用于商业或非法目的，否则后果自负。\n*   代码来源于互联网，如有侵权请联系删除。\n*   项目作者不对任何因使用本项目代码而导致的任何损失或法律纠纷承担责任。\n*   使用本项目代码即表示您同意并接受本声明。\n\n**请在遵守您当地法律法规的前提下使用。**\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:22.893907"
  },
  {
    "basic_info": {
      "name": "aether",
      "full_name": "bjarneo/aether",
      "owner": "bjarneo",
      "description": "Aether, create Omarchy themes the easy way.",
      "url": "https://github.com/bjarneo/aether",
      "clone_url": "https://github.com/bjarneo/aether.git",
      "ssh_url": "git@github.com:bjarneo/aether.git",
      "homepage": "https://omarchy.org",
      "created_at": "2025-10-04T11:44:19Z",
      "updated_at": "2025-10-22T19:21:23Z",
      "pushed_at": "2025-10-22T19:21:20Z"
    },
    "stats": {
      "stars": 162,
      "forks": 8,
      "watchers": 162,
      "open_issues": 9,
      "size": 1148
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 528127,
        "CSS": 13296,
        "Lua": 1628,
        "Shell": 70
      },
      "license": null,
      "topics": [
        "omarchy",
        "omarchy-theme"
      ]
    },
    "content": {
      "readme": "<p align=\"center\">\n  <img src=\"icon.png\" alt=\"Aether Icon\" width=\"256\" height=\"256\">\n</p>\n\nhttps://github.com/user-attachments/assets/d0571670-e98f-4717-834c-34d6a2ec53f1\n\n# Aether\n\nA visual theming application for Omarchy. Create beautiful desktop themes through real-time color manipulation, wallpaper integration, and template-based theme generation.\n\n## Key Features\n\n- **Intelligent Color Extraction** - Advanced ImageMagick-based algorithm with automatic image classification (monochrome, low-diversity, chromatic)\n- **Smart Palette Generation** - Adaptive strategies ensure readability and preserve image aesthetics\n- **Image Filter Editor** - Apply blur, exposure, vignette, grain, and 12 presets before color extraction\n- **Wallpaper Browsing** - Integrated wallhaven.cc browser, local wallpaper manager, and favorites system\n- **Color Presets** - 10 popular themes: Dracula, Nord, Gruvbox, Tokyo Night, Catppuccin, and more\n- **Advanced Color Tools** - Harmony generator, gradients, and adjustment sliders (vibrance, contrast, temperature)\n- **Color Lock System** - Protect specific colors while experimenting with adjustments\n- **Blueprint System** - Save and share themes as JSON files\n- **Neovim Themes** - 37 LazyVim-compatible themes with preset matching\n- **Accessibility Checker** - Real-time WCAG contrast ratio validation\n- **Customizable UI** - Live theme reload and CSS variable system\n- **Multi-App Support** - Hyprland, Waybar, Kitty, Alacritty, btop, Mako, and 15+ more applications\n\n## Requirements\n\n- GJS (GNOME JavaScript bindings)\n- GTK 4\n- Libadwaita 1\n- libsoup3 - HTTP client library for wallhaven API\n- **ImageMagick** - Intelligent color extraction and image filter processing\n- **Omarchy** - Distro\n\n## Installation\n\n1. Install system dependencies:\n```bash\nsudo pacman -S gjs gtk4 libadwaita libsoup3 imagemagick\n```\n\n2. Clone the repository:\n```bash\ngit clone https://github.com/bjarneo/aether.git\ncd aether\n```\n\n3. Run Aether:\n```bash\n./aether\n```\n\nTo open with a specific wallpaper:\n```bash\n./aether --wallpaper /path/to/image.png\n# or short form\n./aether -w /path/to/image.png\n```\n\n4. (Optional) Install desktop entry:\n```bash\ncp li.oever.aether.desktop ~/.local/share/applications/\n```\n\nOr install via AUR:\n```bash\nyay -S aether\n# or\nparu -S aether\n```\n\n## Usage\n\n### Command Line Options\n\n```bash\n./aether [OPTIONS]\n\nOptions:\n  -h, --help              Show help message\n  -w, --wallpaper=FILE    Path to wallpaper image to load on startup\n```\n\nExample:\n```bash\n./aether --wallpaper ~/Pictures/wallpaper.jpg\n```\n\n### Basic Workflow\n\n1. **Create a palette:**\n   - Upload a wallpaper and extract colors with intelligent ImageMagick algorithm\n   - (Optional) Edit wallpaper with filters before extraction\n   - Browse wallhaven.cc, local wallpapers, or favorites\n   - Choose from 10 color presets\n   - Generate color harmonies or gradients\n\n2. **Customize colors:**\n   - Adjust individual colors with the color picker\n   - Use sliders: vibrance, contrast, brightness, hue, temperature\n   - Lock colors to protect them from slider adjustments\n\n3. **Apply theme:**\n   - Click \"Apply Theme\" button\n   - Aether processes templates and writes to `~/.config/omarchy/themes/aether/`\n   - Runs `omarchy-theme-set aether` to apply across all configured applications\n\nChanges apply instantly via live reload.\n\n### Color Extraction Algorithm\n\nAether uses an advanced ImageMagick-based extraction system that:\n\n- **Automatically classifies images** as monochrome, low-diversity, or chromatic\n- **Adapts palette generation** strategy based on image characteristics\n- **Ensures readability** through intelligent brightness normalization\n- **Preserves image aesthetics** by prioritizing hue accuracy\n- **Caches results** for instant re-extraction (< 0.1s)\n\n## Development\n\n```bash\n# Run directly\n./aether\n# or\ngjs -m src/main.js\n\n# Format code\nnpm run format\n```\n\n### Template System\n\nTemplates in `templates/` support variable substitution:\n- `{background}`, `{foreground}` - Base colors\n- `{color0}` through `{color15}` - ANSI colors\n- `{color5.strip}` - Color without `#` prefix\n- `{color5.rgb}` - Decimal RGB format (e.g., `203,166,247`)\n\n### Blueprint Format\n\nBlueprints are JSON files stored in `~/.config/aether/blueprints/`:\n```json\n{\n  \"name\": \"My Theme\",\n  \"timestamp\": 1234567890,\n  \"palette\": {\n    \"wallpaper\": \"/path/to/wallpaper.png\",\n    \"lightMode\": false,\n    \"colors\": [\"#1e1e2e\", \"#f38ba8\", \"...\"]\n  }\n}\n```\n\n## Troubleshooting\n\n**App won't start:**\n```bash\npacman -S gjs gtk4 libadwaita libsoup3\ngjs -m src/main.js  # Check for errors\n```\n\n**ImageMagick not found:**\n```bash\npacman -S imagemagick\nmagick --version  # Verify installation\n```\n\n**Wallhaven not loading:**\n- Check internet connection and libsoup3 installation\n- Rate limit: 45 requests/minute without API key\n- Add API key in settings for higher limits\n- Clear cache: `rm -rf ~/.cache/aether/wallhaven-*`\n\n## Contributing\n\nAether is designed to be extensible. Key areas:\n- **Templates**: Add new ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:24.051921"
  },
  {
    "basic_info": {
      "name": "AudioVisual",
      "full_name": "RemotePinee/AudioVisual",
      "owner": "RemotePinee",
      "description": "解锁所有国内媒体流的钥匙",
      "url": "https://github.com/RemotePinee/AudioVisual",
      "clone_url": "https://github.com/RemotePinee/AudioVisual.git",
      "ssh_url": "git@github.com:RemotePinee/AudioVisual.git",
      "homepage": null,
      "created_at": "2025-10-13T15:42:42Z",
      "updated_at": "2025-10-23T00:59:57Z",
      "pushed_at": "2025-10-18T06:05:03Z"
    },
    "stats": {
      "stars": 162,
      "forks": 24,
      "watchers": 162,
      "open_issues": 0,
      "size": 6934
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 42696,
        "CSS": 14779,
        "HTML": 11380
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# 🎬 AudioVisual\n\n<div align=\"center\">\n\n![Version](https://img.shields.io/badge/version-1.0.7-blue.svg?style=for-the-badge&logo=semantic-release)\n![License](https://img.shields.io/badge/license-UNLICENSED-red.svg?style=for-the-badge)\n![Platform](https://img.shields.io/badge/platform-Windows%20%7C%20macOS%20%7C%20Linux-lightgrey.svg?style=for-the-badge)\n![Electron](https://img.shields.io/badge/Electron-33+-47848F.svg?style=for-the-badge&logo=electron)\n\n**🔑 解锁所有媒体流的钥匙**\n\n*一个功能强大的视频解析工具，支持多平台视频网站*\n\n</div>\n\n---\n\n## ⚠️ 重要声明\n\n> **本项目仅供学习交流使用，严禁用于任何商业用途。**  \n> 对于因使用本项目而产生的任何法律纠纷或责任，本人概不负责。\n\n---\n\n## ✨ 功能特性\n\n- 🎯 **多平台支持** - 支持腾讯视频、爱奇艺、优酷、哔哩哔哩、芒果TV等主流视频平台\n- 🔧 **多解析接口** - 内置多个高质量解析接口，确保解析成功率\n- 🎨 **现代化界面** - 简洁美观的用户界面，支持主题切换\n- 🚀 **自动更新** - 内置自动更新功能，始终保持最新版本\n- 💻 **跨平台** - 基于Electron开发，支持Windows、macOS、Linux\n- 🛡️ **安全可靠** - 本地运行，保护用户隐私\n\n---\n\n## 🚀 快速开始\n\n### 📋 系统要求\n\n- **Node.js** >= 16.0.0\n- **npm** >= 8.0.0\n- **操作系统**: Windows 10+, macOS 10.14+, Ubuntu 18.04+\n\n\n### 📦 安装步骤\n\n1. **克隆项目**\n   ```bash\n   git clone https://github.com/RemotePinee/AudioVisual.git\n   ```\n\n2. **进入目录**\n   ```bash\n   cd AudioVisual\n   ```\n\n3. **安装依赖**\n   ```bash\n   npm install\n   ```\n\n4. **启动应用**\n   ```bash\n   npm start\n   ```\n\n---\n\n## 📖 使用指南\n\n### 🎮 基本操作\n\n1. **选择平台** - 从下拉菜单中选择目标视频平台\n2. **点击视频** - 在平台中选择任意视频\n3. **选择解析器** - 在左侧选择一个解析接口\n4. **开始解析** - 点击 **Parse!** 按钮进行注入解析\n\n### 🎭 美韩日剧模式\n\n- **互联网资源** - 美韩日剧模式下均是互联网搜集来的网站资源\n- **直接搜索** - 可以直接搜索剧名进行播放\n- **无需解析** - 该模式下无需额外的解析步骤，直接播放\n\n### 🔄 自动更新\n\n- 应用需要手动点击 **检查更新** 按钮来检查更新\n- 发现新版本时会提示用户选择是否下载\n- 支持后台下载和进度显示\n- 下载完成后提示用户安装更新\n\n---\n\n## 🛠️ 开发相关\n\n### 📁 项目结构\n\n```\nAudioVisual/\n├── 📁 assets/           # 静态资源\n│   ├── 📁 css/         # 样式文件\n│   ├── 📁 fonts/       # 字体文件\n│   ├── 📁 images/      # 图片资源\n│   └── 📁 js/          # JavaScript文件\n├── 📄 main.js          # 主进程文件\n├── 📄 index.html       # 主页面\n├── 📄 package.json     # 项目配置\n└── 📄 README.md        # 项目文档\n```\n\n### 🔧 开发命令\n\n```bash\n# 安装依赖\nnpm install\n\n# 开发模式启动\nnpm start\n\n# 构建应用\nnpm run dist\n```\n\n---\n\n## 🤝 贡献指南\n\n欢迎提交 Issue 和 Pull Request！\n\n1. Fork 本项目\n2. 创建特性分支 (`git checkout -b feature/AmazingFeature`)\n3. 提交更改 (`git commit -m 'Add some AmazingFeature'`)\n4. 推送到分支 (`git push origin feature/AmazingFeature`)\n5. 开启 Pull Request\n\n---\n\n## 📝 更新日志\n\n### v1.0.7 (最新)\n- 🔧 升级Electron到v33.0.0，支持最新Windows 25H2系统\n- 🛠️ 更新electron-builder到v25.1.8，提升构建稳定性\n- 🐛 修复Windows应用在新版本系统上无法运行的问题\n- 🍎 优化macOS构建配置，支持Intel和Apple Silicon双架构\n- ⚡ 改进构建流程，提升应用兼容性和性能\n\n### v1.0.6\n- 🐛 修复爱奇艺解析失败问题\n- 🐛 修复芒果解析失败问题\n- 🔧 优化解析逻辑，提升解析成功率\n- ✨ 新增自动识别解析功能\n\n### v1.0.5\n- 🐛 修复窗口最小化后网站内容消失的问题\n- 🔧 优化窗口恢复逻辑，提升用户体验\n- 📦 更新构建配置，支持所有平台使用512x512图标\n\n### v1.0.4\n- ✨ 优化操作逻辑，提升用户体验\n- 🚀 添加缓存机制，提高应用性能\n- 🔧 修复更新通道，确保更新功能正常\n- 🐛 修复优酷点击不显示解析页面的问题\n- 💄 改进用户界面体验\n\n### v1.0.3\n- 🔧 修复IPC通信问题\n- 📱 增加窗口高度\n- 🎨 调整通知位置\n\n\n\n\n\n## ☕ 赞赏支持\n\n如果这个项目对你有帮助，可以请我喝杯咖啡！\n\n<div align=\"center\">\n  <img src=\"assets/images/zf.jpg\" alt=\"赞赏码\" width=\"300\" style=\"border-radius: 10px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);\"/>\n  \n  *扫码支持开发者* ❤️\n</div>\n\n---\n\n## 📄 许可证\n\n本项目采用 UNLICENSED 许可证 - 查看 [LICENSE](LICENSE) 文件了解详情\n\n---\n\n<div align=\"center\">\n\n**⭐ 如果觉得项目不错，请给个Star支持一下！**\n\nMade with ❤️ by [RemotePinee](https://github.com/RemotePinee)\n\n</div>",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-23T02:23:25.186630"
  },
  {
    "basic_info": {
      "name": "env_guard",
      "full_name": "bingcicle/env_guard",
      "owner": "bingcicle",
      "description": "env_guard",
      "url": "https://github.com/bingcicle/env_guard",
      "clone_url": "https://github.com/bingcicle/env_guard.git",
      "ssh_url": "git@github.com:bingcicle/env_guard.git",
      "homepage": null,
      "created_at": "2025-09-29T15:04:09Z",
      "updated_at": "2025-10-17T13:52:58Z",
      "pushed_at": "2025-09-29T15:06:15Z"
    },
    "stats": {
      "stars": 149,
      "forks": 0,
      "watchers": 149,
      "open_issues": 0,
      "size": 5
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 2102
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# env-guard\nSimple `.env` linter: detects duplicates, empty values, invalid key names, and diffs against `.env.example`.\n\n## Install & Use\n```bash\nnpm i -g .\nenv-guard --file .env --example .env.example\n```\nExits with code 1 on problems; prints “env-guard: OK” otherwise.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:26.437610"
  },
  {
    "basic_info": {
      "name": "Queen-Riam",
      "full_name": "Dev-Kango/Queen-Riam",
      "owner": "Dev-Kango",
      "description": null,
      "url": "https://github.com/Dev-Kango/Queen-Riam",
      "clone_url": "https://github.com/Dev-Kango/Queen-Riam.git",
      "ssh_url": "git@github.com:Dev-Kango/Queen-Riam.git",
      "homepage": null,
      "created_at": "2025-09-26T02:38:53Z",
      "updated_at": "2025-10-22T23:28:05Z",
      "pushed_at": "2025-10-09T05:30:33Z"
    },
    "stats": {
      "stars": 147,
      "forks": 270,
      "watchers": 147,
      "open_issues": 5,
      "size": 5090
    },
    "tech_info": {
      "language": "JavaScript",
      "languages": {
        "JavaScript": 294010
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "<!--\n  QUEEN RIAM MD - Professional README\n  Made by Hector Manuel\n-->\n\n<h1 align=\"center\">👑 QUEEN RIAM </h1>\n\n<p align=\"center\">\n  <img src=\"https://i.imgur.com/6H0FXSa.jpeg\" alt=\"Queen Riam Banner\" width=\"350\" />\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/Dev-Kango\" title=\"DevKango\"><img src=\"https://img.shields.io/badge/DevKango-181717?style=for-the-badge&logo=github\" /></a>\n  <a href=\"https://wa.me/233000000000\" title=\"Contact on WhatsApp\"><img src=\"https://img.shields.io/badge/Contact-25D366?style=for-the-badge&logo=whatsapp&logoColor=white\" /></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://github.com/Dev-Kango/Queen-Riam-\"><img src=\"https://img.shields.io/github/stars/Dev-Kango/Queen-Riam-?color=FFD700&style=flat-square\" alt=\"Stars\" /></a>\n  <a href=\"https://github.com/Dev-Kango/Queen-Riam-/network/members\"><img src=\"https://img.shields.io/github/forks/Dev-Kango/Queen-Riam-?color=00BFFF&style=flat-square\" alt=\"Forks\" /></a>\n  <a href=\"https://github.com/Dev-Kango/Queen-Riam-/watchers\"><img src=\"https://img.shields.io/github/watchers/Dev-Kango/Queen-Riam-?label=Watchers&color=orange&style=flat-square\" alt=\"Watchers\" /></a>\n  <a href=\"https://github.com/Dev-Kango/Queen-Riam-\"><img src=\"https://img.shields.io/github/repo-size/Dev-Kango/Queen-Riam-?style=flat-square&color=green\" alt=\"Repo Size\" /></a>\n  <img src=\"https://komarev.com/ghpvc/?username=Dev-Kango&label=Profile+Views&color=blue&style=flat-square\" alt=\"Profile View Counter\"/>\n</p>\n\n---\n\n## 📝 About\n\n**QUEEN RIAM** is a modern WhatsApp multi-device bot built with Node.js, Baileys, and Express. It is designed for ease of use, extensibility, and robust automation for group and personal chats. Please use this tool responsibly and for educational purposes only.\n\n---\n\n## 🔑 Session Pairing\n\nGenerate your Session ID to connect your WhatsApp account:\n\n<p align=\"center\">\n  <a href=\"https://pair-queenriam.vercel.app/\" target=\"_blank\">\n    <img alt=\"Pair Site 1\" src=\"https://img.shields.io/badge/Pair%20Site%201-233044?style=for-the-badge&logo=github&logoColor=white\"/>\n  </a>\n  <a href=\"https://riam-pair-806c062bbf06.herokuapp.com/pair\" target=\"_blank\">\n    <img alt=\"Pair Site 2\" src=\"https://img.shields.io/badge/Pair%20Site%202-A10000?style=for-the-badge&logo=heroku&logoColor=white\"/>\n  </a>\n</p>\n\n---\n\n## 🚀 Deploy Instantly\n\nDeploy QUEEN RIAM with one click on any platform below:\n\n<table align=\"center\">\n  <tr>\n    <td align=\"center\">\n      <a href=\"https://dashboard.heroku.com/new?template=https://github.com/Dev-Kango/Queen-Riam-\" target=\"_blank\">\n        <img src=\"https://img.shields.io/badge/Heroku-430098?style=for-the-badge&logo=heroku&logoColor=white\"/>\n      </a>\n    </td>\n    <td align=\"center\">\n      <a href=\"https://railway.app/new\" target=\"_blank\">\n        <img src=\"https://img.shields.io/badge/Railway-FF8700?style=for-the-badge&logo=railway&logoColor=white\"/>\n      </a>\n    </td>\n  </tr>\n  <tr>\n    <td align=\"center\">\n      <a href=\"https://dashboard.render.com/web/new\" target=\"_blank\">\n        <img src=\"https://img.shields.io/badge/Render-00ffaa?style=for-the-badge&logo=render&logoColor=white\"/>\n      </a>\n    </td>\n    <td align=\"center\">\n      <a href=\"https://app.koyeb.com/services/deploy?type=git&repository=Dev-Kango/Queen-Riam-\" target=\"_blank\">\n        <img src=\"https://img.shields.io/badge/Koyeb-FF009D?style=for-the-badge&logo=koyeb&logoColor=white\"/>\n      </a>\n    </td>\n  </tr>\n</table>\n\n---\n\n## ✨ Features\n\n- Powerful command handler (support for custom modules and events)\n- Multiple deployment options (Heroku, Railway, Render, Koyeb)\n- Easy session pairing for secure login\n- Highly customizable with environment variables\n- User-friendly logs and error messages\n- Clean, modern codebase with clear separation of logic\n\n---\n\n## 🛠️ Requirements\n\n- Node.js >= 18.x\n- A WhatsApp account (Active mobile)\n- Git, NPM/Yarn\n\n---\n\n## ⚡ Quick Start\n\n\n\n---\n\n## ❤️ Credits\n\n- [DevKango](https://github.com/Dev-Kango)\n- [OfficialKango](https://github.com/OfficialKango)\n- [Baileys](https://github.com/WhiskeySockets)\n\n<p align=\"center\">🇬🇭 Made with ❤️ in Ghana</p>\n\n---\n\n## ⚠️ Notice\n\n- **Educational use only.**\n- Do **not** use this bot for spam or any illegal activities.\n\n> Powered by Hector Manuel ✨\n\n---\n\n<p align=\"center\">\n  <a href=\"https://git.io/typing-svg\">\n    <img src=\"https://readme-typing-svg.herokuapp.com?font=Rockstar-ExtraBold&color=F94E8B&lines=WELCOME+TO+QUEEN+RIAM+MD;MADE+BY+HECTOR+MANUEL;THANKS+FOR+VISITING+MY+REPO\" alt=\"Typing SVG\" />\n  </a>\n</p>\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-23T02:23:27.574595"
  }
]