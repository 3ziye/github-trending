[
  {
    "basic_info": {
      "name": "pingoo",
      "full_name": "pingooio/pingoo",
      "owner": "pingooio",
      "description": "The fast and secure Load Balancer / API Gateway / Reverse Proxy with built-in service discovery, GeoIP, WAF, bot protection and much more - https://pingoo.io",
      "url": "https://github.com/pingooio/pingoo",
      "clone_url": "https://github.com/pingooio/pingoo.git",
      "ssh_url": "git@github.com:pingooio/pingoo.git",
      "homepage": "https://pingoo.io",
      "created_at": "2025-09-17T07:18:40Z",
      "updated_at": "2025-10-16T22:37:33Z",
      "pushed_at": "2025-10-15T07:55:37Z"
    },
    "stats": {
      "stars": 831,
      "forks": 29,
      "watchers": 831,
      "open_issues": 10,
      "size": 327
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 225038,
        "TypeScript": 7020,
        "Dockerfile": 6704,
        "Makefile": 2250,
        "Shell": 1620,
        "JavaScript": 1234,
        "HTML": 892,
        "CSS": 620,
        "Vim Script": 19
      },
      "license": "MIT License",
      "topics": [
        "akamai",
        "anti-bot",
        "apache2",
        "api",
        "api-gateway",
        "captcha",
        "cloudflare",
        "fastly",
        "firewall",
        "haproxy",
        "load-balancer",
        "nginx",
        "pingoo",
        "proxy",
        "quic",
        "reverse-proxy",
        "rust",
        "security",
        "service-discovery",
        "waf"
      ]
    },
    "content": {
      "readme": "<p align=\"center\">\n  <a href=\"https://pingoo.io\" target=\"_blank\" rel=\"noopener\"><img alt=\"Pingoo logo\" src=\"https://pingoo.io/icon-256.png\" height=\"128\" /></a>\n  <h1 align=\"center\">Pingoo</h1>\n  <h3 align=\"center\">The fast and secure Load Balancer / API Gateway / Reverse Proxy with built-in service discovery, GeoIP, WAF, bot protection and much more</h3>\n  <h3 align=\"center\">\n    <a href=\"https://pingoo.io\">Documentation</a> | <a href=\"https://kerkour.com/announcing-pingoo\">Read the launch post</a>\n  </h3>\n</p>\n\nOpen Source load balancers and reverse proxies are stuck in the past century with a very slow pace of development and most of the important features reserved for \"Enterprise Editions\" which lead developers to use third-party cloud services, exposing their users' traffic to legal, security and reliability risks.\n\nPingoo is a modern Load Balancer / API Gateway / Reverse Proxy that run on your own servers and already have (or will have soon) all the features you expect from managed services and even more. All of that with a huge boost in performance and security thanks to reduced latency and, of course, Rust ;)\n\n* Automatic and Post-Quantum HTTPS / TLS\n* Service Discovery (Docker, DNS...)\n* Web Application Firewall (WAF)\n* Easy compliance because the data never leaves your servers\n* Bot protection and management\n* TCP proxying\n* GeoIP (country, ASN)\n* Static sites\n* And much more\n\n\n## Quickstart\n\n```bash\n# You have a static site in the www folder\n$ ls www\nindex.html\n$ docker run --rm -ti -p 80:80 -v `pwd`/www:/var/wwww pingooio/pingoo\n# Pingoo is now listenning on http://0.0.0.0\n```\n\n## Documentation\n\nSee https://pingoo.io\n\n\n## Social\n\nFollow us on [Bluesky @pingoo.io](https://bsky.app/profile/pingoo.io) or on Mastodon [@pingooio@mastodon.social](https://mastodon.social/@pingooio) to get the latest updates and technical deep dives ü¶Ä‚ö°Ô∏è\n\n## Contributing\n\nPlease open an issue to discuss your idea before submitting a Pull Request.\n\n\n## Support\n\nDo you have custom needs? Do you want your features to be prioritized? Are you under attack and need help? Do you need support for deploying and self-hosting Pingoo?\n\nFeel free to reach our team of experts to see how we can help: https://pingoo.io/contact\n\n\n## Security\n\nWe are committed to make Pingoo the most secure Load Balancer / Reverse Proxy in the universe and beyond. If you've found a security issue in Pingoo, we appreciate your help in disclosing it to us in a responsible manner by contacting us: https://pingoo.io/contact\n\n\n## License\n\nMIT. See `LICENSE.txt`\n\nForever Open Source. No Open Core or \"Enterprise Edition\".\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:20:44.524209"
  },
  {
    "basic_info": {
      "name": "run",
      "full_name": "Esubaalew/run",
      "owner": "Esubaalew",
      "description": "Universal multi-language runner and smart REPL written in Rust.",
      "url": "https://github.com/Esubaalew/run",
      "clone_url": "https://github.com/Esubaalew/run.git",
      "ssh_url": "git@github.com:Esubaalew/run.git",
      "homepage": "https://run.esubalew.et/",
      "created_at": "2025-09-30T08:03:00Z",
      "updated_at": "2025-10-16T21:42:15Z",
      "pushed_at": "2025-10-10T12:43:49Z"
    },
    "stats": {
      "stars": 809,
      "forks": 17,
      "watchers": 809,
      "open_issues": 2,
      "size": 127
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 508379,
        "Shell": 4946,
        "Smarty": 1134
      },
      "license": "Apache License 2.0",
      "topics": [
        "cli",
        "crate",
        "open-source",
        "repl",
        "rust"
      ]
    },
    "content": {
      "readme": "<h1 align=\"center\">run</h1>\n\n<p align=\"center\">\n\t<strong>Polyglot command runner & smart REPL that lets you script, compile, and iterate in 25+ languages without touching another CLI.</strong>\n</p>\n\n<p align=\"center\">\n  <!-- Release -->\n  <a href=\"https://github.com/Esubaalew/run/releases/latest\">\n    <img src=\"https://img.shields.io/github/v/release/Esubaalew/run?style=flat-square&color=orange&logo=github\" alt=\"Latest release\" />\n  </a>\n\n  <!-- Release status -->\n  <img src=\"https://img.shields.io/badge/release-passing-brightgreen?style=flat-square\" alt=\"Release passing\" />\n\n  <!-- Docs -->\n  <a href=\"https://docs.rs/run-kit\">\n    <img src=\"https://img.shields.io/badge/docs-passing-brightgreen?style=flat-square&logo=rust\" alt=\"Docs passing\" />\n  </a>\n\n  <!-- Crates.io -->\n  <a href=\"https://crates.io/crates/run-kit\">\n    <img src=\"https://img.shields.io/crates/v/run-kit.svg?style=flat-square&logo=rust&color=red\" alt=\"crates.io\" />\n  </a>\n\n  <!-- Downloads -->\n  <a href=\"https://github.com/Esubaalew/run/releases\">\n    <img src=\"https://img.shields.io/github/downloads/Esubaalew/run/total?style=flat-square&color=blue\" alt=\"Downloads\" />\n  </a>\n\n  <!-- Stars -->\n  <a href=\"https://github.com/Esubaalew/run/stargazers\">\n    <img src=\"https://img.shields.io/github/stars/Esubaalew/run?style=flat-square&color=yellow\" alt=\"GitHub stars\" />\n  </a>\n\n  <!-- Platforms -->\n  <img src=\"https://img.shields.io/badge/platform-Linux%20%7C%20macOS%20%7C%20Windows-lightgrey?style=flat-square\" alt=\"Platform support\" />\n\n  <!-- License -->\n  <a href=\"LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-Apache%202.0-blue?style=flat-square\" alt=\"License\" />\n  </a>\n</p>\n\n<p align=\"center\">\n\t<a href=\"https://run.esubalew.et/\">Website</a>\n\t‚Ä¢\n\t<a href=\"https://run.esubalew.et/docs/overview\">Docs Overview</a>\n</p>\n\n> Built in Rust for developers who live in multiple runtimes. `run` gives you a consistent CLI, persistent REPLs, and batteries-included examples for your favorite languages.\n\n---\n\n<details>\n<summary><strong>Table of contents</strong></summary>\n\n- [Website and Docs](#website-and-docs)\n- [Overview](#overview---universal-multi-language-runner)\n  - [What is run?](#what-is-run)\n  - [Who is this for?](#who-is-this-for)\n  - [Why was run created?](#why-was-run-created)\n  - [Why Rust?](#why-rust)\n- [Highlights](#-highlights)\n- [Quickstart](#-quickstart)\n- [Installation](#-installation)\n- [How it works](#-how-it-works)\n- [Supported languages](#-supported-languages)\n  - [Complete Language Aliases Reference](#complete-language-aliases-reference)\n- [Command Variations - Flexible Syntax](#command-variations---flexible-syntax)\n- [Command-Line Flags Reference](#command-line-flags-reference)\n- [‚ö†Ô∏è When to Use --lang (Important!)](#Ô∏è-when-to-use---lang-important)\n- [Main Function Flexibility](#main-function-flexibility)\n- [Examples](#-examples)\n- [REPL](#-repl)\n  - [Interactive REPL - Line by Line or Paste All](#interactive-repl---line-by-line-or-paste-all)\n  - [Variable Persistence & Language Switching](#variable-persistence--language-switching)\n  - [REPL Commands](#repl-commands)\n- [Stdin Piping Examples](#stdin-piping-examples)\n- [Language-Specific Notes](#language-specific-notes)\n- [üìÑ License](#-license)\n\n</details>\n\n---\n\n# Website and Docs\n\nThe official website and full documentation are available here:\n\n- Website: https://run.esubalew.et/\n- Docs Overview: https://run.esubalew.et/docs/overview\n\nUse these links to explore features, language guides, and detailed examples.\n\n---\n\n# Overview - Universal Multi-Language Runner\n\nA powerful command-line tool for executing code in 25 programming languages\n\n## What is run?\n\nrun is a universal multi-language runner and smart REPL (Read-Eval-Print Loop) written in Rust. It provides a unified interface for executing code across 25 programming languages without the hassle of managing multiple compilers, interpreters, or build tools.\n\nWhether you're a beginner learning your first programming language or an experienced polyglot developer, run streamlines your workflow by providing consistent commands and behavior across all supported languages.\n\n## Who is this for?\n\n‚Ä¢ Beginners: Learn programming without worrying about complex setup procedures. Just install run and start coding in any language.\n\n‚Ä¢ Students: Quickly test code snippets and experiment with different programming paradigms across multiple languages.\n\n‚Ä¢ Developers: Prototype ideas rapidly, test algorithms, and switch between languages seamlessly without context switching.\n\n‚Ä¢ DevOps Engineers: Write and test automation scripts in various languages from a single tool.\n\n‚Ä¢ Educators: Teach programming concepts across multiple languages with a consistent interface.\n\n## Why was run created?\n\nTraditional development workflows require installing and configuring separate tools for each programming language. This creates several problems:\n\n‚Ä¢ Time-consuming setup: Installing compilers, interpreters, package managers, and configuring environments ",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-17T02:20:45.823303"
  },
  {
    "basic_info": {
      "name": "reddix",
      "full_name": "ck-zhang/reddix",
      "owner": "ck-zhang",
      "description": "Reddix ‚Äì Reddit, refined for the terminal.",
      "url": "https://github.com/ck-zhang/reddix",
      "clone_url": "https://github.com/ck-zhang/reddix.git",
      "ssh_url": "git@github.com:ck-zhang/reddix.git",
      "homepage": "",
      "created_at": "2025-10-03T09:57:33Z",
      "updated_at": "2025-10-16T18:08:45Z",
      "pushed_at": "2025-10-15T12:46:15Z"
    },
    "stats": {
      "stars": 445,
      "forks": 4,
      "watchers": 445,
      "open_issues": 5,
      "size": 1324
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 558305
      },
      "license": "MIT License",
      "topics": [
        "reddit",
        "reddit-client"
      ]
    },
    "content": {
      "readme": "# Reddix\n\n[![Release](https://img.shields.io/github/v/release/ck-zhang/reddix?style=flat-square)](https://github.com/ck-zhang/reddix/releases/latest)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square)](LICENSE)\n\nReddix - Reddit, refined for the terminal.\n\n![Reddix UI](docs/assets/reddix-ui-preview.png)\n\n## Features\n\n- image preview based on kitty graphics protocol\n- video playback through mpv's Kitty integration\n- multi-account support\n- keyboard first navigation\n- smart caching\n- NSFW filter toggle\n\n## Install\n\nDownload the latest [release](https://github.com/ck-zhang/reddix/releases/latest) from GitHub or run one of the installers\n\n```sh\ncurl --proto '=https' --tlsv1.2 -LsSf https://github.com/ck-zhang/reddix/releases/latest/download/reddix-installer.sh | sh\n```\n\n## Quickstart\n1. Create a Reddit ‚Äúscript‚Äù at https://www.reddit.com/prefs/apps and set the redirect URI to `http://127.0.0.1:65010/reddix/callback`.\n2. Launch `reddix`, press `m`, and follow the guided menu for setup.\n3. Prefer to configure things manually? Copy [`docs/examples/config.yaml`](docs/examples/config.yaml) into `~/.config/reddix/config.yaml` and fill in your credentials.\n\nCore shortcuts: `j/k` move, `h/l` change panes, `m` guided menu, `o` action menu, `r` refresh, `s` sync subs, `u/d` vote, `q` quit.\n\n## Support\n- Feature requests and contributions are welcome, this project is in its very early stage.\n- Track ongoing ideas in the [feature request log](docs/feature-requests.md).\n- Donation: https://ko-fi.com/ckzhang\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-17T02:20:47.146884"
  },
  {
    "basic_info": {
      "name": "firm",
      "full_name": "42futures/firm",
      "owner": "42futures",
      "description": "A text-based work management system for technologists.",
      "url": "https://github.com/42futures/firm",
      "clone_url": "https://github.com/42futures/firm.git",
      "ssh_url": "git@github.com:42futures/firm.git",
      "homepage": "",
      "created_at": "2025-10-10T11:42:37Z",
      "updated_at": "2025-10-17T01:54:19Z",
      "pushed_at": "2025-10-16T19:13:09Z"
    },
    "stats": {
      "stars": 421,
      "forks": 13,
      "watchers": 421,
      "open_issues": 5,
      "size": 217
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 287963,
        "Typst": 1971,
        "PowerShell": 1412,
        "Shell": 1222
      },
      "license": "GNU Affero General Public License v3.0",
      "topics": [
        "business",
        "cli",
        "dsl",
        "firm",
        "graph",
        "work"
      ]
    },
    "content": {
      "readme": "# Firm: Business-as-code\nA text-based work management system for technologists.\n\n![Firm CLI demo](media/demo.gif)\n\n## Why?\nModern businesses are natively digital, but lack a unified view. Your data is scattered across SaaS tools you don't control, so you piece together answers by jumping between platforms.\n\nYour business is a graph: customers link to projects, projects link to tasks, people link to organizations. Firm lets you define these relationships in plain text files (you own!).\n\nVersion controlled, locally stored and structured as code with the Firm DSL. This structured representation of your work, *business-as-code*, makes your business readable to yourself and to the robots that help you run it.\n\n### Features\n- **Everything in one place:** Organizations, contacts, projects, and how they relate.\n- **Own your data:** Plain text files and tooling that runs on your machine.\n- **Open data model:** Tailor to your business with custom schemas.\n- **Automate anything:** Search, report, integrate, whatever. It's just code.\n- **AI-ready:** LLMs can read, write, and query your business structure.\n\n## Installation\nThe Firm CLI is available to download via Github Releases. Install scripts are provided for desktop platforms to make that process easy.\n\n### Linux and macOS\n```bash\ncurl -fsSL https://raw.githubusercontent.com/42futures/firm/main/install.sh | sudo bash\n```\n\n### Windows\n```bash\nirm https://raw.githubusercontent.com/42futures/firm/main/install.ps1 | iex\n```\n\n## Getting started\nFirm operates on a \"workspace\": a directory containing all your `.firm` DSL files. The Firm CLI processes every file in this workspace to build a unified, queryable graph of your business.\n\nThe first step is to add an entity to your workspace. You can do this either by using the CLI or by writing the DSL yourself.\n\n### Add entities with the CLI\nUse `firm add` to interactively generate new entities. Out of the box, Firm supports a set of pre-built entity schemas for org mapping, customer relations and work management. The CLI will prompt you for the necessary info and generate corresponding DSL.\n\n```bash\n$ firm add\n```\n```\nAdding new entity\n\n> Type: organization\n> ID: megacorp\n> Name: Megacorp Ltd.\n> Email: mega@corp.com\n> Urls: [\"corp.com\"]\n\nWriting generated DSL to file my_workspace/generated/organization.firm\n```\n\n### Write DSL manually\nAlternatively, you can create a `.firm` file and write the DSL yourself.\n\n```firm\norganization megacorp {\n  name = \"Megacorp Ltd.\"\n  email = \"mega@corp.com\"\n  urls = [\"corp.com\"]\n}\n```\n\nBoth of these methods achieve the same result: a new entity defined in your Firm workspace.\n\n### Querying the workspace\nOnce you have entities in your workspace, you can query them using the CLI.\n\n#### Listing entities\nUse `firm list` to see all entities of a specific type.\n\n```bash\n$ firm list task\n```\n```\nFound 7 entities with type 'task'\n\nID: task.design_homepage\nName: Design new homepage\nIs completed: false\nAssignee ref: person.jane_doe\n\n...\n```\n\n#### Getting an entity\nTo view the full details of a single entity, use `firm get` followed by the entity's type and ID.\n\n```bash\n$ firm get person john_doe\n```\n```\nFound 'person' entity with ID 'john_doe'\n\nID: person.john_doe\nName: John Doe\nEmail: john@doe.com\n```\n\n#### Exploring relationships\nThe power of Firm lies in its ability to travel a graph of your business. Use `firm related` to explore connections to/from any entity.\n\n```bash\n$ firm related contact john_doe\n```\n```\nFound 1 relationships for 'contact' entity with ID 'john_doe'\n\nID: interaction.megacorp_intro\nType: Call\nSubject: Initial discussion about Project X\nInteraction date: 2025-09-30 09:45:00 +02:00\nInitiator ref: person.jane_smith\nPrimary contact ref: contact.john_doe\n```\n\n#### What's next\nYou've seen the basic commands for interacting with a Firm workspace. The project is a work-in-progress, and you can expect to see more sophisticated features added over time, including a more powerful query engine and tools for running business workflows directly from the CLI.\n\n## Using Firm as a library\nBeyond the CLI, you can integrate Firm's core logic directly into your own software using the `firm_core` and `firm_lang` Rust packages. This allows you to build more powerful automations and integrations on top of Firm.\n\nFirst, add the Firm crates to your `Cargo.toml`:\n\n```toml\n[dependencies]\nfirm_core = { git = \"https://github.com/42futures/firm.git\" }\nfirm_lang = { git = \"https://github.com/42futures/firm.git\" }\n```\n\nYou can then load a workspace, build the entity graph, and query it programmatically:\n\n```rust\nuse firm_lang::workspace::Workspace;\nuse firm_core::EntityGraph;\n\n// Load workspace from a directory\nlet mut workspace = Workspace::new();\nworkspace.load_directory(\"./my_workspace\")?;\nlet build = workspace.build()?;\n\n// Build the graph from the workspace entities\nlet mut graph = EntityGraph::new();\ngraph.add_entities(build.entities)?;\ngraph.build();\n\n// Query the graph for a specific entity\nlet lead = gr",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:20:48.431061"
  },
  {
    "basic_info": {
      "name": "gpu-kill",
      "full_name": "kagehq/gpu-kill",
      "owner": "kagehq",
      "description": "Manage your GPUs across NVIDIA, AMD, Intel, and Apple Silicon systems.",
      "url": "https://github.com/kagehq/gpu-kill",
      "clone_url": "https://github.com/kagehq/gpu-kill.git",
      "ssh_url": "git@github.com:kagehq/gpu-kill.git",
      "homepage": "https://gpukill.com",
      "created_at": "2025-09-18T17:21:38Z",
      "updated_at": "2025-10-16T17:37:47Z",
      "pushed_at": "2025-10-14T23:20:05Z"
    },
    "stats": {
      "stars": 373,
      "forks": 9,
      "watchers": 373,
      "open_issues": 1,
      "size": 526
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 397823,
        "Shell": 21084,
        "PowerShell": 2451
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "# GPU Kill\n\nA CLI tool for managing GPUs across NVIDIA, AMD, Intel, and Apple Silicon systems. Monitor, control, and secure your GPU infrastructure with ease.\n\n## Community & Support\n\nJoin our Discord community for discussions, support, and updates:\n\n[![Discord](https://img.shields.io/badge/Discord-Join%20our%20community-7289DA?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/KqdBcqRk5E)\n\n\n## Features\n\n- **Monitor GPUs**: Real-time usage, memory, temperature, and processes\n- **Kill Processes**: Gracefully terminate stuck GPU processes\n- **Security**: Detect crypto miners and suspicious activity\n- **Guard Mode**: Policy enforcement to prevent resource abuse\n- **Remote**: Manage GPUs across multiple servers\n- **Multi-Vendor**: Works with NVIDIA, AMD, Intel, and Apple Silicon\n- **AI Integration**: MCP server for AI assistant integration\n\n## Requirements\n\n### Build Performance\n\n**For faster development builds:**\n```bash\n# Fast release build (recommended for development)\ncargo build --profile release-fast\n\n# Standard release build (optimized for production)\ncargo build --release\n\n# Maximum optimization (slowest, best performance)\ncargo build --profile release-max\n```\n\n**Build times on typical hardware:**\n- Debug build: ~3 seconds\n- Release-fast: ~28 seconds  \n- Release: ~28 seconds (improved from 76 seconds)\n- Release-max: ~60+ seconds (maximum optimization)\n\n### System Dependencies\n\n**Linux (Ubuntu/Debian):**\n```bash\nsudo apt install build-essential libssl-dev pkg-config\n```\n\n**Linux (Fedora/RHEL/CentOS):**\n```bash\nsudo dnf install gcc gcc-c++ pkg-config openssl-devel\n# or for older systems:\n# sudo yum install gcc gcc-c++ pkg-config openssl-devel\n```\n\n**macOS:**\n```bash\n# Install Xcode command line tools\nxcode-select --install\n# OpenSSL is included with macOS\n```\n\n**Windows:**\n- Install Visual Studio Build Tools\n- OpenSSL is handled automatically by vcpkg\n\n### GPU Drivers\n\n- **NVIDIA**: NVIDIA drivers installed\n- **AMD**: ROCm drivers installed  \n- **Intel**: intel-gpu-tools package installed\n- **Apple Silicon**: macOS with Apple Silicon (M1/M2/M3/M4)\n\n### Build Requirements\n\n- **OS**: Linux, macOS, or Windows\n- **Rust**: 1.70+ (for building from source)\n\n## Quick Start\n\n### Install & Run\n```bash\n# Build from source (first build may take 2-3 minutes)\ngit clone https://github.com/kagehq/gpu-kill.git\ncd gpu-kill\ncargo build --release\n\n# Or install via Cargo\ncargo install gpukill\n\n# Or one-liner installers (recommended)\n# macOS/Linux\ncurl -fsSL https://raw.githubusercontent.com/kagehq/gpu-kill/refs/heads/main/scripts/install.sh | sh\n# Windows (PowerShell)\nirm https://raw.githubusercontent.com/kagehq/gpu-kill/refs/heads/main/scripts/install.ps1 | iex\n\n# List your GPUs\ngpukill --list\n\n# Watch GPU usage in real-time\ngpukill --list --watch\n```\n\n### Dead-simple cheatsheet\n```bash\n# Live watch (alias)\ngpukill watch            # = gpukill --list --watch\n\n# Kill job by PID (positional alias)\ngpukill 12345            # = gpukill --kill --pid 12345\n\n# Free a specific GPU index (kill all jobs on GPU 0)\ngpukill --kill --gpu 0   # add --batch to actually kill; preview without it\n\n# Force reset a GPU (shorthand)\ngpukill --reset 0        # = gpukill --reset --gpu 0\n\n# Safe mode: dry-run first (no changes)\ngpukill 12345 --safe     # alias: --dry-run\n```\n\n## Dashboard\n\n![GPU Kill Dashboard](dashboard/public/screenshot.png)\n\nCheck the [Kill Suite](https://kagehq.com) website.\n\n## MCP Server\n\nGPU Kill includes a MCP server that enables AI assistants to interact with GPU management functionality:\n\n- **Resources**: Read GPU status, processes, audit data, policies, and security scans\n- **Tools**: Kill processes, reset GPUs, scan for threats, create policies\n\n```bash\n# Start the MCP server\ncargo run --release -p gpukill-mcp\n\n# Server runs on http://localhost:3001/mcp\n```\n\n## Usage\n\nAsk your AI to use the tools.\n\n```text\nWhat GPUs do I have and what's their current usage?\n```\n\n```text\nKill the Python process that's stuck on GPU 0\n```\n\n```text\nKill all training processes that are using too much GPU memory\n```\n\n```text\nShow me GPU usage and kill any stuck processes\n```\n\n```text\nScan for crypto miners and suspicious activity\n```\n\n```text\nCreate a policy to limit user memory usage to 8GB\n```\n\n```text\nReset GPU 1 because it's not responding\n```\n\n```text\nWhat processes are currently using my GPUs?\n```\n\nSee [mcp/README.md](mcp/README.md) for detailed MCP server documentation.\n\n\n## Security & Policies\n\n### Detect Threats\n```bash\n# Scan for crypto miners and suspicious activity\ngpukill --audit --rogue\n\n# Configure detection rules\ngpukill --audit --rogue-config\n```\n\n### Policy Enforcement\n```bash\n# Enable Guard Mode\ngpukill --guard --guard-enable\n\n# Test policies safely\ngpukill --guard --guard-test-policies\n```\n\n*For detailed security and policy documentation, see [DETAILED.md](DETAILED.md).*\n\n## Remote Management\n\nManage GPUs across multiple servers via SSH:\n\n```bash\n# List GPUs on remote server\ngpukill --remote staging-serve",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:20:49.734146"
  },
  {
    "basic_info": {
      "name": "mdserve",
      "full_name": "jfernandez/mdserve",
      "owner": "jfernandez",
      "description": "Fast markdown preview server with live reload and theme support.",
      "url": "https://github.com/jfernandez/mdserve",
      "clone_url": "https://github.com/jfernandez/mdserve.git",
      "ssh_url": "git@github.com:jfernandez/mdserve.git",
      "homepage": "",
      "created_at": "2025-09-22T04:15:44Z",
      "updated_at": "2025-10-16T11:02:42Z",
      "pushed_at": "2025-10-16T00:29:35Z"
    },
    "stats": {
      "stars": 319,
      "forks": 19,
      "watchers": 319,
      "open_issues": 8,
      "size": 1409
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 29364,
        "HTML": 18642,
        "Shell": 7161,
        "Nix": 1005
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# mdserve\n\nFast markdown preview server with **live reload** and **theme support**.\n\nJust run `mdserve file.md` and start writing. One statically-compiled executable that runs anywhere - no installation, no dependencies.\n\n![Terminal output when starting mdserve](mdserve-terminal-output.png)\n\n## Features\n\n- ‚ö° **Instant Live Reload** - Real-time updates via WebSocket when markdown file changes\n- üé® **Multiple Themes** - Built-in theme selector with 5 themes including Catppuccin variants\n- üìù **GitHub Flavored Markdown** - Full GFM support including tables, strikethrough, code blocks, and task lists\n- üìä **Mermaid Diagrams** - Automatic rendering of flowcharts, sequence diagrams, class diagrams, and more\n- üöÄ **Fast** - Built with Rust and Axum for excellent performance and low memory usage\n\n## Installation\n\n### macOS (Homebrew)\n\n```bash\nbrew install mdserve\n```\n\n### Linux\n\n```bash\ncurl -sSfL https://raw.githubusercontent.com/jfernandez/mdserve/main/install.sh | bash\n```\n\nThis will automatically detect your platform and install the latest binary to your system.\n\n### Alternative Methods\n\n#### Using Cargo\n\n```bash\ncargo install mdserve\n```\n\n#### Arch Linux\n\n```bash\nsudo pacman -S mdserve\n```\n\n#### Nix Package Manager\n\n``` bash\nnix profile install github:jfernandez/mdserve\n```\n\n#### From Source\n\n```bash\ngit clone https://github.com/jfernandez/mdserve.git\ncd mdserve\ncargo build --release\ncp target/release/mdserve <folder in your PATH>\n```\n\n#### Manual Download\n\nDownload the appropriate binary for your platform from the [latest release](https://github.com/jfernandez/mdserve/releases/latest).\n\n## Usage\n\n### Basic Usage\n\n```bash\n# Serve a markdown file on default port (3000)\nmdserve README.md\n\n# Serve on custom port\nmdserve README.md --port 8080\nmdserve README.md -p 8080\n```\n\n\n## Endpoints\n\nOnce running, the server provides (default: [http://localhost:3000](http://localhost:3000)):\n\n- **[`/`](http://localhost:3000/)** - Rendered HTML with live reload via WebSocket\n- **[`/raw`](http://localhost:3000/raw)** - Raw markdown content (useful for debugging)\n- **[`/ws`](http://localhost:3000/ws)** - WebSocket endpoint for real-time updates\n\n## Theme System\n\n**Built-in Theme Selector**\n- Click the üé® button in the top-right corner to open theme selector\n- **5 Available Themes**:\n  - **Light**: Clean, bright theme optimized for readability\n  - **Dark**: GitHub-inspired dark theme with comfortable contrast\n  - **Catppuccin Latte**: Warm light theme with soothing pastels\n  - **Catppuccin Macchiato**: Cozy mid-tone theme with rich colors\n  - **Catppuccin Mocha**: Deep dark theme with vibrant accents\n- **Persistent Preference**: Your theme choice is automatically saved in browser localStorage\n\n*Click the theme button (üé®) to access the built-in theme selector*\n\n![Theme picker interface](mdserve-theme-picker.png)\n\n*mdserve running with the Catppuccin Macchiato theme - notice the warm, cozy colors and excellent readability*\n\n![mdserve with Catppuccin Macchiato theme](mdserve-catppuccin-macchiato.png)\n\n## Development\n\n### Prerequisites\n\n- Rust 1.85+ (2024 edition)\n\n### Building\n\n```bash\ncargo build --release\n```\n\n### Running Tests\n\n```bash\n# Run all tests\ncargo test\n\n# Run integration tests only\ncargo test --test integration_test\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built with [Axum](https://github.com/tokio-rs/axum) web framework\n- Markdown parsing by [markdown-rs](https://github.com/wooorm/markdown-rs)\n- [Catppuccin](https://catppuccin.com/) color themes\n- Inspired by various markdown preview tools\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:20:51.029680"
  },
  {
    "basic_info": {
      "name": "blogr",
      "full_name": "bahdotsh/blogr",
      "owner": "bahdotsh",
      "description": "Write, edit, and publish your blog without ever leaving your terminal!",
      "url": "https://github.com/bahdotsh/blogr",
      "clone_url": "https://github.com/bahdotsh/blogr.git",
      "ssh_url": "git@github.com:bahdotsh/blogr.git",
      "homepage": "https://github.com/bahdotsh/blogr",
      "created_at": "2025-09-20T04:59:23Z",
      "updated_at": "2025-10-16T21:56:01Z",
      "pushed_at": "2025-10-13T11:21:18Z"
    },
    "stats": {
      "stars": 242,
      "forks": 16,
      "watchers": 242,
      "open_issues": 14,
      "size": 1470
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 563037,
        "HTML": 169493,
        "CSS": 115263,
        "JavaScript": 17740,
        "Makefile": 2390,
        "Dockerfile": 1274
      },
      "license": "MIT License",
      "topics": [
        "blog",
        "blog-engine",
        "cli",
        "documentation-tool",
        "hacktoberfest",
        "newsletter",
        "ratatui",
        "rust",
        "ssg",
        "ssg-build",
        "static-site-generator",
        "tui"
      ]
    },
    "content": {
      "readme": "# Blogr\n\n[![Rust](https://img.shields.io/badge/rust-1.70%2B-orange.svg)](https://www.rust-lang.org)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![GitHub Pages](https://img.shields.io/badge/deploy-GitHub%20Pages-blue.svg)](https://pages.github.com/)\n\nA fast, lightweight static site generator built in Rust for creating and managing blogs. Write in Markdown, preview with a built-in terminal editor, and deploy to GitHub Pages with a single command.\n\n![Blogr Demo](demo.gif)\n\n## Quick Start\n\n**Get up and running in 5 minutes:**\n\n```bash\n# 1. Install Blogr\ncargo install blogr-cli\n\n# 2. Create your blog\nblogr init my-blog\ncd my-blog\n\n# 3. Create your first post\nblogr new \"Hello World\"\n\n# 4. Preview your blog\nblogr serve\n# Opens http://localhost:3000\n\n# 5. Deploy to GitHub Pages\nexport GITHUB_TOKEN=your_github_token\nblogr deploy\n```\n\n**For a personal website instead of a blog:**\n```bash\nblogr init --personal my-portfolio\n```\n\n## Installation\n\n**Requirements:**\n- Rust 1.70+ ([Install Rust](https://rustup.rs/))\n- Git (for deployment)\n- GitHub account (for GitHub Pages deployment)\n\n**Install from crates.io (recommended):**\n```bash\ncargo install blogr-cli\n```\n\n**Install from source:**\n```bash\ngit clone https://github.com/bahdotsh/blogr.git\ncd blogr\ncargo install --path blogr-cli\n```\n\n## Features\n\n**Two Site Types**\n- **Blog Mode**: Traditional blog with posts, archives, tags, and RSS feeds\n- **Personal Mode**: Portfolio/personal website without blog functionality\n- Single command initialization for either type\n- Theme-specific optimizations for each mode\n\n**Content Creation**\n- Write posts in Markdown with YAML frontmatter\n- Built-in terminal editor with live preview\n- Draft and published post management\n- Tag-based organization\n- Automatic slug generation\n\n**Site Generation**\n- Fast static site builds\n- Multiple themes: 7 built-in themes for blogs and personal sites\n- Full-text search with MiniSearch integration\n- Syntax highlighting for code blocks\n- RSS/Atom feeds (blog mode)\n- SEO-friendly output\n\n**Development**\n- Live reload development server\n- Interactive configuration editor\n- Project validation and cleanup tools\n- Comprehensive CLI commands\n\n**Deployment**\n- One-command GitHub Pages deployment\n- Custom domain support with CNAME generation\n- Automatic git branch management\n- Deployment status checking\n\n**Newsletter System** (optional)\n- Email subscription collection via IMAP\n- Interactive subscriber approval interface\n- Newsletter creation from blog posts or custom content\n- SMTP integration for reliable email delivery\n- Import/export from popular services (Mailchimp, ConvertKit, etc.)\n- REST API for external integrations\n- Extensible plugin system\n\n## Documentation\n\nFor detailed information about specific features, see the following documentation:\n\n- **[Commands Reference](docs/COMMANDS.md)** - Complete CLI command reference\n- **[Configuration Guide](docs/CONFIGURATION.md)** - All configuration options\n- **[Themes Guide](docs/THEMES.md)** - Available themes and customization\n- **[Newsletter System](docs/NEWSLETTER.md)** - Email newsletter setup and usage\n- **[Search Feature](docs/SEARCH.md)** - Full-text search configuration\n- **[Terminal Editor](docs/TERMINAL_EDITOR.md)** - Built-in editor usage\n\n## Basic Commands\n\n**Project Management**\n```bash\nblogr init my-blog                    # Create new blog\nblogr init --personal my-portfolio   # Create personal website\nblogr project info                    # Show project details\n```\n\n**Content Management**\n```bash\nblogr new \"My Post Title\"             # Create new post\nblogr list                            # List all posts\nblogr edit my-post-slug               # Edit existing post\n```\n\n**Development & Deployment**\n```bash\nblogr serve                           # Start dev server\nblogr build                           # Build static site\nblogr deploy                          # Deploy to GitHub Pages\n```\n\n**Configuration**\n```bash\nblogr config edit                     # Interactive config editor\nblogr theme set minimal-retro         # Switch theme\n```\n\n## Project Structure\n\nWhen you create a new blog, Blogr generates this structure:\n\n```\nmy-blog/\n‚îú‚îÄ‚îÄ blogr.toml              # Configuration file\n‚îú‚îÄ‚îÄ posts/                  # Markdown posts\n‚îÇ   ‚îú‚îÄ‚îÄ welcome.md          # Sample post\n‚îÇ   ‚îî‚îÄ‚îÄ about.md            # About page\n‚îú‚îÄ‚îÄ static/                 # Static files (images, CSS, JS)\n‚îÇ   ‚îú‚îÄ‚îÄ images/\n‚îÇ   ‚îú‚îÄ‚îÄ css/\n‚îÇ   ‚îî‚îÄ‚îÄ js/\n‚îî‚îÄ‚îÄ .github/workflows/      # GitHub Actions (auto-generated)\n    ‚îî‚îÄ‚îÄ deploy.yml\n```\n\n**Key files:**\n- `blogr.toml` - Your site configuration\n- `posts/` - All your blog posts in Markdown\n- `static/` - Images, custom CSS, and JavaScript files\n- `.github/workflows/` - Automatic deployment setup\n\n## Configuration\n\nEdit `blogr.toml` to configure your site. Use `blogr config edit` for an interactive editor.\n\n**Basic Configuration:**\n```toml\n[blog]\ntitle = \"My Blog\"\nauthor = \"Your Name\"\ndescripti",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:20:52.345656"
  },
  {
    "basic_info": {
      "name": "Wyrm",
      "full_name": "0xflux/Wyrm",
      "owner": "0xflux",
      "description": " The dragon in the dark. A red team post exploitation framework for testing security controls during red team assessments. ",
      "url": "https://github.com/0xflux/Wyrm",
      "clone_url": "https://github.com/0xflux/Wyrm.git",
      "ssh_url": "git@github.com:0xflux/Wyrm.git",
      "homepage": "",
      "created_at": "2025-09-25T16:41:37Z",
      "updated_at": "2025-10-17T00:29:58Z",
      "pushed_at": "2025-10-05T16:03:04Z"
    },
    "stats": {
      "stars": 235,
      "forks": 22,
      "watchers": 235,
      "open_issues": 1,
      "size": 3890
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 260642,
        "HTML": 15757,
        "CSS": 5881,
        "Shell": 3318,
        "PowerShell": 729,
        "PLpgSQL": 691,
        "Dockerfile": 646
      },
      "license": "MIT License",
      "topics": [
        "adversary-emulation",
        "adversary-simulation",
        "c2",
        "command-and-control",
        "pentest",
        "pentesting",
        "red-team",
        "red-teaming",
        "rust",
        "security-tools",
        "wyrm"
      ]
    },
    "content": {
      "readme": "# Wyrm - v0.3 Hatchling\n\n&#128679; Pre-release version &#128679;. If you want to support this project, please give it a star! I will be releasing updates and\ndevlogs on my [blog](https://fluxsec.red/) and [YouTube](https://www.youtube.com/@FluxSec) to document progress, so please give me a follow there.\n\nWyrm (pronounced 'worm', an old English word for 'serpent' or 'dragon') is a post exploitation, open source, Red Team security testing framework framework, written in Rust designed to be used by Red Teams, Purple Teams, \nPenetration Testers, and general infosec hobbyists. This project is fully built in Rust, with extra effort going into obfuscating artifacts which\ncould be present in memory. Project created and maintained by [flux](https://github.com/0xflux/), for **legal authorised security testing only**.\n\n![Wyrm Malware Post Exploitation Implant Red Team](resources/wyrm_landscape.png)\n\nWyrm currently supports only HTTP(S) agents using a custom encryption scheme for encrypting traffic below TLS, with a unique packet design so that\nthe packets cannot be realistically decrypted even under firewall level TLS inspection.\n\nThis project is a work in progress, currently released at v0.2 (Hatchling). Updates are planned through versions 1,0, 2.0, 3.0, and 4.0. You can view\nthe planned roadmap in this project (see [Milestones.md](https://github.com/0xflux/Wyrm/blob/master/Milestones.md)). In time, this is designed to be an open source competitor to **Cobalt Strike**, **Mythic**, **Sliver**, etc.\n\nFor any bugs, or feature requests, please use the Issues tab, and for anything else - please use GitHub Discussions. I am active on this project,\nso I will be attentive to anything raised.\n\n### Features\n\n- Implant uses a configurable profile to customise features and configurations\n- IOCs encrypted in the payload to assist in anti-analysis and anti-yara hardening\n- Implant transmits data encrypted below TLS, defeating perimeter inspection security tools out the box\n- Dynamic payload generation\n- Easy mechanism to stage files (such as built implants, PDF, zip, etc) on the C2 for download to support phishing campaigns and initial attack vectors\n- Supports native Windows API commands, more planned in future updates\n- Easy to use terminal client for the operator to task & inspect agents, and to manage staged resources\n- Implant uses the most common User-Agent for comms to help it blend in covertly with traffic by default, this is also configurable to suit your engagement\n- Easy, automated C2 infrastructure deployment with `install_server.sh`\n- Anti-sandbox techniques which are highly configurable by the operator through profiles\n- Backed by a database, fully timestamped to make reporting easier\n\nThis project is not currently accepting contributions, please **raise issues** or use **GitHub Discussions** and I will look into them, and help\nanswer any questions.\n\n**Before deploying the C2**, you should read the C2 readme file, found in the `/c2` directory. Proper docs are coming soon\nin time for v1.0 release, at https://wyrm-c2.com.\n\nA mental model for the C2 is as follows:\n\n![Wyrm C2](resources/c2_model.png)\n\nThe below image demonstrates the **Below TLS Encryption** feature and how it is implemented:\n\n![Wyrm Below TLS Encryption](resources/wyrm_post_diag.png)\n\n### Updates\n\n**WARNING:** Before pulling an update; please check the [release notes](https://github.com/0xflux/Wyrm/blob/master/RELEASE_NOTES.md) to see whether there are any breaking changes - for example if the\n**configurable C2 profile** changes in a breaking way from a previous profile you have, you will want to make sure you backup and migrate\nyour profile. I will be excluding `/c2/profiles/*` from git once the project is published in pre-release to prevent accidentally overwriting\nyour previous profile when running `git pull` to update your software.\n\nAs per the roadmap, this project will see significant development over the next 12 months. To pull updates, whether they are new features\nor bug fixes, you simply just do a git pull, re-build the c2 in release mode via:\n\n- `sudo systemctl stop wyrm`\n- `cd c2`, \n- `cargo build --release`\n- `sudo systemctl start wyrm`\n\n### Setup\n\nThe project contains an install shell script, and is designed to be run on `Debian` based Linux flavours.\nThe install script will install all required dependencies to the project, as well as making a new user, `wyrm_user`\nthat will run the C2 service.\n\nThe user account is created as `sudo useradd --system --no-create-home --shell /usr/sbin/nologin wyrm_user`.\n\n**Server Setup**\n\n1) Install your favourite reverse proxy (NGINX / Apache etc). The web app will default to serve on `0.0.0.0` at `:8080`. You can edit this in `/c2/.env` (at step 2), so configure your reverse proxy to use whatever you define in the `.env`.\n2) Clone the repo to your server & mark the install script executable.\n3) **SECURITY**: \n   1) In `c2/.env` edit:\n      1) `POSTGRES_PASSWORD`\n      2) `ADMIN_TOKEN` - **DO NOT USE THE ",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-17T02:20:53.662083"
  },
  {
    "basic_info": {
      "name": "db-back-tool",
      "full_name": "iKeepLearn/db-back-tool",
      "owner": "iKeepLearn",
      "description": "postgresql„ÄÅmysqlÊï∞ÊçÆÂ∫ìÂ§á‰ªΩÂπ∂‰∏ä‰º†Âà∞ËÖæËÆØ‰∫ëÊàñËÄÖÈòøÈáå‰∫ëÊàñÂÖºÂÆπS3ÂçèËÆÆÁöÑÂÖ∂‰ªñ‰∫ëÂ≠òÂÇ®ÔºåÂêåÊó∂ÂèØÂàóÂá∫„ÄÅÂà†Èô§‰∫ë‰∏äÂ≠òÂÇ®ÁöÑÂ§á‰ªΩÊñá‰ª∂„ÄÇ",
      "url": "https://github.com/iKeepLearn/db-back-tool",
      "clone_url": "https://github.com/iKeepLearn/db-back-tool.git",
      "ssh_url": "git@github.com:iKeepLearn/db-back-tool.git",
      "homepage": "",
      "created_at": "2025-09-22T08:49:42Z",
      "updated_at": "2025-10-17T00:45:02Z",
      "pushed_at": "2025-10-11T02:53:00Z"
    },
    "stats": {
      "stars": 192,
      "forks": 18,
      "watchers": 192,
      "open_issues": 0,
      "size": 297
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 43382
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# ‰ΩøÁî®ËØ¥Êòé\n\n‰∏ÄÊ¨æÂü∫‰∫é Rust ÂºÄÂèëÁöÑÊï∞ÊçÆÂ∫ìÂ§á‰ªΩÂ∑•ÂÖ∑ÔºåÊîØÊåÅÂçïÂÆû‰æã PostgreSQL/MySQL Êï∞ÊçÆÂ∫ìÁöÑËá™Âä®Â§á‰ªΩ„ÄÅÂä†ÂØÜ„ÄÅÂéãÁº©ÔºåÂπ∂ÂèØÂ∞ÜÂ§á‰ªΩÊñá‰ª∂‰∏ä‰º†Ëá≥ËÖæËÆØ‰∫ë COS ÊàñÈòøÈáå‰∫ë OSSÊàñÂÖºÂÆπ S3 ÂçèËÆÆÁöÑÂÖ∂‰ªñ‰∫ëÂ≠òÂÇ®„ÄÇ\n\nÂºÄÂèëÂä®Êú∫ÊòØÊú¨‰∫∫Áª¥Êä§ÁùÄÂæàÂ§öÂçï‰ΩìÊúçÂä°ÂàÜÂ∏ÉÂú®ÂêÑ‰∏™‰∫ëÊúçÂä°Âô®‰∏äÔºåÊØè‰∏™Âçï‰ΩìÊúçÂä°ÈÉΩ‰ΩøÁî®ÂêÑËá™ÁöÑÊï∞ÊçÆÂ∫ìÂÆû‰æãÔºåÂõ†‰∏∫Áî≤ÊñπÈ¢ÑÁÆóÂéüÂõ†Ê≤°ÊúâÈÖçÁΩÆÊï∞ÊçÆÂ∫ì‰∏ª‰ªéÂ§á‰ªΩ„ÄÇ\n‰ΩÜÂèàÊúâÂ§á‰ªΩÁöÑÈúÄÊ±ÇÔºåÊâÄ‰ª•Âè™Â•ΩÂÜô‰∏™Â∑•ÂÖ∑‰ΩøÁî®Êï∞ÊçÆÂ∫ìËá™Â∏¶ÁöÑ dump Â∑•ÂÖ∑Â§á‰ªΩÔºåÂÜçÂä†ÂØÜÂéãÁº©‰∏ä‰º†Âà∞‰∫ëÂ≠òÂÇ®„ÄÇ\n\n## ÂäüËÉΩÁâπÊÄß\n\n- ÊîØÊåÅ PostgreSQL\\MySql Êï∞ÊçÆÂ∫ìËá™Âä®Â§á‰ªΩ\n- Â§á‰ªΩÊñá‰ª∂Ëá™Âä®Âä†ÂØÜ„ÄÅÂéãÁº©\n- ‰∏ÄÈîÆ‰∏ä‰º†Â§á‰ªΩÂà∞ËÖæËÆØ‰∫ë COS\\ÈòøÈáå‰∫ë OSS\\ÂÖºÂÆπS3ÂçèËÆÆÁöÑÂÖ∂‰ªñ‰∫ëÂ≠òÂÇ®\n- ÊîØÊåÅÂ§á‰ªΩÊñá‰ª∂ÁöÑÊâπÈáè‰∏ä‰º†„ÄÅÊâπÈáèÂà†Èô§„ÄÅÂàóË°®Êü•Áúã\n- ÊîØÊåÅËá™ÂÆö‰πâÈÖçÁΩÆÊñá‰ª∂\n\n## ÂâçÁΩÆÊù°‰ª∂\n\nËØ∑Á°Æ‰øùÊúçÂä°Âô®Â∑≤ÂÆâË£Ö `7z`„ÄÇ  \nÂÆâË£ÖÂëΩ‰ª§ÔºàDebian/UbuntuÔºâÔºö\n\n```bash\nsudo apt install p7zip-full\n```\n\n---\n\n## Âø´ÈÄüÂºÄÂßã\n\n1. ‰ªé [release È°µÈù¢](https://github.com/iKeepLearn/db-back-tool/releases) ‰∏ãËΩΩÂèØÊâßË°åÊñá‰ª∂ÁöÑ zip ÂåÖ„ÄÇ\n2. Ëß£ÂéãÂêéÔºå‰øÆÊîπÂÖ∂‰∏≠ÁöÑ `config.yaml` ÈÖçÁΩÆÊñá‰ª∂‰∏∫Ê≠£Á°ÆÁöÑÈÖçÁΩÆ„ÄÇ\n\n---\n\n## Â∏∏Áî®ÂëΩ‰ª§Á§∫‰æã\n\n- **Â§á‰ªΩÊåáÂÆöÊï∞ÊçÆÂ∫ì**\n\n  ```bash\n  ./backupdbtool --config config.yaml backup <database_name>\n  ```\n\n- **‰∏ä‰º†ÊâÄÊúâÂæÖ‰∏ä‰º†Â§á‰ªΩÊñá‰ª∂**\n\n  ```bash\n  ./backupdbtool --config config.yaml upload --all\n  ```\n\n- **‰∏ä‰º†Âçï‰∏™Â§á‰ªΩÊñá‰ª∂**\n\n  ```bash\n  ./backupdbtool --config config.yaml upload --file /path/to/filename.ext\n  ```\n\n- **Âà†Èô§ÊâÄÊúâ‰∏§Â§©ÂâçÁöÑÂ§á‰ªΩ‰ª•ÂáèÂ∞ë‰∫ëÂ≠òÂÇ®ÊàêÊú¨**\n\n  ```bash\n  ./backupdbtool --config config.yaml delete --all\n  ```\n\n- **Âà†Èô§Âçï‰∏™‰∫ëÂ≠òÂÇ®Êñá‰ª∂**\n\n  ```bash\n  ./backupdbtool --config config.yaml delete --key key\n  ```\n  > key ‰∏∫‰∫ëÂ≠òÂÇ®‰∏≠ÁöÑÂÆåÊï¥Ë∑ØÂæÑÔºåÊØîÂ¶ÇÊÉ≥Âà†Èô§‰∏ãÊñπ list ‰∏≠ÁöÑ config.yaml Âàô key ‰∏∫ db/config.yaml„ÄÇ\n\n  > ÂÆåÊï¥Á§∫‰æã: ./backupdbtool --config config.yaml delete --key db/config.yaml„ÄÇ\n\n- **ÂàóÂá∫ÊâÄÊúâÂ§á‰ªΩÊñá‰ª∂**\n  ```bash\n  ./backupdbtool --config config.yaml list\n  ```\n  ![list](images/list.png)\n\n## ÂÆöÊó∂‰ªªÂä°ÔºàCronÔºâÊé®ËçêÈÖçÁΩÆ\n\n- **ÊØèÊó•ÂáåÊô® 2 ÁÇπËá™Âä®Â§á‰ªΩÊï∞ÊçÆÂ∫ì**\n\n  ```bash\n  0 2 * * * /path/to/backupdbtool --config /path/to/config.yaml backup <database_name>\n  ```\n\n- **ÊØèÊó•ÂáåÊô® 2:30 ‰∏ä‰º†ÊâÄÊúâÂæÖ‰∏ä‰º†Â§á‰ªΩ**\n\n  ```bash\n  30 2 * * * /path/to/backupdbtool --config /path/to/config.yaml upload --all\n  ```\n\n- **ÊØèÂë®Êó•ÂáåÊô® 3 ÁÇπÂà†Èô§ÊâÄÊúâ‰∏§Â§©ÂâçÁöÑÂ§á‰ªΩ‰ª•ÂáèÂ∞ë‰∫ëÂ≠òÂÇ®ÊàêÊú¨**\n  ```bash\n  0 3 * * 0 /path/to/backupdbtool --config /path/to/config.yaml delete --all\n  ```\n\n> ËØ∑Â∞Ü `/path/to/backupdbtool` Âíå `/path/to/config.yaml` ÊõøÊç¢‰∏∫ÂÆûÈôÖË∑ØÂæÑÔºå`<database_name>` ÊõøÊç¢‰∏∫ÁõÆÊ†áÊï∞ÊçÆÂ∫ìÂêçÁß∞„ÄÇ\n\n## ËÅîÁ≥ªÊñπÂºè\n\nÂ¶ÇÊúâÁñëÈóÆÔºåËØ∑ËÅîÁ≥ªÂºÄÂèëËÄÖ„ÄÇ\n\n![ËÅîÁ≥ª‰ΩúËÄÖ](images/ccwechat.jpg)\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-17T02:20:54.959269"
  },
  {
    "basic_info": {
      "name": "crispy-palm-tree",
      "full_name": "bingcicle/crispy-palm-tree",
      "owner": "bingcicle",
      "description": "dirhash",
      "url": "https://github.com/bingcicle/crispy-palm-tree",
      "clone_url": "https://github.com/bingcicle/crispy-palm-tree.git",
      "ssh_url": "git@github.com:bingcicle/crispy-palm-tree.git",
      "homepage": null,
      "created_at": "2025-09-29T15:13:51Z",
      "updated_at": "2025-10-08T01:04:18Z",
      "pushed_at": "2025-09-29T15:15:30Z"
    },
    "stats": {
      "stars": 150,
      "forks": 0,
      "watchers": 150,
      "open_issues": 0,
      "size": 6
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 2599
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# dirhash\nCompute SHA-256 for files in a directory and list duplicates.\n\n## Build\n```bash\ncargo build --release\n./target/release/dirhash ./data --exts jpg,png --dupes > dupes.csv\n```\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:20:56.287619"
  },
  {
    "basic_info": {
      "name": "walrus",
      "full_name": "nubskr/walrus",
      "owner": "nubskr",
      "description": "A high performance Write Ahead Log in Rust",
      "url": "https://github.com/nubskr/walrus",
      "clone_url": "https://github.com/nubskr/walrus.git",
      "ssh_url": "git@github.com:nubskr/walrus.git",
      "homepage": "https://nubskr.com/2025/10/06/walrus.html",
      "created_at": "2025-09-17T02:25:21Z",
      "updated_at": "2025-10-17T02:00:44Z",
      "pushed_at": "2025-10-13T11:32:15Z"
    },
    "stats": {
      "stars": 137,
      "forks": 4,
      "watchers": 137,
      "open_issues": 0,
      "size": 13185
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 188836,
        "Python": 13219,
        "Makefile": 2745
      },
      "license": "MIT License",
      "topics": [
        "database",
        "rust"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <img src=\"./figures/walrus1.png\"\n       alt=\"walrus\"\n       width=\"30%\">\n    <div>Walrus: A high performance Write Ahead Log (WAL) in Rust</div>\n\n[![Crates.io](https://img.shields.io/crates/v/walrus-rust.svg)](https://crates.io/crates/walrus-rust)\n[![Documentation](https://docs.rs/walrus-rust/badge.svg)](https://docs.rs/walrus-rust)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](LICENSE)\n\n\n</div>\n\n## Features\n\n- **High Performance**: Optimized for concurrent writes and reads\n- **Topic-based Organization**: Separate read/write streams per topic\n- **Configurable Consistency**: Choose between strict and relaxed consistency models\n- **Memory-mapped I/O**: Efficient file operations using memory mapping\n- **Persistent Read Offsets**: Read positions survive process restarts\n- **Coordination-free Deletion**: Atomic file cleanup without blocking operations\n- **Comprehensive Benchmarking**: Built-in performance testing suite\n\n## Benchmarks\n\nRun quick benchmarks with:\n\n```bash\npip install pandas matplotlib # we need these to show graphs\nmake bench-and-show-reads\n```\n\n## Quick Start\n\nAdd Walrus to your `Cargo.toml`:\n\n```toml\n[dependencies]\nwalrus-rust = \"0.1.0\"\n```\n\n### Basic Usage\n\n```rust\nuse walrus_rust::{Walrus, ReadConsistency};\n\n// Create a new WAL instance with default settings\nlet wal = Walrus::new()?;\n\n// Write data to a topic\nlet data = b\"Hello, Walrus!\";\nwal.append_for_topic(\"my-topic\", data)?;\n\n// Read data from the topic\nif let Some(entry) = wal.read_next(\"my-topic\")? {\n    println!(\"Read: {:?}\", String::from_utf8_lossy(&entry.data));\n}\n```\n\n### Advanced Configuration\n\n```rust\nuse walrus_rust::{Walrus, ReadConsistency, FsyncSchedule};\n\n// Configure with custom consistency and fsync behavior\nlet wal = Walrus::with_consistency_and_schedule(\n    ReadConsistency::AtLeastOnce { persist_every: 1000 },\n    FsyncSchedule::Milliseconds(500)\n)?;\n\n// Write and read operations work the same way\nwal.append_for_topic(\"events\", b\"event data\")?;\n```\n\n## Configuration Options\n\n### Read Consistency Modes\n\nWalrus supports two consistency models:\n\n#### `ReadConsistency::StrictlyAtOnce`\n- **Behavior**: Read offsets are persisted after every read operation\n- **Guarantees**: No message will be read more than once, even after crashes\n- **Performance**: Higher I/O overhead due to frequent persistence\n- **Use Case**: Critical systems where duplicate processing must be avoided\n\n```rust\nlet wal = Walrus::with_consistency(ReadConsistency::StrictlyAtOnce)?;\n```\n\n#### `ReadConsistency::AtLeastOnce { persist_every: u32 }`\n- **Behavior**: Read offsets are persisted every N read operations\n- **Guarantees**: Messages may be re-read after crashes (at-least-once delivery)\n- **Performance**: Better throughput with configurable persistence frequency\n- **Use Case**: High-throughput systems that can handle duplicate processing\n\n```rust\nlet wal = Walrus::with_consistency(\n    ReadConsistency::AtLeastOnce { persist_every: 5000 }\n)?;\n```\n\n### Fsync Scheduling\n\nControl when data is flushed to disk:\n\n#### `FsyncSchedule::Milliseconds(u64)`\n- **Behavior**: Background thread flushes data every N milliseconds\n- **Default**: 1000ms (1 second)\n- **Range**: Minimum 1ms, recommended 100-5000ms\n\n```rust\nlet wal = Walrus::with_consistency_and_schedule(\n    ReadConsistency::AtLeastOnce { persist_every: 1000 },\n    FsyncSchedule::Milliseconds(2000)  // Flush every 2 seconds\n)?;\n```\n\n### Environment Variables\n\n- **`WALRUS_QUIET`**: Set to any value to suppress debug output during operations\n\n```bash\nexport WALRUS_QUIET=1  # Suppress debug messages\n```\n\n## File Structure and Storage\n\nWalrus organizes data in the following structure:\n\n```\nwal_files/\n‚îú‚îÄ‚îÄ wal_1234567890.log          # Log files (10MB blocks, 100 blocks per file)\n‚îú‚îÄ‚îÄ wal_1234567891.log\n‚îú‚îÄ‚îÄ read_offset_idx_index.db    # Persistent read offset index\n‚îî‚îÄ‚îÄ read_offset_idx_index.db.tmp # Temporary file for atomic updates\n```\n\n### Storage Configuration\n\n- **Block Size**: 10MB per block (configurable via `DEFAULT_BLOCK_SIZE`)\n- **Blocks Per File**: 100 blocks per file (1GB total per file)\n- **Max File Size**: 1GB per log file\n- **Index Persistence**: Read offsets stored in separate index files\n\n## API Reference\n\n### Core Methods\n\n#### `Walrus::new() -> std::io::Result<Self>`\nCreates a new WAL instance with default settings (`StrictlyAtOnce` consistency).\n\n#### `Walrus::with_consistency(mode: ReadConsistency) -> std::io::Result<Self>`\nCreates a WAL with custom consistency mode and default fsync schedule (1000ms).\n\n#### `Walrus::with_consistency_and_schedule(mode: ReadConsistency, schedule: FsyncSchedule) -> std::io::Result<Self>`\nCreates a WAL with full configuration control.\n\n#### `append_for_topic(&self, topic: &str, data: &[u8]) -> std::io::Result<()>`\nAppends data to the specified topic. Topics are created automatically on first write.\n\n#### `read_next(&self, topic: &str) -> std::io::Result<Option<Entry>>`\nReads the next entry from the topic. Returns `None` if",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-17T02:20:57.609670"
  },
  {
    "basic_info": {
      "name": "free-ferris-pack",
      "full_name": "MariaLetta/free-ferris-pack",
      "owner": "MariaLetta",
      "description": "ü¶Ä Pack of 50+ Ferris pictures and elements will help you to build your own design for anything related to Rust Programming Language: presentations, README files, posts in blogs or social media, courses, videos and many, many more. ",
      "url": "https://github.com/MariaLetta/free-ferris-pack",
      "clone_url": "https://github.com/MariaLetta/free-ferris-pack.git",
      "ssh_url": "git@github.com:MariaLetta/free-ferris-pack.git",
      "homepage": "",
      "created_at": "2025-10-04T20:22:05Z",
      "updated_at": "2025-10-16T23:11:02Z",
      "pushed_at": "2025-10-05T14:55:22Z"
    },
    "stats": {
      "stars": 125,
      "forks": 5,
      "watchers": 125,
      "open_issues": 0,
      "size": 226654
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 44238598
      },
      "license": "Creative Commons Zero v1.0 Universal",
      "topics": []
    },
    "content": {
      "readme": "# Free Ferris Pack\n![alt](/preview/main.png)\nü¶Ä Meet the New Emotional Ferris! ü¶Ä\n\n- 50+ unique Ferris illustrations - emotions, poses, and situations\n- 10+ funny elements for your own creating\n- Consistent art style - all illustrations work together\n- Professional quality - suitable for presentations and documents\n- Multiple formats - SVG, PNG in large sizes\n- Absolutely free - no attribution required\n- Ready to use - download and go\n\nCreated with ‚ù§Ô∏è for the Rust community\n\n## Why This Pack Exists\nSome time ago I created Free Gophers Pack, which became quite popular in the community. Then I learned about Ferris and thought - why not?\n\n![alt](/preview/preview2.png)\n\n## Contents\n0. [Examples](/examples/)\n1. [Elements](/elements/) \n2. [Illustrations](/illustrations/) \n\n![alt](/preview/preview3.png)\n\n![alt](/preview/preview4.png)\n\n![alt](/preview/preview5.png)\n\n## Perfect For\n- Rust developers building projects and tools\n- Educators teaching Rust programming\n- Speakers with talks about Rust\n- Technical writers creating Rust content\n- Companies using Rust in their stack\n- Community organizers running Rust events\n\nSee different use cases in [examples](/examples/).\n\n![alt](/examples/presentation4.png)\n\n![alt](/examples/presentation9.png)\n\n## License\nThis package is licensed as CC0 (public domain) so you can use the images in any way with no restrictions.\n\n## My other projects\nIf you liked this project, you may also want to see \n- [Free Gophers Pack](https://github.com/MariaLetta/free-gophers-pack)\n- [Mega Doodles Pack](https://github.com/MariaLetta/mega-doodles-pack)\n\n## About me\nMy name is Maria Letta, I am a professional illustrator and product designer, some of my works can be found here:    \nü¶Ñ instagram https://instagram.com/maria_letta_art     \nüé® creativemarket https://creativemarket.com/Maria_Letta\n\nDrop me an email, if you have any questions or suggestions:\n‚úâ designbyletta@gmail.com\n\n![alt](/examples/presentation10.png)",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:20:58.913613"
  },
  {
    "basic_info": {
      "name": "servo-gtk",
      "full_name": "nacho/servo-gtk",
      "owner": "nacho",
      "description": "GTK integration for Servo",
      "url": "https://github.com/nacho/servo-gtk",
      "clone_url": "https://github.com/nacho/servo-gtk.git",
      "ssh_url": "git@github.com:nacho/servo-gtk.git",
      "homepage": null,
      "created_at": "2025-09-26T13:52:40Z",
      "updated_at": "2025-10-16T09:03:47Z",
      "pushed_at": "2025-10-13T13:48:08Z"
    },
    "stats": {
      "stars": 125,
      "forks": 3,
      "watchers": 125,
      "open_issues": 3,
      "size": 1641
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 61080,
        "JavaScript": 1965,
        "HTML": 135
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "# Servo GTK\n\nA GTK4 library that embeds the Servo web engine.\n\n## Features\n\n- GTK4-based web browser widget\n- Servo web engine integration\n- OpenGL-accelerated rendering\n- Async event handling\n\n## Building\n\n```bash\ncargo build\n```\n\n## Running the Example\n\n```bash\ncargo run --example browser\n```\n\n## Using as a Library\n\nAdd to your `Cargo.toml`:\n\n```toml\n[dependencies]\nservo-gtk = { path = \"path/to/servo-gtk\" }\n```\n\nThen use in your code:\n\n```rust\nuse servo_gtk::WebView;\n\nlet webview = WebView::new();\nwebview.load_url(\"https://example.com\");\n```\n\n## Dependencies\n\n- GTK4\n- OpenGL\n- Servo web engine\n- Rust toolchain\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:21:00.253464"
  },
  {
    "basic_info": {
      "name": "chroma",
      "full_name": "yuri-xyz/chroma",
      "owner": "yuri-xyz",
      "description": "üåà Shader-based audio visualizer for the terminal",
      "url": "https://github.com/yuri-xyz/chroma",
      "clone_url": "https://github.com/yuri-xyz/chroma.git",
      "ssh_url": "git@github.com:yuri-xyz/chroma.git",
      "homepage": "",
      "created_at": "2025-10-04T22:39:52Z",
      "updated_at": "2025-10-16T21:20:12Z",
      "pushed_at": "2025-10-10T20:27:26Z"
    },
    "stats": {
      "stars": 124,
      "forks": 5,
      "watchers": 124,
      "open_issues": 4,
      "size": 259
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 182946,
        "WGSL": 35774,
        "Nix": 2943,
        "Shell": 1703
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "audio",
        "audio-visualizer",
        "hyprland",
        "linux",
        "rust",
        "shaders",
        "shell",
        "tui"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <img width=\"300\" alt=\"Chroma's logo in ASCII rainbow\" src=\"https://github.com/user-attachments/assets/871f6c7b-8b7c-486d-8cae-41ec13ed2d02\" />\n\nüåà A Rust-based, ASCII art shader audio visualizer for your terminal!\n\n  <img src=\"https://github.com/user-attachments/assets/b71074f2-3e77-4fb9-a8ef-30288a3690c4\" width=\"550\" />\n\n</div>\n\n## ‚≠ê Features\n\n- üé® **GPU-accelerated shaders** using wgpu (compute shaders)\n- üñºÔ∏è **ASCII art rendering** with ANSI color support\n- ‚öôÔ∏è **Highly configurable parameters** via config file\n- üíæ **Save/Load configurations** with automatic deduping via hashing\n- üîÑ **Live config reloading** for real-time parameter adjustment\n- üéµ **Audio visualization** driven by system audio input\n- üìä **FFT-based audio analysis** for reactive visual effects\n\n## ‚ú® Demos & screenshots\n\nüîä Make sure you turn on sound on the videos!\n\n<img width=\"2474\" height=\"1248\" alt=\"chroma-themes\" src=\"https://github.com/user-attachments/assets/0f43781d-4276-4d5f-8247-a932df43372e\" />\n\n<img width=\"1958\" height=\"1103\" alt=\"chroma-config\" src=\"https://github.com/user-attachments/assets/96dae99e-2e93-470a-b44f-40c0a09f098a\" />\n\n[chroma.webm](https://github.com/user-attachments/assets/9e821a20-8394-445c-9542-91e294225e63)\n\n[chroma-demo-long.webm](https://github.com/user-attachments/assets/3ae02009-b9a5-4003-93b3-8120db869447)\n\n## üîó Install\n\n### Arch Linux\n\n```bash\n# With an AUR helper: yay\nyay -S chroma-visualizer-git\n\n# With an AUR helper: paru\nparu -S chroma-visualizer-git\n\n# Or manually:\ngit clone https://aur.archlinux.org/chroma-visualizer-git.git\ncd chroma-visualizer-git\nmakepkg -si\n\n# If you're lazy:\ngit clone https://aur.archlinux.org/chroma-visualizer-git.git \\\n  && cd chroma-visualizer-git \\\n  && makepkg -si\n```\n\n### Other distros\n\n...More packaging coming soon!...\n\nMeanwhile you can build from source below:\n\n### From source (manual)\n\n```bash\n# Clone the git repo and enter it:\ngit clone https://github.com/yuri-xyz/chroma.git\ncd chroma\n\n# Make sure you have the `alsa-lib` & `pipewire` packages installed,\n# the exact package names may vary depending on your distro.\n\n# Pick one:\ncargo build --release                    # visuals only\ncargo build --release --features audio   # with audio reactivity (recommended)\n\n# Install the built bin so that you can run it with `chroma`:\nsudo install -Dm755 target/release/chroma /usr/local/bin/chroma\n```\n\n## ‚ÑπÔ∏è Usage\n\n```bash\n# Run with default settings\nchroma\n\n# Load a saved configuration\nchroma --config config_a3f8c2d9e1b5.toml\n\n# Or using the short form\nchroma -c config_a3f8c2d9e1b5.toml\n\n# View help for all arguments and settings\nchroma --help\n```\n\n## üïπÔ∏è Controls\n\n- `Q` or `Esc` - Quit application\n- `R` - **Randomize parameters** ‚≠ê (Discover new effects!)\n- `S` - **Save configuration** üíæ (Creates `config_<hash>.toml` in current directory)\n- `P`/`O` - **Cycle palettes** üé® (16 different character sets!)\n- `‚Üë`/`‚Üì` - Adjust frequency\n- `‚Üí`/`‚Üê` - Adjust speed\n- `+`/`-` - Adjust amplitude\n- `[`/`]` - Adjust scale\n\nSee [CONTROLS.md](./notes/CONTROLS.md) and [PALETTES.md](./notes/PALETTES.md) for more details.\n\n## üé® Configuration & Ricing\n\nChroma is designed to be highly configurable and CLI-friendly, so it feels natural alongside your other terminal tools. There are multiple ways to configure the effects and visuals:\n\n**Config files**: Load preset configurations from TOML files. You can find [example preset configs in the `examples` directory](./examples):\n\n```\nchroma -c examples/0.toml\n```\n\n**Live reloading**: Edit your config file while chroma is running and see changes applied instantly! This makes it easy to tweak parameters and visualize your adjustments in real time.\n\n**CLI parameters**: Most parameters can be set via command-line arguments. Run `chroma --help` to see all available options.\n\n> [!TIP]\n> You can combine config files with CLI parameters‚ÄîCLI args take precedence. This is perfect when you have a favorite base config but want to tweak specific values on the fly or in a script.\n\n> [!TIP]\n> Use `--random` or `-r` to randomize any parameters that haven't been explicitly set by your config file or CLI args. Great for adding variety to each run!\n\nIf you're feeling brave, you can even create your own custom shader patterns and load them like this: `chroma --custom-shader my_shader.wgsl`. Take a look at [`examples/custom_shader.wgsl`](./examples/custom_shader.wgsl) as a beginner template.\n\n## üì¶ Dependencies\n\n- Runtime\n  - vulkan-icd-loader\n  - A Vulkan driver: one of `vulkan-intel`, `vulkan-radeon`, or `nvidia-utils`\n  - Terminal with ANSI color support\n- Optional (audio feature)\n  - pipewire (recommended) or alsa-lib\n- Build\n  - rust, cargo, git\n\n## üèóÔ∏è Contributing\n\nAll contributions welcome! If you have some cool ideas, found some bugs, or would like to improve the project anyhow, feel free to create an issue and then a corresponding PR :)\n\nHere's some tips to making good contributions:\n\n- ‚úÖ Create a corresponding issue with a reasonable explanation.\n- ‚úÖ K",
      "default_branch": "develop"
    },
    "fetched_at": "2025-10-17T02:21:01.544862"
  },
  {
    "basic_info": {
      "name": "net-mux",
      "full_name": "Poseidon-fan/net-mux",
      "owner": "Poseidon-fan",
      "description": "network connection multiplexing async lib in rust, built on tokio",
      "url": "https://github.com/Poseidon-fan/net-mux",
      "clone_url": "https://github.com/Poseidon-fan/net-mux.git",
      "ssh_url": "git@github.com:Poseidon-fan/net-mux.git",
      "homepage": "",
      "created_at": "2025-09-25T09:12:59Z",
      "updated_at": "2025-10-16T04:45:02Z",
      "pushed_at": "2025-10-10T09:45:12Z"
    },
    "stats": {
      "stars": 110,
      "forks": 3,
      "watchers": 110,
      "open_issues": 0,
      "size": 73
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 32145,
        "Dockerfile": 189,
        "Shell": 108
      },
      "license": "MIT License",
      "topics": [
        "async",
        "kcp",
        "multiplexing",
        "network-programming",
        "rust",
        "tcp",
        "tokio"
      ]
    },
    "content": {
      "readme": "<h1 align=\"center\">net-mux</h1>\n\n<div align=\"center\">\n\n[![GitHub][github-badge]][github-url]\n[![Crates.io][crates-badge]][crates-url]\n[![MIT licensed][mit-badge]][mit-url]\n[![Build Status][actions-badge]][actions-url]\n\n</div>\n\n[crates-badge]: https://img.shields.io/crates/v/net-mux.svg\n[crates-url]: https://crates.io/crates/net-mux\n[mit-badge]: https://img.shields.io/badge/license-MIT-blue.svg\n[mit-url]: https://github.com/Poseidon-fan/net-mux/blob/master/LICENSE\n[actions-badge]: https://github.com/Poseidon-fan/net-mux/actions/workflows/rust.yaml/badge.svg\n[actions-url]: https://github.com/Poseidon-fan/net-mux/actions?branch=master\n[github-badge]: https://img.shields.io/badge/github-repo-black?logo=github\n[github-url]: https://github.com/Poseidon-fan/net-mux\n\nnet-mux is an asynchronous connection multiplexing library built on tokio. It multiplexes ordered, connection-oriented transports such as TCP, KCP, and TLS-over-TCP into multiple logical concurrent, ordered, bidirectional streams.\n\n![system architecture](https://github.com/Poseidon-fan/net-mux/raw/master/docs/images/architecture.svg)\n\n## Getting Started\n\n**Examples**\n\n```sh\n$ cargo run --example tcp_server\n$ cargo run --example tcp_client\n```\n\nThis launches a TCP listener on the local loopback address, waiting for client connections. Each connection is wrapped as a mux session. The server and client interact over this single connection through multiple streams. The server receives messages from the client and writes them back unchanged, while the client reads strings from the standard input, sends them to the server, and prints the received messages.\n\n**Links**\n\n- Usage [examples][examples]\n- Released API [Docs][documentation]\n\n[examples]: https://github.com/Poseidon-fan/net-mux/tree/master/examples\n[documentation]: https://docs.rs/crate/net-mux/\n\n## Contribution\n\nThe project is currently under active development, all feedback welcome!\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-17T02:21:02.911499"
  },
  {
    "basic_info": {
      "name": "ghostscan",
      "full_name": "h2337/ghostscan",
      "owner": "h2337",
      "description": "A modern, Rust-powered Linux scanner that unmasks hidden rootkits, stealthy eBPF tricks, and ghost processes in one fast sweep (45+ scanners)",
      "url": "https://github.com/h2337/ghostscan",
      "clone_url": "https://github.com/h2337/ghostscan.git",
      "ssh_url": "git@github.com:h2337/ghostscan.git",
      "homepage": "",
      "created_at": "2025-09-28T05:45:03Z",
      "updated_at": "2025-10-13T03:14:24Z",
      "pushed_at": "2025-09-29T10:51:35Z"
    },
    "stats": {
      "stars": 104,
      "forks": 2,
      "watchers": 104,
      "open_issues": 0,
      "size": 82
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 189766,
        "C": 3549
      },
      "license": "MIT License",
      "topics": [
        "antivirus",
        "linux-security",
        "malware-detection",
        "rootkit-detection",
        "scanner",
        "security",
        "security-scanner",
        "security-tools"
      ]
    },
    "content": {
      "readme": "# ghostscan\n\nFast one-shot sweep for Linux incident response. Drop the binary on a host, run it once, and collect actionable leads from the kernel, procfs, bpffs, systemd, cron, sockets, and more.\n\n## Quick start\n\n1. Install a current Rust toolchain.\n2. Build with `cargo build --release`.\n3. Copy `target/release/ghostscan` to the target host.\n4. Run as root (or with equivalent capabilities): `sudo ./ghostscan`.\n5. Optional helpers (`bpftool`, `nft`, `ss`, `journalctl`, `auditctl`) expand coverage; when missing, the output explains what was skipped.\n\n## Reading results\n\n- Each scanner prints a bracketed name followed by either findings, `OK`, or an error string.\n- The process always exits with code `0`; treat the log itself as the verdict.\n- Findings are heuristics designed for triage; validate before acting.\n\n## Available scanners\n\n- **Hidden LKM**: compares procfs/sysfs clusters against `kallsyms` to surface hidden modules.\n- **Kernel taint**: highlights taint flags that lack a visible explanation.\n- **Ftrace redirection**: spots risky `ftrace` hooks on critical kernel paths.\n- **Unknown kprobes**: looks for kprobes attached to sensitive symbols that ghostscan cannot explain.\n- **Syscall table integrity**: verifies syscall table pointers for tampering.\n- **Netfilter hook drift**: finds orphaned or invalid netfilter hook jumps.\n- **Module linkage tamper**: checks module list pointers for manipulation.\n- **Ownerless BPF objects**: reports BPF maps/programs without a backing task.\n- **BPF kprobe attachments**: flags kprobes pointed at high-value kernel routines.\n- **BPF LSM**: notes when BPF LSM programs are active.\n- **Detached XDP/TC programs**: detects XDP or TC programs that no longer have an interface.\n- **Sockmap/Sockhash verdicts**: surfaces sockmap/sockhash programs lacking owners.\n- **Sensitive kfunc usage**: tracks invocations of dangerous `kfunc` targets.\n- **Non-bpffs pins**: finds BPF pins created outside bpffs mounts.\n- **Netlink vs proc**: compares netlink inventories with `/proc/net` to expose hidden sockets.\n- **Task list mismatch**: contrasts BPF snapshots with `/proc` task lists to expose hidden PIDs.\n- **Hidden PIDs**: uses BPF-only views to reveal task IDs invisible to `/proc`.\n- **Kernel thread masquerade**: detects kernel threads spoofing user process metadata.\n- **Suspicious ptrace edges**: reports unusual ptrace parent/child relationships.\n- **Deleted or memfd binaries**: lists processes executing from deleted files or memfd mounts.\n- **Hidden listeners**: identifies listeners seen via netlink vs `/proc` vs BPF.\n- **Ownerless sockets**: reports sockets without an owning task.\n- **Netfilter cloaking**: spots tampering patterns that hide netfilter rules.\n- **Local port backdoors**: highlights sockets bound to deleted or temporary paths.\n- **`ld.so.preload` tamper**: inspects `ld.so.preload` for unexpected entries.\n- **Cron ghosts**: checks cron/anacron/at directories for orphaned or cloaked jobs.\n- **Systemd ghosts**: finds unit files pointing to deleted or temporary executables.\n- **SSH footholds**: surfaces dangerous `authorized_keys` options and forced commands.\n- **OverlayFS whiteouts**: reports suspicious opaque or whiteout entries in OverlayFS.\n- **Hidden bind mounts**: lists bind or immutable mounts likely used for concealment.\n- **PAM/NSS modules**: flags PAM or NSS modules loaded from non-system paths.\n- **Live `LD_PRELOAD`**: notes processes still using deleted or writable preload libraries.\n- **Library search hijack**: checks SUID/privileged binaries for unsafe search paths.\n- **`LD_AUDIT` daemons**: finds daemons configured with `LD_AUDIT` despite lacking TTYs.\n- **Large RX regions**: surfaces non-JIT daemons with large anonymous RX memory.\n- **Kernel text RO**: verifies that kernel text sections remain read-only.\n- **`/etc/scripts.d` provenance**: warns on executable scripts from tmp or non-root owners.\n- **Sudoers**: examines sudoers entries for insecure privilege escalation paths.\n- **Kernel cmdline**: alerts on boot parameters that disable audit, lockdown, or IMA.\n- **Sensitive host mounts**: identifies sensitive host paths exposed inside containers.\n- **Host PID namespace**: reports containers sharing the host PID namespace.\n- **Overlay lowerdir**: catches OverlayFS lowerdirs that escape the storage root.\n- **Audit disabled**: detects when auditd is off or dropping records.\n- **Journal gaps**: looks for missing spans in the current boot's journal.\n- **Kernel message suppression**: notices unusual suppression of kernel logs.\n\n## Development pointers\n\n- Format and lint locally with `cargo fmt && cargo check`.\n- New scanners live in `src/scanners/` and expose `pub fn run() -> ScanOutcome` before being registered in `SCANNERS` inside `src/main.rs`.\n\n## Operational notes\n\n- Most modules require elevated privileges to read privileged interfaces, and they report missing access instead of silently failing.\n\n## License\n\nMIT\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-17T02:21:04.259379"
  },
  {
    "basic_info": {
      "name": "state-machines-rs",
      "full_name": "state-machines/state-machines-rs",
      "owner": "state-machines",
      "description": "Compile-time state machine DSL for Rust, inspired by the Ruby state_machines gem.",
      "url": "https://github.com/state-machines/state-machines-rs",
      "clone_url": "https://github.com/state-machines/state-machines-rs.git",
      "ssh_url": "git@github.com:state-machines/state-machines-rs.git",
      "homepage": null,
      "created_at": "2025-10-08T21:33:46Z",
      "updated_at": "2025-10-16T11:52:57Z",
      "pushed_at": "2025-10-14T13:05:06Z"
    },
    "stats": {
      "stars": 98,
      "forks": 1,
      "watchers": 98,
      "open_issues": 1,
      "size": 222
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 182431
      },
      "license": "Apache License 2.0",
      "topics": [
        "embedded",
        "no-std",
        "procedural-macro",
        "rust",
        "state-machines"
      ]
    },
    "content": {
      "readme": "# state-machines\n\n> **A learning-focused Rust port of Ruby's state_machines gem**\n\n[![Crates.io](https://img.shields.io/crates/v/state-machines.svg)](https://crates.io/crates/state-machines)\n[![Documentation](https://docs.rs/state-machines/badge.svg)](https://docs.rs/state-machines)\n[![License: MIT OR Apache-2.0](https://img.shields.io/badge/license-MIT%20OR%20Apache--2.0-blue.svg)](LICENSE)\n[![GitHub](https://img.shields.io/badge/github-state--machines/state--machines--rs-blue)](https://github.com/state-machines/state-machines-rs)\n\n## About This Project\n\nThis is a Rust port of the popular [state_machines](https://github.com/state-machines/state_machines) Ruby gem, created as a **learning platform for Rubyists transitioning to Rust**.\n\nWhile learning Rust, I chose to port something familiar and widely used‚Äîso I could compare implementations side-by-side and understand Rust's patterns through a lens I already knew. This library is intentionally **over-commented**, not because the code is disorganized, but because it's designed to be a **teaching tool**. The goal is elegant, idiomatic Rust code that Rubyists can learn from without the usual compile-pray-repeat cycle.\n\n### Philosophy\n\n- **Learning Ground First**: Extensive inline comments explain Rust concepts, ownership, trait bounds, and macro magic\n- **Ruby Parallels**: Familiar DSL syntax and callbacks make the transition smoother\n- **Production Ready**: Despite the educational focus, this is a fully functional state machine library with:\n  - **Typestate pattern** for compile-time state safety\n  - **Zero-cost abstractions** using PhantomData\n  - Guards and unless conditions\n  - Before/after event callbacks\n  - Sync and async support\n  - `no_std` compatibility (for embedded systems)\n  - Payload support for event data\n  - Move semantics preventing invalid state transitions\n\n### For the Rust Community\n\n**You're welcome to open PRs** to fix fundamentally wrong Rust concepts‚Äîbut please **don't remove comments just because \"we know it\"**. This codebase serves beginners. If something can be explained better, improve the comment. If a pattern is unidiomatic, fix it *and document why*.\n\n---\n\n## Features\n\n**Typestate Pattern** ‚Äì Compile-time state safety using Rust's type system with zero runtime overhead\n\n**Guards & Unless** ‚Äì Conditional transitions at event and transition levels\n\n**Callbacks** ‚Äì `before`/`after` hooks at event level\n\n**Around Callbacks** ‚Äì Wrap transitions with Before/AfterSuccess stages for transaction-like semantics\n\n**Async Support** ‚Äì First-class `async`/`await` for guards and callbacks\n\n**Event Payloads** ‚Äì Pass data through transitions with type-safe payloads\n\n**No-std Compatible** ‚Äì Works on embedded targets (ESP32, bare metal)\n\n**Type-safe** ‚Äì Invalid transitions become compile errors, not runtime errors\n\n**Hierarchical States** ‚Äì Superstates with polymorphic transitions via SubstateOf trait\n\n**Dynamic Dispatch** ‚Äì Runtime event dispatch for event-driven systems (opt-in via feature flag or explicit config)\n\n---\n\n## Quick Start\n\nAdd to your `Cargo.toml`:\n\n```toml\n[dependencies]\nstate-machines = \"0.1\"\n```\n\n### Basic Example\n\n```rust\nuse state_machines::state_machine;\n\n// Define your state machine\nstate_machine! {\n    name: TrafficLight,\n\n    initial: Red,\n    states: [Red, Yellow, Green],\n    events {\n        next {\n            transition: { from: Red, to: Green }\n            transition: { from: Green, to: Yellow }\n            transition: { from: Yellow, to: Red }\n        }\n    }\n}\n\nfn main() {\n    // Typestate pattern: each transition returns a new typed machine\n    let light = TrafficLight::new(());\n    // Type is TrafficLight<Red>\n\n    let light = light.next().unwrap();\n    // Type is TrafficLight<Green>\n\n    let light = light.next().unwrap();\n    // Type is TrafficLight<Yellow>\n}\n```\n\n### With Guards and Callbacks\n\n```rust\nuse state_machines::{state_machine, core::GuardError};\nuse std::sync::atomic::{AtomicBool, Ordering};\n\nstatic DOOR_OBSTRUCTED: AtomicBool = AtomicBool::new(false);\n\nstate_machine! {\n    name: Door,\n\n    initial: Closed,\n    states: [Closed, Open],\n    events {\n        open {\n            guards: [path_clear],\n            before: [check_safety],\n            after: [log_opened],\n            transition: { from: Closed, to: Open }\n        }\n        close {\n            transition: { from: Open, to: Closed }\n        }\n    }\n}\n\nimpl<C, S> Door<C, S> {\n    fn path_clear(&self, _ctx: &C) -> bool {\n        !DOOR_OBSTRUCTED.load(Ordering::Relaxed)\n    }\n\n    fn check_safety(&self) {\n        println!(\"Checking if path is clear...\");\n    }\n\n    fn log_opened(&self) {\n        println!(\"Door opened at {:?}\", std::time::SystemTime::now());\n    }\n}\n\nfn main() {\n    // Successful transition\n    let door = Door::new(());\n    let door = door.open().unwrap();\n    let door = door.close().unwrap();\n\n    // Failed guard check\n    DOOR_OBSTRUCTED.store(true, Ordering::Relaxed);\n    let err = door.open().expect_err(\"should fail when obstructed\"",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-17T02:21:05.630101"
  },
  {
    "basic_info": {
      "name": "brew-explorer",
      "full_name": "cosmincatalin/brew-explorer",
      "owner": "cosmincatalin",
      "description": "A beautiful terminal UI for exploring and managing your Homebrew packages with ease.",
      "url": "https://github.com/cosmincatalin/brew-explorer",
      "clone_url": "https://github.com/cosmincatalin/brew-explorer.git",
      "ssh_url": "git@github.com:cosmincatalin/brew-explorer.git",
      "homepage": "",
      "created_at": "2025-09-30T16:20:16Z",
      "updated_at": "2025-10-15T13:21:34Z",
      "pushed_at": "2025-10-13T12:55:23Z"
    },
    "stats": {
      "stars": 94,
      "forks": 2,
      "watchers": 94,
      "open_issues": 3,
      "size": 204
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 95298,
        "Python": 1
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "[![Built With Ratatui](https://ratatui.rs/built-with-ratatui/badge.svg)](https://ratatui.rs/)\n\n# üç∫ Brew Explorer\n\nA beautiful terminal UI for exploring and managing your Homebrew packages with ease.\n\n## What is Brew Explorer?\n\nYou know how after some time you run `brew list` and see a bunch of packages you have no idea about? Me too! It's frustrating to figure out what those packages do without copy/pasting their names into [brew.sh](https://brew.sh) and only then discovering what they're good for.  \n\nThat's why I created **Brew Explorer** - a little app that makes it easy to understand what formulaes and casks you have installed on your system.   \nPlus, you can quickly **uninstall old useless things** and **update whatever was left behind** - all from within the same interface!\n\n## Screenshots\n\n### Loading Screen\n![Loading Screen](.resources/loading_screen.png)\n\n### Main Screen\n\n![Main Screen](.resources/main_screen.png)\n\n### Search and Uninstall\n\n![Uninstall](.resources/uninstall.png)\n\n## Features\n\n‚ú® **Appealing TUI** - Clean, intuitive terminal interface with ASCII art  \nüîç **Search functionality** - Quickly find packages by name  \nüì¶ **Package details** - View descriptions, homepages, versions, and more  \nüîÑ **Update packages** - Update outdated packages with a single keystroke  \nüóëÔ∏è **Uninstall packages** - Remove packages you no longer need  \nüé® **Color-coded status** - Green for up-to-date, red for outdated packages  \n‚ö° **Fast navigation** - Multi-column layout for efficient browsing  \nüöÄ **Auto-sync** - Runs `brew update` on startup for fresh package information\n\n## Installation\n\n### Prerequisites\n\n- macOS (Homebrew is macOS-specific)\n- [Homebrew](https://brew.sh) installed\n\n### Steps\n\n```shell\nbrew tap cosmincatalin/tap\nbrew install brew-explorer\n```\n\n### Navigation\n\n- **‚Üë/‚Üì** - Move up/down in the package list\n- **‚Üê/‚Üí** - Move left/right between columns\n- **PgUp/PgDn** - Jump by pages\n- **Home/End** - Jump to first/last package\n\n### Actions\n\n- **/** - Start searching for packages\n- **u** - Update the selected package\n- **x** - Uninstall the selected package\n- **q** - Quit the application\n\n### Search Mode\n\n- Type any character to search for packages by name\n- **Enter** or **Esc** - Exit search and return to browsing\n- Navigation keys (‚Üë/‚Üì/‚Üê/‚Üí) still work while searching\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:21:07.077387"
  },
  {
    "basic_info": {
      "name": "FreePPS",
      "full_name": "Seyud/FreePPS",
      "owner": "Seyud",
      "description": "ÂêØÁî®Êê≠ËΩΩÁ±≥Á≥ªËÆæÂ§áÁöÑÂÖ¨Áâà PPS ÊîØÊåÅ",
      "url": "https://github.com/Seyud/FreePPS",
      "clone_url": "https://github.com/Seyud/FreePPS.git",
      "ssh_url": "git@github.com:Seyud/FreePPS.git",
      "homepage": "",
      "created_at": "2025-09-24T10:02:44Z",
      "updated_at": "2025-10-16T14:22:05Z",
      "pushed_at": "2025-10-13T01:54:12Z"
    },
    "stats": {
      "stars": 91,
      "forks": 2,
      "watchers": 91,
      "open_issues": 0,
      "size": 773
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 48618,
        "Python": 11541,
        "Shell": 1869
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "pps",
        "programmable-power-supply",
        "xiaomi"
      ]
    },
    "content": {
      "readme": "# FreePPS üîã‚ö°\n\n**ËÆ©Á±≥Á≥ªËÆæÂ§á‰∫´ÂèóÂÖ¨ÁâàPPSÂø´ÂÖÖÊîØÊåÅÔºÅ**\n\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/Seyud/FreePPS)](https://github.com/Seyud/FreePPS/releases/latest)\n[![Language](https://img.shields.io/badge/Language-Rust-orange)](https://www.rust-lang.org/)\n\n## ‚ú® Ê®°ÂùóÁÆÄ‰ªã\n\nFreePPS ÊòØ‰∏Ä‰∏™‰∏ì‰∏∫Á±≥Á≥ªËÆæÂ§áËÆæËÆ°ÁöÑÊ®°ÂùóÔºåËÉΩÂ§ü**Ëß£ÈîÅÂπ∂ÂêØÁî®ÂÖ¨Áâà PPSÔºàProgrammable Power SupplyÔºâÂø´ÂÖÖÂçèËÆÆÊîØÊåÅ**ÔºåËÆ©‰Ω†ÁöÑËÆæÂ§á‰∫´ÂèóÊõ¥Â•ΩÁöÑÂÖºÂÆπÊÄßÔºÅ\n\n> ‚ö†Ô∏è **ÈáçË¶ÅÊ≥®ÊÑè‰∫ãÈ°π**ÔºöÂºÄÂêØÂÖ¨ÁâàPPSÊîØÊåÅÂêéÔºåËÆæÂ§áÂ∞Ü**Ëá™Âä®ÂÖ≥Èó≠MIPPSÔºàÂ∞èÁ±≥ÁßÅÊúâPPSÂçèËÆÆÔºâÊîØÊåÅ**„ÄÇ‰∏§ÁßçÂçèËÆÆÂ≠òÂú®ÂÜ≤Á™ÅÔºåÊó†Ê≥ïÂêåÊó∂ÂêØÁî®„ÄÇËØ∑Ê†πÊçÆÊÇ®ÁöÑÂÖÖÁîµËÆæÂ§áÈÄâÊã©ÈÄÇÂêàÁöÑÂçèËÆÆ„ÄÇ\n\n> üí° **ÁâπÂà´ÊÑüË∞¢**ÔºöÈÖ∑ÂÆâ@‰ΩéÁ∫øÈòªÁãÇÈ≠î„ÄÅÈÖ∑ÂÆâ@Ëä±Ê©ãÊ°• Êèê‰æõÁöÑÊäÄÊúØÊñπÊ°àÊîØÊåÅ\n\n## üöÄ ‰∏ªË¶ÅÂäüËÉΩ\n\n- ‚úÖ **PPSÂçèËÆÆËß£ÈîÅ** - ÂêØÁî®ÂÖ¨ÁâàPPSÂø´ÂÖÖÊîØÊåÅ\n- üîÑ **Êñá‰ª∂ÁõëÊéß** - ÂÆûÊó∂ÁõëÊéßÂÖ≥ÈîÆÈÖçÁΩÆÊñá‰ª∂ÂèòÂåñ\n- ‚öôÔ∏è **Áä∂ÊÄÅÂàáÊç¢** - ÈÄöËøáÊ®°ÂùóÊìç‰ΩúÊåâÈíÆÂø´ÈÄüÂêØÁî®/Á¶ÅÁî®PPSÊîØÊåÅ\n- üîõ **‰∏¥Êó∂ÊéßÂà∂** - ‰ΩøÁî®Ê®°ÂùóÂºÄÂÖ≥ËøõË°åÂÖºÂÆπÊÄßÂàáÊç¢PPSÊîØÊåÅÁä∂ÊÄÅ\n\n\n## üôè Ëá¥Ë∞¢\n\n- **ÈÖ∑ÂÆâ@‰ΩéÁ∫øÈòªÁãÇÈ≠î**„ÄÅ**ÈÖ∑ÂÆâ@Ëä±Ê©ãÊ°•** - ÊäÄÊúØÊñπÊ°àÊîØÊåÅ\n- **ÊâÄÊúâÊµãËØïÁî®Êà∑** - ÂÆùË¥µÁöÑÂèçÈ¶àÂíåÂª∫ËÆÆ\n\n\n---\n\n**‚ö° ËÆ©ÊØè‰∏ÄÂè∞ÊæéÊπÉËÆæÂ§áÈÉΩ‰∫´ÂèóËá™Áî±ÂÖÖÁîµ‰ΩìÈ™åÔºÅ** üîã\n\n> üíù Â¶ÇÊûúËøô‰∏™Ê®°ÂùóÂØπ‰Ω†ÊúâÂ∏ÆÂä©ÔºåÂèØ‰ª•Áªô‰∏™ Star ÊîØÊåÅ‰∏Ä‰∏ãÔºÅ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:21:08.408905"
  },
  {
    "basic_info": {
      "name": "codex-acp",
      "full_name": "cola-io/codex-acp",
      "owner": "cola-io",
      "description": "An Agent Client Protocol (ACP)‚Äìcompatible agent that bridges the OpenAI Codex runtime with ACP clients over stdio.",
      "url": "https://github.com/cola-io/codex-acp",
      "clone_url": "https://github.com/cola-io/codex-acp.git",
      "ssh_url": "git@github.com:cola-io/codex-acp.git",
      "homepage": "",
      "created_at": "2025-09-18T04:43:16Z",
      "updated_at": "2025-10-16T02:27:07Z",
      "pushed_at": "2025-10-14T03:04:41Z"
    },
    "stats": {
      "stars": 89,
      "forks": 8,
      "watchers": 89,
      "open_issues": 2,
      "size": 151
    },
    "tech_info": {
      "language": "Rust",
      "languages": {
        "Rust": 107511,
        "Shell": 563,
        "Makefile": 420
      },
      "license": "Apache License 2.0",
      "topics": [
        "acp",
        "agent-client-protocol",
        "codex",
        "zed"
      ]
    },
    "content": {
      "readme": "# Codex ACP Agent\n\n[![MSRV](https://img.shields.io/badge/MSRV-1.90%2B-blue.svg)](rust-toolchain.toml)\n[![Edition](https://img.shields.io/badge/Edition-2024-blueviolet.svg)](https://doc.rust-lang.org/edition-guide/rust-2024/index.html)\n\n> Most of this repository code is implemented and reviewed by `codex` agents.\n\nAn Agent Client Protocol (ACP)‚Äìcompatible agent that bridges the OpenAI Codex runtime with ACP clients over stdio. This project is under active development ‚Äî features are evolving and breaking changes are likely.\n\n## Highlights\n\n- Agent Client Protocol (ACP) over stdio using `agent-client-protocol`.\n- Integrates with the Codex Rust workspace for conversation management and event streaming.\n- Slash commands with ACP AvailableCommands updates (advertised to clients on session start).\n- Status output tailored for IDEs (workspace, account, model, token usage).\n- Supports ACP session modes: `read-only`, `auto` (default), and `full-access`.\n- Automatically launches an internal MCP filesystem server (`acp_fs`) so Codex reads/writes files through ACP tooling instead of shell commands.\n\n## Requirements\n\n- Rust (Rust 2024 edition; rustc 1.90+ as pinned in `rust-toolchain.toml`).\n- Network access for building Git dependencies (Codex workspace, ACP crate).\n\n## Build\n\n```bash\nmake build\n```\n\n## Run\n\nThe agent communicates over stdin/stdout using ACP JSON-RPC. Launch it and connect from an ACP client (e.g., an IDE integration or a CLI client implementing ACP):\n\n```bash\n# With tracing logs\nRUST_LOG=info cargo run --quiet\n```\n\nBecause this agent speaks on stdio, it is intended to be spawned by your client. For manual testing, you can pipe ACP JSON-RPC messages to stdin and read replies from stdout.\n\n> Tip: use `make release` (or `cargo build --release`) when shipping the binary to an IDE like Zed. The release build lives at `target/release/codex-acp`.\n\nExample JSON-RPC (initialize ‚Üí new session ‚Üí /status):\n\n```\n{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"v1\",\"clientName\":\"cli\",\"capabilities\":{}}}\n{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"session/new\",\"params\":{\"cwd\":\"/absolute/path\",\"mcpServers\":[]}}\n{\"jsonrpc\":\"2.0\",\"id\":3,\"method\":\"session/prompt\",\"params\":{\"sessionId\":\"1\",\"prompt\":[{\"type\":\"text\",\"text\":\"/status\"}]}}\n```\n\n## Usage (ACP over stdio)\n\nMinimal smoke test from a shell piping JSON-RPC over stdio:\n\n```bash\nprintf '%s\\n' \\\n  '{\"jsonrpc\":\"2.0\",\"id\":1,\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"v1\",\"clientName\":\"cli\",\"capabilities\":{}}}' \\\n  '{\"jsonrpc\":\"2.0\",\"id\":2,\"method\":\"session/new\",\"params\":{\"cwd\":\"'\"$PWD\"'\",\"mcpServers\":[]}}' \\\n  '{\"jsonrpc\":\"2.0\",\"id\":3,\"method\":\"session/prompt\",\"params\":{\"sessionId\":\"1\",\"prompt\":[{\"type\":\"text\",\"text\":\"/status\"}]}}' \\\n| RUST_LOG=info cargo run --quiet\n```\n\nOr use the included script and Makefile target:\n\n```bash\nchmod +x scripts/stdio-smoke.sh\nmake smoke\n```\n\n### Configuration in [Zed](https://zed.dev)\n\n> Add this configuration to zed settings.\n```json\n\"agent_servers\": {\n  \"Codex\": {\n    \"command\": \"codex-acp\",\n    \"args\": [],\n    \"env\": {\n      \"RUST_LOG\": \"info\"\n    }\n  }\n}\n```\n\nThe agent automatically boots an MCP filesystem bridge. No extra configuration (or AGENTS.md edits) are required‚ÄîCodex will discover the `acp_fs` server on every session.\n\n## Filesystem tooling\n\nWhen a session starts, `codex-acp` spins up an in-process TCP bridge and registers an MCP server named `acp_fs`. Codex then calls two structured tools:\n\n- `read_text_file` ‚Äî reads workspace files via ACP `client.read_text_file`, falling back to local disk if the client lacks FS support.\n- `write_text_file` ‚Äî writes workspace files via ACP `client.write_text_file`, with a local fallback.\n\n`codex-acp` also injects a default instruction reminding the model to use these tools rather than shelling out with `cat`/`tee`. If your client exposes filesystem capabilities, file access stays within ACP.\n\n## Plan Updates\n\nWhen Codex emits plan updates (step lists with statuses), the agent translates them into ACP `SessionUpdate::Plan` events. Clients receive structured plan entries with status mapping:\n\n- Pending ‚Üí `pending`\n- InProgress ‚Üí `in_progress`\n- Completed ‚Üí `completed`\n\nThe agent preserves ordering and includes any optional explanation text. This allows IDEs to render a live task checklist during long-running operations.\n\n## Features\n\n- ACP Agent implementation\n  - Handles `initialize`, `authenticate` (API key), `session/new`, `session/prompt`, `session/cancel`.\n  - Streams Codex events (assistant text and deltas, reasoning deltas, token counts) as `session/update` notifications.\n\n- Slash commands (advertised via `AvailableCommandsUpdate`)\n  - Implemented today:\n    - `/new` ‚Äî Start a new chat during a conversation.\n    - `/init` ‚Äî Create an `AGENTS.md` with repository contributor guidance. Uses a bundled prompt (`src/agent/prompt_init_command.md`).\n    - `/model` ‚Äî Show or set the current model (uses `Op::OverrideTurnContext`).\n    - `/approvals` ‚Äî Set approval mode ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-17T02:21:09.718535"
  }
]