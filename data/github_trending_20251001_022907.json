[
  {
    "basic_info": {
      "name": "JoySafety",
      "full_name": "jd-opensource/JoySafety",
      "owner": "jd-opensource",
      "description": "JoySafety",
      "url": "https://github.com/jd-opensource/JoySafety",
      "clone_url": "https://github.com/jd-opensource/JoySafety.git",
      "ssh_url": "git@github.com:jd-opensource/JoySafety.git",
      "homepage": null,
      "created_at": "2025-09-24T09:36:23Z",
      "updated_at": "2025-10-01T02:14:13Z",
      "pushed_at": "2025-09-30T12:41:10Z"
    },
    "stats": {
      "stars": 248,
      "forks": 18,
      "watchers": 248,
      "open_issues": 7,
      "size": 9858
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 818446,
        "Python": 85029,
        "Shell": 21786,
        "Go": 5136,
        "Dockerfile": 4164
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# JoySafety —— 大模型安全框架\n\n---\n\n## 📋 目录\n- [项目简介](#项目简介)\n- [✨ 特性](#特性)\n- [🚀 快速开始](#快速开始)\n- [📖 使用指南](#使用指南)\n- [🏆 最佳实践](#最佳实践)\n- [🏗️ 架构设计](#架构设计)\n- [🛠️ 开发](#开发)\n- [📄 许可证](#许可证)\n- [📅 计划](#计划)\n- Star History\n\n---\n\n## <a id=\"项目简介\"></a>项目简介\n随着生成式人工智能应用的广泛落地，内容安全、数据泄露、提示词攻击等风险也日益凸显。如何保障大模型输出符合法规要求、避免安全漏洞，已成为企业必须面对的关键挑战。为此，**京东正式开源大模型安全框架——JoySafety**，该框架在京东内部广泛应用，覆盖AI导购、物流客服、销售助手、医疗问诊、商家工作台、法务咨询、安全问答等场景，支持日均亿级调用、95%+攻击拦截率，致力于为企业提供一套**成熟、可靠、免费**的大模型安全防护方案。\n\n---\n\n## ✨ <a id=\"特性\"></a>特性\n### 🚀 生产级别\n\n**企业级实战验证**\n- ✅ 保障京东多个**生产级AI应用**安全稳定运行\n- ✅ 复杂业务场景验证，持续迭代优化\n- ✅ 服务部署支持**横向扩展**，满足高并发业务需求\n- ✅ 业务接入零门槛，策略变更支持分钟级**热更新**\n\n**高可靠性保障**\n- 🔄 **原子能力热插拔**，业务不中断\n- ⚡ **配置动态生效**，快速响应业务变化  \n- 📊 **生产环境长期稳定性**验证\n\n---\n\n### 📈 高扩展性\n\n**灵活的架构设计**\n- 🧩 支持**多种原子能力模块**（BERT/FastText/Transformer等主流模型）\n- 🔌 **标准化原子能力接口**，易于扩展新模型\n- 🏗️ 支持**独立部署**或**集中部署**两种模式\n- ⚙️ **轻量编排引擎**，按需灵活配置\n\n**智能负载均衡**\n- 🌐 **集群化部署**支持水平扩展\n- ⚡ **异步检测机制**，提升并发处理能力\n- 🎯 **窗口化检测策略**，平衡性能与准确性\n\n---\n\n### 💡 易用性\n\n**开箱即用**\n- 🐳 **一键Docker Compose启动**，零配置门槛\n- 📱 **DAG编排**\n- 🔧 **标准化API接口**，快速集成现有系统\n\n---\n\n### 🎯 核心技术亮点\n\n### 突破性创新\n\n#### 1. 大模型多轮会话智能识别\n\n#### 2. 采用Free-Taxi异步输出模式，大幅提升检测响应， 实现用户体验与安全的完美平衡\n\n#### 3. **多维响应策略矩阵**\n- 🎯 **精准拦截** - 高风险内容即时阻断\n- ⏸️ **红线代答** - 红线知识库应答\n- 🔄 **智能纠偏** - 自动引导正向回答\n---\n\n## 🚀 <a id=\"快速开始\"></a>快速开始\n## 环境依赖\n请确保已安装以下软件：\n- git\n- git-lfs   用于下载模型文件\n- docker\n- docker compose\n\n### 0. 克隆项目\n```shell\n  #1.\n  git clone https://github.com/jd-opensource/JoySafety.git\n  \n  #2. 进入项目路径\n  cd JoySafety\n  \n  #3. 设置环境变量（建议复制执行，后续脚本/服务均可自动识别）\n  export SAFETY_ROOT_PATH=`pwd`\n  #正常为JoySafety 根路径\n  echo ${SAFETY_ROOT_PATH}\n```\n\n=======\n### 1. 下载模型文件（Huggingface）\n- 推荐使用 [git-lfs](https://git-lfs.com) 拉取大模型文件\n```shell\n\n  #进入项目路径\n  cd $SAFETY_ROOT_PATH\n\n  #\n  git lfs install\n\n  #方案1\n  git clone https://huggingface.co/jdopensource/JoySafety ${SAFETY_ROOT_PATH}/data/models\n\n  #方案2\n  #因网络问题，您也可以从[ModelScope](https://modelscope.cn/models/syf20240814/joysafety/files)下载，`记得解压fast20250710目录下的zip文件`）\n  \n```\n\n### 2. 配置 .env 文件\n- 【在项目根路径】 **复制** `.env.example` 或手动创建 `.env`：\n```shell\n   # 注：切换Shell窗口, 重新设置SAFETY_ROOT_PATH\n   cd $SAFETY_ROOT_PATH\n   \n   cp -f .env.example .env\n    \n   # 测试只需修改.env文件中变量:SAFETY_MODEL_DIR，路径需与模型实际下载路径一致【绝对路径】\n   SAFETY_MODEL_DIR=\n```\n\n### 3. 一键启动（Docker Compose）\n```shell\n   docker-compose --env-file .env up\n```\n\n### 4. API 测试\n\n详细 API 测试案例及使用说明移步到 [quickstart/README.md](quickstart/README.md)。\n\n请参考 quickstart 目录下的文档，获取最新的 API 测试脚本和案例说明。\n\n---\n\n## 📖 <a id=\"使用指南\"></a>使用指南\n### 如何接入一个业务\n> 该项目可以同时支持多个业务，每个业务都可以动态增加，分钟级生效。\n0. 注册原子能力（如果需要用的原子能力未注册过），可参考原子能力管理参考： [function_api.md](safety/safety-admin/docs/api/function_api.md)\n1. 增加一个业务（参考[business_api.md](safety/safety-admin/docs/api/business_api.md)）\n2. 为业务增加策略（参考：[dag_api.md](safety/safety-admin/docs/api/dag_api.md)、[策略样例](safety/safety-admin/docs/strategies)）\n\n*一个完整的代码实例：*[example.py](docs/example.py)\n\n### 如何配置策略（DAG）\n识别策略整体是DAG，从rootId对应的node开始，逐层执行识别策略；策略的每个node分为两部分，function和router；function为当前结点执行的具体能力，router为基于当前结点的识别结果决定需要执行的下一个结点。\n\nfunction类别包含single_label_pred（支持现成的两种开箱即用的实现）、keyword、kb_search、rag_answer、multi_turn_detect，配置方式和含义见上节[如何接入一个业务](#如何接入一个业务)中的完整实例，另外，还支持一个虚拟的类别parallel，以支持在单个node内多个function并行执行。\n\n常用的router类别包括stupid_end和groovy，前者表示直接结束，后续是groovy脚本基于识别结果来返回一下步的node_id。groovy脚本中的内置变量是`ctx`,其结构见对象[SessionContext.java](safety/safety-basic/src/main/java/com/jd/security/llmsec/core/session/SessionContext.java)。\n\n比较典型的策略编排示例见：[README.md](safety/safety-admin/docs/strategies/README.md)\n\n\n### 如何管理敏感词\n支持按`分组+业务`来管理敏感词，另外`all`业务下的敏感词对所有业务生效。\n\n对敏感词的管理方式可以参考：[sensitive_words_api.md](safety/safety-admin/docs/api/sensitive_words_api.md)\n\n### 如何管理知识库\n本项目对知识的管理是分两层的；第一层: 使用mysql数据库用于数据持久化以；第二层：使用safety_knowledge+vearch实现知识的向量化及语义检索。\n\n知识在数据库的管理方式可以参考：[knowledge_api.md](safety/safety-admin/docs/api/knowledge_api.md)；知识向量化及存储至vearch可以参考：[index_all.py]（example/safety-skills/safety-knowledge/index_all.py）\n\n\n\n\n### API 接口调用\n\n参考 [API 文档](./safety/safety-api/docs/api.md)\n\n**多语言调用：**\n- Python: [python/demo.py](safety/safety-demo/python/demo.py)\n- Go: [golang/main.go](safety/safety-demo/golang/main.go)\n- Java: [java demo](safety/safety-demo/java/src/main/java/com/jd/security/llmsec/demo/DefenseApiDemo.java)\n\n\n### FAQ\n常见问题与解决方案见 [FAQ](./docs/FAQ.md)\n\n基于产品特性，项目中的示例仅用于产品功能说明使用，不得用于其他领域，非项目开发者观点。\n\n---\n\n##  <a id=\"最佳实践\"></a>🏆最佳实践\n最佳实践见[best_practice.md](docs/best_practice.md)\n\n---\n\n## 🏗️ <a id=\"架构设计\"></a>架构设计\n\n### 项目目录结构\n```text\n.\n├── README.md\n├── deploy\n│         ├── docker-compose.yml    // 打包启动服务（各个模块也可以单独启动）\n│         └── thirdparty            // 第三方依赖相关配置及文档\n│             ├── mysql\n│             ├── redis\n│             └── vearch\n├── safety\n│         ├── safety-admin           // 用于管理配置和数据后台服务\n│         ├── safety-api             // 对外提供能力的api服务\n│         ├── safety-basic            // 核心jar包，服务于safety-admin、safety-basic及safety-demo中的java部分\n│         ├── safety-demo            // 使用safety-api的多语言示例\n│         │         ├── golang\n│         │         ├── java\n│         │         └── python\n│         └── safety-skills          // safety-api支持的各项",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:08.540556"
  },
  {
    "basic_info": {
      "name": "perplexity-scraper",
      "full_name": "oxylabs/perplexity-scraper",
      "owner": "oxylabs",
      "description": "Perplexity Scraper Track brand mentions, analyze rankings, and gain competitor intelligence from Perplexity. Get started in minutes.",
      "url": "https://github.com/oxylabs/perplexity-scraper",
      "clone_url": "https://github.com/oxylabs/perplexity-scraper.git",
      "ssh_url": "git@github.com:oxylabs/perplexity-scraper.git",
      "homepage": "https://oxylabs.io/products/scraper-api/serp/perplexity",
      "created_at": "2025-09-02T13:40:30Z",
      "updated_at": "2025-09-30T22:55:46Z",
      "pushed_at": "2025-09-24T09:11:09Z"
    },
    "stats": {
      "stars": 221,
      "forks": 0,
      "watchers": 221,
      "open_issues": 0,
      "size": 1402
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 1995,
        "C#": 1404,
        "JavaScript": 964,
        "PHP": 739,
        "Go": 712,
        "Python": 454,
        "Shell": 310
      },
      "license": null,
      "topics": [
        "ai-scraper",
        "llm-api",
        "llm-scraper",
        "llm-scraping",
        "perplexity",
        "perplexity-api",
        "perplexity-scraper",
        "proxy-scraper"
      ]
    },
    "content": {
      "readme": "# Perplexity Scraper\n\n[![Oxylabs promo code](https://github.com/oxylabs/perplexity-scraper/blob/main/ScraperAPI%2BPerplexity-1090x275px.png)](https://oxylabs.io/products/scraper-api/serp/perplexity?utm_source=877&utm_medium=affiliate&utm_campaign=llm_scrapers&groupid=877&utm_content=perplexity-scraper-github&transaction_id=102f49063ab94276ae8f116d224b67)\n\n[![](https://dcbadge.limes.pink/api/server/Pds3gBmKMH?style=for-the-badge&theme=discord)](https://discord.gg/Pds3gBmKMH) [![YouTube](https://img.shields.io/badge/YouTube-Oxylabs-red?style=for-the-badge&logo=youtube&logoColor=white)](https://www.youtube.com/@oxylabs)\n\n\nThe [Perplexity Scraper](https://oxylabs.io/products/scraper-api/serp/perplexity) by Oxylabs allows developers to send prompts to Perplexity and automatically collect both AI-generated responses and structured metadata. Instead of just raw HTML, it can also provide results as parsed JSON, website PNG, XHR/Fetch requests, or Markdown output. \n\nYou can use the [Oxylabs’ Web Scraper API](https://oxylabs.io/products/scraper-api) with Perplexity for AI content auditing, research tracking, and analyzing SEO performance. It handles dynamic AI-generated content, fully supports real-time SERP extraction, and integrates seamlessly with Oxylabs' global proxy infrastructure, without the need to manage proxies, browsers, or worry about anti-bot systems.\n\n## How it works\n\nThe Perplexity scraper handles the rendering, parsing, and delivery of results in any requested format. You need to provide your prompt, credentials, and a few optional parameters, as shown below.\n\n### Request sample (Python)\n\n```python\nimport json\nimport requests\n\n# API parameters.\npayload = {\n    'source': 'perplexity',\n    'prompt': 'top 3 smartphones in 2025, compare pricing across US marketplaces',\n    'geo_location': 'United States',\n    'parse': True\n}\n\n# Get a response.\nresponse = requests.post(\n    'https://realtime.oxylabs.io/v1/queries',\n    auth=('USERNAME', 'PASSWORD'),\n    json=payload\n)\n\n# Print response to stdout.\nprint(response.json())\n\n# Save response to a JSON file.\nwith open('response.json', 'w') as file:\n    json.dump(response.json(), file, indent=2)\n```\n\nMore request examples in different programming languages are available [here](https://github.com/oxylabs/perplexity-scraper/tree/main/Code%20examples).\n\n**Note:** By default, all requests to Perplexity use JavaScript rendering. Make sure to set a sufficient timeout (e.g. 180s) when using the Realtime integration method.\n\n### Request parameters\n\n| Parameter | Description | Default value |\n|-----------|-------------|---------------|\n| `source`* | Sets the Perplexity scraper | `perplexity` |\n| `prompt`* | The prompt or question to submit to Perplexity. | – |\n| `parse` | Returns parsed data when set to true. | `true` |\n| `geo_location` | Specify a country to send the prompt from. [More info](https://developers.oxylabs.io/scraping-solutions/web-scraper-api/features/localization/proxy-location). | – |\n| `callback_url` | URL to your callback endpoint. [More info](https://developers.oxylabs.io/scraping-solutions/web-scraper-api/integration-methods/push-pull#callback). | – |\n\n\\* Mandatory parameters\n\n---\n\n### Output samples\n\nWeb Scraper API returns either an HTML document or a JSON object of Perplexity scraper output, which contains structured data from the results page.\n\n**HTML example:**\n\n![HTML Example](image.png)\n\n**Structured JSON output snippet:**\n\n```json\n{\n    \"results\": [\n        {\n            \"content\": {\n                \"url\": \"https://www.perplexity.ai/search/top-3-smartphones-in-2025-comp-wvA0dso7TgW3NpgF8Jd8tg\",\n                \"model\": \"turbo\",\n                \"top_images\": [\"url + title\"],\n                \"top_sources\": [\"url + title + source\"],\n                \"prompt_query\": \"top 3 smartphones in 2025, compare pricing across US marketplaces\",\n                \"answer_results\": [\"answer in JSON\"],\n                \"displayed_tabs\": [\n                    \"search\",\n                    \"images\",\n                    \"sources\"\n                ],\n                \"related_queries\": [                \n                    \"How do the prices of the top 3 smartphones compare across US marketplaces\",\n                    \"What features make the Galaxy S25 Ultra stand out as the best in 2025\",\n                    \"Why is the Pixel 9a considered a top budget option despite its lower price\",\n                    \"How does the iPhone 16 Pro Max's pricing differ from Samsung and Google models\",\n                    \"What factors should I consider when choosing among these top smartphones in 2025\"\n                ],\n                \"answer_results_md\": [\"answer in Markdown\"],\n                \"parse_status_code\": 12000\n            },\n            \"created_at\": \"2025-07-16 12:14:32\",\n            \"updated_at\": \"2025-07-16 12:15:28\",\n            \"page\": 1,\n            \"url\": \"https://www.perplexity.ai/search/top-3-smartphones-in-2025-comp-wvA0dso7TgW3NpgF8Jd8tg\",\n            \"job_id\": \"7",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:09.850973"
  },
  {
    "basic_info": {
      "name": "FluidMarkdown",
      "full_name": "antgroup/FluidMarkdown",
      "owner": "antgroup",
      "description": null,
      "url": "https://github.com/antgroup/FluidMarkdown",
      "clone_url": "https://github.com/antgroup/FluidMarkdown.git",
      "ssh_url": "git@github.com:antgroup/FluidMarkdown.git",
      "homepage": null,
      "created_at": "2025-09-10T11:19:33Z",
      "updated_at": "2025-09-30T16:12:21Z",
      "pushed_at": "2025-09-28T03:58:44Z"
    },
    "stats": {
      "stars": 213,
      "forks": 20,
      "watchers": 213,
      "open_issues": 4,
      "size": 105805
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 974383,
        "Objective-C": 601608,
        "Kotlin": 5931,
        "Makefile": 36
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# FluidMarkdown\nWe are committed to enabling the streaming rendering of Markdown content generated by large language models on the client side within AI-driven business applications.\n\n# Overview\nThis library is designed for native Android and iOS developers. Built on the open-source CommonMark parsing library, it supports core Markdown syntax and selected HTML tags, rendering them progressively within UI components. It exposes Markdown styling as a structured model, enabling customization and integration into your specific application contexts. For faster integration, refer to the sample code to preview the rendering effect based on input text.\n\n# Features\n+ Support for markdown syntax: titles, paragraphs, ordered lists, unordered lists, tables, code blocks, mathematical formulas, inline code blocks, quotes, dividing lines, footnotes, links, and images.\n+ Support for HTML tags:`<s>` `<sup>` `<sub>` `<mark>` `<a>` `<span>` `<cite>` `<del>` `<font>` `<img>` `<u>`, etc.\n+ Streaming rendering and one-time full rendering modes.\n+ Customizable rendering styles for Markdown syntax.\n+ Adjustable streaming speed via custom parameters.\n+ Event support for clickable elements, including click handling, visibility callbacks, and rendering status updates<font style=\"color:rgb(38, 38, 38);\">, etc.\n+ Added some new extended HTML tags such as `<iconlink>` `<icon>`in `AMHTMLTransformer` class.\n\n# Install\nThe source code of this project is open-source. For information on how to download and run the project, please refer to the file [INSTALL](https://github.com/antgroup/FluidMarkdown/blob/main/INSTALL.md).\n\n# Directory structure\n## iOS\n+ AntMarkdown —— a standard markdown parser and rendering module based on commonMark.\n+ FluidMarkdown —— Component for streaming output.\n\n## Android\n+ fluid-markdown —— Component for streaming output.\n+ markwon-xxx —— Syntax parsing and style rendering implementation based on the open-source markwon library.\n\n# Usage\n## iOS\n+ Native API： `AMXMarkdownWidget.h` is summary header file of the open API. The following is the general calling process of streaming rendering components.\n    1. Create a TextView instance.\n    2. Generate default styles and set custom styles ( if needed )\n    3. Begin streaming the Markdown content.\n    4. Append data dynamically during rendering.\n    5. Adjust list scrolling in response to content size changes in the TextView.\n    6. Handle completion when rendering is finished.\n\n```objectivec\nAMXMarkdownTextView* contentTextView = [[AMXMarkdownTextView alloc] initWithFrame_ant_mark:CGRectMake(0, 0, screenWidht - 20 * 2, 1)];\n\n// get default style config\nAMXMarkdownStyleConfig* config = [AMXMarkdownStyleConfig defaultConfig];\n\n// modify code block style for example\nconfig.codeBlockConfig.backgroundColor = [UIColor greenColor];\n\n// set the style with unique Id\n[[AMXRenderService shared] setMarkdownStyleWithId:config styleId:@\"demo\"];\n\n// begin print\n[self.contentTextView startStreamingWithContent:@\"testing data\"];\n\n// append content during printing\n[self.contentTextView addStreamContent:@\"**append test data**\"];\n\n// stop print when you need\n[self.contentTextView stop];\n```\n\n```objectivec\n@interface StreamPreviewViewController ()<AMXMarkdownTextViewDelegate>\n-(void)initUI\n{\n    // set delegate\n    self.contentTextView.textViewDelegate = self;\n}\n// size change delegate\n-(void)onSizeChange:(CGSize)size\n{\n    // adjust size of AMXMarkdownTextView and container view\n    [self.contentTextView setFrame:CGRectMake(0, 0, self.contentTextView.frame.size.width, size.height)];\n    [self.containerView setContentSize:size];\n    CGPoint bottomOffset = CGPointMake(0, self.containerView.contentSize.height - self.containerView.bounds.size.height);\n    if (bottomOffset.y > 0) {\n        // scroll the container view to bottom\n        [self.containerView setContentOffset:bottomOffset animated:NO];\n    }\n}\n```\n\n\n\n+ Sample Description \n    1. The `StreamPreviewViewController` class is a sample page for previewing streaming output.\n    2. The `AIChatViewController` class demonstrates FluidMarkdown usage in simulated AI conversation scenarios. Note that the conversation data is statically defined and intended solely for rendering demonstration purposes.\n\n![StreamingPreview](https://github.com/antgroup/FluidMarkdown/blob/main/media/StreamViewController.gif)![AIChat](https://github.com/antgroup/FluidMarkdown/blob/main/media/AIChatViewController.gif)\n\n## Android\n1. Initialize by calling AFMInitializer.init(context, backgroundTaskHandler, imageHandler, logHandler) once globally. Except for context, all other parameters can be null.\n2. Create PrinterMarkDownTextView to display markdown content.\n3. Create MarkdownStyles to set render styles.\n4. **Call PrinterMarkDownTextView.init()** to bind MarkdownStyles and ElementClickEventCallback.  Must be called, MarkdownStyles cannot be null.\n5. Set markdown content or call the print start method.\n\n```java\nAFMInitializer.init(context, null, null, null);\n// Create ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:11.172334"
  },
  {
    "basic_info": {
      "name": "google-ai-mode-scraper",
      "full_name": "oxylabs/google-ai-mode-scraper",
      "owner": "oxylabs",
      "description": "Scrape Google AI Mode responses without blocks on a large scale.",
      "url": "https://github.com/oxylabs/google-ai-mode-scraper",
      "clone_url": "https://github.com/oxylabs/google-ai-mode-scraper.git",
      "ssh_url": "git@github.com:oxylabs/google-ai-mode-scraper.git",
      "homepage": "https://oxylabs.io/products/scraper-api/serp/google-ai-mode",
      "created_at": "2025-09-08T13:17:40Z",
      "updated_at": "2025-09-30T22:54:27Z",
      "pushed_at": "2025-09-24T09:10:18Z"
    },
    "stats": {
      "stars": 207,
      "forks": 0,
      "watchers": 207,
      "open_issues": 0,
      "size": 1207
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 1949,
        "C#": 1358,
        "JavaScript": 918,
        "Go": 693,
        "PHP": 693,
        "Python": 583,
        "Shell": 264
      },
      "license": null,
      "topics": [
        "ai-mode",
        "google-ai",
        "google-ai-mode",
        "proxy-scrape",
        "scraper-api",
        "web-scraper",
        "web-scraper-api"
      ]
    },
    "content": {
      "readme": "# Google AI Mode Scraper\n\n[![Oxylabs promo code](https://github.com/oxylabs/google-ai-mode-scraper/blob/main/ScraperAPI%2BGoogleAI-1090x275px.png)](https://oxylabs.io/products/scraper-api/serp/google-ai-mode?utm_source=877&utm_medium=affiliate&utm_campaign=llm_scrapers&groupid=877&utm_content=google-ai-mode-scraper-github&transaction_id=102f49063ab94276ae8f116d224b67)\n\n[![](https://dcbadge.limes.pink/api/server/Pds3gBmKMH?style=for-the-badge&theme=discord)](https://discord.gg/Pds3gBmKMH) [![YouTube](https://img.shields.io/badge/YouTube-Oxylabs-red?style=for-the-badge&logo=youtube&logoColor=white)](https://www.youtube.com/@oxylabs)\n\n[Google AI Mode scraper](https://oxylabs.io/products/scraper-api/serp/google-ai-mode) lets you send prompts and reliably extract AI responses at scale without blocks. Built on the [Web Scraper API](https://oxylabs.io/products/scraper-api/web), it delivers parsed data in JSON format while handling proxies, headless browsers, and anti-bot systems for you. You can use scraped Google AI Mode data to power SEO and GEO projects, build training datasets, or support other data tasks.\n\n## How it works\n\nScrape Google AI Mode responses by sending a POST request with your prompt and authentication credentials. See the Python example below, or explore more language samples [here](https://github.com/oxylabs/google-ai-mode-scraper/tree/3e23bc41979eeb78326e9bd9d02b743aa371efb1/Code%20examples).\n\n> [!TIP]\n> Get a **free trial** by registering on the [dashboard](https://dashboard.oxylabs.io/).\n\n### Request sample (Python)\nFirst, install the requests library in your Python environment:\n\n```bash\npip install requests\n```\n\nThen, create the following `.py` file. Make sure to use your Web Scraper API `USERNAME` and `PASSWORD`:\n\n```python\nimport json\nimport requests\n\n\n# API parameters.\npayload = {\n    'source': 'google_ai_mode',\n    'query': 'best health trackers under $200',\n    'render': 'html',\n    'parse': True,\n    'geo_location': 'United States'\n}\n\n# Get a response.\nresponse = requests.post(\n    'https://realtime.oxylabs.io/v1/queries',\n    # Replace with your credentials.\n    auth=('USERNAME', 'PASSWORD'),\n    json=payload,\n)\n\n# Print the response to stdout.\nprint(response.json())\n\n# Save the response to a JSON file.\nwith open('response.json', 'w') as file:\n    json.dump(response.json(), file, indent=2)\n```\n\n### Request parameters\n\n| Parameter | Description | Default Value |\n| :---- | :---- | :---- |\n| `source` (mandatory) | Sets the scraper. | `google_ai_mode` |\n| `query` (mandatory) | The prompt or question to submit to Google AI Mode. Cannot exceed 400 characters. | – |\n| `render` (mandatory) | Setting to `html` is required for this source. | – |\n| `parse` | Returns parsed data when set to `true`. | `false` |\n| `geo_location` | Specify a country to send the prompt from. [More info](https://developers.oxylabs.io/scraping-solutions/web-scraper-api/features/localization/proxy-location). | - |\n| `callback_url` | URL to your callback endpoint. [More info](https://developers.oxylabs.io/scraping-solutions/web-scraper-api/integration-methods/push-pull#callback). | – |\n\nCheck out [documentation](https://developers.oxylabs.io/scraping-solutions/web-scraper-api/targets/google/ai-mode) to learn more.\n\n### Output samples\n#### JSON example\nBelow is a trimmed JSON output sample. See the full JSON output [here](https://github.com/oxylabs/google-ai-mode-scraper/blob/3e23bc41979eeb78326e9bd9d02b743aa371efb1/output-sample.json).\n\n```json\n{\n  \"results\": [\n    {\n      \"content\": {\n        \"links\": [\n          {\n            \"url\": \"https://www.tomsguide.com/best-picks/best-cheap-fitness-trackers\",\n            \"text\": \"We've tested the best cheap fitness trackers available right now\"\n          },\n          {\n            \"url\": \"https://www.garagegymreviews.com/best-budget-fitness-tracker\",\n            \"text\": \"Expert-Tested: Best Budget Fitness Tracker (2025)\"\n          },\n          {\"url\": \"...\", \"text\": \"...\"}\n        ],\n        \"prompt\": \"best health trackers under $200\",\n        \"citations\": [\n          {\n            \"url\": \"https://www.garagegymreviews.com/best-budget-fitness-tracker\",\n            \"text\": \"For the best health trackers under $200, the top contenders are the Fitbit Charge 6 , Fitbit Inspire 3 , and...\"\n          },\n          {\n            \"url\": \"https://www.techradar.com/best/best-cheap-fitness-trackers\",\n            \"text\": \"For the best health trackers under $200, the top contenders are the Fitbit Charge 6 , Fitbit Inspire 3 , and...\"\n          },\n          {\"url\": \"...\", \"text\": \"...\"}\n        ],\n        \"response_text\": \"For the best health trackers under $200, the top contenders are the Fitbit Charge 6 , Fitbit Inspire 3 , and...\",\n        \"parse_status_code\": 12000\n      },\n      \"created_at\": \"2025-09-03 10:13:11\",\n      \"updated_at\": \"2025-09-03 10:13:26\",\n      \"page\": 1,\n      \"url\": \"https://www.google.com/search?udm=50&q=best+health+trackers+under+$200&uule=w+CAIQICINdW5pdGVkIHN0YXRlc",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:12.472886"
  },
  {
    "basic_info": {
      "name": "ColorOS-CVE-2025-10184",
      "full_name": "yuuouu/ColorOS-CVE-2025-10184",
      "owner": "yuuouu",
      "description": "ColorOS短信漏洞，以及用户自救方案",
      "url": "https://github.com/yuuouu/ColorOS-CVE-2025-10184",
      "clone_url": "https://github.com/yuuouu/ColorOS-CVE-2025-10184.git",
      "ssh_url": "git@github.com:yuuouu/ColorOS-CVE-2025-10184.git",
      "homepage": "",
      "created_at": "2025-09-24T11:48:03Z",
      "updated_at": "2025-09-30T23:50:28Z",
      "pushed_at": "2025-09-30T16:12:18Z"
    },
    "stats": {
      "stars": 106,
      "forks": 20,
      "watchers": 106,
      "open_issues": 2,
      "size": 1276
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 31046,
        "Kotlin": 6302
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "> [信息来源](https://www.rapid7.com/blog/post/cve-2025-10184-oneplus-oxygenos-telephony-provider-permission-bypass-not-fixed/)\n\n### 漏洞说明\n\n- 类型：数据库注入攻击`1=1 AND`\n- 效果：任意APP读取短信数据。*无需权限、无需用户交互、无感知读取*\n- 影响：本机的所有短信信息、短信验证码泄露\n- 涉及范围：**OPPO 及其子品牌(一加、realme)**\n- ***影响范围更新：19年发布的ColorOS 7.1存在此漏洞，合理推测此漏洞至少存在了六年***\n- 修复情况：厂商已在9月24日回应**rapid7**（漏洞发现者）正在调查该问题\n- 测试漏洞：安装 [`yuu_v3.1.apk`](https://yuuou.lanzout.com/iUGNs37c5g6f)，执行一分钟即可看到数据，执行完成没有数据说明你的手机没有被此漏洞影响\n- 普通用户防护策略：\n  1. 在厂商未修补漏洞前，请将sim卡放到使用其它品牌手机上使用\n  2. 设备上的短信尽快删除，彻底删除。避免短信被用作用户画像\n  3. 使用Android虚拟机或云手机安装应用\n  4. 在使用短信验证时尽量保证无后台应用运行\n- ***自救方案：需要root！选择下方的自救方案。如何root请参考 [ColorOS刷机路径](https://yuuou.vercel.app/%E9%80%86%E5%90%91/ColorOS%20%E5%88%B7%E6%9C%BA%E8%B7%AF%E5%BE%84/)***\n\n### 无root用户临时自救方案\n> 基于[v2ex@Dawnnnnnn](https://www.v2ex.com/t/1162349#r_16804643)提出的方法改进。⚠️修改系统内容有风险！\n\n1. 下载[Shizuku](https://shizuku.rikka.app/download/)和[Blocker](https://github.com/lihenggui/blocker/releases)。(提示无法安装时断开网络后安装)\n2. 根据[教程选择无线调试启动Shizuku](https://shizuku.rikka.app/zh-hans/guide/setup/#%E5%90%AF%E7%94%A8%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95)\n3. `Blocker`设置中更改`控制器种类`为`Shizuku/Sui`，`Shizuku`授权给`Blocker`\n4. `Blocker`设置中打开 `显示系统应用` \n5. `Blocker`搜索`telephony`，进入`电话/短信存储`应用\n6. 选择`内容提供者`，找到其中的`PushMessageProvider`、`PushShopProvider`、`ServiceNumberProvider`三个选项关闭\n7. 注意⚠️：重启手机后将导致无法收到短信(能发送)，必须重新开启上一步的三个选项，再重启一次才能正常收到短信。确认能收发短信之后关闭三个选项，既有拦截效果，又能正常收发信息，将保持到下次重启\n   \n<img src=\"http://upforme.ru/uploads/001c/43/d3/2/575277.jpg\" width=\"240\"><img src=\"http://upforme.ru/uploads/001c/43/d3/2/719926.jpg\" width=\"240\">\n\n### 漏洞效果\n\n<img src=\"http://upforme.ru/uploads/001c/43/d3/2/700625.png\" width=\"240\">\n\n[可将隐私数据打码后上传到 Issues](https://github.com/yuuouu/ColorOS-CVE-2025-10184/issues/1)\n\n### 自救方案 (需要 root)\n\n无root情况下，试了系统分身、多用户、Shelter工作账号都无法拦截此漏洞\n\n#### 方案一：使用xposed模块\n\n`yuu_v3.1.apk`包含模块内容，将捕获调用此漏洞的应用，拦截结果并弹窗提示和记录，需要手动勾选应用。  \n如有发现，请提 Issues 或通过[电报反馈](https://t.me/+Z8f7P5MMkZ0yNzE1)  \n<img src=\"https://github.com/user-attachments/assets/d3ee17bf-9847-4d1d-bbe7-ef9039d9bb4f\" width=\"260\">\n\n#### 方案二：禁用 Provider\n\n> 来自[v2ex@Dawnnnnnn](https://www.v2ex.com/t/1162349#r_16804643)\n\n1. 下载安装 [Blocker](https://github.com/lihenggui/blocker/releases) \n2. 在设置中打开 `显示系统应用`\n3. 搜索 `telephony`，进入 `电话/短信存储` \n4. 选择 `内容提供者` ，找到其中的 `PushMessageProvider`、`PushShopProvider`、`ServiceNumberProvider` 三个选项关闭\n5. 注意⚠️：重启手机后将导致无法收到短信(能发送)，必须重新开启上一步的三个选项，再重启一次才能正常收到短信。确认能收发短信之后再关闭三个选项，既有拦截效果，又能正常收发信息，将保持到下次重启   \n\n<img src=\"http://upforme.ru/uploads/001c/43/d3/2/719926.jpg\" width=\"260\">\n\n#### 方案三：限制读取数据库文件\n\n> 来自酷安@kkkkkcc\n\n1. 打开 `MT管理器`，进入目录 `/data/data/com.android.providers.telephony/databases/` \n2. 禁用读取权限：长按 `mmssms.db` - `属性` - `权限 更改` - `去除读权限，包括所有者和用户组`\n3. 可能在特定机型上会出现无法收到短信，需自测\n\n<img src=\"http://upforme.ru/uploads/001c/43/d3/2/244342.jpg\" width=\"260\">\n\n### 披露时间线\n\n```\n2025年5月1日：Rapid7通过电子邮件联系一加安全响应中心（OneSRC），请求就漏洞披露进行沟通。未收到回复。\n2025年5月6日：Rapid7再次通过电子邮件联系OneSRC。未收到回复。\n2025年7月2日：Rapid7同时通过电子邮件联系一加客服支持团队和OneSRC。\n2025年7月3日：一加客服回复称将向内部相关团队转达Rapid7请求，随后联系获取更多信息。此后再未收到后续回复。\n2025年7月10日：Rapid7联系一加客服要求跟进。未收到回复。\n2025年7月22日：Rapid7向OneSRC的X平台账号发送消息，请求漏洞披露沟通渠道。未获回应。\n2025年8月16日：Rapid7联系与OnePlus存在业务往来的 OPPO CNA 代表，请求引荐 OneSRC 团队。未获回应。\n2025年9月23日：Rapid7认定OnePlus为未响应供应商，通过本披露博文公开发布CVE-2025-10184漏洞。\n2025年9月24日：研究发布后，OnePlus回复Rapid7确认收到披露信息，并表示正在调查该问题。\n```\n\n### 漏洞调用字段含义\n\n`SELECT address FROM sms ORDER BY rowid DESC LIMIT 3`\n- LIMIT 3：最近的 3 个\n- body：短信正文内容。可修改为下面的任意字段\n\n| 字段名                            | 含义说明                       |\n| ------------------------------ | -------------------------- |\n| _id                            | 主键，自增 ID                   |\n| thread_id                      | 会话 ID，归属到哪个对话线程            |\n| address                        | 短信发送方或接收方号码                |\n| person                         | 联系人 ID（可能对应 Contacts 表）    |\n| date                           | 收到/发送时间（毫秒时间戳）             |\n| date_sent                      | 实际发送时间（对发出短信有效）            |\n| protocol                       | 协议：0=SMS, 1=MMS            |\n| read                           | 是否已读（0=未读, 1=已读）           |\n| status                         | 发送状态（-1=接收, 0=成功, 64=待发送等） |\n| type                           | 短信类型（1=收件箱, 2=已发件, 3=草稿等）  |\n| reply_path_present             | 是否设置了回复路径                  |\n| subject                        | 短信主题（MMS 可能有）              |\n| body                           | 短信正文内容                     |\n| service_center                 | 服务中心号码 (SMSC)              |\n| locked                         | 是否锁定（防止被系统清理）              |\n| sub_id                         | 使用的 SIM 卡 ID               |\n| phone_id                       | 手机卡槽 ID                    |\n| error_code                     | 发送错误码                      |\n| creator                        | 创建该短信的应用包名                 |\n| seen                           | 是否已在界面展示（0/1）              |\n| priority                       | 短信优先级（厂商/IMS扩展）            |\n| m_size                         | 消息大小（多见于 MMS）              |\n| oplus_drafts                   | Oplus 定制：草稿标记              |\n| oplus_mass          ",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-01T02:29:13.747981"
  },
  {
    "basic_info": {
      "name": "JManus",
      "full_name": "spring-ai-alibaba/JManus",
      "owner": "spring-ai-alibaba",
      "description": "A high-determinism, code-free Agent development framework built with Java 一个高确定性的 无代码 Agent 开发框架，以 Java编写",
      "url": "https://github.com/spring-ai-alibaba/JManus",
      "clone_url": "https://github.com/spring-ai-alibaba/JManus.git",
      "ssh_url": "git@github.com:spring-ai-alibaba/JManus.git",
      "homepage": "",
      "created_at": "2025-09-12T09:28:02Z",
      "updated_at": "2025-09-30T10:52:37Z",
      "pushed_at": "2025-09-27T14:20:15Z"
    },
    "stats": {
      "stars": 98,
      "forks": 25,
      "watchers": 98,
      "open_issues": 20,
      "size": 240823
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 2240294,
        "Vue": 810968,
        "TypeScript": 322832,
        "JavaScript": 158555,
        "Shell": 43364,
        "Python": 26328,
        "Batchfile": 9034,
        "Makefile": 7008,
        "HTML": 2002
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Spring AI Alibaba JManus\n\n<div align=\"center\">\n\n[![License](https://img.shields.io/badge/license-Apache%202-blue.svg)](LICENSE)\n[![Java](https://img.shields.io/badge/Java-17+-orange.svg)](https://openjdk.java.net/)\n[![Spring Boot](https://img.shields.io/badge/Spring%20Boot-3.x-green.svg)](https://spring.io/projects/spring-boot)\n[![GitHub Stars](https://img.shields.io/github/stars/alibaba/spring-ai-alibaba.svg)](https://github.com/alibaba/spring-ai-alibaba/stargazers)\n\n🌍 [English](./README.md) | [中文](./README-zh.md)\n\n📚 Developer Docs: [Quick Start (EN)](./README-dev-en.md) | [开发者快速入门 (中文)](./README-dev.md)\n\n[About](#-about) • [Quick Start](#-quick-start) • [Contributing](#-contributing)\n\n</div>\n\n![image](https://github.com/user-attachments/assets/07feeb29-c410-4f56-89bf-532210bc1b63)\n\n---\n\n## ✨ About JManus\n\nJManus is a Java implementation of Manus, currently used in many applications within Alibaba Group. It is primarily used for handling exploratory tasks that require a certain degree of determinism, such as quickly finding data from massive datasets and converting it into a single row in a database, or analyzing logs and issuing alerts.\n\nJManus also provides HTTP service invocation capabilities, making it suitable for integration into existing projects. For details, please refer to the developer quick start guide.\n\n## 🎯 JManus Product Features\n\n### 🤖 **Pure Java Manus Implementation**: \n\nA pure Java multi-agent collaboration implementation that provides a complete set of HTTP call interfaces, suitable for secondary integration by Java developers.\n\n![Image](https://github.com/user-attachments/assets/3d98c1c6-aabb-45a2-b192-7b687093a1ee)\n\n### 🛠️ **Plan-Act Mode**: \n\nAllows you to precisely control every execution detail, providing extremely high execution determinism.\n\n![Image](https://github.com/user-attachments/assets/a689791f-adf5-44b6-9ea6-151f557a26d4)\n\n### 🔗 **MCP Integration**:\n\n Natively supports the Model Context Protocol (MCP) for seamless integration with external services and tools.\n\n![Image](https://github.com/user-attachments/assets/2d3f833f-ba45-42b6-8e1b-f3e9cfd40212)\n\n### 📜 **Web Interface for Agent Configuration**:\n\n Easily configure agents through an intuitive web management interface without modifying code.\n\n![Image](https://github.com/user-attachments/assets/bb25f778-f8c3-46da-9da3-6f7ea2f0917d)\n\n### 🌊 **Infinite Context Handling**: \n\nSupports precise extraction of target information from massive content without relying on specific long-context models.\n\n![Image](https://github.com/user-attachments/assets/f23e5f27-91e1-4262-83d9-5bfbe5d644d5)\n\n\n## 🚀 Quick Start\n\nGet JManus up and running in under 5 minutes:\n\n### Prerequisites\n\n- 🌐 **DashScope API Key** (or alternative AI model provider)\n- 🐳 **Docker** (for containerized deployment) or ☕ **Java 17+** (for source code execution)\n\n### Method 1: Using Docker (Recommended)\n\n#### 🐳 Using Docker Hub Image\n\n```bash\n# Pull the latest develop image\ndocker pull springaialibaba/jmanus:develop\n\n# Basic startup (temporary data storage)\ndocker run -d \\\n  --name jmanus \\\n  -p 18080:18080 \\\n  -e DASHSCOPE_API_KEY=your_api_key_here \\\n  springaialibaba/jmanus:develop\n\n# Or start with data persistence (recommended)\ndocker run -d \\\n  --name jmanus \\\n  -p 18080:18080 \\\n  -e DASHSCOPE_API_KEY=your_api_key_here \\\n  -v $(pwd)/h2-data:/app/extracted/h2-data \\\n  -v $(pwd)/extensions:/app/extracted/extensions \\\n  springaialibaba/jmanus:develop\n```\n\n#### 🇨🇳 Using Alibaba Cloud Image (China Acceleration)\n\n```bash\n# Pull Alibaba Cloud accelerated image\ndocker pull sca-registry.cn-hangzhou.cr.aliyuncs.com/spring-ai-alibaba/jmanus:develop\n\n# Basic startup (temporary data storage)\ndocker run -d \\\n  --name jmanus \\\n  -p 18080:18080 \\\n  -e DASHSCOPE_API_KEY=your_api_key_here \\\n  sca-registry.cn-hangzhou.cr.aliyuncs.com/spring-ai-alibaba/jmanus:develop\n\n# Or start with data persistence (recommended)\ndocker run -d \\\n  --name jmanus \\\n  -p 18080:18080 \\\n  -e DASHSCOPE_API_KEY=your_api_key_here \\\n  -v $(pwd)/h2-data:/app/extracted/h2-data \\\n  -v $(pwd)/extensions:/app/extracted/extensions \\\n  sca-registry.cn-hangzhou.cr.aliyuncs.com/spring-ai-alibaba/jmanus:develop\n```\n\n#### 🔧 Advanced Docker Configuration\n\nIf you need custom configuration or data persistence:\n\n```bash\n# Create data directories\nmkdir -p /path/to/jmanus/h2-data\nmkdir -p /path/to/jmanus/extensions\n\n# Start with custom configuration (recommended for data persistence)\ndocker run -d \\\n  --name jmanus \\\n  -p 18080:18080 \\\n  -e DASHSCOPE_API_KEY=your_api_key_here \\\n  -v /path/to/jmanus/h2-data:/app/extracted/h2-data \\\n  -v /path/to/jmanus/extensions:/app/extracted/extensions \\\n  --restart unless-stopped \\\n  springaialibaba/jmanus:develop\n```\n\n> 📁 **Data Storage Information**:\n> - **H2 Database**: `/app/extracted/h2-data` - Stores application database files\n> - **Runtime Data**: `/app/extracted/extensions` - Stores extensions and runtime configurations\n> - It's recommended to mount these two directories for data per",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:15.013537"
  },
  {
    "basic_info": {
      "name": "android-code-studio",
      "full_name": "AndroidCSOfficial/android-code-studio",
      "owner": "AndroidCSOfficial",
      "description": "Android Code Studio is an IDE for Android to develop full featured Android apps.",
      "url": "https://github.com/AndroidCSOfficial/android-code-studio",
      "clone_url": "https://github.com/AndroidCSOfficial/android-code-studio.git",
      "ssh_url": "git@github.com:AndroidCSOfficial/android-code-studio.git",
      "homepage": "",
      "created_at": "2025-09-25T13:55:29Z",
      "updated_at": "2025-10-01T01:56:24Z",
      "pushed_at": "2025-09-27T22:27:41Z"
    },
    "stats": {
      "stars": 94,
      "forks": 8,
      "watchers": 94,
      "open_issues": 18,
      "size": 1044467
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 35429531,
        "Kotlin": 4073899,
        "ANTLR": 109365,
        "HTML": 109220,
        "C++": 23983,
        "Tree-sitter Query": 18502,
        "Shell": 16283,
        "Lex": 13233,
        "C": 7548,
        "JavaScript": 3824,
        "ReScript": 3232,
        "Makefile": 2698,
        "AIDL": 1165
      },
      "license": "GNU General Public License v3.0",
      "topics": [
        "android",
        "android-application",
        "android-developers",
        "android-development",
        "android-studio",
        "androidide",
        "androidstudio"
      ]
    },
    "content": {
      "readme": "<p align=\"left\">\r\n  <img src=\"https://avatars.githubusercontent.com/u/234419170?s=400&u=43571ebf481969baafb8399813ad57f46c19eb95&v=4\" alt=\"AndroidIDE\" width=\"80\" height=\"80\"/>\r\n</p>\r\n\r\n<h2 align=\"left\"><b>Android Code Studio</b></h2>\r\n<p align=\"left\">\r\n  An IDE to develop real, Gradle-based Android applications on Android devices.\r\n<p><br>\r\n\r\n<p align=\"left\">\r\n<!-- Latest release -->\r\n<img src=\"https://img.shields.io/github/v/release/AndroidCSOfficial/android-code-studio?include_prereleases&amp;label=latest%20release\" alt=\"Latest release\">\r\n<!-- Build and test -->\r\n<!-- <img src=\"https://github.com/Mohammed-baqer-null/android-code-studio/actions/workflows/asm_build.yml/badge.svg\" alt=\"Builds and tests\"> -->\r\n<!-- Crowdin -->\r\n<a href=\"https://crowdin.com/project/androidide\"><img src=\"https://badges.crowdin.net/androidide/localized.svg\" alt=\"Crowdin\"></a>\r\n<!-- License -->\r\n<img src=\"https://img.shields.io/badge/License-GPLv3-blue.svg\" alt=\"License\"></p>\r\n\r\n\r\n<p align=\"left\">\r\n  <a href=\"https://github.com/Mohammed-baqer-null/android-code-studio/issues/new?labels=bug&template=BUG.yml&title=%5BBug%5D%3A+\">\r\n    <img src=\"https://img.shields.io/badge/Report%20Bug-red?style=for-the-badge&logo=github\" alt=\"Report a bug\">\r\n  </a>\r\n  <a href=\"https://github.com/Mohammed-baqer-null/android-code-studio/issues/new?labels=feature&template=FEATURE.yml&title=%5BFeature%5D%3A+\">\r\n    <img src=\"https://img.shields.io/badge/Request%20Feature-brightgreen?style=for-the-badge&logo=github\" alt=\"Request a feature\">\r\n  </a>\r\n  <a href=\"https://t.me/rv2ide\">\r\n    <img src=\"https://img.shields.io/badge/Telegram-Join%20Us-1DA1F2?style=for-the-badge&logo=telegram\" alt=\"Join on Telegram\">\r\n  </a>\r\n    <a href=\"https://docs.androidide.com/\">\r\n    <img src=\"https://img.shields.io/badge/Docs-Explore-blue?style=for-the-badge&logo=read-the-docs\" alt=\"Explore the docs\">\r\n  </a>\r\n</p>\r\n\r\n## Features\r\n\r\n- [x] Gradle support\r\n- [x] JDK 11 & JDK 17 available\r\n- [x] Terminal with essential packages\r\n- [x] Custom environment variables (for builds & terminal)\r\n- [x] SDK & NDK Manager (manage Android SDKs and NDKs via terminal)\r\n- [x] API information for classes and their members (since, removed, deprecated)\r\n- [x] Log reader (real-time logs for your app)\r\n- [ ] Language servers\r\n    - [x] Java\r\n    - [x] XML\r\n    - [x] Kotlin\r\n- [ ] UI Designer\r\n    - [x] Layout inflater\r\n    - [x] Resolve resource references\r\n    - [x] Auto-complete resource values when editing attributes\r\n    - [x] Drag & Drop interface\r\n    - [x] Visual attribute editor\r\n    - [x] Android Widgets\r\n- [ ] String Translator\r\n- [x] Asset Studio (Drawable & Icon Maker)\r\n- [x] Plugin Creator (Create sub-modules or plugins inside your project)\r\n- [x] Git integration\r\n- [x] **AI Agent** – fully **project-aware AI assistant** that understands your code, modules, and project structure to help with coding.\r\n<!-- - debugging, and suggestions-->\r\n\r\n## Installation\r\n\r\n[<img src=\"https://github.com/Kunzisoft/Github-badge/raw/main/get-it-on-github.svg\"\r\n    alt=\"Get it on F-Droid\"\r\n    height=\"80\">](https://github.com/Mohammed-baqer-null/android-code-studio/releases)\r\n\r\n> _Please install Android Code Studio from trusted sources only i.e._\r\n> - [_GitHub Releases_](https://github.com/Mohammed-baqer-null/android-code-studio/releases)\r\n\r\n- Download the Android Code Studio APK from the mentioned trusted sources.\r\n- Follow the\r\n  instructions [here](https://docs.androidide.com/tutorials/get-started.html) to\r\n  install the build tools.\r\n\r\n## Limitations\r\n\r\n- For working with projects in AndroidIDE, your project must use Android Gradle Plugin v7.2.0 or\r\n  newer. Projects with older AGP must be migrated to newer versions.\r\n- SDK Manager is already included in Android SDK and is accessible in Android Code Studio via its Terminal.\r\n  But, you cannot use it to install some tools (like NDK) because those tools are not built for\r\n  Android.\r\n- No official NDK support because we haven't built the NDK for Android.\r\n\r\nThe app is still being developed actively. It's in beta stage and may not be stable. if you have any\r\nissues using the app, please let us know.\r\n\r\n## Contributing\r\n\r\nSee the [contributing guide](./CONTRIBUTING.md).\r\n\r\nFor translations, visit the [Crowdin project page](https://crowdin.com/project/androidide).\r\n\r\n## Thanks to\r\n\r\n- [Rosemoe](https://github.com/Rosemoe) for the\r\n  awesome [CodeEditor](https://github.com/Rosemoe/sora-editor)\r\n- [Termux](https://github.com/termux) for [Terminal Emulator](https://github.com/termux/termux-app)\r\n- [Bogdan Melnychuk](https://github.com/bmelnychuk)\r\n  for [AndroidTreeView](https://github.com/bmelnychuk/AndroidTreeView)\r\n- [George Fraser](https://github.com/georgewfraser) for\r\n  the [Java Language Server](https://github.com/georgewfraser/java-language-server)\r\n- [Itsaky](https://github.com/itsaky) The original developer\r\n  of [AndroidIDE](https://github.com/AndroidIDEOfficial/AndroidIDE.git) whose project I forked and now maintain.\r\n  \r\nThanks to all the de",
      "default_branch": "dev"
    },
    "fetched_at": "2025-10-01T02:29:16.300763"
  },
  {
    "basic_info": {
      "name": "askAndLearn",
      "full_name": "jookaz/askAndLearn",
      "owner": "jookaz",
      "description": "智能问学系统",
      "url": "https://github.com/jookaz/askAndLearn",
      "clone_url": "https://github.com/jookaz/askAndLearn.git",
      "ssh_url": "git@github.com:jookaz/askAndLearn.git",
      "homepage": null,
      "created_at": "2025-09-18T03:23:31Z",
      "updated_at": "2025-09-24T20:19:37Z",
      "pushed_at": "2025-09-20T12:21:41Z"
    },
    "stats": {
      "stars": 81,
      "forks": 9,
      "watchers": 81,
      "open_issues": 0,
      "size": 68588
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 277518,
        "Vue": 178539,
        "HTML": 24905,
        "JavaScript": 20023
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# 智慧问学系统\n\n* 问学：通过向大模型提问，并依据回复内容理解学习的以问促学过程。\n\n* 智慧问学：通过你问你答、他问你答和协同改进，提升学生向大模型的提问能力，以及判别大模型回复的能力。\n\n本系统使用SSM框架实现，使用Spring AI调用大语言模型。使用MySQL数据库存储数据。\n\n## 界面展示\n\n1. 登录界面\n\n<img width=\"1981\" height=\"1259\" alt=\"84AA648C3681506A218A469D3EDA838E\" src=\"https://github.com/user-attachments/assets/6270b30d-4ad1-4ab8-b367-bd2bbc422b5f\" />\n\n\n2. 系统主页\n\n<img width=\"1950\" height=\"1270\" alt=\"819A3828716D6DBB70D02893C783B8EC\" src=\"https://github.com/user-attachments/assets/aa7befcd-eac0-4d54-b3fc-b67678c0157d\" />\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:17.618753"
  },
  {
    "basic_info": {
      "name": "literature-assistant",
      "full_name": "liyupi/literature-assistant",
      "owner": "liyupi",
      "description": "Spring Boot 3 + Vue 3 的 AI 文献阅读助手项目，帮助用户生成文献阅读指南、智能文献管理和检索。",
      "url": "https://github.com/liyupi/literature-assistant",
      "clone_url": "https://github.com/liyupi/literature-assistant.git",
      "ssh_url": "git@github.com:liyupi/literature-assistant.git",
      "homepage": "",
      "created_at": "2025-09-11T04:08:44Z",
      "updated_at": "2025-09-30T10:30:09Z",
      "pushed_at": "2025-09-12T03:13:27Z"
    },
    "stats": {
      "stars": 78,
      "forks": 21,
      "watchers": 78,
      "open_issues": 1,
      "size": 64648
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 115233,
        "Vue": 93802,
        "JavaScript": 9849,
        "Shell": 2587,
        "CSS": 2245,
        "Batchfile": 2057,
        "HTML": 358
      },
      "license": null,
      "topics": [
        "ai",
        "backend",
        "frontend",
        "java",
        "kimi",
        "springboot",
        "vue",
        "web"
      ]
    },
    "content": {
      "readme": "# 鱼皮文献助手\n\n一个基于 Spring Boot 3 + Vue 的现代化文献管理后端服务，集成 AI 技术为用户提供智能文献阅读指南生成、文献管理和检索功能。\n\n![](docs/wenxianzhushou-image.png)\n\n> 项目利用 AI Vibe Coding 实现\n\n## ✨ 功能特性\n\n- 📚 **文献上传与解析**: 支持 PDF、Word (.doc/.docx)、Markdown 格式文献的上传和内容解析\n- 🤖 **AI 阅读指南生成**: 集成 Kimi AI，基于文献内容自动生成结构化阅读指南\n- 🏷️ **智能分类标签**: AI 自动为文献生成分类标签，便于管理和检索\n- 🔍 **多维度检索**: 支持关键词、标签、文件类型、时间范围等多种筛选条件\n- ⚡ **实时流式响应**: 基于 SSE 技术，实时推送 AI 生成进度和结果\n- 🔧 **完善的异常处理**: 统一异常处理机制，提供友好的错误信息\n- 📖 **API 文档**: 集成 Knife4j，提供完善的 API 接口文档\n\n![](docs/manage-image.png)\n\n## 环境准备\n\n在启动项目前，请确保您的开发环境已经安装并正确配置了以下依赖。\n\n- Java: 21+\n- Node: 20+\n\n\n### 1、Java 21+\n\n**验证安装**\n\n打开终端（macOS）或命令提示符（Windows），输入以下命令。如果能正确显示版本号（21 或更高版本），则说明 Java 环境已配置成功。\n\n```bash\njava -version\n```\n\n-----\n\n**Windows 安装指南**\n\n1. 访问官方 OpenJDK 发行版网站，例如 [Oracle JDK 21](https://www.oracle.com/java/technologies/downloads/#java21)。\n2. 下载适用于 Windows x64 的 `.msi` 安装程序。\n3. 双击运行安装程序，并按照图形化界面的提示完成安装。安装程序会自动配置 `JAVA_HOME` 环境变量和系统 `Path`。\n\n-----\n\n**macOS 安装指南**\n\n推荐使用 [Homebrew](https://brew.sh/) 进行安装，方便管理。\n\n1. 打开终端。\n2. 执行以下命令安装 OpenJDK 21：\n   ```bash\n   brew install openjdk@21\n   ```\n3. 安装完成后，根据 Homebrew 的提示，将 Java 添加到环境变量中。\n\n再次执行以下命令，如果能正常展示版本号即是安装成功：\n\n```bash\njava -version\n```\n\n### 2、Node.js (20+)\n\n**验证安装**\n\n打开终端或命令提示符，输入以下命令。如果能正确显示版本号（Node.js 为 20 或更高版本），则说明 Node.js 环境已配置成功。\n\n```bash\nnode -v\n```\n\n-----\n\n**Windows 安装指南**\n\n1. 访问 [Node.js 官方网站](https://nodejs.org/en/download)。\n2. 下载推荐的 Windows Installer (`.msi`) 版本（LTS，长期支持版）。\n3. 双击运行安装程序，并按照默认选项完成安装。\n\n-----\n\n**macOS 安装指南**\n\n推荐使用 [Homebrew](https://brew.sh/) 进行安装。\n\n1. 打开终端。\n2. 执行以下命令安装 Node.js 20：\n   ```bash\n   brew install node@20\n   ```\n3. 安装完成后即可直接使用 `node` 和 `npm` 命令。\n\n## 🚀 快速开始\n\n项目已内置 H2 数据库，无需安装和额外配置，开箱即用。\n\n### 方式一：使用启动脚本 (推荐)\n\n- **Windows 系统**: 双击运行根目录下的 `start.bat` 脚本。\n\n- **Linux / macOS 系统**: 在项目根目录下执行 `start.sh` 脚本：\n\n  ```bash\n  sh start.sh\n  ```\n\n### 方式二：手动编译运行\n\n```bash\n# 编译项目\nmvn clean compile\n\n# 运行项目\nmvn spring-boot:run\n\n# 或者打包后运行\nmvn clean package\njava -jar target/literature-assistant-0.0.1-SNAPSHOT.jar\n```\n\n### 访问验证\n\n- **应用服务**: http://localhost:8086/api\n- **API 文档**: http://localhost:8086/api/doc.html\n- **健康检查**: http://localhost:8086/api/literature/health\n\n## 🛠 技术栈\n\n- **框架**: Spring Boot 3.5.5\n- **数据库**: H2 Database + MyBatis-Plus 3.5.5\n- **连接池**: HikariCP\n- **文档处理**: Apache POI (Word)、PDFBox (PDF)、CommonMark (Markdown)\n- **AI 集成**: Kimi AI API + OkHttp SSE\n- **API 文档**: Knife4j 4.5.0\n- **工具库**: Hutool 5.8.29\n- **Java 版本**: Java 21\n\n\n## 🔧 核心配置说明\n\n### 数据库配置\n\n项目默认使用 H2 嵌入式数据库，数据文件将存储在项目根目录的 `data` 文件夹下，无需额外配置。\n\n```yaml\nspring:\n  datasource:\n    # 使用 H2 嵌入式数据库，无需安装\n    driver-class-name: org.h2.Driver\n    url: jdbc:h2:file:./data/literature_assistant\n```\n\n### 文件上传配置\n\n```yaml\nliterature:\n  file:\n    upload-path: ./uploads/documents           # 文件存储路径\n    max-file-size: 10MB                       # 单文件最大大小\n    allowed-extensions: pdf,doc,docx,md,markdown # 允许的文件类型\n```\n\n### AI 服务配置\n\n```yaml\nliterature:\n  ai:\n    base-url: https://api.moonshot.cn/v1      # Kimi AI API 地址\n    model: kimi-k2-turbo-preview              # 使用的模型\n    max-tokens: 20480                         # 最大 token 数\n    temperature: 0.7                          # 生成随机性\n    timeout: 60000                            # 请求超时时间（毫秒）\n```\n\n## 🔄 开发指南\n\n### 添加新的文件类型支持\n\n1. 在 `FileProcessingService` 中添加新的解析方法\n2. 更新 `allowedExtensions` 配置\n3. 在 `extractFileContent` 方法中添加类型判断\n\n### 扩展查询条件\n\n1. 在 `LiteratureQueryRequest` 中添加新的查询字段\n2. 更新 `LiteratureMapper.xml` 中的查询条件\n3. 确保数据库索引支持新的查询字段\n\n## 🙏 致谢\n\n- [Spring Boot](https://spring.io/projects/spring-boot) - 企业级 Java 应用框架\n- [MyBatis-Plus](https://baomidou.com/) - MyBatis 增强工具\n- [Kimi AI](https://www.moonshot.cn/) - 智能对话 AI 服务\n- [Apache POI](https://poi.apache.org/) - Java 文档处理库\n- [PDFBox](https://pdfbox.apache.org/) - Java PDF 处理库\n- [Knife4j](https://doc.xiaominfo.com/) - API 文档生成工具\n- [Hutool](https://hutool.cn/) - Java 工具类库\n\n---\n\n让 AI 赋能学术阅读，让文献理解更高效！",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-01T02:29:18.923497"
  },
  {
    "basic_info": {
      "name": "GhidraGPT",
      "full_name": "ZeroDaysBroker/GhidraGPT",
      "owner": "ZeroDaysBroker",
      "description": "Integrates GPT models into Ghidra for automated code analysis, variable renaming, vulnerability detection, and explanation generation.",
      "url": "https://github.com/ZeroDaysBroker/GhidraGPT",
      "clone_url": "https://github.com/ZeroDaysBroker/GhidraGPT.git",
      "ssh_url": "git@github.com:ZeroDaysBroker/GhidraGPT.git",
      "homepage": "",
      "created_at": "2025-09-12T19:40:05Z",
      "updated_at": "2025-09-30T19:38:56Z",
      "pushed_at": "2025-09-13T15:56:48Z"
    },
    "stats": {
      "stars": 74,
      "forks": 5,
      "watchers": 74,
      "open_issues": 0,
      "size": 4255
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 156479,
        "Shell": 11810
      },
      "license": "Apache License 2.0",
      "topics": [
        "agent",
        "ghidra",
        "ghidra-extension",
        "ghidra-plugin",
        "gpt",
        "java",
        "reverse-engineering"
      ]
    },
    "content": {
      "readme": "# GhidraGPT\n\n<div align=\"center\">\n  \n![GhidraGPT Logo](assets/logo.png)\n\n**Author**: Mohamed Benchikh\n\n[![GitHub Stars](https://img.shields.io/github/stars/ZeroDaysBroker/GhidraGPT?style=social)](https://github.com/ZeroDaysBroker/GhidraGPT/stargazers)\n[![GitHub Forks](https://img.shields.io/github/forks/ZeroDaysBroker/GhidraGPT?style=social)](https://github.com/ZeroDaysBroker/GhidraGPT/network)\n[![GitHub Issues](https://img.shields.io/github/issues/ZeroDaysBroker/GhidraGPT)](https://github.com/ZeroDaysBroker/GhidraGPT/issues)\n[![License](https://img.shields.io/github/license/ZeroDaysBroker/GhidraGPT)](https://github.com/ZeroDaysBroker/GhidraGPT/blob/main/LICENSE)\n\n</div>\n\nA powerful Ghidra plugin that integrates Large Language Models (LLMs) to enhance reverse engineering workflows with AI-powered code analysis and enhancement capabilities.\n\n## 🎥 Demo\n\n![Demo](assets/demo.gif)\n\n\n## ⚡ Real-Time Performance\n\nFor optimal real-time performance, it is recommended to use smaller and faster models such as **grok-3** or **deepseek-chat**. These models deliver quicker responses, making them ideal for interactive and latency-sensitive reverse engineering workflows. Using larger reasoning models may result in slower response times.\n\n## 🚀 Features\n\n### Core Functionality\n- **Code Enhancement**: AI-powered function and variable renaming for improved code readability\n- **Code Explanation**: Detailed explanations of function logic and behavior\n- **Code Analysis**: Vulnerability detection and security analysis\n- **Multi-LLM Support**: Compatible with 8+ AI providers including OpenAI, Anthropic, Google Gemini, Cohere, Mistral AI, DeepSeek, Grok (xAI), and Ollama\n\n### Configuration\n- **Flexible Configuration**: Easy setup through configuration panel\n- **Stream Processing**: Real-time AI response streaming for better user experience\n\n### Integration Features\n- **Context Menu Integration**: Right-click functions for instant AI analysis\n- **Console Interface**: Dedicated console for viewing AI responses and results\n- **Automatic Analysis**: Integration with Ghidra's analysis pipeline\n- **Theme Support**: Custom theming for enhanced UI experience\n\n## 🛠️ Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/ZeroDaysBroker/GhidraGPT.git\n   cd GhidraGPT\n   ```\n\n2. **Build the Plugin**:\n   ```bash\n   ./build.sh\n   ```\n\n3. **Install in Ghidra**:\n   ```bash\n   ./install.sh\n   ```\n\n4. **Configure API Keys**:\n   - Open Ghidra and navigate to the GhidraGPT configuration panel\n   - Enter your preferred AI service API key\n   - API keys are automatically encrypted and stored securely\n\n## 📋 Usage\n\n### Available Actions\nAccess these features through the right-click context menu on any function:\n\n- **GhidraGPT → Enhance Code**: Improve function and variable names using AI analysis\n- **GhidraGPT → Explain Code**: Get detailed explanations of function behavior\n- **GhidraGPT → Analyze Code**: Detect potential security vulnerabilities\n\n### Supported AI Providers\n- **OpenAI**: GPT models\n- **Anthropic**: Claude models\n- **Google Gemini**: Gemini models\n- **Cohere**: Command models\n- **Mistral AI**: Mistral models\n- **DeepSeek**: DeepSeek models\n- **Grok (xAI)**: Grok models\n- **Ollama**: Local models - No API key required\n\n## 🏗️ Architecture\n\n### Service Layer\n- **`CodeEnhancementService`**: Handles AI-powered function and variable renaming\n- **`CodeAnalysisService`**: Manages comprehensive code analysis and vulnerability detection\n- **`GPTService`**: Core AI communication layer with multi-provider support\n- **`ConfigurationManager`**: Configuration and API key management\n\n### UI Components\n- **`GhidraGPTProvider`**: Main plugin provider with context menu integration\n- **`GhidraGPTConsole`**: Dedicated console for AI responses\n- **`ConfigurationPanel`**: User-friendly configuration interface\n\n## ⚠️ Pending Work\n\n### Code Retyping & Analysis Enhancement\n- **Variable retyping**: Implement automated variable retyping\n- **Cross-Reference Analysis**: Improve analysis of function calls and data flow\n\n### Performance Optimizations\n- **Batch Processing**: Implement batch analysis for multiple functions\n- **Caching System**: Add intelligent caching for AI responses\n\n### Additional Features\n- **Custom Prompts**: Allow users to define custom AI prompts for specific analysis needs\n- **Export Functionality**: Add ability to export analysis results\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit issues, feature requests, or pull requests.\n\n**Repository**: [https://github.com/ZeroDaysBroker/GhidraGPT](https://github.com/ZeroDaysBroker/GhidraGPT)\n\n- 🐛 **Report Issues**: [Submit bug reports and feature requests](https://github.com/ZeroDaysBroker/GhidraGPT/issues)\n- 🔧 **Pull Requests**: [Contribute code improvements](https://github.com/ZeroDaysBroker/GhidraGPT/pulls)\n- 📖 **Documentation**: Help improve documentation and examples\n- 🧪 **Testing**: Test with different AI providers and report compatibility\n\n## 📄 L",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:20.237629"
  },
  {
    "basic_info": {
      "name": "deepresearch",
      "full_name": "spring-ai-alibaba/deepresearch",
      "owner": "spring-ai-alibaba",
      "description": null,
      "url": "https://github.com/spring-ai-alibaba/deepresearch",
      "clone_url": "https://github.com/spring-ai-alibaba/deepresearch.git",
      "ssh_url": "git@github.com:spring-ai-alibaba/deepresearch.git",
      "homepage": null,
      "created_at": "2025-09-12T09:28:19Z",
      "updated_at": "2025-09-30T05:56:07Z",
      "pushed_at": "2025-09-29T14:10:42Z"
    },
    "stats": {
      "stars": 61,
      "forks": 10,
      "watchers": 61,
      "open_issues": 3,
      "size": 7494
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 509811,
        "Vue": 119170,
        "TypeScript": 53842,
        "CSS": 17670,
        "Python": 15502,
        "Makefile": 7008,
        "Dockerfile": 4604,
        "HTML": 2173,
        "JavaScript": 1264
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "[中文版本](README_zh.md)\n\nDeep Research implemented based on spring-ai-alibaba-graph.\n\n## Architecture\n[Open full-size image](./imgs/deepresearch-workflow-en.png)\n\n<img src=\"./imgs/deepresearch-workflow-en.png\" alt=\"Architecture\" style=\"width:1400px; max-width:100%; height:auto; display:block; margin:0 auto;\" />\n\n\n> The diagram shows the layered architecture and main call relationships of the core modules in deepresearch.\n\n## Main Flow\n\n![Main Flow](./imgs/flow-en.png)\n\n> The diagram shows the primary flow of a user request within the deepresearch system.\n\n<video width=\"640\" height=\"360\" controls>\n<source src=\"../deepresearh-display.mp4\" type=\"video/mp4\">\n</video>\n\n\n## Configuration\n\n### Required\n\n- DashScope API: `${AI_DASHSCOPE_API_KEY}`\n  \n  DashScope API key\n- TavilySearch API: `${TAVILY_API_KEY}`\n  \n  TavilySearch API key\n- Report export path: `${AI_DEEPRESEARCH_EXPORT_PATH}`\n  \n  TIP: if omitted, files will be stored in the project root\n\n### Optional\n\n**Search Services (default: Tavily)**\n\n- Jina API: `${JINA_API_KEY}`\n- aliyunaisearch:\n  - api-key: `${ALIYUN_AI_SEARCH_API_KEY}`\n  - base-url: `${ALIYUN_AI_SEARCH_BASE_URL}`\n\n**Storage Options (default: in-memory)** \n\n- redis: `${REDIS-PASSWORD}`\n  \n  Redis password; TIP: defaults to localhost:6379\n\n**Coding Node (programming capability for LLM)**\n\n- The Python executor of the Coder node runs inside a Docker container and requires Docker configuration.\n  - Set `spring.ai.alibaba.deepresearch.python-coder.docker-host` in the config file; default is `unix:///var/run/docker.sock`.\n  The project uses the `python:3-slim` image to create ephemeral containers. You can customize an image that includes common third-party libraries. Install them under `/app/dependency` inside the image, and set `spring.ai.alibaba.deepresearch.python-coder.image-name` to the image name in the config file.\n\n**RAG**\n\n- ElasticSearch: \n    - In `application.yml`, set `spring.ai.alibaba.deepresearch.rag.enabled: true`\n    - In `application.yml`, set `spring.ai.alibaba.deepresearch.rag.vector-store-type: elasticsearch`\n    - In `application.yml`, configure `spring.ai.alibaba.deepresearch.rag.elasticsearch` with ES connection details\n    - Start ES middleware from the project root with the command below\n        ```shell\n        docker compose -f docker-compose-middleware.yml up -d\n        ```\n    - In the Knowledge Base page, create a new knowledge base and upload documents to ES\n\n**MCP Services (WIP)**\n\n- AMap MCP\n\n```json\n{\n    \"researchAgent\": {\n        \"mcp-servers\": [\n            {\n                \"url\": \"https://mcp.amap.com?key=${AI_DASHSCOPE_API_KEY}\",\n                \"sse-endpoint\": null,\n                \"description\": \"This is an AMap service\",\n                \"enabled\": false\n            }\n        ]\n    }\n} \n```\n\n\n## Related APIs, Tools, and MCP Integration Docs\n\n- DashScope (Alibaba Bailian): https://bailian.console.aliyun.com\n\n- Tavily API Docs: https://docs.tavily.com/documentation/api-reference/endpoint/search\n- Jina API Docs: https://jina.ai/reader\n- AMap MCP Docs: https://lbs.amap.com/api/mcp-server/gettingstarted#t1\n\n\n## Getting Started\n### Quick Start\nRight-click the `DeepResearchApplication` class and run it.\n\n### Run with Maven\nFrom the project root, run with Maven:\n```angular2html\nmvn spring-boot:run\n```\n\n\n### Run with Docker\n- Build the Docker image from the project directory. This may take ~5 minutes depending on network speed.\n```shell\ndocker build -t alibaba-deepresearch:v1.0 . \n```\n- After building, run the container and set environment variables:\n```shell\ndocker run -d \\\n  --name alibaba-deepresearch \\\n  -e AI_DASHSCOPE_API_KEY=\"your_key_here\" \\\n  -e TAVILY_API_KEY=\"your_key_here\" \\\n#  -e JINA_API_KEY=\"your_key_here\" \\ optional\n  -p 8080:8080 \\\n  alibaba-deepresearch:v1.0\n```\n- Alternatively, use docker-compose to start Redis, ElasticSearch, and the app:\n```shell\n  docker-compose up\n```\n> **Note**:\n> - Set API keys in the `.env` file\n> - Config files are under `dockerConfig`; you can also set keys and related configs there\n\n**Test Cases**\nSee `DeepResearch.http` for sample requests.\n\n```curl\ncurl --location 'http://localhost:8080/chat/stream' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"thread_id\": \"__default_\",\n    \"enable_deepresearch\": false,\n    \"query\": \"Please analyze the reasons for the explosive popularity of Pop Mart\",\n    \"max_step_num\": 2,\n    \"auto_accepted_plan\": true\n}'\n```\n\n**Debugging & Observability**\n\nLangfuse Configuration\n\n#### Using Langfuse Cloud\n1. Sign up at [https://cloud.langfuse.com](https://cloud.langfuse.com)\n2. Create a new project\n3. Go to **Settings** → **API Keys**\n4. Generate a new API key pair (public and secret)\n5. Encode the credentials to Base64:\n   ```bash\n   echo -n \"public_key:secret_key\" | base64\n   ```\n   ```Windows PowerShell\n   [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\"public_key:secret_key\"))\n   ```\n6. In your yml, select the endpoint and set the encoded string as env `YOU",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:21.529221"
  },
  {
    "basic_info": {
      "name": "FHook",
      "full_name": "Rift0911/FHook",
      "owner": "Rift0911",
      "description": null,
      "url": "https://github.com/Rift0911/FHook",
      "clone_url": "https://github.com/Rift0911/FHook.git",
      "ssh_url": "git@github.com:Rift0911/FHook.git",
      "homepage": null,
      "created_at": "2025-09-16T06:06:06Z",
      "updated_at": "2025-09-26T08:32:28Z",
      "pushed_at": "2025-09-20T13:04:22Z"
    },
    "stats": {
      "stars": 58,
      "forks": 6,
      "watchers": 58,
      "open_issues": 0,
      "size": 7944
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 150195,
        "C": 78424,
        "C++": 32511,
        "CMake": 2695
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"right\">Language: <b>English</b> · <a href=\"README.cn.md\">Chinese</a></p>\n\n# FHook\n\n**Full-function HOOK framework for the Android Java layer**\n\n* **debug mode** — initialize and use directly inside the app\n* **Android 9+ (API 28+)**, including the latest versions\n* Intercept and modify **arguments/return values** of any **Java method**\n* **Class/instance-wide batch hooks**, covering common **system hotspots** (class loading, device fingerprint, SharedPreferences writes, etc.)\n* Three integration options: Gradle dependency (`implementation`), source integration (module/source copy), and (under compliance) app injection (repack or dynamic loading)\n\n> For **lawful** security research, testing, and debugging only. Ensure you have proper authorization for any target.\n\n---\n\n## 1. What problem does it solve?\n\n* **Rapid observation**: print call stacks/args/returns at runtime without touching target code\n* **Temporary patching**: tweak args/returns or feed “mock data” to verify branches\n* **Batch coverage**: one-click hook for all methods on a class/instance to accelerate debugging and regression\n* **System hotspot auditing**: `Class.forName` / `ClassLoader.loadClass` / `Settings.Secure.getString` /\n  `System.loadLibrary`, etc. can be intercepted and logged\n\n---\n\n## 2. Scenarios & Environment\n\n* **Environment**: Android 9+ (API 28+); works with Kotlin/Java projects\n* **Scenarios**: feature co-debugging, gray-box testing, automated acceptance, critical-path tracing & audit, crash triage\n* **No dependency on** Xposed / Magisk / Root\n\n---\n\n## 3. Quick Start\n\n### 3.1 Add JitPack repository\n\nAdd to **`settings.gradle`** or the root **`build.gradle`**:\n\n```groovy\ndependencyResolutionManagement {\n  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n  repositories {\n    mavenCentral()\n    maven { url 'https://jitpack.io' }\n  }\n}\n```\n\n> Kotlin DSL: `maven(url = \"https://jitpack.io\")`\n\n### 3.2 Add dependency\n\nIn your **app module**:\n\n```groovy\ndependencies {\n  implementation \"com.github.Rift0911:fhook:+\"\n}\n```\n\n### 3.3 Initialize (auto / manual)\n\n**Option A: Auto init in `attachBaseContext`**\n\n```java\n@Override\nprotected void attachBaseContext(Context base) {\n    Log.d(TAG, \"attachBaseContext\");\n    if (FCFG.IS_APP_INIT_AUTO) {\n        Log.i(TAG, \"attachBaseContext FHook.init= \" + FHook.init(base));\n    }\n    super.attachBaseContext(base);\n}\n```\n\n**Option B: Manual init anywhere (e.g., button click)**\n\n```java\nbt_main_02.setOnClickListener(v -> {\n    if (FHook.isInited()) {\n        FHook.unInit();\n    } else {\n        if (!FHook.init(this)) {\n            Toast.makeText(this, \"Init failed\", Toast.LENGTH_LONG).show();\n            Log.e(TAG, \"Init failed\");\n        } else {\n            Toast.makeText(this, \"Init success\", Toast.LENGTH_LONG).show();\n            Log.i(TAG, \"Init success\");\n        }\n    }\n});\n```\n\n> Handy calls: `FHook.unHookAll()` to remove all hooks; `FHook.showHookInfo()` to view current hook status.\n\n### 3.4 Minimal runnable samples\n\n#### A) Hook a regular app method\n\nTake `THook.fun_I_III(int a, int b, int c): int` as an example — **modify args and return**:\n\n```java\nimport java.lang.reflect.Method;\nimport android.util.Log;\n\nMethod m = THook.class.getMethod(\"fun_I_III\", int.class, int.class, int.class);\n\nFHook.hook(m)\n    .setOrigFunRun(true) // run the original method first\n    .setHookEnter((thiz, args, types, hh) -> {\n        // change the first argument\n        args.set(0, 6666);\n        Log.d(\"FHook\", \"fun_I_III enter: \" + args);\n    })\n    .setHookExit((ret, type, hh) -> {\n        // force the return value\n        Log.d(\"FHook\", \"fun_I_III exit, origRet=\" + ret);\n        return 8888;\n    })\n    .commit();\n```\n\n#### B) Hook a system method (device fingerprint sample)\n\nTake `Settings.Secure.getString(ContentResolver, String)` — **forge ANDROID\\_ID** selectively:\n\n```java\nimport android.provider.Settings;\nimport android.content.ContentResolver;\nimport java.lang.reflect.Method;\nimport android.util.Log;\n\nMethod sysGet = Settings.Secure.class.getMethod(\n        \"getString\", ContentResolver.class, String.class);\n\nFHook.hook(sysGet)\n    .setOrigFunRun(true)\n    .setHookEnter((thiz, args, types, hh) -> {\n        String key = (String) args.get(1);\n        hh.extras.put(\"key\", key);\n        Log.d(\"FHook\", \"Settings.Secure.getString key=\" + key);\n    })\n    .setHookExit((ret, type, hh) -> {\n        String key = (String) hh.extras.get(\"key\");\n        if (\"android_id\".equalsIgnoreCase(key)) {\n            return \"a1b2c3d4e5f6a7b8\"; // affect ANDROID_ID only\n        }\n        return ret; // keep others intact\n    })\n    .commit();\n```\n\n> Tip: for interface/bridge methods (e.g., `SharedPreferences.Editor.commit`), use\n> `FHookTool.findMethod4Impl(editor, ifaceMethod)` to locate the **actual implementation method** before hooking for a higher success rate.\n\n---\n\n### 3.5 Constructor Hook Samples (System & Custom)\n\n> Notes: By definition, a **constructor always runs**; `setOrigFunRun(true/false)` **has",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-01T02:29:22.798611"
  },
  {
    "basic_info": {
      "name": "retry-wheel-parent",
      "full_name": "Dengmuuuu/retry-wheel-parent",
      "owner": "Dengmuuuu",
      "description": null,
      "url": "https://github.com/Dengmuuuu/retry-wheel-parent",
      "clone_url": "https://github.com/Dengmuuuu/retry-wheel-parent.git",
      "ssh_url": "git@github.com:Dengmuuuu/retry-wheel-parent.git",
      "homepage": null,
      "created_at": "2025-09-19T09:56:22Z",
      "updated_at": "2025-09-27T11:21:15Z",
      "pushed_at": "2025-09-26T06:15:49Z"
    },
    "stats": {
      "stars": 56,
      "forks": 6,
      "watchers": 56,
      "open_issues": 0,
      "size": 245
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 136266
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# ResilientWheel\n一款基于 Netty HashedWheelTimer 的高可用分布式重试引擎，当前采用 MySQL 持久化 + 分布式抢占/粘滞租约，未来可无缝迁移至 Redis 等存储。\n\n## 模块结构\n\n```\nretry-wheel-parent/\n├─ retry-wheel-spring-boot3-starter/ # Starter：核心引擎、自动装配、SPI、Mapper 等\n└─ sql/ # 初始化/清理 SQL（建表、索引）\n```\n\n\n---\n\n## 快速开始\n\n### 1) 引入依赖\n\n```xml\n<dependency>\n  <groupId>com.fastretry</groupId>\n  <artifactId>retry-wheel-spring-boot3-starter</artifactId>\n  <version>${latest}</version>\n</dependency>\n```\n### 2) 初始化数据库\n\n执行 sql/schema.sql (建表、索引、枚举/注释；包含 retry_task 表及必要索引).\n\n3) 启用与配置（application.yml）\n```yml\nretry:\n  stick:\n    enable: true\n    lease-ttl: 30s\n    renew-ahead: 10s\n  tx:\n    propagation: REQUIRED\n    read-only: false\n    isolation: DEFAULT\n    timeout-seconds: 10\n  wheel:\n   tick-duration: 100ms\n   ticks-per-wheel: 512\n   max-pending-timeouts: 100000\n  scan:\n   initial-delay: 1000\n   period: 2000\n   batch: 200\n  executor:\n   core-pool-size: 8\n   max-pool-size: 32\n   queue-capacity: 1000\n   keep-alive: 60s\n   rejected-handler: CALLER_RUNS\n  backoff:\n   strategy: exponential\n   base: 1s\n   min: 500ms\n   max: 300s\n   jitter-ratio: 0.2\n  default-max-retry: 5\n  default-execute-timeout: 10s\n\n```\n### 4) 注册任务处理器示例\n```JAVA\n@Service(value = \"test-biz\")\npublic class CallHandler implements RetryTaskHandler<PayloadModel> {\n    @Override\n    public boolean supports(String bizType) {\n        return \"test-biz\".equals(bizType);\n    }\n\n    @Override\n    public boolean execute(RetryTaskContext ctx, PayloadModel payload) throws Exception {\n        // 模拟失败\n        if (payload.getSimulateStatus() == 500) {\n            throw new RuntimeException(\"remote 500\");\n        }\n        if (payload.getSimulateStatus() == 408) {\n            Thread.sleep(5000);\n        }\n        return true;\n    }\n\n    @Override\n    public TypeReference<PayloadModel> payloadType() {\n        return new TypeReference<PayloadModel>() {};\n    }\n}\n```\n### 5) 投递任务\n```JAVA\nSubmitOptions opt = SubmitOptions.builder()\n  .maxRetry(8)\n  .priority(10)\n  .executeTimeoutMs(4000)\n  .backoffStrategy(\"exponential\")\n  .delay(Duration.ofSeconds(0))\n  .deadline(Instant.now().plus(Duration.ofMinutes(10)))\n  .build();\nPayloadModel payload = new PayloadModel();\npayload.setBody(\"hello world\");\npayload.setUrl(\"www.baidu.com\");\npayload.setSimulateStatus(408);\nString taskId = engine.submit(\"test-biz\", payload, opt);\nreturn Map.of(\"taskId\", taskId);\n```\n\n\n\n# 通知模块重构\n\n> 为重试框架提供 **可插拔、可路由、可限流、可观测** 的通知能力。支持单条通知，覆盖 DLQ、最大重试、不可重试失败、接管、续约失败、引擎异常、持久化异常等事件。\n\n---\n\n## 特性\n\n- **SPI 可插拔**：`Notifier` 接口，内置 `LoggingNotifier`，支持自定义（如 飞书/钉钉/kim）。\n- **异步派发**：`AsyncNotifyingService` 独立线程池 + 指数退避重试，不阻塞主流程。\n- **路由/过滤**：按事件/业务路由到不同通道；\n- **可观测性**：Micrometer 指标 + 结构化日志。\n- **开关友好**：通过`NotifyingFacade`封装`AsyncNotifyingService`, `retry.notify.enabled=false`时不装配异步实现, 由门面内部自动降级为NOOP，调用方零判空，无NPE风险。\n\n---\n\n## 快速开始\n\n### 1) 引入（在 Starter 中已自动装配）\n\n确保引入 `retry-wheel-spring-boot3-starter`，通知模块随 Starter 自动装配。\n\n### 2) 配置\n\n```yaml\nretry:\n  notify:\n    enabled: true         \n    async:\n      core-pool-size: 2\n      max-pool-size: 4\n      queue-capacity: 2000\n      keep-alive: 30s\n    rate-limit:\n      window: 30s                # 限流窗口\n      threshold: 50                  # 限流阈值\n```\n\n### 3) 事件模型/严重级别\n```JAVA\n// 事件模型\npublic enum NotifyEventType {\n  DEAD_LETTER,\n  MAX_RETRY_REACHED,\n  NON_RETRYABLE_FAILED,\n  TAKEOVER,\n  LEASE_RENEW_FAILED,\n  PERSIST_FAILED,\n  ENGINE_ERROR\n}\n\n// 事件严重级别\npublic enum Severity { INFO, WARNING, ERROR, CRITICAL }\n\n```\n### 4) 通知上下文\n```JAVA\npublic class NotifyContext {\n    private NotifyEventType type;\n    private String nodeId;\n    private String bizType;\n    private String taskId;\n    private String tenantId;\n    private Integer retryCount;\n    private Integer maxRetry;\n    // 自定义分类码，如 TIMEOUT/NO_HANDLER/SERDE_ERROR\n    private String reasonCode;\n    // 可被截断/脱敏\n    private String lastError;\n    // 事件发生时间\n    private Instant when;\n    // 额外字段：shardKey、owner、fence、nextTriggerTime 等\n    private Map<String, Object> attributes ;\n}\n```\n\n### 5) 通知上下文构造工具类\n```JAVA\npublic final class NotifyContexts {\n\n    private static final int MAX_ERROR_LEN = 4000;\n\n    private NotifyContexts() {}\n\n    /* ========== 对外入口（使用系统UTC时钟） ========== */\n\n    public static NotifyContext ctxForDlq(String nodeId, RetryTaskEntity t, Throwable e, String reasonCode) {\n        return ctxForDlq(nodeId, t, e, reasonCode, Clock.systemUTC().withZone(ZoneOffset.ofHours(8)).withZone(ZoneOffset.ofHours(8)));\n    }\n\n    public static NotifyContext ctxForMaxRetry(String nodeId, RetryTaskEntity t, Throwable e) {\n        return ctxForMaxRetry(nodeId, t, e, Clock.systemUTC().withZone(ZoneOffset.ofHours(8)));\n    }\n\n    public static NotifyContext ctxForNonRetryable(String nodeId, RetryTaskEntity t, Throwable e) {\n        return ctxForNonRetryable(nodeId, t, e, Clock.systemUTC().withZone(ZoneOffset.ofHours(8)));\n    }\n\n    public static NotifyContext ctxForTakeover(\n            String newOwnerNodeId, String taskId, String bizType, String tenantId,\n            String oldOwnerNodeId, long oldFence, long newFence) {\n ",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-01T02:29:24.200417"
  },
  {
    "basic_info": {
      "name": "Wayback-Recon",
      "full_name": "aditisingh2707/Wayback-Recon",
      "owner": "aditisingh2707",
      "description": null,
      "url": "https://github.com/aditisingh2707/Wayback-Recon",
      "clone_url": "https://github.com/aditisingh2707/Wayback-Recon.git",
      "ssh_url": "git@github.com:aditisingh2707/Wayback-Recon.git",
      "homepage": null,
      "created_at": "2025-09-08T21:51:19Z",
      "updated_at": "2025-09-29T07:51:58Z",
      "pushed_at": "2025-09-08T23:59:33Z"
    },
    "stats": {
      "stars": 47,
      "forks": 6,
      "watchers": 47,
      "open_issues": 0,
      "size": 4700
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 680718
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Wayback-Recon\n\nA Burp Suite extension for passive recon using the Wayback Machine\n\n![w](https://github.com/user-attachments/assets/dcf1421b-09fb-48f5-b086-669c57d4d8ee)\n\n🔍 Overview\n\nWayback Recon integrates the Internet Archive Wayback Machine\ninto Burp Suite, letting you fetch and analyze historical URLs for a target domain directly inside Burp. This helps uncover forgotten endpoints, parameters, and assets that might still be useful for bug bounty or penetration testing.\n\n✨ Features\n✅ Fetch archived URLs from the Wayback Machine for any domain\n\n✅ Display results in a sortable, searchable table\n\n✅ Shows Year, URL, Length, and MIME-Type for each entry\n\n✅ Built-in search filter for quick keyword hunting\n\n✅ Right-click options:\n   - Send to Sitemap (integrates with Burp’s Target tab)\n   - Copy URLs to clipboard\n   - Export results to a file\n     \n✅ Toggle “Add to sitemap” before fetching to automatically add all URLs to Burp’s Target sitemap\n\n✅ Optional auto-add to Burp’s Sitemap while fetching\n\n✅ Verbose log panel for debug and progress tracking\n\n✅ Retry mechanism with backoff to handle network issues\n\n🚀 Installation\n\nIn Burp Suite:\n - Go to Extender → Extensions → Add\n - Select Java and load the built wayback-filter-extension-1.jar\n\n📖 Usage\n\n1. Enter a target domain in the input field\n2. Click Fetch to pull historical URLs from the Wayback Machine\n3. Use the Search bar to quickly filter results\n4. Right-click results for more options (Send to Sitemap, Copy, Export)\n\n⚠️ Notes\n\n - By default, image MIME types are excluded to reduce noise\n - Only 200 OK responses are included\n - Duplicate URLs are collapsed to keep results clean\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:25.485097"
  },
  {
    "basic_info": {
      "name": "DataAgent",
      "full_name": "spring-ai-alibaba/DataAgent",
      "owner": "spring-ai-alibaba",
      "description": "Spring AI Alibaba DataAgent",
      "url": "https://github.com/spring-ai-alibaba/DataAgent",
      "clone_url": "https://github.com/spring-ai-alibaba/DataAgent.git",
      "ssh_url": "git@github.com:spring-ai-alibaba/DataAgent.git",
      "homepage": "",
      "created_at": "2025-09-12T09:29:55Z",
      "updated_at": "2025-09-30T12:15:42Z",
      "pushed_at": "2025-09-30T12:15:38Z"
    },
    "stats": {
      "stars": 40,
      "forks": 20,
      "watchers": 40,
      "open_issues": 9,
      "size": 2345
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 919724,
        "Vue": 419835,
        "JavaScript": 67336,
        "CSS": 31703,
        "PLpgSQL": 16241,
        "Makefile": 7848,
        "Python": 3337,
        "HTML": 1151
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# Spring AI Alibaba DataAgent\n（ “DataAgent用户1群”群的钉钉群号： 154405001431）\n## 项目简介\n\n这是一个基于Spring AI Alibaba的自然语言转SQL项目，能让你用自然语言直接查询数据库，不需要写复杂的SQL。\n\n## 项目结构\n\n这个项目分为三个部分：\n\n```\nspring-ai-alibaba-nl2sql/\n├── spring-ai-alibaba-nl2sql-management    # 管理端（可直接启动的Web应用）\n├── spring-ai-alibaba-nl2sql-chat         # 核心功能（不能独立启动，供集成使用）\n└── spring-ai-alibaba-nl2sql-common       # 公共代码\n```\n\n## 快速启动\n\n项目进行本地测试是在spring-ai-alibaba-nl2sql-management中进行\n\n### 1. 业务数据库准备\n\n可以在spring-ai-alibaba-example项目仓库获取测试表和数据：\n\n- Schema：https://github.com/springaialibaba/spring-ai-alibaba-examples/blob/main/spring-ai-alibaba-nl2sql-example/chat/sql/schema.sql\n- Data：https://github.com/springaialibaba/spring-ai-alibaba-examples/blob/main/spring-ai-alibaba-nl2sql-example/chat/sql/insert.sql\n\n将表和数据导入到你的MySQL数据库中。\n\n### 2. 配置management数据库\n\n在`spring-ai-alibaba-nl2sql-management/src/main/resources/application.yml`中配置你的MySQL数据库连接信息。\n\n> 初始化行为说明：默认开启自动创建表并插入示例数据（`spring.sql.init.mode: always`）。生产环境建议关闭，避免示例数据回填覆盖你的业务数据。\n\n```yaml\nspring:\n  datasource:\n    url: jdbc:mysql://127.0.0.1:3306/nl2sql?useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&allowMultiQueries=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Shanghai\n    username: ${MYSQL_USERNAME:root}\n    password: ${MYSQL_PASSWORD:root}\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n```\n\n### 2.1 可选：启用/关闭自动初始化（schema.sql + data.sql）\n\n- 默认配置：`application.yml` 中已设置为开启\n\n```yaml\nspring:\n  sql:\n    init:\n      mode: always           # 默认：每次启动执行 schema.sql 与 data.sql\n      schema-locations: classpath:sql/schema.sql\n      data-locations: classpath:sql/data.sql\n```\n\n- 若不希望每次启动回填示例数据，可将 `mode` 改为 `never` 关闭：\n\n```yaml\nspring:\n  sql:\n    init:\n      mode: never            # 关闭自动初始化\n      schema-locations: classpath:sql/schema.sql\n      data-locations: classpath:sql/data.sql\n```\n\n注意：默认开启时（`mode: always`），`data.sql` 会在每次启动回填示例数据（即使你手动删除了数据）。生产环境请改为 `mode: never`，避免覆盖/复原业务数据。\n\n![Snipaste_2025-09-18_14-35-29.jpg](img/Snipaste_2025-09-18_14-35-29.jpg)\n\n\n### 3. 配置 API Key\n\n```yaml\nspring:\n  ai:\n    openai:\n      base-url: https://dashscope.aliyuncs.com/compatible-mode\n      api-key: ${AI_DASHSCOPE_API_KEY}\n      model: qwen-max\n      embedding:\n        model: text-embedding-v4\n    dashscope:\n      api-key: ${AI_DASHSCOPE_API_KEY}\n```\n\n\n### 4. 启动管理端\n\n在`spring-ai-alibaba-nl2sql-management`目录下，运行 `spring-ai-alibaba-nl2sql/spring-ai-alibaba-nl2sql-management/src/main/java/com/alibaba/cloud/ai/DataAgentApplication.java` 类。\n\n### 5. 启动WEB页面\n\n进入 `spring-ai-alibaba-nl2sql/spring-ai-alibaba-nl2sql-web-ui` 目录\n\n#### 安装依赖\n\n\n```bash\n# 使用 npm\nnpm install\n\n# 或使用 yarn\nyarn install\n```\n\n### 启动服务\n\n```bash\n# 使用 npm\nnpm run dev\n\n# 或使用 yarn\nyarn dev\n```\n\n启动成功后，访问地址 http://localhost:3000\n\n## 系统体验\n\n访问 http://localhost:3000 ，可以看到有四个智能体（目前这四个只是占位显示，并没有对接数据）\n\n![homepage-agents.png](img/homepage-agents.png)\n\n\n点击右上角“创建智能体” ，这里只需要输入智能体名称，其他配置都选默认。\n\n创建成功后，可以看到智能体配置页面。\n\n![agent-config.png](img/agent-config.png)\n\n进入数据源配置页面，配置业务数据库（我们在环境初始化时第一步提供的业务数据库）。\n\n![datasource-config.png](img/datasource-config.png)\n\n添加完成后，可以在列表页面验证数据源连接是否正常。\n\n![datasource-validation.png](img/datasource-validation.png)\n\n预设问题管理，可以为智能体设置预设问题\n\n![preset-questions.png](img/preset-questions.png)\n\n智能体调试页面可以定制化配置数据源，然后初始化数据源到向量库，进行效果调试。\n\n![agent-debug.png](img/agent-debug.png)\n\n![vector-initialization.png](img/vector-initialization.png)\n\n成功后可以在智能体调试页面输入自然语言进行查询。\n\n![natural-language-query.png](img/natural-language-query.png)\n\n![query-results.png](img/query-results.png)\n\n> 调试和发布的智能体数据是分离的，调试时的数据不会影响发布后的智能体。\n\n调试没问题后，可以发布智能体。\n\n![publish-agent.png](img/publish-agent.png)\n\n> 目前“嵌入网站”和“访问API”当前版本暂未实现。\n\n点击发布后会更新元数据到发布后的智能体。\n\n![metadata-update.png](img/metadata-update.png)\n\n![publish-complete.png](img/publish-complete.png)\n\n分析问题\n\n![analyze-question.png](img/analyze-question.png)\n\n分析结果\n\n![analyze-result.png](img/analyze-result.png)\n\n> 如果你没有环境执行Python节点，临时解决方法：在提问的问题中，添加“请不要通过Python分析”。\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:26.787814"
  },
  {
    "basic_info": {
      "name": "jlib-inspector",
      "full_name": "brunoborges/jlib-inspector",
      "owner": "brunoborges",
      "description": "Runtime Library Intelligence for Production JVMs",
      "url": "https://github.com/brunoborges/jlib-inspector",
      "clone_url": "https://github.com/brunoborges/jlib-inspector.git",
      "ssh_url": "git@github.com:brunoborges/jlib-inspector.git",
      "homepage": "https://brunoborges.github.io/jlib-inspector/",
      "created_at": "2025-09-06T04:15:48Z",
      "updated_at": "2025-10-01T02:05:02Z",
      "pushed_at": "2025-09-28T02:38:28Z"
    },
    "stats": {
      "stars": 39,
      "forks": 2,
      "watchers": 39,
      "open_issues": 0,
      "size": 2102
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 223230,
        "JavaScript": 125344,
        "Shell": 13227,
        "PowerShell": 7127,
        "CSS": 2585,
        "HTML": 651
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# JLib Inspector\n\n> **⚠️ EXPERIMENTAL - NOT PRODUCTION READY**  \n> This project is currently in experimental/development phase and is **not suitable for production environments**. Use for development, testing, and evaluation purposes only.\n\n<!-- BADGES -->\n[![CI/CD Pipeline](https://github.com/brunoborges/jlib-inspector/actions/workflows/ci.yml/badge.svg)](https://github.com/brunoborges/jlib-inspector/actions/workflows/ci.yml)\n[![Security & Maintenance](https://github.com/brunoborges/jlib-inspector/actions/workflows/security.yml/badge.svg)](https://github.com/brunoborges/jlib-inspector/actions/workflows/security.yml)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Java](https://img.shields.io/badge/Java-21%2B-orange.svg)](https://openjdk.java.net/)\n[![Node.js](https://img.shields.io/badge/Node.js-18%2B-green.svg)](https://nodejs.org/)\n<!-- /BADGES -->\n\nA comprehensive Java application monitoring dashboard that tracks JAR dependencies loaded during application runtime. The system consists of a Java agent, a standalone data collection server, and a modern React-based web dashboard to exemplify data visualization.\n\n## 🎯 Why JLib Inspector?\n\nWhen security vulnerabilities like **Log4Shell** strike, organizations face a critical challenge: **identifying which production systems are affected**. During the Log4j vulnerability crisis, many teams struggled with fundamental questions:\n\n- *\"Which of our production applications use Log4j?\"*\n- *\"What version are they running?\"*\n- *\"Are there transitive dependencies we don't know about?\"*\n- *\"How can we quickly assess our exposure across hundreds of services?\"*\n\n**The Traditional Approach is Reactive and Error-Prone:**\n- 🔍 Manual inspection of deployment artifacts\n- 📂 Digging through production file systems\n- 📋 Relying on outdated documentation or build scripts\n- ⏰ Time-consuming emergency audits during critical security incidents\n- 🎯 Missing transitive dependencies hidden deep in the dependency tree\n\n**JLib Inspector Enables Proactive Dependency Visibility:**\n- 🚀 **Real-time monitoring** of actual JAR files loaded by running JVMs\n- 🎯 **Complete visibility** including transitive dependencies\n- 📊 **Centralized dashboard** showing all applications and their dependencies\n- 🔄 **Continuous tracking** of what's actually running vs. what's deployed\n- ⚡ **Instant response** capability when new vulnerabilities are disclosed\n- 🛡️ **Proactive security posture** instead of reactive emergency responses\n\n**Production Reality Check:**\nUnlike static analysis of build files, JLib Inspector shows you **exactly what JARs are loaded at runtime** - capturing the full picture including:\n- JARs loaded dynamically through plugins or extensions\n- Nested JARs within fat/uber JARs  \n- Platform-specific dependencies loaded conditionally\n- The actual classpath used by the running JVM\n\nWhen the next security vulnerability emerges, you'll have immediate answers instead of emergency archaeology. \n\n## 🏗️ Architecture\n\n- **Java Agent**: Instruments Java applications to track JAR loading and usage (shaded agent JAR)\n- **JLib Server**: Standalone server that collects and aggregates data from instrumented applications (Port 8080, shaded server JAR)\n- **Web Dashboard**: React-based frontend with real-time updates (Ports 3000 for http and 3001 for websocket)\n\n## 📋 Prerequisites\n\n- **Java 21+** (JDK)\n- **Maven 4+** (use the included wrapper `./mvnw`)\n- **Node.js 18+** and **npm**\n- **PowerShell** (for Windows) or equivalent shell\n\n## 🚀 Quick Start\n\n### 1. Build the Project\n\n```bash\n# Clone and navigate to the project\ncd jlib-inspector\n\n# Build all components (agent + server + sample app)\n./mvnw clean package\n```\n\n### 2. Start the JLib Server\n\nThe JLib Server collects data from instrumented Java applications:\n\n```bash\n# Start the data collection server on port 8080 (shaded jar)\njava -jar server/target/jlib-inspector-server-1.0-SNAPSHOT-shaded.jar 8080\n```\n\n**Expected Output:**\n```\nJLib HTTP Server started on port 8080\nAvailable endpoints:\n  PUT /api/apps/{appId} - Register/update application\n  GET /api/apps - List all applications\n  GET /api/apps/{appId} - Get application details\n  GET /api/apps/{appId}/jars - List application JARs\n  GET /health - Health check\n```\n\n### 3. Start the Web Dashboard\n\nThe unified Express.js server serves the React frontend:\n\n```bash\n# Navigate to frontend directory\ncd frontend\n\n# Install dependencies (first time only)\nnpm install\n\n# Build and start the unified server on port 3000\nnpm start\n```\n\n**Expected Output:**\n```\n> jlib-inspector-dashboard@2.0.0 start\n> npm run build && node app.js\n\nwebpack 5.101.3 compiled successfully\nSetting up data fetching schedule...\nJLib Dashboard running on http://localhost:3000\nWebSocket server running on port 3001\nConnecting to JLib Server at http://localhost:8080\n```\n\n### 4. Run Java Applications with Monitoring\n\nInstrument any Java application with the JLib Inspector agent:\n\n**For your o",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:28.059821"
  },
  {
    "basic_info": {
      "name": "agentscope-java",
      "full_name": "agentscope-ai/agentscope-java",
      "owner": "agentscope-ai",
      "description": "AgentScope Java: Agent-Oriented Programming for Building LLM Applications",
      "url": "https://github.com/agentscope-ai/agentscope-java",
      "clone_url": "https://github.com/agentscope-ai/agentscope-java.git",
      "ssh_url": "git@github.com:agentscope-ai/agentscope-java.git",
      "homepage": "",
      "created_at": "2025-09-23T04:37:43Z",
      "updated_at": "2025-09-29T00:53:04Z",
      "pushed_at": "2025-09-24T10:22:58Z"
    },
    "stats": {
      "stars": 38,
      "forks": 2,
      "watchers": 38,
      "open_issues": 1,
      "size": 179
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 432905
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\">\n  <img\n    src=\"https://img.alicdn.com/imgextra/i1/O1CN01nTg6w21NqT5qFKH1u_!!6000000001621-55-tps-550-550.svg\"\n    alt=\"AgentScope Logo\"\n    width=\"200\"\n  />\n</p>\n\n## AgentScope Implementation for Java\n<font style=\"color:rgb(31, 35, 40);\">This is the Java implementation of </font>[<font style=\"color:rgb(9, 105, 218);\">AgentScope</font>](https://github.com/agentscope-ai/agentscope/)<font style=\"color:rgb(31, 35, 40);\">. Please note that this project is still experimental and under active development.</font>\n\n\n![](https://img.shields.io/badge/GUI-AgentScope_Studio-blue?logo=look&logoColor=green&color=dark-green)![](https://img.shields.io/badge/license-Apache--2.0-black)\n\n## ✨ Why AgentScope?\nEasy for beginners, powerful for experts.\n\n+ **Transparent to Developers**: Transparent is our **FIRST principle**. Prompt engineering, API invocation, agent building, workflow orchestration, all are visible and controllable for developers. No deep encapsulation or implicit magic.\n+ Realtime Steering: Native support for realtime interruption and customized handling.\n+ **More Agentic**: Support agentic tools management, agentic long-term memory control and agentic RAG, etc.\n+ **Model Agnostic**: Programming once, run with all models.\n+ **LEGO-style Agent Building**: All components are **modular** and **independent**.\n+ **Multi-Agent Oriented**: Designed for **multi-agent**, **explicit** message passing and workflow orchestration, NO deep encapsulation.\n+ **Highly Customizable**: Tools, prompt, agent, workflow, third-party libs & visualization, customization is encouraged everywhere.\n\n## 🚀 Quickstart\n### Installation\nAgentScope Java requires **jdk 17** or higher.\n\n```bash\n<dependency>\n    <groupId>io.agentscope</groupId>\n    <artifactId>agentscope-core</artifactId>\n    <version>0.1.0</version>\n</dependency>\n```\n\n### Hello AgentScope!\nStart with a basic ReActAgent that replies to user queries!\n\n```java\npublic static void main(String[] args) {\n    Model model = DashScopeChatModel.builder()\n\t\t.apiKey(System.getenv(\"DASHSCOPE_API_KEY\"))\n\t\t.modelName(\"qwen-max\")\n\t\t.build();\n\n    ReActAgent agent = ReActAgent.builder()\n    .name(\"hello-world-agent\")\n    .sysPrompt(\"You are a helpful AI assistant. Be concise and friendly. \" +\n               \"When thinking through problems, use <thinking>...</thinking> tags to show your reasoning.\")\n    .model(model)\n    .memory(new InMemoryMemory())\n    .formatter(new DashScopeChatFormatter())\n    .build();\n\n    Msg userMessage = Msg.builder()\n        .role(MsgRole.USER)\n        .textContent(\"Hello, please introduce yourself.\")\n        .build();\n    Msg response = agent.reply(userMessage).block();\n\n    System.out.println(\"Agent Response: \" + response.getTextContent());\n}\n```\n\n### Equip Agent with Tools\n1. Define Tool\n\n\tDefine a tool class with methods annotated with `@Tool`. Here's an example `SimpleTools` class with a time tool:\n\n\t```java\n\tpublic class SimpleTools {\n\t\t@Tool(name = \"get_time\", description = \"Get current time string of a time zone\")\n\t\tpublic String getTime(@ToolParam(description = \"Time zone, e.g., Beijing\") String zone) {\n\t\t\tLocalDateTime now = LocalDateTime.now();\n\t\t\treturn now.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n\t\t}\n\t}\n\t```\n\n2. Register Tool to ReActAgent\n\n\tRegister the tool class through `Toolkit` using the `registerTool` method:\n\n\t```java\n\tpublic static void main(String[] args) {\n\t\tModel model = DashScopeChatModel.builder()\n\t\t\t.apiKey(System.getenv(\"DASHSCOPE_API_KEY\"))\n\t\t\t.modelName(\"qwen-max\")\n\t\t\t.build();\n\n\t\tToolkit toolkit = new Toolkit();\n\t\ttoolkit.registerTool(new SimpleTools());\n\n\t\tReActAgent agent = ReActAgent.builder()\n\t\t\t.name(\"hello-world-agent\")\n\t\t\t.sysPrompt(\"You are a helpful AI assistant.\")\n\t\t\t.model(model)\n\t\t\t.toolkit(toolkit)\n\t\t\t.memory(new InMemoryMemory())\n\t\t\t.formatter(new DashScopeChatFormatter())\n\t\t\t.build();\n\n\t\tMsg userMessage = Msg.builder()\n\t\t\t\t.role(MsgRole.USER)\n\t\t\t\t.textContent(\"Please tell me the current time.\")\n\t\t\t\t.build();\n\n\t\tMsg response = agent.reply(userMessage).block();\n\t\tSystem.out.println(\"Agent Response: \" + response.getTextContent());\n\t}\n\t```\n## <font style=\"color:rgb(31, 35, 40);\">📖</font><font style=\"color:rgb(31, 35, 40);\"> Documentation</font>\n+ [Create Message](./docs/quickstart-message.md)\n+ [Create ReAct Agent](./docs/quickstart-agent.md)\n+ Model\n+ Tool\n+ Memory\n+ Prompt Formatter\n\n## <font style=\"color:rgb(31, 35, 40);\">🏗️</font><font style=\"color:rgb(31, 35, 40);\"> </font>Roadmap\nIn the upcoming versions, AgentScope Java version will focus on improving the following features.\n\n+ Multi-modal\n+ Multi-Agent\n+ Tracing\n+ AgentScope Studio\n\n## ⚖️ License\nAgentScope is released under Apache License 2.0.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:29.338232"
  },
  {
    "basic_info": {
      "name": "CasaUni",
      "full_name": "CasaUni/CasaUni",
      "owner": "CasaUni",
      "description": null,
      "url": "https://github.com/CasaUni/CasaUni",
      "clone_url": "https://github.com/CasaUni/CasaUni.git",
      "ssh_url": "git@github.com:CasaUni/CasaUni.git",
      "homepage": null,
      "created_at": "2025-09-24T23:52:56Z",
      "updated_at": "2025-09-27T13:27:21Z",
      "pushed_at": "2025-09-25T20:11:49Z"
    },
    "stats": {
      "stars": 32,
      "forks": 1,
      "watchers": 32,
      "open_issues": 0,
      "size": 129
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 29822,
        "JavaScript": 20860,
        "CSS": 18214,
        "HTML": 7798,
        "Dockerfile": 1282
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# 🏠 CasaUni – Centralizador de Imóveis para Estudantes\n\nO *CasaUni* é um site que centraliza anúncios imobiliários de *Santa Rita do Sapucaí (MG)* em um único lugar.  \nAtravés de *web scraping* (feito com Java + JSoup), o projeto reúne anúncios de várias imobiliárias em uma só plataforma, com atualização automática a cada 24 horas.  \n\n🎯 *Objetivo*: auxiliar estudantes do Brasil inteiro que buscam moradia temporária na cidade, tornando a busca por aluguel mais simples, rápida e confiável.  \n\n---\n\n## 🚀 Tecnologias utilizadas\n- *Frontend*: HTML5, CSS3, JavaScript \n- *Backend*: Java + Spring Boot  \n- *Web Scraping*: JSoup  \n- *Banco de Dados*: MySQL\n---\n\n## ⚙️ Funcionalidades\n- ✅ Centralização de anúncios de diferentes imobiliárias  \n- ✅ Atualização automática do web scraping a cada 24h  \n- ✅ Interface simples e intuitiva  \n- ✅ Filtro de imóveis para facilitar a busca  \n\n---\n\n## 🌐 Demonstração\nAtualmente o projeto está hospedado em:  \n👉 [casauni.online](http://casauni.online)  \n\n📌 Futuramente, a hospedagem será descontinuada e o projeto ficará disponível apenas neste repositório.  \n\n---\n\n## 📦 Como executar o projeto\n\n1. Clone este repositório:  \n   ```bash\n   git clone https://github.com/seu-usuario/casauni.git\n   cd casauni\n   docker compose up --build\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:30.662881"
  },
  {
    "basic_info": {
      "name": "springboot-template",
      "full_name": "desereth/springboot-template",
      "owner": "desereth",
      "description": null,
      "url": "https://github.com/desereth/springboot-template",
      "clone_url": "https://github.com/desereth/springboot-template.git",
      "ssh_url": "git@github.com:desereth/springboot-template.git",
      "homepage": null,
      "created_at": "2025-09-29T05:25:53Z",
      "updated_at": "2025-09-30T06:37:04Z",
      "pushed_at": "2025-09-29T07:29:17Z"
    },
    "stats": {
      "stars": 30,
      "forks": 0,
      "watchers": 30,
      "open_issues": 0,
      "size": 30895
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 1830084,
        "JavaScript": 268785,
        "Vue": 137874,
        "FreeMarker": 89431,
        "SCSS": 7290,
        "HTML": 2545,
        "Dockerfile": 1825,
        "CSS": 1611
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\">\n  <a href=\"https://github.com/AntonyCheng\">\n    <img alt=\"spring-boot-init-template logo\" src=\"picture/logo/logo.png\" title=\"logo\"/>\n  </a>\n</p>\n\n> **作者：[AntonyCheng](https://github.com/AntonyCheng)**\n>\n> **版本号：v2.2.1-jdk17-pre**\n>\n> **开源协议：[Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0.html)**\n> \n> **注意事项：该README跟随版本号的更新而更新，所有Git分支其实都是Pre预览分支，其中最新的内容并不能及时展现在该README中，所以想要使用稳定且具有对应说明的版本，推荐从Releases中下载。但是想要时刻跟进模板开发进度，也可以直接从各个Git分支拉取，查看每次提交的对应说明！**\n\n# SpringBoot初始化模板\n\n**基于 Java Web 项目的 SpringBoot 框架初始化模板**，该模板整合了常用的框架，广泛支持JDK11和JDK17，部分版本兼容JDK8，该模板适用于前后端分离项目启动开发，保证大家在此基础上能够快速开发自己的项目，同时也适合入门学习，本项目会由作者持续更新。\n\n* [SpringBoot初始化模板](#springboot初始化模板)\n  * [软件版本要求](#软件版本要求)\n  * [模板特点](#模板特点)\n    * [主流框架](#主流框架)\n    * [业务特性](#业务特性)\n  * [业务功能](#业务功能)\n    * [示例业务](#示例业务)\n    * [单元测试](#单元测试)\n  * [快速上手](#快速上手)\n    * [必须执行](#必须执行)\n    * [可选执行](#可选执行)\n      * [启动前端项目](#启动前端项目)\n      * [整合Spring AI](#整合spring-ai)\n      * [整合缓存服务](#整合缓存服务)\n        * [整合系统缓存（Redis）](#整合系统缓存redis)\n        * [整合业务缓存（Redisson）](#整合业务缓存redisson)\n        * [整合本地缓存（Caffeine）](#整合本地缓存caffeine)\n      * [整合消息队列](#整合消息队列)\n        * [激活消息队列](#激活消息队列)\n        * [自定义消息队列](#自定义消息队列)\n      * [整合Elasticsearch](#整合elasticsearch)\n      * [整合MongoDB](#整合mongodb)\n      * [整合对象存储服务](#整合对象存储服务)\n        * [整合腾讯云COS](#整合腾讯云cos)\n        * [整合MinIO](#整合minio)\n        * [整合阿里云OSS](#整合阿里云oss)\n      * [整合验证码](#整合验证码)\n      * [整合邮件](#整合邮件)\n      * [整合离线IP库](#整合离线ip库)\n      * [配置国际化](#配置国际化)\n      * [配置SaToken](#配置satoken)\n        * [开启鉴权认证功能](#开启鉴权认证功能)\n          * [鉴权功能](#鉴权功能)\n          * [认证功能](#认证功能)\n        * [开启JWT](#开启jwt)\n          * [整合Redis](#整合redis)\n          * [整合JWT](#整合jwt)\n          * [确认鉴权模式](#确认鉴权模式)\n      * [配置定时任务](#配置定时任务)\n        * [SpringBoot任务调度](#springboot任务调度)\n        * [XxlJob任务调度](#xxljob任务调度)\n        * [PowerJob任务调度](#powerjob任务调度)\n      * [配置WebSocket](#配置websocket)\n      * [配置SpringBootAdmin](#配置springbootadmin)\n      * [配置Canal](#配置canal)\n        * [Canal简介](#canal简介)\n        * [搭建Deployer&Adapter系统](#搭建deployeradapter系统)\n        * [搭建Deployer&Client系统](#搭建deployerclient系统)\n  * [容器化部署](#容器化部署)\n    * [准备工作](#准备工作)\n    * [启动基础组件](#启动基础组件)\n    * [启动前后端服务](#启动前后端服务)\n  * [前端预览](#前端预览)\n  * [申明&联系我](#申明联系我)\n  * [项目历史](#项目历史)\n  * [下一步开发计划](#下一步开发计划)\n\n## 软件版本要求\n\nMySQL 8.0.X（推荐）\n\nRedis 7.X.X（强制）\n\nElasticsearch 7.X.X（强制，特别推荐7.14.0）\n\nRaabbitMQ 3.X.X（推荐）\n\n说明：其他没有提及到的软件版本均广泛支持\n\n## 模板特点\n\n### 主流框架\n\n- **Java 17**\n- **SpringBoot 3.2.5**\n  - spring-boot-starter-web == 基于 Spring MVC 的 Web 应用依赖\n  - spring-boot-starter-undertow == 轻量级、高性能 Servlet 容器\n  - spring-boot-starter-aop == 提供面向切面编程功能\n  - spring-boot-starter-validation == 参数校验依赖\n  - spring-boot-starter-data-mongodb == Spring Data MongoDB 依赖\n  - spring-boot-starter-email == Spring Data Email 依赖\n  - spring-boot-starter-freemaker == 模板引擎依赖\n  - spring-boot-starter-test == Spring Boot Test 依赖\n  - spring-boot-configuration-processor == 生成配置元数据信息，辅助开发工具\n- **前端模板**\n  - vue-admin-template 4.4.0 == 这是一个极简的 vue admin 管理后台，只包含了 Vue 2 & Element UI & axios & iconfont & permission control & lint\n- **Spring AI 1.1.0**\n  - spring-ai-openai-spring-boot-starter == Spring AI OpenAI模型依赖\n  - spring-ai-zhipuai-spring-boot-starter == Spring AI 智谱AI模型依赖\n  - spring-ai-ollama-spring-boot-starter == Spring AI Ollama框架AI模型依赖\n- **Netty**\n  - netty-all 4.1.114.Final == Netty 框架\n- **数据驱动层**\n  - mysql-connector-j 8.0.33 == Java 连接 MySQL 依赖\n  - mybatis-spring 3.0.4 == MyBatis Spring 依赖\n  - mybatis-plus-boot-starter 3.5.8 == MyBatis-Plus 框架\n  - mybatis-plus-annotation 3.5.7 == MyBatis-Plus 注解依赖\n  - shardingsphere-jdbc 5.5.0 == 分布式数据库解决方案\n  - druid-spring-boot-3-starter 1.2.23 == Druid 连接池\n- **工具类**\n  - lombok 1.18.34 == POJO 简化工具\n  - hutool-all 5.8.32 == Hutool 工具类\n  - commons-lang3 3.17.0 == Apache Commons Lang 工具类\n  - commons-io 2.17.0 == Apache Commons IO 工具类\n  - commons-codec 1.17.1 == Apache Commons Codec 工具类\n  - commons-pool2 2.12.0 == Apache Commons Pool 工具类\n  - commons-collections4 4.5.0-M2 == Apache Commons Collections 工具类\n  - commons-math3 3.6.1 == Apache Commons Math 工具类\n  - commons-compress 1.27.1 == Apache Commons Compress 工具类\n  - okhttp 4.12.0 == OK Http 工具类\n  - okio 3.9.0 == OK IO 工具类\n  - fastjson2 2.0.53 == FastJSON 工具类\n  - ip2region 2.7.0 == 离线 IP 地址定位库\n- **权限校验**\n  - sa-token-spring-boot3-starter 1.39.0 == SaToken 认证鉴权框架\n  - sa-token-core 1.39.0 == SaToken 认证鉴权框架核心依赖\n  - sa-token-jwt 1.39.0 == SaToken 认证鉴权框架 JWT 依赖\n  - sa-token-redis-jackson 1.39.0 == SaToken 认证鉴权框架 Redis 依赖\n- **缓存服务**\n  - spring-boot-starter-data-redis == Spring Data Redis 依赖\n  - spring-boot-starter-cache == Spring Cache 依赖\n  - redisson 3.37.0 == Redis 的基础上实现的 Java 驻内存数据网格\n- **本地缓存服务**\n  - caffeine 3.1.8 == Caffeine 本地缓存依赖\n- **消息队列**\n  - spring-boot-starter-amqp == 支持 AMQP （高级消息队列协议）消息代理\n  - spring-rabbit-test == Spring 支持对 RabbitMQ 消息队列的单元测试\n- **搜索引擎**\n  - easy-es-boot-starter 2.0.0 == 简化 Elasticsearch 搜索引擎，可以像 Mybatis-Plus 操作 MySQL 一样操作 Elasticsearch 的开源框架\n  - elasticsearch 7.14.0 == Elasticsearch 依赖\n  - elasticsearch-",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-01T02:29:32.014156"
  },
  {
    "basic_info": {
      "name": "watchtower-api",
      "full_name": "lahomafonseca/watchtower-api",
      "owner": "lahomafonseca",
      "description": "Migrated repository from migrated-repo",
      "url": "https://github.com/lahomafonseca/watchtower-api",
      "clone_url": "https://github.com/lahomafonseca/watchtower-api.git",
      "ssh_url": "git@github.com:lahomafonseca/watchtower-api.git",
      "homepage": null,
      "created_at": "2025-09-29T06:20:45Z",
      "updated_at": "2025-09-29T06:28:39Z",
      "pushed_at": "2025-09-29T06:24:12Z"
    },
    "stats": {
      "stars": 30,
      "forks": 0,
      "watchers": 30,
      "open_issues": 0,
      "size": 546972
    },
    "tech_info": {
      "language": "Java",
      "languages": {
        "Java": 22090182,
        "Shell": 24203,
        "JavaScript": 6291,
        "Dockerfile": 4830,
        "Python": 3821,
        "HTML": 871
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# teku\n\n [![Build Status](https://circleci.com/gh/Consensys/teku.svg?style=svg)](https://circleci.com/gh/Consensys/workflows/teku)\n [![GitHub License](https://img.shields.io/github/license/Consensys/teku.svg?logo=apache)](https://github.com/Consensys/teku/blob/master/LICENSE)\n [![Documentation](https://img.shields.io/badge/docs-readme-blue?logo=readme&logoColor=white)](https://docs.teku.consensys.io/)\n [![Discord](https://img.shields.io/badge/Chat-on%20Discord-%235865F2?logo=discord&logoColor=white)](https://discord.gg/7hPv2T6)\n [![Twitter Follow](https://img.shields.io/twitter/follow/Teku_Consensys)](https://twitter.com/Teku_Consensys)\n [![GitPOAP Badge](https://public-api.gitpoap.io/v1/repo/ConsenSys/teku/badge)](https://www.gitpoap.io/gh/ConsenSys/teku)\n\nTeku is an open-source Ethereum consensus client written in Java and containing a full beacon node and validator client implementation.\n\nSee the [Changelog](https://github.com/Consensys/teku/releases) for details of the latest releases and upcoming breaking changes.\n\n## Useful links\n\n* [Ethereum Beacon Chain specification](https://github.com/ethereum/consensus-specs/blob/master/specs/phase0/beacon-chain.md)\n* [Teku user documentation](https://docs.teku.consensys.net/)\n* [Teku REST API reference documentation](https://consensys.github.io/teku/)\n* [Teku issues](https://github.com/Consensys/teku/issues)\n* [Contribution guidelines](CONTRIBUTING.md)\n* [Teku Changelog](https://github.com/Consensys/teku/releases)\n\n## Teku users\n\nSee our [user documentation](https://docs.teku.consensys.net/).\n\nRaise a [documentation issue](https://github.com/Consensys/doc.teku/issues) or get in touch in\nthe #teku channel on [Discord](https://discord.gg/7hPv2T6) if you've got questions or feedback.\n\n## Teku developers\n\n* [Contribution Guidelines](CONTRIBUTING.md)\n* [Coding Conventions](https://wiki.hyperledger.org/display/BESU/Coding+Conventions)\n\n## Binary Releases\n\nBinary releases are available from the [releases page](https://github.com/Consensys/teku/releases).\nBinary builds that track the latest changes on the master branch are available on\n[Dockerhub](https://hub.docker.com/r/consensys/teku) using the `develop` version or as binary\ndownloads ([tar.gz format](https://artifacts.consensys.net/public/teku/raw/names/teku.tar.gz/versions/develop/teku-develop.tar.gz)\nor [zip format](https://artifacts.consensys.net/public/teku/raw/names/teku.zip/versions/develop/teku-develop.zip)).\n\nWe recommend only using release versions for Mainnet, but `develop` builds are useful for testing\nthe latest changes on testnets.\n\nRelease notifications are available via:\n* Sign up to our [release announcements](https://pages.consensys.net/teku-sign-up) email list (release and important announcements only, no marketing)\n* Follow us on [Twitter](https://twitter.com/Teku_Consensys)\n* `teku` in [Consensys Discord](https://discord.gg/7hPv2T6),\n* Subscribe to release notifications on github for [teku](https://github.com/Consensys/teku)\n\n## Build Instructions\n\n### Install Prerequisites\n\n* Java 21+\n\nNote: Official builds of Teku are performed with Java 21.\nBuilding on a more recent version of Java is supported, but the resulting build will not work on earlier versions of Java.\n\n\n### Build and Dist\n\nTo create a ready to run distribution:\n\n```shell script\ngit clone https://github.com/Consensys/teku.git\ncd teku && ./gradlew distTar installDist\n```\n\nThis produces:\n- Fully packaged distribution in `build/distributions` \n- Expanded distribution, ready to run in `build/install/teku`\n\n### Build and Test\n\nTo build, clone this repo and run with `gradle`:\n\n```shell script\ngit clone https://github.com/Consensys/teku.git\ncd teku && ./gradlew\n\n```\n\nAfter a successful build, distribution packages are available in `build/distributions`.\n\n### Other Useful Gradle Targets\n\n| Target      | Builds                                                  |\n|-------------|---------------------------------------------------------|\n| distTar     | Full distribution in build/distributions (as `.tar.gz`) |\n| distZip     | Full distribution in build/distributions (as `.zip`)    |\n| installDist | Expanded distribution in `build/install/teku`           |\n| distDocker  | The `consensys/teku` docker image                       |\n\n## Code Style\n\nWe use Google's Java coding conventions for the project. To reformat code, run:\n\n```shell script\n./gradlew spotlessApply\n```\n\nCode style is checked automatically during a build.\n\n## Testing\n\nAll the unit tests are run as part of the build, but can be explicitly triggered with:\n\n```shell script\n./gradlew test\n```\n\n## Special thanks\n\n**YourKit**\n\n![YourKit Logo](https://www.yourkit.com/images/yklogo.png)\n\nFor providing us free open source licenses for their profiler.\n\nYourKit supports open source projects with innovative and intelligent tools\nfor monitoring and profiling Java and .NET applications.\nYourKit is the creator of <a href=\"https://www.yourkit.com/java/profiler/\">YourKit Java Profiler</a>,\n<a href=\"ht",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-01T02:29:33.351641"
  }
]