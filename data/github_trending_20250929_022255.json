[
  {
    "basic_info": {
      "name": "ternfs",
      "full_name": "XTXMarkets/ternfs",
      "owner": "XTXMarkets",
      "description": "A distributed file system",
      "url": "https://github.com/XTXMarkets/ternfs",
      "clone_url": "https://github.com/XTXMarkets/ternfs.git",
      "ssh_url": "git@github.com:XTXMarkets/ternfs.git",
      "homepage": null,
      "created_at": "2025-09-02T09:31:27Z",
      "updated_at": "2025-09-28T18:26:25Z",
      "pushed_at": "2025-09-26T18:50:54Z"
    },
    "stats": {
      "stars": 896,
      "forks": 51,
      "watchers": 896,
      "open_issues": 9,
      "size": 13965
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 1700283,
        "Go": 848841,
        "C": 491145,
        "JavaScript": 25734,
        "Python": 20392,
        "CMake": 14145,
        "Shell": 12835,
        "HTML": 11683,
        "Makefile": 2333
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "<!--\nCopyright 2025 XTX Markets Technologies Limited\n\nSPDX-License-Identifier: GPL-2.0-or-later\n-->\n\n[![TernFS Logo](https://github.com/user-attachments/assets/03c2f7f9-649f-4411-9cd9-e375ff97e3b4 \"TernFS Logo\")](https://ternfs.com)\n\n\nA distributed file system. For a high-level description of TernFS, see [the TernFS blog post on the XTX Markets Tech Blog](https://xtxmarkets.com/tech/2025-ternfs). This document provides a more bare-bones overview and an introduction to the codebase.\n\n## Goals\n\nThe target use case for TernFS is the kind of machine learning we do at XTX: reading and writing large immutable files. By \"immutable\" we mean files that do not need modifying after they are first created. By \"large\" we mean that most of the storage space will be taken up by files bigger than a few MBs.\n\nWe don't expect new directories to be created often, and files (or directories) to be moved between directories often. In terms of numbers, we expect the upper bound for TernFS to roughly be the upper bound for the data we're planning for a single data center:\n\n- 10EB of logical file storage (i.e. if you sum all file sizes = 10EB)\n- 1 trillion files -- average ~10MB file size\n- 100 billion directories -- average ~10 files per directory\n- 1 million clients\n\nWe want to drive the filesystem with commodity hardware and Ethernet networking.\n\nWe want the system to be robust in various ways:\n\n* Witnessing half-written files should be impossible -- a file is fully written by the writer or not readable by other clients\n* Power loss or similar failure of storage or metadata nodes should not result in a corrupted filesystem (be it metadata or filesystem corruption)\n* Corrupted reads due to hard drives bitrot should be exceedingly unlikely\n* Data loss should be exceedingly unlikely, unless we suffer a datacenter-wide catastrophic event (fire, flooding, datacenter-wide vibration, etc.)\n* The filesystem should keep working through maintenance or failure of metadata or storage nodes\n\nWe also want to be able to restore deleted files or directories, using a configurable \"permanent deletion\" policy.\n\nFinally, we want to have the option to replicate TernFS to multiple regions, to be able to scale up compute across multiple data centres, and to remove any single data centre as a point of failure.\n\n## Components\n\n```                                   \n A ──► B means \"A sends requests to B\" \n                                       \n                                       \n ┌────────────────┐                    \n │ Metadata Shard ◄─────────┐          \n └─┬────▲─────────┘         │          \n   │    │                   │          \n   │    │                   │          \n   │ ┌──┴──┐                │          \n   │ │ CDC ◄──────────┐     │          \n   │ └──┬──┘          │     │          \n   │    │             │ ┌───┴────┐     \n   │    │             └─┤        │     \n ┌─▼────▼────┐          │ Client │     \n │ Registry  ◄──────────┤        │     \n └──────▲────┘          └─┬──────┘     \n        │                 │            \n        │                 │            \n ┌──────┴────────┐        │            \n │ Block Service ◄────────┘            \n └───────────────┘                     \n```\n\n* **servers**\n  * **registry**\n    * 1 logical instance\n    * `ternregistry`, C++ binary\n    * TCP bincode req/resp\n    * UDP replication\n    * stores metadata about a specific TernFS deployment\n      * shard/cdc addresses\n      * block services addresses and storage statistics\n    * state persisted through RocksDB with 5-node distributed consensus through LogsDB\n  * **filesystem data**\n    * **metadata**\n      * **shard**\n        * 256 logical instances\n        * `ternshard`, C++ binary\n        * stores all metadata for the filesystem\n          * file attributes (size, mtime, atime)\n          * directory attributes (mtime)\n          * directories listings (includes file/directory names)\n          * file to blocks mapping\n          * block service to file mapping\n        * UDP bincode req/resp\n        * state persisted through RocksDB with 5-node distributed consensus through LogsDB\n        * communicates with registry to fetch block services, register itself, insert statistics\n    * **CDC**\n      * 1 logical instance\n      * `terncdc`, C++ binary\n      * coordinates actions which span multiple directories\n        * create directory\n        * remove directory\n        * move file or directory between from one directory to the other\n        * \"Cross Directory Coordinator\"\n      * UDP bincode req/resp\n      * very little state required\n        * information about which transactions are currently being executed and which are queued (currently transactions are executed serially)\n        * directory -> parent directory mapping to perform \"no loops\" checks\n      * state persisted through RocksDB with 5-node distributed consensus through LogsDB\n      * communicates with the shards to perform the cross-directory actions\n      * communicates with registry to register itself",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:22:56.783752"
  },
  {
    "basic_info": {
      "name": "EDR-Freeze",
      "full_name": "TwoSevenOneT/EDR-Freeze",
      "owner": "TwoSevenOneT",
      "description": "EDR-Freeze is a tool that puts a process of EDR, AntiMalware into a coma state.",
      "url": "https://github.com/TwoSevenOneT/EDR-Freeze",
      "clone_url": "https://github.com/TwoSevenOneT/EDR-Freeze.git",
      "ssh_url": "git@github.com:TwoSevenOneT/EDR-Freeze.git",
      "homepage": null,
      "created_at": "2025-09-21T01:21:06Z",
      "updated_at": "2025-09-29T02:19:32Z",
      "pushed_at": "2025-09-25T13:49:22Z"
    },
    "stats": {
      "stars": 547,
      "forks": 106,
      "watchers": 547,
      "open_issues": 3,
      "size": 21
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 19030
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "### EDR-Freeze\n\nThis is a tool that exploits the software vulnerability of WerFaultSecure to suspend the processes of EDRs and antimalware without needing to use the BYOVD (Bring Your Own Vulnerable Driver) attack method.\n\nEDR-Freeze operates in user mode, so you don't need to install any additional drivers. It can run on the latest version of Windows.\n\n*The experiment was conducted with the latest version of Windows at the time of the project creation: __Windows 11 24H2__*\n\n### Command Line Syntax\n\n**EDR-Freeze.exe [TargetPID] [SleepTime]**\n\n*Example: __EDR-Freeze.exe 1234 10000__*\n\n*Freeze the target for 10000 milliseconds*\n\n## Links\n\n[EDR-Freeze: A Tool That Puts EDRs And Antivirus Into A Coma State](https://www.zerosalarium.com/2025/09/EDR-Freeze-Puts-EDRs-Antivirus-Into-Coma.html)\n\n[Tool to run process with PPL without driver](https://github.com/TwoSevenOneT/CreateProcessAsPPL)\n\n## How to Use EDR-Freeze Effectively\n\nInstead of running EDR-Freeze with a long sleep duration, you should incorporate it into a script with the following steps:\n\n1. Temporarily halt all Antimalware/EDR processes for a short period (1-3 seconds).\n2. Execute tasks immediately after a successful suspension.\n\nSince the GUI may become unresponsive in some cases, you should choose the shortest sleep time possible. Just make sure that the script executions are completed before the Antimalware/EDR resumes.\n\nAlternatively, it's best to insert the code you want to execute directly into the source code of EDR-Freeze:\n\n<img width=\"748\" height=\"387\" alt=\"Insert code\" src=\"https://github.com/user-attachments/assets/1c6f8819-5a21-4cc4-b72f-ea00be0fd092\" />\n\n\n## Author:\n\n[Two Seven One Three](https://x.com/TwoSevenOneT)\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-29T02:22:58.116251"
  },
  {
    "basic_info": {
      "name": "WSASS",
      "full_name": "TwoSevenOneT/WSASS",
      "owner": "TwoSevenOneT",
      "description": "This is the tool to dump the LSASS process on modern Windows 11",
      "url": "https://github.com/TwoSevenOneT/WSASS",
      "clone_url": "https://github.com/TwoSevenOneT/WSASS.git",
      "ssh_url": "git@github.com:TwoSevenOneT/WSASS.git",
      "homepage": null,
      "created_at": "2025-09-13T03:18:26Z",
      "updated_at": "2025-09-28T20:42:27Z",
      "pushed_at": "2025-09-15T13:40:45Z"
    },
    "stats": {
      "stars": 409,
      "forks": 48,
      "watchers": 409,
      "open_issues": 1,
      "size": 39
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 15722
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "### WSASS\n\nThis is a tool that uses the old WerfaultSecure.exe program to dump the memory of processes protected by PPL (Protected Process Light), such as LSASS.EXE.\nThe output is in Windows MINIDUMP format.\n\n*This tool automatically replaces the __\"MDMP\"__ magic header with a PNG magic header.\nAfter the dump is complete, you need to restore the original 4-byte magic at the beginning of the file with the original 4 bytes: __{0x4D, 0x44, 0x4D, 0x50}__ \"MDMP\".*\n\n### Command Line Syntax\n\n**WSASS.exe path_to_werfaultsecure.exe target_PID**\n\n*Example: __WSASS.exe C:\\TMP\\WerfaultSecure.exe 888__*\n\n## Links\n\n[Using WSASS to dump LSASS](https://www.zerosalarium.com/2025/09/Dumping-LSASS-With-WER-On-Modern-Windows-11.html)\n\n[Tool to run process with PPL without driver](https://github.com/TwoSevenOneT/CreateProcessAsPPL)\n\n## Author:\n\n[Two Seven One Three](https://x.com/TwoSevenOneT)\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-29T02:22:59.439525"
  },
  {
    "basic_info": {
      "name": "rko_lio",
      "full_name": "PRBonn/rko_lio",
      "owner": "PRBonn",
      "description": "A Robust Approach for LiDAR-Inertial Odometry Without Sensor-Specific Modelling",
      "url": "https://github.com/PRBonn/rko_lio",
      "clone_url": "https://github.com/PRBonn/rko_lio.git",
      "ssh_url": "git@github.com:PRBonn/rko_lio.git",
      "homepage": "https://arxiv.org/abs/2509.06593",
      "created_at": "2025-09-03T14:19:50Z",
      "updated_at": "2025-09-28T14:01:08Z",
      "pushed_at": "2025-09-26T20:09:05Z"
    },
    "stats": {
      "stars": 283,
      "forks": 11,
      "watchers": 283,
      "open_issues": 2,
      "size": 4063
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 137353,
        "Python": 96070,
        "CMake": 15446,
        "Makefile": 700
      },
      "license": "MIT License",
      "topics": [
        "imu",
        "inertial",
        "lidar",
        "lidar-inertial-odometry",
        "mapping",
        "odometry",
        "robotics",
        "ros",
        "ros2",
        "slam"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <h1>RKO LIO - LiDAR-Inertial Odometry<br />Without Sensor-Specific Modelling</h1>\n</div>\n\n<p align=\"center\">\nROS Distros:\n<br />\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_humble.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_humble.yaml/badge.svg?branch=master\" alt=\"Humble\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_jazzy.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_jazzy.yaml/badge.svg?branch=master\" alt=\"Jazzy\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_kilted.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_kilted.yaml/badge.svg?branch=master\" alt=\"Kilted\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_rolling.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/ros_build_rolling.yaml/badge.svg?branch=master\" alt=\"Rolling\" /></a>\n</p>\n\n<p align=\"center\">\nPython Bindings:\n<br />\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2204.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2204.yaml/badge.svg?branch=master\" alt=\"Ubuntu 22.04\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2204_arm.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2204_arm.yaml/badge.svg?branch=master\" alt=\"Ubuntu 22.04 ARM\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2404.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2404.yaml/badge.svg?branch=master\" alt=\"Ubuntu 24.04\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2404_arm.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_ubuntu_2404_arm.yaml/badge.svg?branch=master\" alt=\"Ubuntu 24.04 ARM\" /></a>\n<br />\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_macos_14.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_macos_14.yaml/badge.svg?branch=master\" alt=\"macOS 14\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_macos_15.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_macos_15.yaml/badge.svg?branch=master\" alt=\"macOS 15\" /></a>\n<br />\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_windows_2022.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_windows_2022.yaml/badge.svg?branch=master\" alt=\"Windows 2022\" /></a>\n<a href=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_windows_11_arm.yaml\"><img src=\"https://github.com/PRBonn/rko_lio/actions/workflows/python_bindings_windows_11_arm.yaml/badge.svg?branch=master\" alt=\"Windows 11 ARM\" /></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.youtube.com/watch?v=NNpzXdf9XmU\">\n    <img src=\"https://raw.githubusercontent.com/PRBonn/rko_lio/refs/heads/master/docs/example_multiple_platforms.png\" alt=\"Visualization of odometry system running on data from four different platforms in four different environments\" />\n  </a>\n  <br />\n  <em>Four different platforms, four different environments, one odometry system</em>\n</p>\n\n## Quick Start\n\n### Python\n\nIn case you already have a rosbag (ROS1 or ROS2) which contains a TF tree, you can inspect the results of our odometry system with the following two steps\n\n```bash\npip install rko_lio rosbags rerun-sdk\n```\n\n`rko_lio` is our odometry package, `rosbags` is required for using our rosbag dataloader, and `rerun-sdk` is what we use for our optional visualizer.\nNext, run\n\n```bash\nrko_lio -v /path/to/rosbag_folder # <- has to be a directory! with either *.bag files or metadata.yaml from ROS2\n```\n\nand you should be good to go!\n\n<details>\n<summary><b>Click here for some more details on how the above works and how to use RKO LIO!</b></summary>\n<br />\n\nThe `-v` flag enables visualization.\n\nYou can specify a dataloader to use with `-d`, but if you don't, we try to guess the format based on the layout of the data.\n\nOur rosbag dataloader works with either ROS1 or ROS2 bags.\nPlace split ROS1 bags in a single folder and pass the folder as the data path.\nNote that we don't support running RKO LIO on partial or incomplete bags, though you can try (and maybe raise an issue if you think we should support this).\nROS2 especially will need a `metadata.yaml` file.\n\nBy default, we assume there is just one IMU topic and one LiDAR topic in the bag, in which case we automatically pick up the topic names and proceed further.\nIf there are multiple topics per sensor, you will be prompted to select one via the `--imu` or `--lidar` flags, which you can pass to `rko_lio`.\n\nNext, we assume there is a (static) TF tree in the bag.\nIf so, we take th",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-29T02:23:00.757030"
  },
  {
    "basic_info": {
      "name": "based-cpp",
      "full_name": "SheafificationOfG/based-cpp",
      "owner": "SheafificationOfG",
      "description": "C++ is the based interpreted language",
      "url": "https://github.com/SheafificationOfG/based-cpp",
      "clone_url": "https://github.com/SheafificationOfG/based-cpp.git",
      "ssh_url": "git@github.com:SheafificationOfG/based-cpp.git",
      "homepage": "https://youtu.be/cFtymODJEjs",
      "created_at": "2025-09-06T02:50:29Z",
      "updated_at": "2025-09-28T19:13:45Z",
      "pushed_at": "2025-09-22T01:20:21Z"
    },
    "stats": {
      "stars": 209,
      "forks": 6,
      "watchers": 209,
      "open_issues": 5,
      "size": 28
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 65250,
        "Python": 18949
      },
      "license": null,
      "topics": [
        "gcc",
        "interpreter",
        "metaprogramming"
      ]
    },
    "content": {
      "readme": "# Based C++\n\nThis repo provides an implementation of the GNU Interface Layer (GIL) and standard library for `g++`.\n\n### C++ is the best interpreted language\n\n[![C++ is the best interpreted language!](https://img.youtube.com/vi/cFtymODJEjs/0.jpg)](https://youtu.be/cFtymODJEjs)\n\n## Usage\n\nHere is a simple \"Hello, world!\" in C++.\n\n```cpp\n#include \"gil/std.hpp\"\nusing namespace gil::std;\n\nvolatile auto run = main<{\n  str::puts(str::literal(\"Hello, world!\\n\"))\n}>;\n```\n\nTo run the program, run\n\n```sh\ng++ -std=c++23 -Based hello_world.cpp -o -\n```\n\n> [!NOTE]\n> The above command only works if you invoke `g++` from the root of this repo; otherwise, you will have to provide the full path to the required abstract system emulator drivers (`ased`) folder.\n\n## Examples\n\n- `hello_world.cpp`\n  > Be greeted in all of the languages supported by YVR!\n- `hello_world_vmi.cpp`\n  > Same as above, but without using the standard library.\n- `calculator.cpp`\n  > Perform a single binary operation on a pair of 64-bit signed integers.\n- `mergesort.cpp`\n  > Merge sort a comma-separated list of 64-bit signed integers.\n\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:02.125589"
  },
  {
    "basic_info": {
      "name": "sonshell",
      "full_name": "goudvuur/sonshell",
      "owner": "goudvuur",
      "description": "An effort to \"ssh into my Sony camera\"",
      "url": "https://github.com/goudvuur/sonshell",
      "clone_url": "https://github.com/goudvuur/sonshell.git",
      "ssh_url": "git@github.com:goudvuur/sonshell.git",
      "homepage": "http://www.goudvuur.be",
      "created_at": "2025-09-24T13:13:40Z",
      "updated_at": "2025-09-28T23:43:55Z",
      "pushed_at": "2025-09-26T12:40:51Z"
    },
    "stats": {
      "stars": 199,
      "forks": 5,
      "watchers": 199,
      "open_issues": 0,
      "size": 100
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 46536,
        "Python": 7981,
        "CMake": 3616,
        "Shell": 3496
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# SonShell - an effort to \"ssh into my Sony camera\"\n\nA Linux-only helper built on Sony’s official **Camera Remote SDK**.\nIt connects to a Sony A6700 camera over Wi-Fi/Ethernet, listens for new photos, downloads them automatically, and can optionally run a script on each downloaded file.\n\n---\n\n## Features\n- Auto-connect via **enumeration** or **direct IP/MAC**.\n- Watches for new capture events and fetches the newest files.\n- Saves into a chosen directory with **unique filenames**.\n- **Post-download hook**: run any executable/script with the saved file path as argument.\n- **Keepalive mode**: auto-retry on startup failure or after disconnects.\n- Linux-only\n\n---\n\n## Demo\n\nhttps://github.com/user-attachments/assets/6146ff3b-d51c-412b-8684-bdde5c418d4d\n\n---\n\n## Usage\n```bash\n./sonshell --dir /photos [options]\n```\n\n## Options\n- `--dir <path>` : Directory to save files (required in most real setups).\n- `--ip <addr>` : Connect directly by IPv4 (e.g. `192.168.1.1`).\n- `--mac <hex:mac>` : Optional MAC (e.g. `10:20:30:40:50:60`) for direct IP.\n- `--cmd <path>` : Executable/script to run after each download, invoked as `cmd /photos/DSC01234.JPG`\n- `--keepalive <ms>` : Retry interval when offline or after disconnect.\n- `--verbose` : Verbose property-change logging.\n- `--user <name>` : Supply username for access-auth cameras.\n- `--pass <pass>` : Supply password for access-auth cameras.\n\n---\n\n## Interactive Commands\n\nOnce connected, you enter the interactive **SonShell** prompt:\n\n- `shoot` : Trigger shutter release.\n- `focus` : Trigger autofocus (half-press behavior).\n- `quit` or `exit` : Leave the shell and stop the program.\n- `sync <N>` : Download the last N files per slot (skips existing files).\n- `sync all` : Download *all* files, preserving camera folder structure.\n- `sync stop` : Abort an ongoing sync session (after the current file).\n- Ctrl-C / Ctrl-D exit cleanly.\n\n\n## Examples\nEnumerate + keep retrying every 2s, run a hook after each file:\n```bash\n./sonshell --dir /tmp/photos --verbose --keepalive 3000 --cmd ../scripts/show_single.sh\n```\n\nDirect IP connect, verbose logs, retry every 3s:\n```bash\n./sonshell --ip 192.168.1.1 --mac 10:20:30:40:50:60 --dir /tmp/photos -v --keepalive 3000\n```\n\n---\n\n## Build\nRequires Linux, g++, and the Sony Camera Remote SDK.\n\nSee [INSTALL.md](./INSTALL.md)\n\n---\n\n## How It Works (short version)\n1. **Connect** to the camera (via IP or enumeration).\n   Stores/reuses SDK **fingerprint** under `~/.cache/sonshell/`.\n2. **Wait for notifications**: when the camera signals new contents,\n   spawn a download thread.\n3. **Download** newest files to `--dir`.\n   Safe naming ensures no overwrite (`file_1.jpg`, etc.).\n4. **Hook**: if `--cmd` is set, fork/exec the script with the saved path.\n5. **Reconnect** on errors/disconnects if `--keepalive` is set.\n\n---\n\n## License\nSee [LICENSE](./LICENSE) for licensing details.\n\n---\n\n## Links\n- Sony Camera Remote SDK: https://support.d-imaging.sony.co.jp/app/sdk/en/index.html\n\n---\n\n## Developer Documentation\n\n### Notes\n- Built on/for Ubuntu 24.04\n- It uses Sony's official Camera Remote SDK (not included here).\n- I leaned heavily on ChatGPT while creating this, so please don't mind the mess! ;)\n\n### Architecture\n- Interactive REPL shell using libedit, with a custom getchar (`my_getc`) that integrates log-draining and prompt refresh.\n- Separate background threads:\n  - **Input thread** (REPL) handles user commands.\n  - **Download workers** handle file transfers.\n  - **Wake pipe** mechanism used to wake REPL for new logs without clobbering the prompt.\n\n### Sync Implementation\n- `sync <N>`: downloads the last N files per slot.\n- `sync all`: downloads *all* files from the camera, preserving the DCIM/day-folder structure.\n- `sync stop`: aborts an in-progress sync gracefully (after the current file finishes).\n- Sync skips files already present locally.\n\n### Logging\n- Each file transfer produces a single compact `[PHOTO] filename (bytes, ms)` log line.\n- For large files, intermediate progress updates are logged.\n- Verbosity can be toggled with `--verbose`.\n\n### Shutdown Handling\n- Ctrl-C and Ctrl-D are fixed to exit cleanly on the first press, without requiring repeats.\n- Signal handler sets `g_stop` and nudges the wake pipe so the REPL loop exits immediately.\n- Input thread is joined before disconnect, preventing stray prompt redraws.\n\n### Authentication\n- New `--user` and `--pass` options allow supplying credentials if the camera has **Access Auth** enabled.\n- Fingerprint caching (`~/.cache/sonshell/fp_enumerated.bin`) stays empty if Access Auth is disabled — this is expected.\n\n### Recent Changes\n- Added sync commands (`sync <N>`, `sync all`, `sync stop`).\n- Folder mirroring when syncing.\n- Improved logging format (single `[PHOTO]` line per file).\n- Fixed Ctrl-C / Ctrl-D handling.\n- Added `--user` / `--pass` options for authentication.\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-09-29T02:23:03.434316"
  },
  {
    "basic_info": {
      "name": "refx",
      "full_name": "mosaico-labs/refx",
      "owner": "mosaico-labs",
      "description": "Compile-time safe C++ library for accurate coordinate transformations and navigation in mobile robotics.",
      "url": "https://github.com/mosaico-labs/refx",
      "clone_url": "https://github.com/mosaico-labs/refx.git",
      "ssh_url": "git@github.com:mosaico-labs/refx.git",
      "homepage": "https://mosaico.dev",
      "created_at": "2025-09-09T18:21:38Z",
      "updated_at": "2025-09-25T09:58:52Z",
      "pushed_at": "2025-09-18T19:12:37Z"
    },
    "stats": {
      "stars": 162,
      "forks": 6,
      "watchers": 162,
      "open_issues": 0,
      "size": 133
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 308663,
        "CMake": 2143,
        "C": 1061
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# refx\n\n**refx** is a modern header-only C++ library designed for mobile robotics and navigation. Its core philosophy is to leverage the C++ type system to provide compile-time safety for all geometric and geodetic calculations. This prevents a wide class of common and difficult-to-debug errors that arise from incorrect handling of coordinate reference frames.\n\n> [!WARNING]\n> refx is still in development (0.x.y) and API interface may change between minor revisions. Please use the releases packages for direct import or specify a commit tag if you are using refx with CMake `FetchContent`\n\n## Documentation\n\nRead the **[Full Documentation](https://mosaico-labs.github.io/refx-doc)**, to dive in — explore APIs and classes to help you build and contribute faster.\n\nFor a collection of practical, real-world recipes designed to help you solve common problems in robotics and navigation, read ***The refx [Cookbook](https://mosaico-labs.github.io/refx-doc/cookbook)***.\n\n## Who is this for?\n\nThis library is intended for robotics engineers, researchers, and students working on applications that require a high degree of navigational accuracy and reliability, such as:\n\n  * Sensor fusion for Inertial Navigation Systems (INS)\n  * UAV/drone flight control and guidance\n  * Autonomous ground vehicle (AGV) localization\n  * Marine and sub-surface navigation\n  * Geodetic surveying and mapping\n\n## Key Features\n\n  * **Type-Safe Frames**: Each coordinate frame (e.g., NED, ECEF, FRD) is a unique type, preventing accidental mixing of incompatible data.\n  * **Mathematical Correctness**: A strict semantic distinction is enforced between absolute positions (`Coordinate3D`) and displacement vectors (`Vector3D`). Operations are designed to reflect their true mathematical meaning.\n  * **High-Fidelity Models**: Includes standard geodetic models (WGS-84), gravity models, and a concrete implementation of the World Magnetic Model (WMM2020) for high-accuracy applications.\n  * **Compile-Time Dispatch**: A powerful template-based system automatically selects the correct mathematical logic for linear vs. angular coordinates, ensuring correctness for geodetic calculations.\n\n## Ecosystem Integration\nrefx is designed to be a self-contained, lightweight library. However, for maximum utility, it provides optional, first-class support for **Eigen3**.\n\n## Installation\nHere's the code you'd add to your project's `CMakeLists.txt` file to import the refx library.\n```cmake\ninclude(FetchContent)\nFetchContent_Declare(\n  refx\n  GIT_REPOSITORY https://github.com/mosaico-labs/refx.git/\n  GIT_TAG        v0.1.0\n)\nFetchContent_MakeAvailable(refx)\n```\n\nFrom this point on, the `refx::refx` target is available to your project and this command can be used to to link refx.\n```cmake\ntarget_link_libraries(my_target PRIVATE refx::refx)\n```\n\n## Requirements\nDeveloping with refx requires only a C++17 compatible compiler, running tests requires Google Test as dependency (downloaded automatically by CMake).\n\n## Getting Started\n\nUsing `refx` is straightforward. The following example demonstrates the core features of the library: creating frame-aware vectors and coordinates, leveraging compile-time safety, and performing transformations.\n\n\n### A Practical Example\n\nThe code below simulates a common scenario: taking a vehicle's body-frame velocity, rotating it into the world frame, and projecting a global GPS coordinate into a local navigation frame.\n\n```cpp\n//getting_started.cpp\n#include <iostream>\n#include <cmath>\n#include <refx/geometry.h>  // for Vector3D, Coordinate3D, Rotation and YawPitchRoll\n#include <refx/transformations.h> // frame_cast, frame_transform\n\nusing namespace refx;\n\nint main() {\n    // 1. Create frame-aware vectors. Types are tagged with their frame.\n    Vector3D<ned> velocity_ned{10.0, -2.0, 0.5};  // {N, E, D}\n    Vector3D<frd> omega_body{0.0, 0.0, 0.03};     // {F, R, D}\n\n    std::cout << \"Velocity in NED frame: \" << velocity_ned << std::endl;\n\n    // 2. COMPILE-TIME SAFETY: Mixing frames is a compiler error.\n    // Uncommenting the line below will cause a compile-time error, preventing a common bug.\n    // velocity_ned + thrust_in_body;  // ERROR: Incompatible frames!\n\n    // 3. Define a rotation from the body frame to the world (NED) frame.\n    // Let's assume a 45-degree yaw (pi/4 radians).\n    auto yaw_pitch_roll = YawPitchRoll<double>(M_PI / 4.0, 0.0, 0.0);\n    auto R_world_from_body = Rotation<ned, frd>(yaw_pitch_roll);\n\n    // 4. Correctly transform the thrust vector to the world frame.\n    Vector3D<frd> velocity_body = R_world_from_body.inverse() * velocity_ned;\n    // This will generate a compile-time error:\n    // Vector3D<frd> velocity_body = R_world_from_body * velocity_ned; //need .inverse() to rotation\n    // Vector3D<flu> velocity_body = R_world_from_body.inverse() * velocity_ned; //result is <frd>\n\n    std::cout << \"Velocity in Body Frame: \" << velocity_body << std::endl;\n\n    // 5. Compute centripetal acceleration.\n    Vector3D<frd> centripetal",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:04.767608"
  },
  {
    "basic_info": {
      "name": "lidar_odometry",
      "full_name": "93won/lidar_odometry",
      "owner": "93won",
      "description": "Probabilistic Kernel Optimization for Robust State Estimation",
      "url": "https://github.com/93won/lidar_odometry",
      "clone_url": "https://github.com/93won/lidar_odometry.git",
      "ssh_url": "git@github.com:93won/lidar_odometry.git",
      "homepage": "",
      "created_at": "2025-09-26T07:36:39Z",
      "updated_at": "2025-09-29T00:12:07Z",
      "pushed_at": "2025-09-29T00:12:04Z"
    },
    "stats": {
      "stars": 156,
      "forks": 31,
      "watchers": 156,
      "open_issues": 0,
      "size": 5447
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 282054,
        "CMake": 9265,
        "Shell": 2910
      },
      "license": null,
      "topics": [
        "lidar",
        "odometry",
        "slam"
      ]
    },
    "content": {
      "readme": "# LiDAR Odometry with Probabilistic Kernel Optimization (PKO)\n\nThis is a real-time LiDAR odometry system designed for SLAM applications. It utilizes feature extraction from point clouds, iterative closest point (ICP) registration, sliding window optimization with Ceres Solver, and Pangolin for 3D visualization.\n\nThe system incorporates **Probabilistic Kernel Optimization (PKO)** for robust state estimation, as described in:\n\n> S. Choi and T.-W. Kim, \"Probabilistic Kernel Optimization for Robust State Estimation,\" *IEEE Robotics and Automation Letters*, vol. 10, no. 3, pp. 2998-3005, 2025, doi: 10.1109/LRA.2025.3536294.\n> \n> **Paper**: [https://ieeexplore.ieee.org/document/10857458](https://ieeexplore.ieee.org/document/10857458)\n\nROS Wrapper: https://github.com/93won/lidar_odometry_ros_wrapper\n\n\n## Features\n\n- ⚡ Real-time LiDAR odometry processing\n- 🎯 Feature-based point cloud registration\n- 🔧 Ceres Solver-based optimization\n- 📈 Adaptive M-estimator for robust estimation (PKO)\n\n## Demo\n\n[![LiDAR Odometry Demo](https://img.youtube.com/vi/FANz9mhIAQQ/0.jpg)](https://www.youtube.com/watch?v=FANz9mhIAQQ)\n\n*Click to watch the demo video showing real-time LiDAR odometry on KITTI dataset*\n\n## Quick Start\n\n### 1. Build Options\n\n#### Native Build (Ubuntu 22.04)\n```bash\ngit clone https://github.com/93won/lidar_odometry\ncd lidar_odometry\nchmod +x build.sh\n./build.sh\n```\n\n### 2. Download Sample Data\n\nDownload the sample KITTI sequence 07 from [Google Drive](https://drive.google.com/drive/folders/13YL4H9EIfL8oq1bVp0Csm0B7cMF3wT_0?usp=sharing) and extract to `data/kitti/`\n\n### 3. Update Configuration\n\nEdit `config/kitti.yaml` to set your dataset paths:\n```yaml\n# Data paths - Update these paths to your dataset location\ndata_directory: \"/path/to/your/kitti_dataset/sequences\"\nground_truth_directory: \"/path/to/your/kitti_dataset/poses\"  \noutput_directory: \"/path/to/your/output/directory\"\nseq: \"07\"  # Change this to your sequence number\n```\n\n### 4. Run LiDAR Odometry\n\n```bash\ncd build\n./lidar_odometry ../config/kitti.yaml\n```\n\n## Full KITTI Dataset\n\nFor complete evaluation, download the full KITTI dataset from:\n- **Official Website**: [http://www.cvlibs.net/datasets/kitti/](http://www.cvlibs.net/datasets/kitti/)\n- **Odometry Dataset**: [http://www.cvlibs.net/datasets/kitti/eval_odometry.php](http://www.cvlibs.net/datasets/kitti/eval_odometry.php)\n\n## Project Structure\n\n- `app/`: Main application and KITTI dataset player\n- `src/`: Core modules (database, processing, optimization, viewer, util)\n- `thirdparty/`: External libraries (Ceres, Pangolin, Sophus, spdlog)\n- `config/`: Configuration files\n- `build.sh`: Build script for native compilation\n\n## Dependencies\n\n- **PCL** (Point Cloud Library)\n- **Eigen3** - Linear algebra\n- **Ceres Solver** - Non-linear optimization\n- **Pangolin** - 3D visualization\n- **OpenGL** - Graphics rendering\n- **YAML-cpp** - Configuration parsing\n\n## System Requirements\n\n- **Ubuntu 20.04/22.04** (recommended)\n- **C++17 Compiler** (g++ or clang++)\n- **CMake** (>= 3.16)\n\n## License\n\nThis project is released under the MIT License.\n\n## References\n\n```bibtex\n@ARTICLE{10857458,\n  author={Choi, Seungwon and Kim, Tae-Wan},\n  journal={IEEE Robotics and Automation Letters}, \n  title={Probabilistic Kernel Optimization for Robust State Estimation}, \n  year={2025},\n  volume={10},\n  number={3},\n  pages={2998-3005},\n  keywords={Kernel;Optimization;State estimation;Probabilistic logic;Tuning;Robustness;Cost function;Point cloud compression;Oceans;Histograms;Robust state estimation;SLAM},\n  doi={10.1109/LRA.2025.3536294}\n}\n```\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:06.134197"
  },
  {
    "basic_info": {
      "name": "gemini_icpc2025",
      "full_name": "google-deepmind/gemini_icpc2025",
      "owner": "google-deepmind",
      "description": "Gemini 2025 ICPC World Finals Code Submissions",
      "url": "https://github.com/google-deepmind/gemini_icpc2025",
      "clone_url": "https://github.com/google-deepmind/gemini_icpc2025.git",
      "ssh_url": "git@github.com:google-deepmind/gemini_icpc2025.git",
      "homepage": "",
      "created_at": "2025-09-17T10:57:24Z",
      "updated_at": "2025-09-28T06:38:52Z",
      "pushed_at": "2025-09-17T11:09:46Z"
    },
    "stats": {
      "stars": 156,
      "forks": 12,
      "watchers": 156,
      "open_issues": 0,
      "size": 27
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 54237
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# Gemini ICPC 2025 Submissions\n\nThis repository contains the code submissions from an advanced version of\n[Gemini 2.5 Deep Think](https://blog.google/products/gemini/gemini-2-5-deep-think/)\nfor the 2025 International Collegiate Programming Contest World Finals.\n\n## License and disclaimer\n\nCopyright 2025 Google LLC\n\nAll software is licensed under the Apache License, Version 2.0 (Apache 2.0);\nyou may not use this file except in compliance with the Apache 2.0 license.\nYou may obtain a copy of the Apache 2.0 license at:\nhttps://www.apache.org/licenses/LICENSE-2.0\n\nAll other materials are licensed under the Creative Commons Attribution 4.0\nInternational License (CC-BY). You may obtain a copy of the CC-BY license at:\nhttps://creativecommons.org/licenses/by/4.0/legalcode\n\nUnless required by applicable law or agreed to in writing, all software and\nmaterials distributed here under the Apache 2.0 or CC-BY licenses are\ndistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\neither express or implied. See the licenses for the specific language governing\npermissions and limitations under those licenses.\n\nThis is not an official Google product.\n",
      "default_branch": "release"
    },
    "fetched_at": "2025-09-29T02:23:07.504161"
  },
  {
    "basic_info": {
      "name": "WatchDogKiller",
      "full_name": "j3h4ck/WatchDogKiller",
      "owner": "j3h4ck",
      "description": "PoC exploit for the vulnerable WatchDog Anti-Malware driver (amsdk.sys) – weaponized to kill protected EDR/AV processes via BYOVD.",
      "url": "https://github.com/j3h4ck/WatchDogKiller",
      "clone_url": "https://github.com/j3h4ck/WatchDogKiller.git",
      "ssh_url": "git@github.com:j3h4ck/WatchDogKiller.git",
      "homepage": "",
      "created_at": "2025-09-10T18:41:21Z",
      "updated_at": "2025-09-28T07:41:14Z",
      "pushed_at": "2025-09-11T00:58:17Z"
    },
    "stats": {
      "stars": 151,
      "forks": 14,
      "watchers": 151,
      "open_issues": 0,
      "size": 1246
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 4134
      },
      "license": null,
      "topics": [
        "av-bypass",
        "av-evasion",
        "byovd",
        "edr",
        "edr-bypass",
        "edr-evasion"
      ]
    },
    "content": {
      "readme": "# WatchDogKiller – Weaponizing the WatchDog Anti-Malware Driver Vulnerability\n\n## 📖 Research Article\nThis repository is the Proof-of-Concept (PoC) accompanying my technical write-up on the WatchDog Anti-Malware (amsdk.sys) BYOVD vulnerability.  \n👉 Full research available here: [Researching an APT Attack and Weaponizing It: The WatchDog BYOVD Story](https://medium.com/@jehadbudagga/researching-an-apt-attack-and-weaponizing-it-56daabee11c9)\n\n---\n\n## ⚡ Overview\nThe Silver Fox APT group leveraged a vulnerable Microsoft-signed driver (`wamsdk.sys`) in recent attacks to disable security products.  \nI reversed the latest WatchDog driver (`amsdk.sys v1.1.100`) and discovered that the arbitrary process termination vulnerability was still exploitable.\n\nThe driver as of this date 11/9/2025 isnt listed on either LolDriver or HVCI blocked\n\nThis PoC demonstrates:\n- Registering a process with the driver (`IOCTL_REGISTER_PROCESS`)\n- Using the termination routine (`IOCTL_TERMINATE_PROCESS`)\n- Bypassing the driver’s authorization mechanism\n- Killing protected EDR/AV processes (Bitdefender, Sophos, Kaspersky, etc.)\n\n---\n\n## 🛠️ Usage\n> ⚠️ **Disclaimer**: This code is for educational and research purposes only. Do not use it on systems you do not own.\n\n1. Load the vulnerable driver:\n   ```powershell\n   sc.exe create killer binPath=\"C:\\Path\\To\\wamsdk.sys\" type=kernel\n   sc.exe start killer\n   ```\n\n 2. Run the PoC\n```\n.\\WatchDogKiller.exe\n\nWatchDog EDR Terminator Tool @j3h4ck\n================================================\n\nSuccessfully opened Zam device\nAttempting to register process 9444...\nSuccessfully registered process 9444\n\nEnter PID to terminate: 30724\nWait for process exit? (0 = No, 1 = Yes): 0\n\nAttempting to terminate PID 30724...\nSuccessfully sent terminate request for PID 30724\nTerminate request completed successfully.\n\nEnter PID to terminate:\n```\n## References\n- Research Article: https://medium.com/p/56daabee11c9/  \n- The Hacker News – Silver Fox Exploits Microsoft-Signed Driver: https://thehackernews.com/2025/09/silver-fox-exploits-microsoft-signed.html  \n\n---\n\n## Author\nJehad Abudagga  \n- LinkedIn: https://www.linkedin.com/in/jehadabudagga/  \n- GitHub: https://github.com/j3h4ck  \n\n---\n\n## Disclaimer\nThis project is released for educational and security research purposes only.  \nThe author does not endorse or condone the misuse of this information.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:08.831292"
  },
  {
    "basic_info": {
      "name": "NTSleuth",
      "full_name": "xaitax/NTSleuth",
      "owner": "xaitax",
      "description": "Comprehensive Windows Syscall Extraction & Analysis Framework",
      "url": "https://github.com/xaitax/NTSleuth",
      "clone_url": "https://github.com/xaitax/NTSleuth.git",
      "ssh_url": "git@github.com:xaitax/NTSleuth.git",
      "homepage": null,
      "created_at": "2025-08-30T16:11:09Z",
      "updated_at": "2025-09-28T17:59:07Z",
      "pushed_at": "2025-08-30T16:29:51Z"
    },
    "stats": {
      "stars": 129,
      "forks": 18,
      "watchers": 129,
      "open_issues": 0,
      "size": 228
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 371054,
        "Batchfile": 9213,
        "CMake": 5124
      },
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "topics": []
    },
    "content": {
      "readme": "# 🔍 NTSleuth\n\n<div align=\"center\">\n\n![NTSleuth Banner](https://img.shields.io/badge/NTSleuth-Windows%20Syscall%20Hunter-purple?style=for-the-badge&logo=windows&logoColor=white)\n\n[![Version](https://img.shields.io/badge/Version-1.0.0-blue?style=for-the-badge)](https://github.com/xaitax/NTSleuth/releases)\n[![Platform](https://img.shields.io/badge/Platform-ARM64%20%7C%20x64%20%7C%20x86-orange?style=for-the-badge)](https://github.com/xaitax/NTSleuth)\n[![License](https://img.shields.io/badge/License-BSD%203--Clause-green?style=for-the-badge)](LICENSE)\n[![C++](https://img.shields.io/badge/C++-20-red?style=for-the-badge&logo=cplusplus)](https://isocpp.org/)\n\n**Comprehensive Windows Syscall Extraction & Analysis Framework**\n\n*Discover every syscall. Resolve every parameter. Map the undocumented.*\n\nIf you find this research valuable, I'd appreciate a coffee:\n\n[![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/M4M61EP5XL)\n\n</div>\n\n---\n\n## ⚠️ Early Development Notice\n\n> **Important**: This project is in early development. While functional and tested on multiple systems, it certainly has bugs and edge cases that haven't been discovered yet. I'm actively working on improvements and welcome feedback! Despite its early stage, I hope NTSleuth proves helpful for your Windows internals research and reverse engineering projects.\n>\n> Please report any issues you encounter - your feedback helps make this tool better for everyone!\n\n## 🎯 What is NTSleuth?\n\nNTSleuth is an advanced Windows syscall extraction and analysis framework that automatically discovers, documents, and analyzes system calls across all Windows architectures. It's a comprehensive reverse engineering tool that provides deep insights into Windows internals with high accuracy.\n\n### 🚀 Key Achievements\n\n- **2,400+ Syscalls Extracted** - Complete coverage of ntdll.dll and win32u.dll\n- **1,100+ Function Signatures** - Integrated PHNT database from System Informer\n- **3 Architectures Supported** - Native ARM64, x64, and x86 analysis\n- **100% Automated** - From extraction to parameter resolution\n- **< 4 Second Extraction** - Lightning-fast analysis engine\n\n## ✨ Core Features\n\n### 🔬 Syscall Extraction Engine\n- **Multi-Architecture Disassembly** - ARM64 (SVC), x64 (SYSCALL), x86 (INT 2E/SYSENTER)\n- **Complete Module Coverage** - ntdll.dll, win32u.dll, and WOW64 variants\n- **Stub Analysis** - Extracts and analyzes syscall stub bytes\n- **Alias Detection** - Identifies Nt/Zw function relationships\n- **True Syscall Verification** - Distinguishes actual syscalls from regular exports\n\n### 🧠 Advanced Parameter Resolution\n- **PHNT Database Integration** - 1,100+ authoritative function signatures\n- **SAL Annotation Support** - Complete _In_, _Out_, _Inout_, _opt_ preservation\n- **Multi-Method Resolution**:\n  - Primary: PHNT database lookup\n  - Secondary: Pattern-based matching\n  - Tertiary: Assembly code analysis\n  - Quaternary: Heuristic inference\n  - Quinary: Cross-reference learning\n- **Confidence Scoring** - Reliability ratings for each resolution (0.0-1.0)\n\n### 📊 Output Formats\n- **JSON Export** - Structured data with complete metadata\n- **C/C++ Headers** - Ready-to-use header files with prototypes\n- **Interactive Lookup** - Query individual syscalls with rich formatting\n- **Documentation Links** - Direct references to ntdoc.m417z.com\n\n### 🛠️ Professional Features\n- **Symbol Resolution** - Automatic PDB download from Microsoft Symbol Server\n- **Local Caching** - Intelligent cache management for symbols and PHNT data\n- **Offline Mode** - Works without internet after initial cache population\n\n## 📸 Screenshots\n\n```\n    ███   ██ ████████ ███████ ██      ███████ ██   ██ ████████ ██  ██\n    ████  ██    ██    ██      ██      ██      ██   ██    ██    ██  ██\n    ██ ██ ██    ██    ███████ ██      █████   ██   ██    ██    ███████\n    ██  ████    ██         ██ ██      ██      ██   ██    ██    ██  ██\n    ██   ███    ██    ███████ ███████ ███████  ██████    ██    ██  ██\n\n\n  +===================================================================+\n  |  Windows Syscall Extraction & Automated Parameter Resolution Tool |\n  |                 ARM64 | x64 | x86 Syscall Analysis                |\n  |               v1.0.0 by Alexander Hagenah • @xaitax               |\n  +===================================================================+\n\n[*] INITIALIZATION\n\n[+] Initializing NtSleuth Engine...\n[+] Output directory: output\n[+] Symbol cache: cache\\symbols\n\n[*] PARAMETER DATABASE\n\n[+] Loading PHNT database for parameter resolution...\n[+] PHNT database initialized with 1109 function signatures\n\n[*] SYSCALL EXTRACTION\n\n[+] Extracting syscalls from system modules...\n\n[*] PARAMETER RESOLUTION\n\n[+] Resolving parameters from PHNT database...\n[+] Resolved parameters for 1103 syscalls from PHNT\n\n[*] EXTRACTION RESULTS\n\n> System Information\n  * Target OS: 10.0.26220.5770 (ARM64)\n  * Build: 26220.5770\n\n> Syscall Statistics\n  * Total syscalls found: 2461\n    -> ntdll.dll: 978 total\n    -> win32u",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:10.168010"
  },
  {
    "basic_info": {
      "name": "SplineTrajectory",
      "full_name": "Bziyue/SplineTrajectory",
      "owner": "Bziyue",
      "description": null,
      "url": "https://github.com/Bziyue/SplineTrajectory",
      "clone_url": "https://github.com/Bziyue/SplineTrajectory.git",
      "ssh_url": "git@github.com:Bziyue/SplineTrajectory.git",
      "homepage": null,
      "created_at": "2025-09-05T12:14:08Z",
      "updated_at": "2025-09-29T02:07:44Z",
      "pushed_at": "2025-09-21T06:02:54Z"
    },
    "stats": {
      "stars": 129,
      "forks": 9,
      "watchers": 129,
      "open_issues": 1,
      "size": 220
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 409484,
        "CMake": 5627
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# SplineTrajectory\n\nSplineTrajectory is a high-performance, header-only C++ library for generating smooth, N-dimensional spline trajectories. This library provides **MINCO-equivalent** cubic、quintic and septic spline interpolation with boundary conditions support, making it ideal for robotics, path planning, and trajectory generation applications.\n\n**English** | [中文](README_zh.md)\n\n\n## Key Features\n\n- **MINCO Equivalent**: Achieves minimum acceleration, jerk, and snap trajectories, just like MINCO.\n    \n- **High Performance**: Outperforms traditional methods by using a specialized **block tridiagonal matrix solver** (Thomas algorithm) instead of general LU decomposition.\n    \n- **Template-Based**: Fully templated for **arbitrary dimensions** (1D to ND) with compile-time optimizations.\n    \n- **Flexible & Efficient**: Supports multiple time specifications, optimized batch evaluation, and provides derivatives (velocity, acceleration, jerk, snap).\n    \n- **Eigen Integration**: Seamlessly uses the Eigen library for all linear algebra operations.\n    \n- **Header-Only**: Easy to integrate into any project by just including the header.\n\n## Requirements\n\n- C++11 or later\n- Eigen 3.3 or later\n- CMake 3.10+ (for building examples and tests)\n\n## Quick Start\n\n```bash\ngit clone https://github.com/Bziyue/SplineTrajectory.git\n# git clone git@github.com:Bziyue/SplineTrajectory.git\n\ncd SplineTrajectory\n\n# Install Eigen3 (if not installed)\nsudo apt install libeigen3-dev\n\n# Build and test\nmkdir build && cd build\ncmake ..\nmake\n\n# Run performance comparisons\n./test_cubic_spline_vs_minco_nd\n./test_quintic_spline_vs_minco_nd\n./test_septic_spline_vs_minco_nd\n\n# Run examples\n./basic_cubic_spline\n./quintic_spline_comparison\n./robot_trajectory_planning\n./test_with_min_jerk_3d\n./test_with_min_snap_3d\n```\nSplineTrajectory also outperforms [large_scale_traj_optimizer](https://github.com/ZJU-FAST-Lab/large_scale_traj_optimizer) in both trajectory generation and evaluation. To see the test results, run ./test_with_min_jerk_3d.\n\nFor a complete motion planning toolkit that integrates this library, check out [ST-opt-tools](https://github.com/MarineRock10/ST-opt-tools). It's a motion planning toolkit featuring ESDF mapping, A* path planning, and L-BFGS trajectory optimization integrated with SplineTrajectory library.\n\n## Comparison with MINCO\nThis library is mathematically equivalent to MINCO but implemented with more efficient algorithms.\n| Feature         | SplineTrajectory                             | MINCO                      |\n| --------------- | -------------------------------------------- | -------------------------- |\n| **Algorithm**   | **Thomas Algorithm** (Block Tridiagonal)     | LU Decomposition           |\n| **Performance** | **Faster** Generation & Evaluation           | Baseline                   |\n| **Core Theory** | Classical Spline Theory (Minimum Norm)       | Minimum Control Effort     |\n| **Flexibility** | Fully templated for **arbitrary dimensions** | Fixed to 3D |\n| **Evaluation**  | Optimized segmented batch evaluation with coefficient caching        | Standard evaluation        |\n\n## Spline Types & Energy Minimization\nThe library provides splines that are optimal solutions, minimizing the integral of the squared norm of a derivative, which has a direct physical meaning.\n\n| Spline Type             | MINCO Equivalent     | \n| ----------------------- | -------------------- | \n| **Cubic** (3rd order)   | Minimum Acceleration | \n| **Quintic** (5th order) | Minimum Jerk         | \n| **Septic** (7th order)  | Minimum Snap         |\n\n---\n## Usage Example\nHere's a concise example of how to create and evaluate a 3D trajectory.\n```cpp\n#include \"SplineTrajectory.hpp\"\n#include <iostream>\n#include <vector>\n#include <Eigen/Dense>\n#include <iomanip>\n\nint main() {\n    using namespace SplineTrajectory;\n\n    std::cout << \"=== SplineTrajectory Complete Interface Usage Example ===\" << std::endl;\n\n    // 1. Define 3D waypoints and boundary conditions\n    SplineVector<SplinePoint3d> waypoints = {\n        {0.0, 0.0, 0.0}, {1.0, 2.0, 1.0}, {3.0, 1.0, 2.0}, {4.0, 3.0, 0.5}, {5.0, 0.5, 1.5}\n    };\n    \n    // Define detailed boundary conditions (including velocity, acceleration, jerk)\n    BoundaryConditions<3> boundary; //default velocity、acceleration and jerk are zero\n    // or BoundaryConditions<3> boundary(SplinePoint3d(0.1, 0.0, 0.0),SplinePoint3d(0.2, 0.0, 0.1)); default acceleration and jerk are zero\n    boundary.start_velocity = SplinePoint3d(0.1, 0.0, 0.0); // cubic splines only use velocity \n    boundary.end_velocity = SplinePoint3d(0.2, 0.0, 0.1);\n    boundary.start_acceleration = SplinePoint3d(0.0, 0.0, 0.0);// quintic use velocity and acceleration\n    boundary.end_acceleration = SplinePoint3d(0.0, 0.0, 0.0);\n    boundary.start_jerk = SplinePoint3d(0.0, 0.0, 0.0); // septic use velocity, acceleration and jerk\n    boundary.end_jerk = SplinePoint3d(0.0, 0.0, 0.0);\n\n    std::cout << \"\\n--- Construction Methods Comparison ---\" << std:",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:11.566614"
  },
  {
    "basic_info": {
      "name": "SetupHijack",
      "full_name": "hackerhouse-opensource/SetupHijack",
      "owner": "hackerhouse-opensource",
      "description": "SetupHijack is a security research tool that exploits race conditions and insecure file handling in Windows applications installer and update processes.",
      "url": "https://github.com/hackerhouse-opensource/SetupHijack",
      "clone_url": "https://github.com/hackerhouse-opensource/SetupHijack.git",
      "ssh_url": "git@github.com:hackerhouse-opensource/SetupHijack.git",
      "homepage": null,
      "created_at": "2025-09-24T20:45:10Z",
      "updated_at": "2025-09-29T01:36:34Z",
      "pushed_at": "2025-09-26T01:00:05Z"
    },
    "stats": {
      "stars": 127,
      "forks": 18,
      "watchers": 127,
      "open_issues": 0,
      "size": 740
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 16195,
        "Makefile": 2374,
        "Batchfile": 1635
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# SetupHijack\n\n---\n\n## Overview\n\n**SetupHijack** is a security research tool that exploits race conditions and insecure file handling in Windows installer and update processes. It targets scenarios where privileged installers or updaters drop files in `%TEMP%` or other world-writable locations, allowing an attacker to replace these files before they are executed with elevated privileges.\n\n- Does **not** require elevated permissions to run.\n- Does **not** use file system notifications (polls for changes instead).\n- Exploits weaknesses in Authenticode code signing and installer trust models.\n- Can infect `.exe`, `.msi`, and batch files (e.g., `sysinfo`, `netstat`, `ipconfig`).\n- Designed for red team, penetration testing, and security research use only.\n\nThe intended use of this tool is to run in the background on a compromised user account with privileges, in order to elevate another process by hijacking installer/updater file drops. \n\nThe chart below shows real-world example use cases of this exploit in multiple scenarios that can be used for UAC bypass. UAC bypasses are considered a security boundary when running under Adminless and are a common \"attacker requirement\" for disabling security controls. Exploitation of privileged Administrator operations provides generic exploit accessibility for malicious code to side-load or escalate process privileges. This tool can be used to identify additional applications which are exposed to the same types of risk, an attacker can wait for execution of these processes as a means to gain elevated rights without disrupting user behaviors. \n\n![SetupHijack Vulnerability Discovery Chart](Chart.png)\n\n## How It Works\n\n1. **SetupHijack** continuously scans `%TEMP%` (and subdirectories) for new or modified installer files.\n2. When a target file is detected, it is replaced with a user-supplied payload (EXE, MSI, or BAT), optionally preserving the original as a `.bak` file.\n3. If the privileged process executes the replaced file before integrity checks, the payload runs with elevated rights (e.g., SYSTEM or Administrator).\n4. The tool logs all actions and maintains a skiplist to avoid re-infecting the same files.\n\n## Code Signing Note\n\nThis project uses a hacked code-signing process with [SignToolEx.exe and SignToolExHook.dll](https://github.com/hackerhouse-opensource/SignToolEx) to sign payloads and installers. Using valid code-signing certificates and an Authenticode timestamp will increase your success rate when bypassing installer and OS trust checks.\n\n---\n\n## Usage\n\n### Build\n\n```sh\nnmake PAYLOAD=c:\\Path\\to\\your\\payload.exe\n```\n\n### Run (Options)\n\n```sh\nSetupHijack.exe                  # Scan %TEMP%, %APPDATA%, and %USERPROFILE%\\Downloads (default)\nSetupHijack.exe -notemp          # Disable scanning %TEMP%\nSetupHijack.exe -noappdata       # Disable scanning %APPDATA%\nSetupHijack.exe -nodownloads     # Disable scanning %USERPROFILE%\\Downloads\nSetupHijack.exe clean            # Clean mode (restores .bak backups in all enabled locations)\nSetupHijack.exe verbose          # Verbose mode (log all actions)\nSetupHijack.exe <payload.exe>    # Use specified payload for .exe (unless argument is a recognized option)\n```\n\n- Run **SetupHijack.exe** before or during a privileged install/update process.\n- By default, the tool scans all common drop locations: %TEMP%, %APPDATA%, and %USERPROFILE%\\Downloads.\n- You can disable any location with the `-notemp`, `-noappdata`, or `-nodownloads` flags.\n- The `clean` flag restores backups in all enabled locations. The `verbose` flag logs all actions.\n- For remote escalation, use with `shadow.exe` or similar tools on Terminal Services.\n\n## Example Attack Flow\n\n1. Build your payload and SetupHijack:\n   ```sh\n   nmake PAYLOAD=c:\\Users\\YourUser\\Desktop\\payload.exe\n   ```\n2. Start SetupHijack:\n   ```sh\n   SetupHijack.exe\n   ```\n3. Launch the target installer or update process as Administrator.\n4. If the installer drops files in `%TEMP%` and executes them with elevated rights, your payload will be substituted and run.\n\n## Example Output\n\nBelow is a real example of building and running SetupHijack, including code signing and infection output:\n\n```\nC:\\Users\\Fantastic\\Desktop\\Sayuri\\InfectElevatedSetups>nmake PAYLOAD=\"C:\\USers\\Fantastic\\Desktop\\DEMO\\Renge_x64.exe\"\n\nMicrosoft (R) Program Maintenance Utility Version 14.29.30159.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n        powershell -Command \"(Get-Content SetupHijack.cpp) -replace '#define PAYLOAD_PATH L\\\".*\\\"', '#define PAYLOAD_PATH L\\\"%ESCAPED_PAYLOAD%\\\"' | Set-Content SetupHijack.cpp\"\n        cl /nologo /W4 /EHsc /DUNICODE /D_UNICODE /MT /O2 /c SetupHijack.cpp\nSetupHijack.cpp\nSetupHijack.cpp(318): warning C4189: 'hr2': local variable is initialized but not referenced\n        taskkill /f /im SetupHijack.exe 2>nul\n        powershell -Command \"Start-Sleep -Milliseconds 500\"\n        link /nologo /SUBSYSTEM:CONSOLE /ENTRY:wmainCRTStartup /NODEFAULTLIB:MSVCRT /NODEFAULTLIB:MSVCPRT /OUT:Se",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:12.905034"
  },
  {
    "basic_info": {
      "name": "Blitzkrieg-2",
      "full_name": "nival/Blitzkrieg-2",
      "owner": "nival",
      "description": "Blitzkrieg 2 is a 2005 real-time tactics video game based on the events of World War II and is the second title in the Blitzkrieg series. The game was developed on an in-house game engine by the company Nival, primarily written in C and C++.",
      "url": "https://github.com/nival/Blitzkrieg-2",
      "clone_url": "https://github.com/nival/Blitzkrieg-2.git",
      "ssh_url": "git@github.com:nival/Blitzkrieg-2.git",
      "homepage": "https://en.wikipedia.org/wiki/Blitzkrieg_2",
      "created_at": "2025-09-10T18:02:34Z",
      "updated_at": "2025-09-28T21:35:40Z",
      "pushed_at": "2025-09-20T07:39:06Z"
    },
    "stats": {
      "stars": 122,
      "forks": 17,
      "watchers": 122,
      "open_issues": 0,
      "size": 3301214
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 22870497,
        "HTML": 17910918,
        "Lua": 2185135,
        "C": 916580,
        "CSS": 202661,
        "JavaScript": 55124,
        "C#": 38551,
        "Rich Text Format": 34255,
        "TSQL": 22672,
        "Yacc": 17749,
        "Batchfile": 15507,
        "Lex": 3986,
        "HLSL": 3605,
        "XQuery": 2435,
        "VBScript": 701,
        "sed": 508,
        "Python": 447
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "[English](README.md)        [Русский](README_Russian.md)        [中文](README_Chinese.md)        [हिन्दी](README_Hindi.md)        [Español](README_Spanish.md)        [Français](README_French.md)        [Deutsch](README_German.md)        [Português](README_Portuguese.md)        [日本語](README_Japanese.md)        [Bahasa Indonesia](README_Indonesian.md)\n\n[![Blitzkrieg II Trailer](Blitzkrieg_2.png)](https://www.youtube.com/watch?v=Cw8rA2hvDGg)\n\nThe computer game [Blitzkrieg 2](https://en.wikipedia.org/wiki/Blitzkrieg_2) is the second installment of the legendary series of real-time strategy war games, developed by [Nival Interactive](http://nival.com/) and released in 2005.\n\nThe game is still available on [Steam](https://store.steampowered.com/app/313500/Blitzkrieg_2_Anthology) and [GOG.com](https://www.gog.com/en/game/blitzkrieg_2_anthology).\n\nIn 2025, the game's source code was released under a [special license](LICENSE.md) that prohibits commercial use but is completely open for the game's community, education and research.\nPlease review the terms of the [license agreement](LICENSE.md) carefully before using it.\n\n## Tech stack\n\n- **Game engine**: Custom 3D engine, mostly written in C++\n- **Scripting language**: Lua\n- **Animation**: Granny Animation (RAD Game Tools) ⚠️ *Commercial license - not included*\n- **Video**: Bink Video Technology ⚠️ *Commercial license - not included*\n- **Audio**: FMOD sound system ⚠️ *Commercial license - not included*\n\n## What is in this repository\n\n- `Complete` — game data and resources\n- `Design` — design documents and art resources  \n- `Soft` — source code and development tools\n- `Sound` — game sound resources\n- `Tools` — development and build tools\n- `Localizations` — localization files\n- `Versions` — different build configurations and testing environments\n- `Versions/Temporary/Engine/Sources` — complete game engine source code\n\n---\n\n# Running the game\n\n## Basic launch\n1. Navigate to the `Complete/bin/` directory\n2. Run the game executable (if available)\n\n---\n\n# Map editor and development tools\n\n## Map editor\n- **Location**: `Complete/Editor/`\n- **Documentation**: `Design/Manuals/MapEditorManual/`\n- **Manual**: `Design/Manuals/MapEditorManual/Final/`\n- **FAQ**: `Design/Manuals/MapEditorManual/FAQ/`\n\n## Development tools\n- **Maya plugins**: `Tools/MayaScripts/`\n- **Texture converters**: `Tools/TexConv.exe`, `Tools/DxTex.exe`\n- **Font generator**: `Tools/FontGen.exe`\n- **Granny tools**: `Tools/Granny/`\n\n---\n\n\n# Building the project\n\n## Build requirements\n- Microsoft Visual Studio (2003)\n- DirectX SDK\n- Additional dependencies are specified in the documentation\n\n---\n\n## License Information\n\nThis project is released under a **special non-commercial license** from NIVAL INTERNATIONAL LTD.\n\n### ✅ What's included and open source:\n- **Game engine source code** - Custom license from NIVAL INTERNATIONAL LTD (non-commercial use only)\n- **zlib compression library** - zlib License (permissive, commercial use allowed)\n- **Game scripts, assets, and data** - Custom license from NIVAL INTERNATIONAL LTD (non-commercial use only)\n\n### ⚠️ Additional tools not included in source code:\n- **FMOD Audio System**\n- **Bink Video Technology**\n- **Granny3D Animation System**\n- **Stingray Studio UI Components**\n- **MySQL Database**\n- **S3TC Texture Compression**\n\n### 📋 Third-party licenses:\n- **zlib** (v1.1.3) - Copyright (C) 1995-1998 Jean-loup Gailly and Mark Adler - zlib License\n\nPlease review the complete [license agreement](LICENSE.md) before using this code.\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:14.276476"
  },
  {
    "basic_info": {
      "name": "MarkerPatch",
      "full_name": "Wemino/MarkerPatch",
      "owner": "Wemino",
      "description": " A patch that fixes various issues and limitations in the PC port of Dead Space 2",
      "url": "https://github.com/Wemino/MarkerPatch",
      "clone_url": "https://github.com/Wemino/MarkerPatch.git",
      "ssh_url": "git@github.com:Wemino/MarkerPatch.git",
      "homepage": "",
      "created_at": "2025-09-20T07:42:56Z",
      "updated_at": "2025-09-29T01:15:26Z",
      "pushed_at": "2025-09-26T13:35:03Z"
    },
    "stats": {
      "stars": 110,
      "forks": 1,
      "watchers": 110,
      "open_issues": 4,
      "size": 18714
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 79110
      },
      "license": "GNU General Public License v2.0",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\">\n  <img src=\"assets/MarkerPatch_Logo.png\" style=\"max-width:70%\">\n</p>\n\n<p align=\"center\">\nA patch that fixes various issues and limitations in the PC port of Dead Space 2.\n</p>\n\n## How to Install\n\n> [!NOTE]  \n> Compatible with all versions of Dead Space 2 (Steam, EA App).\n>\n> **Download**: [MarkerPatch.zip](https://github.com/Wemino/MarkerPatch/releases/latest/download/MarkerPatch.zip)  \n> Extract the contents of the zip file into the game's folder, in the same directory as the `deadspace2.exe` file.\n\n### Steam Deck/Linux Specific Instructions (Windows users can skip this)\n\n> [!WARNING]\n> To launch the game on Steam Deck or Linux, open the game's properties in Steam and include `WINEDLLOVERRIDES=\"dinput8=n,b\" %command%` in the launch options.\n>\n> **Note**: DXVK limits the framerate to 60 FPS by default. To increase this limit, add the following to your launch options (example for 120 FPS):  \n> `DXVK_FRAME_RATE=120 WINEDLLOVERRIDES=\"dinput8=n,b\" %command%`\n\n# Features\n\n## Havok Physics Fix\n\nStabilizes physics behavior at high framerates to eliminate the annoying flying corpses and limbs. While physics issues begin above 30 FPS, they become noticeably problematic after 100 FPS, causing dead bodies and severed limbs to launch erratically across rooms.\n\n## High-Core CPU Fix\n\nPrevents the game from crashing on systems with more than 10 CPU cores. The game's CPU detection code collects information about each core into fixed-size arrays, but these arrays weren't sized to handle more than 10 cores. When more cores are detected, the code overflows these arrays, corrupting memory and causing crashes later during execution. The patch stops the CPU detection loop early to prevent this overflow.\n\n## VSync Refresh Rate Fix\n\nCorrects the VSync implementation to use the refresh rate selected in the game's settings instead of locking to 30 FPS. The original implementation ignores your chosen refresh rate and forces 30 FPS when VSync is enabled.\n\n<div align=\"center\">\n  <table>\n    <tr>\n      <td width=\"50%\"><img style=\"width:100%\" src=\"assets/vsyncfix_off.png\"></td>\n      <td width=\"50%\"><img style=\"width:100%\" src=\"assets/vsyncfix_on.png\"></td>\n    </tr>\n    <tr>\n      <td align=\"center\">Vanilla (Locked to 30 FPS)</td>\n      <td align=\"center\">MarkerPatch (Uses Selected Rate)</td>\n    </tr>\n  </table>\n</div>\n\n## Save System Fixes\n\n### Difficulty Reward Tracking\nFixes the tracking of Zealot and Hardcore difficulty completions to properly unlock rewards. \n\n> **Important**: This fix requires starting a new save with the patch installed. You must keep the patch installed for the entire playthrough for the fix to remain effective.\n\n### Suit ID Conflicts\nResolves item database conflicts where certain DLC suits incorrectly share IDs with other suits:\n- **Zealot Suit** was conflicting with the Security Suit.\n- **Hacker Suit** was conflicting with the Elite Advanced Suit.\n\nThese conflicts would cause one suit to overwrite the other in your inventory, making purchased items disappear.\n\n### String Buffer Overflow Prevention\nPrevents crashes that can rarely occur when the game enumerates save files. This happens in two scenarios: when checking for Dead Space 1 saves to grant the DLC bonus for owning the first game, and when listing your Dead Space 2 save files in the load menu. Though these crashes are uncommon, they can be frustrating when they do occur.\n\n## Subtitle Font Scaling\n\nScales subtitle text appropriately for high resolutions. The game was designed with console limitations in mind and intentionally prevents subtitles from scaling beyond 720p resolution, making them tinier at 1080p and above. This fix removes that limitation and allows proper scaling.\n\nFor those who prefer different subtitle sizes, `FontScalingFactor` in `MarkerPatch.ini` allows fine-tuning the subtitle text size to personal preference.\n\n<div align=\"center\">\n  <table>\n    <tr>\n      <td width=\"50%\"><img style=\"width:100%\" src=\"assets/scaling_off.png\"></td>\n      <td width=\"50%\"><img style=\"width:100%\" src=\"assets/scaling_on.png\"></td>\n    </tr>\n    <tr>\n      <td align=\"center\">4K Vanilla</td>\n      <td align=\"center\">4K MarkerPatch</td>\n    </tr>\n  </table>\n</div>\n\n## Raw Mouse Input\n\nImplements proper raw mouse input to fix sensitivity issues. This works similarly to the existing \"Dead Space 2 Mouse Fix\" mod with several improvements:\n- Added support for zero-gravity areas. (the original mouse fix didn't work properly in zero-G)\n- Sensitivity scaling now matches the in-game sensitivity settings more accurately.\n- Does not interfere with controller inputs when switching between mouse and gamepad.\n\nThe fix decouples mouse sensitivity from the game's framerate, providing consistent aiming regardless of FPS.\n\n## Input Device Filtering\n\nBlocks all DirectInput devices except mouse and keyboard to prevent unwanted camera spinning from devices like racing wheels, flight sticks, and other peripherals. This also removes a slow XInput compatibility c",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:15.599916"
  },
  {
    "basic_info": {
      "name": "COMouflage",
      "full_name": "zero2504/COMouflage",
      "owner": "zero2504",
      "description": "COM-based DLL Surrogate Injection",
      "url": "https://github.com/zero2504/COMouflage",
      "clone_url": "https://github.com/zero2504/COMouflage.git",
      "ssh_url": "git@github.com:zero2504/COMouflage.git",
      "homepage": "",
      "created_at": "2025-09-06T20:13:49Z",
      "updated_at": "2025-09-27T18:33:19Z",
      "pushed_at": "2025-09-06T21:06:00Z"
    },
    "stats": {
      "stars": 108,
      "forks": 10,
      "watchers": 108,
      "open_issues": 0,
      "size": 14
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 3712
      },
      "license": "MIT License",
      "topics": [
        "com",
        "dll-injection",
        "dll-sideloading",
        "malware",
        "windows"
      ]
    },
    "content": {
      "readme": "# COMouflage\n\n\n# COM-based DLL Surrogate Injection\n\n\n## Abstract\n\nThis paper analyzes a sophisticated injection technique that leverages the Component Object Model (COM) and DLL Surrogate processes for stealthy code execution. Unlike traditional COM hijacking methods focused primarily on persistence, this technique exploits the surrogate hosting capabilities to achieve process injection with several operational advantages, including parent process masquerading and reduced detection footprint.\n\n\n## 1. Introduction\n\nComponent Object Model (COM) hijacking has been extensively documented as a persistence mechanism in the MITRE ATT&CK framework. This paper examines the technical mechanics of COM-based DLL Surrogate injection.\n\n\n## 2. Technical Background\n\n### 2.1 What is COM?\n\nThe Component Object Model (COM) is a Microsoft technology that enables software components to communicate regardless of the programming language used to create them. COM objects are identified by globally unique identifiers (GUIDs) called Class Identifiers (CLSIDs) and can be instantiated through various mechanisms including:\n\n- **In-process servers** (DLLs loaded into the calling process)\n- **Out-of-process servers** (Separate executable processes)\n- **Surrogate processes** (System-provided hosts for DLL-based COM objects)\n\n\n### 2.2 Understanding dllhost.exe and DLL Surrogates\n\n`dllhost.exe` is a legitimate Windows system process that serves as a surrogate host for COM objects implemented as DLLs. This mechanism, known as “DLL Surrogate,” allows DLL-based COM objects to run in a separate process space, providing:\n\n- **Process isolation**: Protects the calling application from DLL crashes\n- **Security boundaries**: Enables different security contexts\n- **Stability**: Prevents unstable DLLs from affecting the parent process\n\nThe surrogate is configured through registry entries, specifically the `DllSurrogate` value under the AppID registry key.\n\n\n## 3. Attack Technique Analysis\n\n### 3.1 Registry Manipulation for HKCU Hijacking\n\nThe technique operates by creating specific registry entries in `HKEY_CURRENT_USER` rather than `HKEY_LOCAL_MACHINE`, which provides several advantages:\n\n1. **Reduced privileges required**: No administrator rights needed\n1. **User-specific targeting**: Affects only the current user context\n1. **Stealth**: Less likely to be monitored compared to HKLM modifications\n\n#### Registry Structure Created:\n\n```\nHKCU\\Software\\Classes\\AppID\\{CLSID}\n├── (Default) = \"MyStealthObject\"\n└── DllSurrogate = \"\"\n\nHKCU\\Software\\Classes\\CLSID\\{CLSID}\n├── (Default) = \"MyStealthObject\"\n├── AppID = \"{CLSID}\"\n└── InprocServer32\\\n    ├── (Default) = \"C:\\Path\\To\\Malicious.dll\"\n    └── ThreadingModel = \"Apartment\"\n```\n\n\n### 3.2 Process Tree Masquerading\n\nWhen the malicious COM object is instantiated with `CLSCTX_LOCAL_SERVER`, Windows automatically launches `dllhost.exe` as a surrogate process. This creates a deceptive process tree:\n\n```\nsvchost.exe (COM+ System Application)\n└── dllhost.exe /Processid:{CLSID}\n    └── [Malicious DLL loaded in-process]\n```\n\n**Key Advantages:**\n\n- The parent process appears as `svchost.exe`, a highly trusted system process\n- The initiating malicious process is not the direct parent of the injection target\n- Standard parent-child process monitoring may miss the true attack chain\n\n## 4. Detailed Code Analysis\n\n### 4.1 CLSID Definition and Constants\n\n```cpp\nstatic const wchar_t* CLSID_STR = L\"{F00DBABA-2504-2025-2016-666699996666}\";\n```\n\nThe technique begins with a custom CLSID (Class Identifier), a 128-bit GUID that uniquely identifies the COM object. This particular CLSID is crafted to appear distinctive while avoiding conflicts with legitimate system components. The format follows the standard GUID structure: `{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}`.\n\n### 4.2 Registry Manipulation Function\n\n```cpp\nbool SetRegStr(HKEY root, const std::wstring& key, \n               const std::wstring& name, const std::wstring& val) {\n    HKEY h;\n    if (RegCreateKeyExW(root, key.c_str(), 0, nullptr,\n        REG_OPTION_NON_VOLATILE, KEY_WRITE, nullptr, &h, nullptr) != ERROR_SUCCESS)\n        return false;\n    \n    if (RegSetValueExW(h,\n        name.empty() ? nullptr : name.c_str(),\n        0, REG_SZ,\n        (const BYTE*)val.c_str(),\n        DWORD((val.size() + 1) * sizeof(wchar_t))) != ERROR_SUCCESS)\n    {\n        RegCloseKey(h);\n        return false;\n    }\n    RegCloseKey(h);\n    return true;\n}\n```\n\n**Technical Breakdown:**\n\n1. **`RegCreateKeyExW`**: Creates or opens the specified registry key with `KEY_WRITE` permissions\n1. **Error Handling**: Each registry operation includes proper error checking\n1. **`REG_OPTION_NON_VOLATILE`**: Ensures the key persists across reboots -> Could be changed with **`REG_OPTION_VOLATILE`** (Stored in memory and is not preserved when the corresponding registry hive is unloaded)\n\n### 4.3 AppID Registry Configuration\n\n```cpp\nstd::wstring appidKey = LR\"(Software\\Classes\\AppID\\)\" + std::wstring(CLSID_STR);\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:16.939149"
  },
  {
    "basic_info": {
      "name": "SmallVmp",
      "full_name": "NiTianErXing666/SmallVmp",
      "owner": "NiTianErXing666",
      "description": "简单的基于llvm实现vmp保护",
      "url": "https://github.com/NiTianErXing666/SmallVmp",
      "clone_url": "https://github.com/NiTianErXing666/SmallVmp.git",
      "ssh_url": "git@github.com:NiTianErXing666/SmallVmp.git",
      "homepage": null,
      "created_at": "2025-09-11T05:51:29Z",
      "updated_at": "2025-09-28T04:50:53Z",
      "pushed_at": "2025-09-11T06:50:25Z"
    },
    "stats": {
      "stars": 107,
      "forks": 39,
      "watchers": 107,
      "open_issues": 1,
      "size": 179745
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 368793292,
        "LLVM": 308849353,
        "C": 116806797,
        "Assembly": 82058921,
        "Python": 9857632,
        "MLIR": 8283564,
        "Objective-C": 4281255,
        "Fortran": 4032931,
        "CMake": 2825046,
        "HTML": 1848088,
        "Objective-C++": 1079422,
        "Cuda": 690390,
        "FIRRTL": 656504,
        "Starlark": 577041,
        "OCaml": 367047,
        "Perl": 360953,
        "Shell": 256227,
        "HIP": 180701,
        "Scilab": 160404,
        "JavaScript": 152936,
        "Go": 146596,
        "Awk": 127345,
        "Makefile": 93087,
        "CSS": 69384,
        "Roff": 61204,
        "Emacs Lisp": 57495,
        "Julia": 49676,
        "Batchfile": 43195,
        "NASL": 31808,
        "HLSL": 31627,
        "Vim Script": 28088,
        "C#": 27909,
        "TypeScript": 24542,
        "Pawn": 17068,
        "Dockerfile": 16648,
        "Lua": 11939,
        "Cool": 9533,
        "GDB": 8568,
        "M": 8541,
        "MATLAB": 4803,
        "SWIG": 3809,
        "TeX": 2141,
        "POV-Ray SDL": 1631,
        "AppleScript": 1429,
        "Mathematica": 1136,
        "RenderScript": 749,
        "Limbo": 303,
        "Swift": 271,
        "Rust": 200,
        "Linker Script": 65,
        "PHP": 52,
        "RPC": 28
      },
      "license": "GNU Affero General Public License v3.0",
      "topics": []
    },
    "content": {
      "readme": "# SmallVMP: 一个基于 LLVM 的教学性 VMP 实现\n\n**“不造轮子，何以知轮之精髓？” — To truly understand the wheel, you must build one.**\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n---\n\n## 目录\n\n- [关于项目](#关于项目)\n- [核心特性](#核心特性)\n- [工作原理](#工作原理)\n- [环境准备](#环境准备)\n- [如何使用](#如何使用)\n- [效果展示](#效果展示)\n- [局限性](#局限性)\n- [未来展望](#未来展望)\n- [致谢](#致谢)\n\n## 关于项目\n\n`SmallVMP` 是一个从零开始构建的、用于学习和研究的虚拟机保护（Virtual Machine Protection）项目。它并非一个生产级的安全解决方案，而是我个人在探索 VMP 技术原理过程中的产物。\n\n项目的核心目标是：\n1.  亲手实现一个微型虚拟机（VM），包括其指令集、解释器和字节码格式。\n2.  利用 **LLVM Pass** 技术，在编译期间自动将被保护函数的 LLVM IR 转换为我们自定义的字节码。\n3.  解决在 VMP 中处理外部函数调用和全局变量访问等关键问题。\n\n本项目深度集成了强大的 **Hikari Obfuscator** 框架，不仅实现了基础的 VMP 功能，还能利用 Hikari 对 VMP 的核心——解释器本身——进行混淆，从而极大提升了分析难度。\n\n## 核心特性\n\n- **基于 LLVM Pass**: 在编译时自动完成虚拟化，对源代码无侵入。\n- **自定义指令集 (ISA)**: 包含一套精简的 指令集，用于算术、逻辑、访存和控制流操作。\n- **Thunk 机制**: 巧妙地通过生成原生“桥接函数 (Thunk)”来处理对外部函数和全局变量的引用，避免了手动模拟链接器的复杂性。\n- **与 Hikari 深度集成**: 可以轻松地将 Hikari 的多种混淆策略（如 BCF, CFF, SPL, SUB）应用于 VMP 解释器和项目中的其他原生代码。\n- **跨平台**: 作为 LLVM 的一部分，理论上支持所有 LLVM/Clang 支持的目标平台。\n\n## 工作原理\n\n`SmallVMP` 的保护流程可以概括为以下几个步骤：\n\n1.  **标记**: 开发者使用 `IRVM_SECTION` 宏标记需要保护的 C/C++ 函数。\n2.  **IR 转换 (LLVM Pass)**:\n    - 在编译过程中，`SmallVMP` 的 Pass 会识别出被标记的函数。\n    - 它遍历函数的 LLVM IR，并将其逐条翻译成我们自定义的字节码。\n    - 所有对外部函数或全局变量的引用都会被记录下来，并为之生成一个原生代码的**桥接函数 (Thunk)**。字节码中将只保留对这个 Thunk 的调用 ID。\n3.  **函数替换**:\n    - 原始函数体被清空。\n    - 替换为一个**跳板 (Stub)** 函数。这个 Stub 的唯一作用就是调用 VM 解释器 (`vm_exec`)，并将字节码、寄存器上下文等信息传递给它。\n4.  **运行时执行**:\n    - 当程序调用被保护的函数时，实际上是在调用这个 Stub。\n    - Stub 启动 VM 解释器，解释器开始逐条执行字节码，模拟原始函数的逻辑。\n    - 当遇到需要调用外部函数（如 `printf`）的指令时，解释器会通过 ID 查找到对应的 Thunk 函数并执行它。\n\n## 环境准备\n\n`SmallVMP` 是作为 LLVM 的一个 Pass 实现的，并依赖于特定的 Hikari 混淆框架。因此，您需要先编译和配置好集成了 `SmallVMP` 的 LLVM/Clang 工具链。\n\n1.  **获取工具链**:\n    - 克隆或下载集成了 `SmallVMP` 的 LLVM/Hikari 源码。\n    - `[(https://github.com/NiTianErXing666/SmallVmp)]`\n2.  **编译 LLVM/Clang**:\n    - 根据该仓库的说明文档编译工具链。\n3.  **配置环境变量**:\n    - 将编译好的 `bin` 目录（包含 `clang`, `clang++` 等）添加到您的系统 `PATH` 中，以确保后续命令能调用这个定制版的编译器。\n\n## 如何使用\n\n使用 `SmallVMP` 非常简单：\n\n1.  **引入头文件**: 在您的 C/C++ 代码中，包含 `VMP.h`。\n\n    ```c\n    #include \"VMP.h\"\n    ```\n\n2.  **标记目标函数**: 使用 `IRVM_SECTION` 宏来标记您希望进行 VMP 保护的函数。\n\n    ```c\n    // 示例代码，包含全局变量和外部函数调用\n    int gArr[10] = {0};\n    const char* gMsg = \"Hello, VMP!\";\n    \n    IRVM_SECTION\n    int test_calls(int a, int b) {\n        puts(\"call puts(const)\");\n        int *p = &gArr[4];\n        *p = a + b;\n        printf(\"gArr[4]=%d, gMsg=%s\n    \", gArr[4], gMsg);\n        return a + b;\n    }\n    ```\n\n3.  **编译代码**: 使用定制的 `clang` 进行编译。`SmallVMP` 默认启用，无需额外参数。\n\n    ```bash\n    /path/to/your/custom/clang test.c -o app\n    ```\n\n    编译时，您会看到类似如下的日志，表明 `SmallVMP` 已成功处理目标函数：\n    ```\n    [irvm] emit code global: test_calls_code (266 bytes)\n    [irvm]   + bytes initialized\n    [irvm]   + rewritten to vm_exec stub: test_calls\n    ```\n\n4.  **(可选) 叠加 Hikari 混淆**: 您可以附加 Hikari 的 `-mllvm` 参数来混淆 VM 解释器本身，或项目中的其他原生代码，以达到双重保护。\n\n    ```bash\n    # 开启伪控制流 (Bogus Control Flow)\n    clang test.c -o app -mllvm -enable-bcfobf\n    \n    # 开启控制流平坦化 (Control Flow Flattening)\n    clang test.c -o app -mllvm -enable-cffobf\n    \n    # 开启所有混淆\n    clang test.c -o app -mllvm -enable-allobf\n    ```\n\n## 效果展示\n\n 可以去看雪论坛看效果：https://bbs.kanxue.com/thread-288435-1.html\n\n\n##  局限性\nSmallVMP 目前仍是一个实验性项目，存在一些局限：\n\n指令支持不完整: 对某些复杂的 LLVM IR 指令（如 select, phi 的复杂用法等）尚未支持。为保证编译稳定性，遇到不支持的指令时，Pass 会自动放弃对该函数的虚拟化。\n性能开销: 和所有 VMP方案一样，解释执行会带来显著的性能下降。不适合用于性能敏感的热点函数。\n安全性: 字节码目前是明文存储的，容易被 Dump 和分析。\n## 未来展望\n字节码加密: 对生成的字节码进行加密，在解释器执行前动态解密，对抗静态分析。\n动态分发器 (Dynamic Dispatcher): 使操作码 (Opcode) 与处理函数 (Handler) 的映射关系在运行时动态生成，对抗基于特征码的分析。\n嵌套 VM (Nested VM): 实现二级 VM，用一个 VM 来保护另一个 VM 的解释器，形成层层嵌套，将分析难度提升到新的高度。\n## 致谢\n本项目深受 Hikari Obfuscator 项目的启发，并直接基于其框架进行构建。感谢 Hikari 团队的杰出工作。https://github.com/HikariObfuscator/Hikari\n感谢 LLVM 社区提供的强大而灵活的编译器基础设施。\n感谢 Xvmp 的思路！感谢 Xvmp 团队的杰出工作 https://github.com/GANGE666/xVMP\n## 贡献\n本项目旨在学习和交流，代码尚不完美，欢迎任何形式的贡献！如果您有任何建议、发现 Bug 或希望添加新功能，请随时提交 Pull Request 或创建 Issue。\n\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:18.289140"
  },
  {
    "basic_info": {
      "name": "ClutteredEnvironment",
      "full_name": "IntelligentControlSystems/ClutteredEnvironment",
      "owner": "IntelligentControlSystems",
      "description": "This is the accompaning code of the paper titled \"A novel MPC framework for efficient navigation of mobile robots in cluttered environments\"",
      "url": "https://github.com/IntelligentControlSystems/ClutteredEnvironment",
      "clone_url": "https://github.com/IntelligentControlSystems/ClutteredEnvironment.git",
      "ssh_url": "git@github.com:IntelligentControlSystems/ClutteredEnvironment.git",
      "homepage": null,
      "created_at": "2025-09-16T13:49:36Z",
      "updated_at": "2025-09-29T01:25:59Z",
      "pushed_at": "2025-09-22T09:07:57Z"
    },
    "stats": {
      "stars": 100,
      "forks": 8,
      "watchers": 100,
      "open_issues": 0,
      "size": 7741
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 360618,
        "Python": 76060,
        "CMake": 20867,
        "Shell": 13529,
        "Dockerfile": 3821
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "<div align=\"center\">\n  <h1> A novel MPC framework for efficient navigation of mobile robots in cluttered environments </h1>\n\n\n  <a href=\"https://opensource.org/licenses/MIT\">\n    <img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" alt=\"License: MIT\">\n  </a>\n\n</div>\n\n---\nThis is the accompaning code of the paper titled \"A novel MPC framework for efficient navigation of mobile robots in cluttered environments\". \n[Read preprint on arXiv](https://arxiv.org/abs/2509.15917)\n\n\n## Demo\n\n![](./media/cluttered_mpc_sim.gif)\n\n## Experiments\n\n🎥 [Click to watch the experiment video](https://youtu.be/Hn_hpAmGgq0)\n\n[![](./media/arc_screenshot_anoted.png)](https://youtu.be/Hn_hpAmGgq0)\n\n\n## Prerequisites\n\nThis software is based on the Control and Robotics Software ([CRS](https://gitlab.ethz.ch/ics/crs)), an advanced control software framework to support simulations and experiments in the fields of control and robotics. CRS is built on top of the Robot Operating System (ROS) and primarily written in C++ and Python.\nThe CRS environment uses [Docker](https://www.docker.com) to allow cross-platform compatibility. The only requirement you have is to run an up-to-date operating system and up to 16 GB of free storage (some of it is only required during the setup). Below you find the install instructions for Ubuntu, macOS and Windows.\n\n## Setting up the Docker Image\n\n### Toolkit Installation\nFirst, install the `crs-docker` tool based on your operating system:\n<details>\n<summary>Ubuntu (recommended)</summary>\n\n These instructions were tested on the following Ubuntu versions:\n\n- 20.04 LTS\n- 22.04 LTS\n- 24.04 LTS\n\nHowever, the instructions should apply to all recent Ubuntu versions.\n\n#### Steps\n\n1. Install Docker using the [offical install instructions](https://docs.docker.com/install/)   _Note: The install instructions list Ubuntu in the server section!_\n2. Allow Docker execution as a non-root user; follow [these instructions](https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user)   _Note: Only do the first section \"Manage Docker as a non-root user\"_\n3. Test your Docker installation with the following command   _Note: You might want to restart your computer at this point._\n\n   ```sh\n   docker run hello-world\n   ```\n4. Clone the git repository\n\n   ```sh\n   git clone https://github.com/IntelligentControlSystems/ClutteredEnvironment.git\n   ```\n5. Navigate to the Ubuntu setup folder\n\n   ```sh\n   cd ClutteredEnvironment/.setup/ubuntu\n   ```\n6. Execute the setup script\n\n   ```sh\n   ./setup.sh\n   ```\n\n</details>\n\n<details>\n<summary>Arch Linux </summary>\n\nThe Installation does not differ too much from the Ubuntu installation. There is however one caveat on Arch Linux: Running Docker containers might fill up your memory and crash your system. To prevent this, add following lines to the file `/etc/docker/daemon.json` :\n\n```sh\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Soft\": 1024,\n      \"Hard\": 524288\n    }\n  }\n}\n```\n\nDo not forget to restart the docker service with `sudo systemctl restart docker`.\n\nAlternatively, one can specify these limits in the `docker-compose.yaml` file:\n\n```sh\nversion: '3'\nname: \"crs\"\nservices:\n  crs:\n\n    ...\n\n    # ADD THESE 4 LINES\n    ulimits:\n      nofile:\n        soft: 1024\n        hard: 524288\n\n    ...\n```\n\n</details>\n\n<details>\n<summary>MacOS</summary>\n\nThese instructions were tested on **macOS Sonoma (14.4)**. However, the instructions should apply to all recent macOS versions.\n\n#### Steps\n\n1. Install Docker using the [offical install instructions](https://docs.docker.com/install/)\n2. Test your Docker installation with the following command\n\n   ```sh\n   docker run hello-world\n   ```\n3. Clone the git repository   _Note: Make sure you have a SSH key set up, otherwise this doesn't work._\n\n   ```sh\n   git clone https://github.com/IntelligentControlSystems/ClutteredEnvironment.git\n   ```\n4. Navigate to the MacOS setup folder\n\n   ```sh\n   cd ClutteredEnvironment/.setup/macos\n   ```\n5. Execute the setup script\n\n   ```sh\n   ./setup.sh\n   ```\n\n</details>\n\n<details>\n<summary>Windows</summary>\n\n These instructions were tested on the following Windows versions:\n\n- Windows 11\n\nWindows 10 should work as well, but might need some slight modifications.\n\n#### Steps\n\n1. Install Docker using the [official install instructions](https://docs.docker.com/desktop/install/windows-install/)\n2. Make sure to run Docker on WSL 2 (see [Docker Desktop WSL 2 backend on Windows](https://docs.docker.com/desktop/wsl/))\n   1. Make sure you have WSL 2 installed and set Ubuntu as the default distro.\n   2. Make sure to tick the boxes in the Docker Desktop as in the screenshots below.\n\n      ![image.png](uploads/e1e86bcc006aff072295e4f96584b879/image.png){width=\"840\" height=\"440\"}\n\n      ![Screenshot 2024-08-30 103945.png](uploads/94fe1a22e216189487109c874848ff56/Screenshot_2024-08-30_103945.png){width=\"1440\" height=\"759\"}\n3. Open a PowerShell Terminal and get into your defau",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:19.636617"
  },
  {
    "basic_info": {
      "name": "ottrelite",
      "full_name": "callstackincubator/ottrelite",
      "owner": "callstackincubator",
      "description": "Unified, extensible, cross-language tracing toolkit for React Native",
      "url": "https://github.com/callstackincubator/ottrelite",
      "clone_url": "https://github.com/callstackincubator/ottrelite.git",
      "ssh_url": "git@github.com:callstackincubator/ottrelite.git",
      "homepage": "https://callstackincubator.github.io/ottrelite/",
      "created_at": "2025-09-02T22:49:49Z",
      "updated_at": "2025-09-28T19:24:53Z",
      "pushed_at": "2025-09-26T23:23:48Z"
    },
    "stats": {
      "stars": 97,
      "forks": 0,
      "watchers": 97,
      "open_issues": 0,
      "size": 1648
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 165372,
        "TypeScript": 81140,
        "Ruby": 8766,
        "CMake": 8068,
        "Java": 5335,
        "JavaScript": 1624,
        "Kotlin": 1194,
        "C": 52
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "<a href=\"https://www.callstack.com/open-source?utm_campaign=generic&utm_source=github&utm_medium=referral&utm_content=ottrelite\" align=\"center\">\n  <picture>\n    <img alt=\"Ottrelite\" src=\"https://github.com/callstackincubator/ottrelite/blob/main/img/banner.jpg?raw=true\">\n  </picture>\n</a>\n\n<p align=\"center\">\n  <b>Ottrelite</b> - Unified, extensible, cross-language tracing toolkit for React Native ⚡️🔎\n</p>\n\n---\n\n[![Build packages, lint & run tests](https://github.com/callstackincubator/ottrelite/actions/workflows/ci-cd.yml/badge.svg?job=build-lint-test)](https://github.com/callstackincubator/ottrelite/actions/workflows/ci-cd.yml)\n[![npm downloads](https://img.shields.io/npm/dm/ottrelite.svg)](https://www.npmjs.com/package/ottrelite)\n\n\n- [State of the project](#state-of-the-project)\n  - [Development API](#development-api)\n  - [OTEL Interoperability](#otel-interoperability)\n  - [RN internals integration](#rn-internals-integration)\n- [Installation](#installation)\n- [Documentation](#documentation)\n\nThe aim of this project is to provide a unified API for performance tracing in React Native applications, allowing developers to easily instrument their apps with various backends for tracing, profiling, and performance monitoring.\n\nThe core package - `@ottrelite/core` - provides a so-called [**Development API**](#development-api) (which is designed to be consumed by programmers) for instrumenting your application for purely **development use cases** (profiling your code, tracing performance issues, etc.). The actual implementation of recording / displaying / reporting of the data is provided by individual, pluggable packages (called **backends**). An arbitrary number of backends (0, 1 or more) can be installed simultaneously, allowing you to use multiple backends at once, or switch between them as needed.\n\nFor **production use cases**, Ottrelite [integrates with OpenTelemetry (OTEL) JS API](#opentelemetry-otel-api---production--development), supporting all OTEL community instrumentations, custom processors, etc. The only limitation is that the setup must follow our guidelines, which are described in this README.\n\n## State of the project\n\n### Development API\n\n| Feature         | Status          |\n| --------------- | --------------- |\n| C++ API         | ✅               |\n| JS API          | ✅               |\n| Swift API       | ⏳ (in progress) |\n| Java/Kotlin API | ✅               |\n| RN integration  | ✅               |\n\n### OTEL Interoperability\n\n| Feature            | Status |\n| ------------------ | ------ |\n| OTEL-JS interop    | ✅      |\n| OTEL-CPP interop   | ✅      |\n| OTEL-Java interop  | TBD    |\n| OTEL-Swift interop | TBD    |\n| RN integration     | ✅      |\n\n### RN internals integration\n\n| Platform | Status                         |\n| -------- | ------------------------------ |\n| iOS      | ⚠️ - only `Systrace.js` enabled |\n| Android  | ✅                              |\n\n## Installation\n\nFirst, install the package with:\n\n```bash\nnpm install --save @ottrelite/core\n# or\nyarn add @ottrelite/core\n# or\npnpm add @ottrelite/core\n```\n\nThen, follow the instructions from the respective section(s) below, depending on whether your use case involves production-time telemetry, development-time tracing or both.\n\n## Documentation\n\nPlease consult the [documentation website](https://callstackincubator.github.io/ottrelite/).\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:21.106399"
  },
  {
    "basic_info": {
      "name": "Architecture",
      "full_name": "TheCherno/Architecture",
      "owner": "TheCherno",
      "description": "An example of how I like to architect applications in C++",
      "url": "https://github.com/TheCherno/Architecture",
      "clone_url": "https://github.com/TheCherno/Architecture.git",
      "ssh_url": "git@github.com:TheCherno/Architecture.git",
      "homepage": null,
      "created_at": "2025-09-21T09:17:03Z",
      "updated_at": "2025-09-28T22:32:56Z",
      "pushed_at": "2025-09-21T09:19:14Z"
    },
    "stats": {
      "stars": 85,
      "forks": 3,
      "watchers": 85,
      "open_issues": 4,
      "size": 80
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 18976,
        "CMake": 3091,
        "GLSL": 1966
      },
      "license": "The Unlicense",
      "topics": []
    },
    "content": {
      "readme": "# Architecture\n\nAn example of how I like to architect applications in C++, as part of a [YouTube mini-series](https://youtube.com/playlist?list=PLlrATfBNZ98cpX2LuxLnLyLEmfD2FPpRA).\n\n## Build\n\nGenerate project files/build using CMake. I like to make a directory called `build` at the root and then run\n```\ncmake ..\n```\nfrom that directory. This will generate relevant project files (eg. Visual Studio for me) which you can then use to build and run.\n\n## Notes\nI chose to use OpenGL (and GLFW) for this due to popular demand [after running a poll](https://www.youtube.com/post/UgkxP9IU8D8UjH8szUipCS3QkJJQOc_cdb0k), however these concepts mostly translate to any other libraries/rendering APIs you may be using. OpenGL and GLFW is simply used as an example, substitute what you like.\n\n## License\nThis repository uses [The Unlicense](https://unlicense.org/), so feel free to use this however you like.",
      "default_branch": "main"
    },
    "fetched_at": "2025-09-29T02:23:22.436693"
  }
]