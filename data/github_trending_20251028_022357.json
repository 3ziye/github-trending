[
  {
    "basic_info": {
      "name": "beads",
      "full_name": "steveyegge/beads",
      "owner": "steveyegge",
      "description": "Beads - A memory upgrade for your coding agent",
      "url": "https://github.com/steveyegge/beads",
      "clone_url": "https://github.com/steveyegge/beads.git",
      "ssh_url": "git@github.com:steveyegge/beads.git",
      "homepage": "",
      "created_at": "2025-10-12T03:09:46Z",
      "updated_at": "2025-10-28T02:14:50Z",
      "pushed_at": "2025-10-28T02:14:47Z"
    },
    "stats": {
      "stars": 2132,
      "forks": 127,
      "watchers": 2132,
      "open_issues": 16,
      "size": 15443
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 1488772,
        "Python": 208329,
        "Shell": 28788,
        "PowerShell": 6787,
        "Nix": 1327
      },
      "license": "MIT License",
      "topics": [
        "agents",
        "claude-code",
        "coding"
      ]
    },
    "content": {
      "readme": "# bd - Beads Issue Tracker üîó\n\n[![Go Version](https://img.shields.io/github/go-mod/go-version/steveyegge/beads)](https://go.dev/)\n[![Release](https://img.shields.io/github/v/release/steveyegge/beads)](https://github.com/steveyegge/beads/releases)\n[![CI](https://img.shields.io/github/actions/workflow/status/steveyegge/beads/ci.yml?branch=main&label=tests)](https://github.com/steveyegge/beads/actions/workflows/ci.yml)\n[![Go Report Card](https://goreportcard.com/badge/github.com/steveyegge/beads)](https://goreportcard.com/report/github.com/steveyegge/beads)\n[![License](https://img.shields.io/github/license/steveyegge/beads)](LICENSE)\n[![PyPI](https://img.shields.io/pypi/v/beads-mcp)](https://pypi.org/project/beads-mcp/)\n\n**Give your coding agent a memory upgrade**\n\n> **‚ö†Ô∏è Alpha Status**: This project is in active development. The core features work well, but expect API changes before 1.0. Use for development/internal projects first.\n\nBeads is a lightweight memory system for coding agents, using a graph-based issue tracker. Four kinds of dependencies work to chain your issues together like beads, making them easy for agents to follow for long distances, and reliably perform complex task streams in the right order.\n\nDrop Beads into any project where you're using a coding agent, and you'll enjoy an instant upgrade in organization, focus, and your agent's ability to handle long-horizon tasks over multiple compaction sessions. Your agents will use issue tracking with proper epics, rather than creating a swamp of rotten half-implemented markdown plans.\n\nInstant start:\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/steveyegge/beads/main/scripts/install.sh | bash\n```\n\nThen tell your coding agent to start using the `bd` tool instead of markdown for all new work, somewhere in your `AGENTS.md` or `CLAUDE.md`. That's all there is to it!\n\nYou don't use Beads directly as a human. Your coding agent will file and manage issues on your behalf. They'll file things they notice automatically, and you can ask them at any time to add or update issues for you.\n\nBeads gives agents unprecedented long-term planning capability, solving their amnesia when dealing with complex nested plans. They can trivially query the ready work, orient themselves, and land on their feet as soon as they boot up.\n\nAgents using Beads will no longer silently pass over problems they notice due to lack of context space -- instead, they will automatically file issues for newly-discovered work as they go. No more lost work, ever.\n\nBeads issues are backed by git, but through a clever design it manages to act like a managed, centrally hosted SQL database shared by all of the agents working on a project (repo), even across machines.\n\nBeads even improves work auditability. The issue tracker has a sophisticated audit trail, which agents can use to reconstruct complex operations that may have spanned multiple sessions.\n\nAgents report that they enjoy working with Beads, and they will use it spontaneously for both recording new work and reasoning about your project in novel ways. Whether you are a human or an AI, Beads lets you have more fun and less stress with agentic coding.\n\n![AI Agent using Beads](https://raw.githubusercontent.com/steveyegge/beads/main/.github/images/agent-using-beads.jpg)\n\n## Features\n\n- ‚ú® **Zero setup** - `bd init` creates project-local database (and your agent will do it)\n- üîó **Dependency tracking** - Four dependency types (blocks, related, parent-child, discovered-from)\n- üìã **Ready work detection** - Automatically finds issues with no open blockers\n- ü§ñ **Agent-friendly** - `--json` flags for programmatic integration\n- üì¶ **Git-versioned** - JSONL records stored in git, synced across machines\n- üåç **Distributed by design** - Agents on multiple machines share one logical database via git\n- üèóÔ∏è **Extensible** - Add your own tables to the SQLite database\n- üîç **Multi-project isolation** - Each project gets its own database, auto-discovered by directory\n- üå≤ **Dependency trees** - Visualize full dependency graphs\n- üé® **Beautiful CLI** - Colored output for humans, JSON for bots\n- üíæ **Full audit trail** - Every change is logged\n- ‚ö° **High performance** - Batch operations for bulk imports (1000 issues in ~950ms)\n- üóúÔ∏è **Memory decay** - Semantic compaction gracefully reduces old closed issues\n\n## Installation\n\n**Quick install (all platforms):**\n```bash\ncurl -fsSL https://raw.githubusercontent.com/steveyegge/beads/main/scripts/install.sh | bash\n```\n\n**Homebrew (macOS/Linux):**\n```bash\nbrew tap steveyegge/beads\nbrew install bd\n```\n\n**Other platforms and methods:** See [INSTALLING.md](INSTALLING.md) for Windows, Arch Linux, and manual installation.\n\n**IDE Integration:** See [INSTALLING.md](INSTALLING.md) for Claude Code plugin and MCP server setup.\n\n## Quick Start\n\n### For Humans\n\nBeads is designed for **AI coding agents** to use on your behalf. Setup takes 30 seconds:\n\n**You run this once (humans only):**\n```bash\n# In your project root:\nbd init\n\n# bd wi",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:23:58.379939"
  },
  {
    "basic_info": {
      "name": "blaze",
      "full_name": "wizenheimer/blaze",
      "owner": "wizenheimer",
      "description": "Full Text Search Engine - built for Hackers not Hyperscalers",
      "url": "https://github.com/wizenheimer/blaze",
      "clone_url": "https://github.com/wizenheimer/blaze.git",
      "ssh_url": "git@github.com:wizenheimer/blaze.git",
      "homepage": "https://wizenheimer.github.io/blaze",
      "created_at": "2025-10-07T07:28:01Z",
      "updated_at": "2025-10-27T08:56:02Z",
      "pushed_at": "2025-10-14T08:34:59Z"
    },
    "stats": {
      "stars": 482,
      "forks": 11,
      "watchers": 482,
      "open_issues": 1,
      "size": 1194
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 241240,
        "Makefile": 3689
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Blaze\n\n<div align=\"center\">\n  <img alt=\"image\" src=\"./media/image.png\" />\n  <p>\n    <a href=\"https://wizenheimer.github.io/blaze/\"><strong>Docs </strong> </a>\n  </p>\n</div>\n\n**Built for hackers, not hyperscalers.**  \nA tiny, hackable full-text search engine you can actually fit in your head. Features inverted indexing, boolean queries, phrase search, proximity queries, and BM25 ranking‚Äîpowered by a flexible query engine, roaring bitmaps, and skip lists.\n\n> [!NOTE]\n> This focuses on keyword-based full-text search. For semantic search with embeddings, see [Comet](https://github.com/wizenheimer/comet) ([docs](https://pkg.go.dev/github.com/wizenheimer/comet)).\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Not for Everyone](#not-for-everyone)\n- [Installation](#installation)\n- [Quick Start](#quick-start)\n- [Core Concepts](#core-concepts)\n  - [Inverted Index](#inverted-index)\n  - [Skip Lists](#skip-lists)\n  - [Text Analysis Pipeline](#text-analysis-pipeline)\n  - [Search Operations](#search-operations)\n- [Query Builder API](#query-builder-api)\n  - [Why Use Builder Pattern](#why-use-builder-pattern)\n  - [Quick Start](#query-builder-quick-start)\n  - [Core Methods](#query-builder-core-methods)\n  - [Boolean Operations](#boolean-operations)\n  - [Query Patterns](#query-patterns)\n  - [Performance](#query-builder-performance)\n  - [Best Practices](#query-builder-best-practices)\n- [API Reference](#api-reference)\n- [Examples](#examples)\n- [Performance Characteristics](#performance-characteristics)\n- [Configuration](#configuration)\n- [Use Cases](#use-cases)\n- [Testing](#testing)\n- [Architecture](#architecture)\n- [Best Practices](#best-practices)\n- [Contributing](#contributing)\n- [Related Projects](#related-projects)\n- [License](#license)\n\n## Overview\n\nBlaze is a Go engine that provides fast, full-text search capabilities through an inverted index implementation. It's designed for applications that need to search through text documents efficiently without relying on external search engines.\n\n> [!TIP]\n> Blaze handles keyword-based search (BM25, phrase matching, boolean queries). If you need vector embeddings or hybrid retrieval, [Comet](https://github.com/wizenheimer/comet) ([docs](https://pkg.go.dev/github.com/wizenheimer/comet)) implements HNSW, IVF, and quantization-based indexes with metadata filtering. It's a hybrid vector store written from scratch in Go, purpose built for hackers, not hyperscalers.\n\n**Key Highlights:**\n\n- **Inverted Index**: Maps terms to document positions for instant lookups\n- **Skip Lists**: Probabilistic data structure providing O(log n) operations\n- **Query Builder**: Type-safe, fluent API for boolean queries with roaring bitmaps\n- **Advanced Search**: Phrase search, BM25 ranking, proximity ranking, and boolean queries\n- **BM25 Algorithm**: Industry-standard relevance scoring with IDF and length normalization\n- **Text Analysis**: Tokenization, stemming, stopword filtering, and case normalization\n- **Thread-Safe**: Concurrent indexing with mutex protection\n- **Serialization**: Efficient binary format for persistence\n\n## Features\n\n### Search Capabilities\n\n- **Term Search**: Find documents containing specific terms\n- **Phrase Search**: Exact multi-word matching (\"quick brown fox\")\n- **Boolean Queries**: Type-safe AND, OR, NOT operations with query builder\n- **BM25 Ranking**: Industry-standard relevance scoring (used by Elasticsearch, Solr)\n- **Proximity Ranking**: Score results by term proximity\n- **Position Tracking**: Track exact word positions within documents\n- **Roaring Bitmaps**: Compressed bitmap operations for fast boolean queries\n\n### Text Processing\n\n- **Tokenization**: Unicode-aware text splitting\n- **Stemming**: Snowball (Porter2) stemmer for English\n- **Stopword Filtering**: Remove common words (the, a, is, etc.)\n- **Case Normalization**: Case-insensitive search\n- **Configurable Pipeline**: Customize analysis behavior\n\n### Data Structures\n\n- **Skip Lists**: O(log n) search, insert, and delete operations\n- **Inverted Index**: Efficient term-to-position mapping\n- **Binary Serialization**: Compact storage format\n\n## Not for Everyone\n\n> [!CAUTION]\n> Blaze is an educational implementation. For production use, see [Bleve](https://github.com/blevesearch/bleve) - a mature, battle-tested full-text search library.\n\nBlaze focuses on keyword-based full-text search with inverted indexes. If you need semantic search with vector embeddings, [Comet](https://github.com/wizenheimer/comet) ([docs](https://pkg.go.dev/github.com/wizenheimer/comet)) implements various vector indexes (Flat, HNSW, IVF, PQ, IVFPQ) along with hybrid retrieval combining BM25 and vector similarity.\n\nBlaze is purpose-built to be hackable‚Äîsmall enough to understand completely. If you've ever wondered how inverted indexes are structured, how BM25 scoring works, or how boolean queries execute, Blaze provides a readable implementation to learn from.\n\n## Installation\n\n```bash\ngo get github.com/wizenheimer/blaze",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:23:59.529041"
  },
  {
    "basic_info": {
      "name": "ro",
      "full_name": "samber/ro",
      "owner": "samber",
      "description": "üèéÔ∏è Reactive Programming paradigm for Go: declarative and composable API for event-driven applications",
      "url": "https://github.com/samber/ro",
      "clone_url": "https://github.com/samber/ro.git",
      "ssh_url": "git@github.com:samber/ro.git",
      "homepage": "http://ro.samber.dev",
      "created_at": "2025-10-14T12:06:01Z",
      "updated_at": "2025-10-28T02:18:22Z",
      "pushed_at": "2025-10-28T01:11:38Z"
    },
    "stats": {
      "stars": 417,
      "forks": 13,
      "watchers": 417,
      "open_issues": 119,
      "size": 3358
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 1700129,
        "Makefile": 1644
      },
      "license": "Other",
      "topics": [
        "event-driven",
        "generics",
        "go",
        "golang",
        "observable",
        "observer",
        "pipe",
        "pipeline",
        "reactive",
        "reactive-extensions",
        "reactive-programming",
        "reactive-streams",
        "reactivex",
        "rx",
        "rxjs",
        "stream",
        "subscription"
      ]
    },
    "content": {
      "readme": "\n# ro - Reactive programming for Go\n\n[![tag](https://img.shields.io/github/tag/samber/ro.svg)](https://github.com/samber/ro/releases)\n![Go Version](https://img.shields.io/badge/Go-%3E%3D%201.18-%23007d9c)\n[![GoDoc](https://godoc.org/github.com/samber/ro?status.svg)](https://pkg.go.dev/github.com/samber/ro)\n![Build Status](https://github.com/samber/ro/actions/workflows/test.yml/badge.svg)\n[![Go report](https://goreportcard.com/badge/github.com/samber/ro)](https://goreportcard.com/report/github.com/samber/ro)\n[![Coverage](https://img.shields.io/codecov/c/github/samber/ro)](https://app.codecov.io/gh/samber/ro)\n[![Contributors](https://img.shields.io/github/contributors/samber/ro)](https://github.com/samber/ro/graphs/contributors)\n\n> A *Go* implementation of the [ReactiveX](https://reactivex.io/) spec.\n\nThe purpose of Reactive Programming is to simplify the development of event-driven and asynchronous applications by providing a declarative and composable way to handle streams of data or events.\n\n----\n\n<h3 align=\"center\">üíñ Support This Project</h3>\n\n<p align=\"center\">\n\tI‚Äôm going all-in on open-source for the coming months.\n\t<br>\n\tHelp sustain development: Become an <a href=\"http://github.com/sponsors/samber\">individual sponsor</a> or join as a <a href=\"mailto:hey@samuel-berthe.fr\">corporate sponsor</a>.\n</p>\n\n----\n\n![cover](/docs/static/img/cover.png)\n\n**See also:**\n\n- [samber/lo](https://github.com/samber/lo): A Lodash-style Go library based on Go 1.18+ Generics\n- [samber/do](https://github.com/samber/do): A dependency injection toolkit based on Go 1.18+ Generics\n- [samber/mo](https://github.com/samber/mo): Monads based on Go 1.18+ Generics (Option, Result, Either...)\n\nWhat makes it different from **samber/lo**?\n- lo: synchronous helpers across finite sequences (maps, slices...)\n- ro: processing of infinite data streams for event-driven scenarios\n\n## The Reactive Programming paradigm\n\nReactive Programming is focused on handling asynchronous data streams where values (like user input, API responses, or sensor data) are emitted over time. Instead of pulling data or waiting for events manually, you react to changes as they occur using `Observable`, `Observer`, and `Operator`. This approach simplifies building systems that are responsive, resilient, and scalable, especially in event-driven or real-time applications.\n\n```go\nobservable := ro.Pipe(\n    ro.RangeWithInterval(0, 10, 1*time.Second),\n    ro.Filter(func(x int) bool {\n        return x%2 == 0\n    }),\n    ro.Map(func(x int) string {\n        return fmt.Sprintf(\"even-%d\", x)\n    }),\n)\n\n// Start consuming on subscription\nobservable.Subscribe(ro.OnNext(func(s string) {\n    fmt.Println(s)\n}))\n\n// Output:\n//   \"even-0\"\n//   \"even-2\"\n//   \"even-4\"\n//   \"even-6\"\n//   \"even-8\"\n```\n\nNow you discovered the paradigm, follow the documentation and turn reactive: [üöÄ Getting started](https://ro.samber.dev/docs/getting-started)\n\n## Core package\n\n[Full documentation here](https://ro.samber.dev/docs/operator).\n\nThe `ro` library provides all basic operators:\n- **Creation operators**: The data source, usually the first argument of `ro.Pipe`\n- **Chainable operators**: They filter, validate, transform, enrich... messages\n  - **Transforming operators**: They transform items emitted by an `Observable`\n  - **Filtering operators**: They selectively emit items from a source `Observable`\n  - **Conditional operators**: Boolean operators\n  - **Math and aggregation operators**: They perform basic math operations\n  - **Error handling operators**: They help to recover from error notifications from an `Observable`\n  - **Combining operators**: Combine multiple `Observable` into one\n  - **Connectable operators**: Convert cold into hot `Observable`\n  - **Other**: manipulation of context, utility, async scheduling...\n- **Plugins**: External operators (mostly IOs and library wrappers)\n\n## Plugins\n\nThe `ro` library provides a rich ecosystem of plugins for various use cases:\n\n[Full documentation here](https://ro.samber.dev/docs/plugins).\n\n### Data Manipulation\n- **Bytes** (`plugins/bytes`) - String and byte slice manipulation operators\n- **Strings** (`plugins/strings`) - String manipulation operators\n- **Sort** (`plugins/sort`) - Sorting operators\n- **Type Conversion** (`plugins/strconv`) - String conversion operators\n\n### Encoding & Serialization\n- **JSON** (`plugins/encoding/json`) - JSON marshaling and unmarshaling\n- **CSV** (`plugins/encoding/csv`) - CSV reading and writing\n- **Base64** (`plugins/encoding/base64`) - Base64 encoding and decoding\n- **Gob** (`plugins/encoding/gob`) - Go binary serialization\n\n### Scheduling & Timing\n- **Cron** (`plugins/cron`) - Schedule jobs using cron expressions or duration intervals\n- **ICS** (`plugins/ics`) - Read and parse ICS/iCal calendars\n\n### Network & I/O\n- **HTTP** (`plugins/http`) - HTTP request operators\n- **I/O** (`plugins/io`) - File and stream I/O operators\n- **File System** (`plugins/fsnotify`) - File system monitoring operators\n\n### Observability &",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:00.665060"
  },
  {
    "basic_info": {
      "name": "resterm",
      "full_name": "unkn0wn-root/resterm",
      "owner": "unkn0wn-root",
      "description": "Terminal client for .http/.rest files with HTTP, GraphQL and gRPC, websockets, SSE, workflows, profiling and response diffs.",
      "url": "https://github.com/unkn0wn-root/resterm",
      "clone_url": "https://github.com/unkn0wn-root/resterm.git",
      "ssh_url": "git@github.com:unkn0wn-root/resterm.git",
      "homepage": "",
      "created_at": "2025-09-30T11:47:23Z",
      "updated_at": "2025-10-27T18:09:03Z",
      "pushed_at": "2025-10-26T20:31:37Z"
    },
    "stats": {
      "stars": 412,
      "forks": 11,
      "watchers": 412,
      "open_issues": 1,
      "size": 8487
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 1303982,
        "Shell": 4468,
        "PowerShell": 3682
      },
      "license": "Apache License 2.0",
      "topics": [
        "go",
        "golang",
        "rest",
        "rest-api",
        "rest-client",
        "tui",
        "tui-app"
      ]
    },
    "content": {
      "readme": "<h1 align=\"center\">Resterm</h1>\n\n<p align=\"center\">\n  <em>a terminal-based REST/GraphQL/gRPC/WebSocket/SSE client.</em>\n</p>\n\n<p align=\"center\">\n  <img src=\"_media/resterm_base.png\" alt=\"Screenshot of resterm TUI base\" width=\"720\" />\n</p>\n\n<p align=\"center\">\n  <strong>With trace and timeline</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"_media/resterm_trace_timeline.png\" alt=\"Screenshot of resterm with timeline\" width=\"720\" />\n</p>\n\n<p align=\"center\">\n  <strong>Split panes response with Workflow and WebSocket</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"_media/resterm_websocket.png\" alt=\"Screenshot of resterm TUI with WebSocket and Workflow\" width=\"720\" />\n</p>\n\n<p align=\"center\">\n  <strong>Split panes response and profiler</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"_media/resterm_profiler.png\" alt=\"Screenshot of resterm profiler\" width=\"720\" />\n</p>\n\n\nResterm is a terminal-first client for working with **HTTP**, **GraphQL**, and **gRPC** services. No cloud sync, no signups, no heavy desktop app. Simple, yet feature rich, terminal client for .http/.rest files.\nIt pairs a Vim-like-style editor with a workspace explorer, response diff, history, profiler and scripting so you can iterate on requests without leaving the keyboard.\n\n## Highlights\n- **Workspace** navigator that filters `.http` / `.rest` files, supports recursion and keeps request lists in sync as you edit.\n- **Editor** with inline syntax highlighting, search (`Ctrl+F`), clipboard motions, and inline metadata completions (type `@` for contextual hints).\n- **Variable** scopes with `@global` (environment-wide), `@var file` (document), `@var request` (per-call), plus compile-time constants (`@const`), captures, JavaScript hooks, and multi-step workflows with per-step expectations and overrides.\n- **GraphQL** helpers (`@graphql`, `@variables`, `@query`) and gRPC directives (`@grpc`, `@grpc-descriptor`, reflection, metadata).\n- **WebSockets and SSE** with scripted `@ws` steps, automatic transcripts and an interactive console for ad-hoc frames.\n- **OpenAPI importer** converts OpenAPI specs into Resterm-ready `.http` collections from the CLI.\n- **Inline** requests and **curl** import for one-off calls (`Ctrl+Enter` on a URL or curl block).\n- **Pretty/Raw/Header/Diff/History/Stream** views with optional split panes, pinned comparisons, and live event playback.\n- **Built-in** OAuth 2.0 client plus support for basic, bearer, API key, and custom header auth.\n- **Latency** with `@profile` to benchmark endpoints and render histograms right inside the TUI.\n- **Tracing and Timeline** with `@trace` to enable request tracing.\n- **Multi-step workflows** let you compose several named requests into one workflow (`@workflow` + `@step`), override per-step variables, and review aggregated results in History.\n\n\n## Installation\n\n### Quick Install\n\n**Linux / macOS:**\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/unkn0wn-root/resterm/main/install.sh | bash\n```\n\nor with `wget`:\n\n```bash\nwget -qO- https://raw.githubusercontent.com/unkn0wn-root/resterm/main/install.sh | bash\n```\n\n**Windows (PowerShell):**\n\n```powershell\niwr -useb https://raw.githubusercontent.com/unkn0wn-root/resterm/main/install.ps1 | iex\n```\n\nThese scripts will automatically detect your architecture, download the latest release, and install the binary.\n\n### Manual Installation\n\n> [!NOTE]\n> The manual install helper uses `curl` and `jq`. Install `jq` with your package manager (`brew install jq`, `sudo apt install jq`, etc.).\n\n#### Linux / macOS\n\n```bash\n# Detect latest tag\nLATEST_TAG=$(curl -fsSL https://api.github.com/repos/unkn0wn-root/resterm/releases/latest | jq -r .tag_name)\n\n# Download the matching binary (Darwin/Linux + amd64/arm64)\ncurl -fL -o resterm \"https://github.com/unkn0wn-root/resterm/releases/download/${LATEST_TAG}/resterm_$(uname -s)_$(uname -m)\"\n\n# Make it executable and move it onto your PATH\nchmod +x resterm\nsudo install -m 0755 resterm /usr/local/bin/resterm\n```\n\n#### Windows (PowerShell)\n\n```powershell\n$latest = Invoke-RestMethod https://api.github.com/repos/unkn0wn-root/resterm/releases/latest\n$asset  = $latest.assets | Where-Object { $_.name -like 'resterm_Windows_*' } | Select-Object -First 1\nInvoke-WebRequest -Uri $asset.browser_download_url -OutFile resterm.exe\n# Optionally relocate to a directory on PATH, e.g.:\nMove-Item resterm.exe \"$env:USERPROFILE\\bin\\resterm.exe\"\n```\n\n#### From source\n\n```bash\ngo install github.com/unkn0wn-root/resterm/cmd/resterm@latest\n```\n\n## Update\n\n```bash\nresterm --check-update\nresterm --update\n```\n\nThe first command reports whether a newer release is available; the second downloads and installs it (Windows users receive a staged binary to swap on restart).\n\n## Quick Start\n\n1. Create or open a directory that contains `.http` / `.rest` files (see `_examples/` for samples). If you want to start right away without any .http - just open resterm...\n2. ... or launch Resterm: `resterm --workspace path/to/project` (or if your .http/.rest file is in the ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:01.786906"
  },
  {
    "basic_info": {
      "name": "rapid-cipher-819",
      "full_name": "coyer1986/rapid-cipher-819",
      "owner": "coyer1986",
      "description": null,
      "url": "https://github.com/coyer1986/rapid-cipher-819",
      "clone_url": "https://github.com/coyer1986/rapid-cipher-819.git",
      "ssh_url": "git@github.com:coyer1986/rapid-cipher-819.git",
      "homepage": null,
      "created_at": "2025-10-14T14:35:12Z",
      "updated_at": "2025-10-21T00:31:30Z",
      "pushed_at": "2025-10-14T14:54:30Z"
    },
    "stats": {
      "stars": 382,
      "forks": 0,
      "watchers": 382,
      "open_issues": 0,
      "size": 2
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 64
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# rapid-cipher-819\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:02.995499"
  },
  {
    "basic_info": {
      "name": "stoic-engine-25",
      "full_name": "coyer1986/stoic-engine-25",
      "owner": "coyer1986",
      "description": null,
      "url": "https://github.com/coyer1986/stoic-engine-25",
      "clone_url": "https://github.com/coyer1986/stoic-engine-25.git",
      "ssh_url": "git@github.com:coyer1986/stoic-engine-25.git",
      "homepage": null,
      "created_at": "2025-10-14T14:35:41Z",
      "updated_at": "2025-10-21T00:31:41Z",
      "pushed_at": "2025-10-14T14:53:22Z"
    },
    "stats": {
      "stars": 382,
      "forks": 0,
      "watchers": 382,
      "open_issues": 0,
      "size": 2
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 64
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# stoic-engine-25\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:04.163747"
  },
  {
    "basic_info": {
      "name": "clever-marble-821",
      "full_name": "coyer1986/clever-marble-821",
      "owner": "coyer1986",
      "description": null,
      "url": "https://github.com/coyer1986/clever-marble-821",
      "clone_url": "https://github.com/coyer1986/clever-marble-821.git",
      "ssh_url": "git@github.com:coyer1986/clever-marble-821.git",
      "homepage": null,
      "created_at": "2025-10-14T14:36:27Z",
      "updated_at": "2025-10-21T00:30:22Z",
      "pushed_at": "2025-10-24T17:43:07Z"
    },
    "stats": {
      "stars": 382,
      "forks": 1,
      "watchers": 382,
      "open_issues": 1,
      "size": 2
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 64
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# clever-marble-821\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:05.329988"
  },
  {
    "basic_info": {
      "name": "go-web-server",
      "full_name": "coyer1986/go-web-server",
      "owner": "coyer1986",
      "description": "üêπ Go web server",
      "url": "https://github.com/coyer1986/go-web-server",
      "clone_url": "https://github.com/coyer1986/go-web-server.git",
      "ssh_url": "git@github.com:coyer1986/go-web-server.git",
      "homepage": null,
      "created_at": "2025-10-14T16:53:11Z",
      "updated_at": "2025-10-21T00:31:00Z",
      "pushed_at": "2025-10-24T17:43:43Z"
    },
    "stats": {
      "stars": 382,
      "forks": 0,
      "watchers": 382,
      "open_issues": 1,
      "size": 2
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 86
      },
      "license": null,
      "topics": [
        "go",
        "web"
      ]
    },
    "content": {
      "readme": "# Go Server",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:06.506551"
  },
  {
    "basic_info": {
      "name": "soloops-cli",
      "full_name": "Desmond-Osy/soloops-cli",
      "owner": "Desmond-Osy",
      "description": "SoloOps CLI",
      "url": "https://github.com/Desmond-Osy/soloops-cli",
      "clone_url": "https://github.com/Desmond-Osy/soloops-cli.git",
      "ssh_url": "git@github.com:Desmond-Osy/soloops-cli.git",
      "homepage": null,
      "created_at": "2025-09-30T05:01:35Z",
      "updated_at": "2025-10-27T17:13:13Z",
      "pushed_at": "2025-10-07T23:44:54Z"
    },
    "stats": {
      "stars": 192,
      "forks": 46,
      "watchers": 192,
      "open_issues": 0,
      "size": 76
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 46560,
        "Shell": 7097,
        "JavaScript": 5932,
        "HTML": 5179,
        "CSS": 4339,
        "PowerShell": 4208,
        "Python": 3475,
        "Makefile": 3239,
        "Dockerfile": 1349
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# SoloOps CLI\n\n[![CI](https://github.com/Desmond-Osy/soloops-cli/workflows/CI/badge.svg)](https://github.com/Desmond-Osy/soloops-cli/actions)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](LICENSE)\n[![Go Report Card](https://goreportcard.com/badge/github.com/Desmond-Osy/soloops-cli)](https://goreportcard.com/report/github.com/Desmond-Osy/soloops-cli)\n\nSoloOps is a command-line tool for scaffolding, validating, and managing infrastructure blueprints described in a YAML manifest (`soloops.yaml`). It generates Terraform code from your declarative configuration, making it easy to provision cloud resources with best practices built-in.\n\n## Features\n\n- **Declarative Infrastructure**: Define your infrastructure in a simple YAML manifest\n- **Blueprint System**: Pre-built templates for common patterns (serverless APIs, static sites, databases)\n- **Multi-Cloud Support**: AWS, GCP, and Azure (AWS fully implemented in MVP)\n- **Budget Aware**: Automatic budget alerts and cost controls\n- **Security First**: Built-in WAF, HTTPS enforcement, and compliance policies\n- **Terraform Generation**: Generates clean, readable Terraform code\n- **Easy to Use**: Simple CLI commands for the entire lifecycle\n\n## Quick Start\n\n### Installation\n\n**No Go installation required!** Choose your preferred method:\n\n#### One-Line Installer (Recommended)\n\n**Linux/macOS:**\n```bash\ncurl -fsSL https://raw.githubusercontent.com/Desmond-Osy/soloops-cli/main/scripts/install.sh | bash\n```\n\n**Windows (PowerShell):**\n```powershell\nirm https://raw.githubusercontent.com/Desmond-Osy/soloops-cli/main/scripts/install.ps1 | iex\n```\n\n#### Manual Download\n\nDownload pre-built binaries from the [releases page](https://github.com/Desmond-Osy/soloops-cli/releases):\n\n```bash\n# Linux (amd64)\nwget https://github.com/Desmond-Osy/soloops-cli/releases/latest/download/soloops-linux-amd64.tar.gz\ntar xzf soloops-linux-amd64.tar.gz\nsudo mv soloops-linux-amd64 /usr/local/bin/soloops\n\n# macOS (Apple Silicon)\nwget https://github.com/Desmond-Osy/soloops-cli/releases/latest/download/soloops-darwin-arm64.tar.gz\ntar xzf soloops-darwin-arm64.tar.gz\nsudo mv soloops-darwin-arm64 /usr/local/bin/soloops\n\n# Windows: Download soloops-windows-amd64.zip from releases and extract\n```\n\n#### Using Docker\n\n```bash\ndocker pull soloops/soloops-cli:latest\ndocker run --rm -v $(pwd):/workspace soloops/soloops-cli:latest init\n```\n\n#### Build from Source (for developers)\n\n```bash\ngit clone https://github.com/Desmond-Osy/soloops-cli.git\ncd soloops-cli\nmake build\n# Or: go install github.com/Desmond-Osy/soloops-cli/cmd/soloops@latest\n```\n\n### Basic Usage\n\n1. **Initialize a new project**:\n\n```bash\nsoloops init\n```\n\nThis creates a `soloops.yaml` manifest with sensible defaults.\n\n2. **Customize your configuration**:\n\nEdit `soloops.yaml` to define your infrastructure:\n\n```yaml\nproject: my-awesome-app\ncloud: aws\nenvironments:\n  - name: prod\n    region: us-east-1\n    budget_usd: 150\n    blueprints:\n      web_api:\n        runtime: node18\n        ingress: edge\n      static_site:\n        domain: myapp.com\npolicies:\n  require_https: true\n  deny_public_s3: true\n```\n\n3. **Validate your configuration**:\n\n```bash\nsoloops validate\n```\n\n4. **Generate Terraform code**:\n\n```bash\nsoloops generate\n```\n\nThis creates Terraform files in the `infra/` directory.\n\n5. **Preview changes**:\n\n```bash\nsoloops preview\n```\n\nShows what infrastructure will be created (runs `terraform plan`).\n\n6. **Apply changes**:\n\n```bash\nsoloops apply\n```\n\nProvisions your infrastructure (runs `terraform apply`).\n\n7. **Destroy when done**:\n\n```bash\nsoloops destroy\n```\n\n## Commands\n\n| Command | Description |\n|---------|-------------|\n| `soloops init` | Create a new soloops.yaml manifest |\n| `soloops validate` | Validate the configuration |\n| `soloops generate` | Generate Terraform files |\n| `soloops preview` | Preview infrastructure changes |\n| `soloops apply` | Provision infrastructure |\n| `soloops destroy` | Destroy infrastructure |\n| `soloops version` | Show version information |\n\n### Global Flags\n\n- `--file, -f`: Path to soloops.yaml (default: `soloops.yaml`)\n- `--env, -e`: Target environment (defaults to first in manifest)\n\n## Configuration\n\n### Project Structure\n\n```\nmy-project/\n‚îú‚îÄ‚îÄ soloops.yaml          # Your infrastructure manifest\n‚îú‚îÄ‚îÄ infra/                # Generated Terraform files\n‚îÇ   ‚îú‚îÄ‚îÄ provider.tf\n‚îÇ   ‚îú‚îÄ‚îÄ variables.tf\n‚îÇ   ‚îú‚îÄ‚îÄ main.tf\n‚îÇ   ‚îú‚îÄ‚îÄ budget.tf\n‚îÇ   ‚îî‚îÄ‚îÄ outputs.tf\n‚îî‚îÄ‚îÄ terraform.tfstate     # Terraform state (created after apply)\n```\n\n### Example soloops.yaml\n\n```yaml\nproject: acme-api\ncloud: aws\nenvironments:\n  - name: prod\n    region: us-east-1\n    budget_usd: 150\n    blueprints:\n      web_api:\n        runtime: node18\n        ingress: edge\n      static_site:\n        domain: acme.com\n      database:\n        type: aurora_serverless_v2\npolicies:\n  require_https: true\n  deny_public_s3: true\n```\n\n## Supported Blueprints\n\n### Web API (AWS)\n\nCreates a serverless API with:\n- AWS Lambda function\n- API Gateway HTTP API\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:07.704823"
  },
  {
    "basic_info": {
      "name": "sysc-greet",
      "full_name": "Nomadcxx/sysc-greet",
      "owner": "Nomadcxx",
      "description": "A tui greeter (not built in rust) ",
      "url": "https://github.com/Nomadcxx/sysc-greet",
      "clone_url": "https://github.com/Nomadcxx/sysc-greet.git",
      "ssh_url": "git@github.com:Nomadcxx/sysc-greet.git",
      "homepage": "",
      "created_at": "2025-10-14T03:41:26Z",
      "updated_at": "2025-10-28T02:08:05Z",
      "pushed_at": "2025-10-26T01:18:27Z"
    },
    "stats": {
      "stars": 168,
      "forks": 6,
      "watchers": 168,
      "open_issues": 4,
      "size": 106318
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 399384,
        "Shell": 4168,
        "Makefile": 2386
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# sysc-greet\n\nA graphical console greeter for [greetd](https://git.sr.ht/~kennylevinsen/greetd), written in Go with the Bubble Tea framework.\n\n![Preview](https://github.com/Nomadcxx/sysc-greet/raw/master/assets/showcase.gif)\n\n## Features\n\n- **Mucho themes**: Dracula, Gruvbox, Material, Nord, Tokyo Night, Catppuccin, Solarized, Monochrome, RAMA, DARK, TrainsIsHardJob\n- **Background Effects**: Fire (DOOM PSX), Matrix rain, ASCII rain, Fireworks, Aquarium\n- **ASCII Effects**: Typewriter and Print effects for session text\n- **Border Styles**: Classic, Modern, Minimal (best), ASCII-1, ASCII-2, Wave, Pulse\n- **Screensaver**: Configurable idle timeout with ASCII art cycling\n- **Video Wallpapers**: Multi-monitor support via gslapper\n\n## Installation\n\n### Arch Linux (AUR)\nFirst, decide which compositor you want. sysc-greet will install the recommended default (niri), sysc-greet-hyperland installs the Hyprland variant, and sysc-greet-sway installs the Sway variant.\n```bash RECOMMENDED\nyay -S sysc-greet\n```\n```bash\nyay -S sysc-greet-hyprland\n```\n```bash\nyay -S sysc-greet-sway\n```\n\n### Installer (Recommended)\n\nThe installer lets you choose your compositor and handles all configuration:\n\n```bash\ngit clone https://github.com/Nomadcxx/sysc-greet\ncd sysc-greet/sysc-greet\ngo run ./cmd/installer/\n```\n\n### Quick Install Script\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/Nomadcxx/sysc-greet/master/install.sh | sudo bash\n```\n\n### Manual Build\n\n**Requirements:**\n- Go 1.21+\n- greetd\n- Wayland compositor (niri, hyprland, or sway)\n- kitty (terminal)\n- swww (wallpaper daemon)\n- gslapper (optional, for video wallpapers)\n\n**Build and install:**\n\n```bash\ngit clone https://github.com/Nomadcxx/sysc-greet\ncd sysc-greet\ngo build -o sysc-greet ./cmd/sysc-greet/\nsudo install -Dm755 sysc-greet /usr/local/bin/sysc-greet\n```\n\n**Install assets:**\n\n```bash\nsudo mkdir -p /usr/share/sysc-greet/{ascii_configs,fonts,wallpapers}\nsudo cp -r ascii_configs/* /usr/share/sysc-greet/ascii_configs/\nsudo cp -r fonts/* /usr/share/sysc-greet/fonts/\nsudo cp -r wallpapers/* /usr/share/sysc-greet/wallpapers/\nsudo cp config/kitty-greeter.conf /etc/greetd/kitty.conf\n```\n\n**Configure greetd** (`/etc/greetd/config.toml`):\n\nChoose your compositor and update the command below:\n\n```toml\n[terminal]\nvt = 1\n\n[default_session]\n# Pick one:\ncommand = \"niri -c /etc/greetd/niri-greeter-config.kdl\"\n# command = \"Hyprland -c /etc/greetd/hyprland-greeter-config.conf\"\n# command = \"sway --unsupported-gpu -c /etc/greetd/sway-greeter-config\"\nuser = \"greeter\"\n```\n\n**Create compositor config:**\n\nCopy the appropriate config file to `/etc/greetd/`:\n\n```bash\n# For niri:\nsudo cp config/niri-greeter-config.kdl /etc/greetd/\n\n# For hyprland:\nsudo cp config/hyprland-greeter-config.conf /etc/greetd/\n\n# For sway:\nsudo cp config/sway-greeter-config /etc/greetd/\n```\n\n**Create greeter user:**\n\n```bash\nsudo useradd -M -G video -s /usr/bin/nologin greeter\nsudo mkdir -p /var/cache/sysc-greet /var/lib/greeter/Pictures/wallpapers\nsudo chown -R greeter:greeter /var/cache/sysc-greet /var/lib/greeter\nsudo chmod 755 /var/lib/greeter\n```\n\n**Enable service:**\n\n```bash\nsudo systemctl enable greetd.service\n```\n\n## Customization\n\n### Wallpapers\n\nThere are two types of wallpapers you can use:\n\n#### 1. Themed Wallpapers (Static Images)\n\nThese auto-match your selected theme and are stored in `/usr/share/sysc-greet/wallpapers/`.\n\n**Format:** `sysc-greet-{theme}.png`\n\n**Example:** `sysc-greet-nord.png` automatically shows when Nord theme is active.\n\n**Adding themed wallpapers:**\n```bash\nsudo cp ~/my-nord-bg.png /usr/share/sysc-greet/wallpapers/sysc-greet-nord.png\nsudo chown greeter:greeter /usr/share/sysc-greet/wallpapers/sysc-greet-nord.png\n```\n\n#### 2. Custom Wallpapers (Videos)\n\nVideo wallpapers are managed by [gSlapper](https://github.com/Nomadcxx/gSlapper) and stored in `/var/lib/greeter/Pictures/wallpapers/`.\n\n**Supported formats:** MP4, WebM\n\n**Adding video wallpapers:**\n```bash\nsudo cp ~/Videos/cool-animation.mp4 /var/lib/greeter/Pictures/wallpapers/\nsudo chown greeter:greeter /var/lib/greeter/Pictures/wallpapers/cool-animation.mp4\n```\n\n**Accessing wallpapers:**\nPress `F1` (Settings) ‚Üí Backgrounds ‚Üí Select your wallpaper or video\n\n### ASCII Art Format\n\nCustom ASCII art configs in `/usr/share/sysc-greet/ascii_configs/`:\n\n```\n# cinnamon.conf\nname=My Session\n\nascii_1=\n ü¨≠ü¨≠ü¨≠ü¨≠ ü¨ûü¨≠ü¨≠ü¨≠ü¨èü¨ûü¨≠ü¨º ü¨ûü¨≠ü¨èü¨ûü¨≠ü¨º ü¨ûü¨≠ü¨è ü¨≠ü¨≠ü¨≠ü¨≠ ü¨ûü¨≠ü¨Ω  ü≠àü¨≠ü¨è ü¨≠ü¨≠ü¨≠ü¨≠ ü¨ûü¨≠ü¨º ü¨ûü¨≠ü¨è\n‚ñê‚ñí‚ñå ü≠£ü¨Ä ‚ñê‚ñí‚ñå ‚ñê‚ñíü≠åü¨ø‚ñê‚ñí‚ñå‚ñê‚ñíü≠åü¨ø‚ñê‚ñí‚ñå‚ñê‚ñí‚ñå‚ñê‚ñí‚ñå‚ñê‚ñí‚ñàü≠çü≠Ç‚ñà‚ñí‚ñå‚ñê‚ñí‚ñå‚ñê‚ñí‚ñå‚ñê‚ñíü≠åü¨ø‚ñê‚ñí‚ñå\n‚ñê‚îÄ‚ñå    ‚ñê‚îÄ‚ñå ‚ñê‚îÄ‚ñåü≠•ü≠í‚îÄ‚ñå‚ñê‚îÄ‚ñåü≠•ü≠í‚îÄ‚ñå‚ñê‚îÄü¨õü¨´‚îÄ‚ñå‚ñê‚îÄ‚ñåü≠£ü≠ò‚ñê‚îÄ‚ñå‚ñê‚îÄ‚ñå‚ñê‚îÄ‚ñå‚ñê‚îÄ‚ñåü≠•ü≠í‚îÄ‚ñå\n‚ñê‚ñë‚ñå ü≠àü¨è ‚ñê‚ñë‚ñå ‚ñê‚ñë‚ñå ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå  ‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå‚ñê‚ñë‚ñå ‚ñê‚ñë‚ñå\n ü¨Çü¨Çü¨Çü¨Ç ü¨Åü¨Çü¨Çü¨Çü¨Äü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Äü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Äü¨Åü¨Çü¨Äü¨Åü¨Çü¨Äü¨Åü¨Çü¨Ä  ü¨Åü¨Çü¨Ä ü¨Çü¨Çü¨Çü¨Ç ü¨Åü¨Çü¨Ä ü¨Åü¨Çü¨Ä\nascii_2=\nú∫†úµ°ú∂úú∫£¬†ú∂úúµ°¬†‚ñÑú∫£‚ñó‚ññ‚ñÑú∫£‚ñó‚ññ¬†ú∑ãú∫£¬†‚ñÑú∫£ú∑ã‚ññú∑ãú¥ßú∂úú∫£‚ñÑú∫£‚ñó‚ññ\n‚ñà¬†¬†ú∫®¬†‚ñê‚ñå¬†‚ñàú¥¶ú∑•‚ñå‚ñàú¥¶ú∑•‚ñåú∑•ú∂¨ú∑ñúµà‚ñàú¥¶‚ñú‚ñå‚ñà¬†‚ñê‚ñå‚ñàú¥¶ú∑•‚ñå\nú¥¶ú∂ªú∑ãüØ¶¬†ú∑ïú∑Ä¬†‚ñà¬†‚ñê‚ñå‚ñà¬†‚ñê‚ñå‚ñà¬†‚ñê‚ñå‚ñà¬†‚ñê‚ñåú∂´‚ñÇú∑ïú¥ç‚ñà¬†‚ñê‚ñå\n\n```\n\n**For more customization options (screensaver, compositor configs, etc.), see [CONFIGURATION.md](https://github.com/Nomadcxx/sysc-greet/blob/master/CONFIGURATION.md)**\n\n## Usage\n\n### Key Bindings\n\n- **F1** - Settings menu (themes, borders, backgrounds)\n- **F2** - Sessio",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-28T02:24:08.808670"
  },
  {
    "basic_info": {
      "name": "friendly-potato",
      "full_name": "bingcicle/friendly-potato",
      "owner": "bingcicle",
      "description": "jsonl-tool",
      "url": "https://github.com/bingcicle/friendly-potato",
      "clone_url": "https://github.com/bingcicle/friendly-potato.git",
      "ssh_url": "git@github.com:bingcicle/friendly-potato.git",
      "homepage": null,
      "created_at": "2025-09-29T15:09:04Z",
      "updated_at": "2025-10-17T13:52:58Z",
      "pushed_at": "2025-09-29T15:11:09Z"
    },
    "stats": {
      "stars": 150,
      "forks": 0,
      "watchers": 150,
      "open_issues": 2,
      "size": 7
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 2030
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# jsonl-tool\nMerge or filter JSON Lines.\n\n## Build & Run\n```bash\ngo build -o jsonl-tool\n./jsonl-tool --mode merge --in a.jsonl,b.jsonl > merged.jsonl\n./jsonl-tool --mode filter --in merged.jsonl --field exchange --eq bybit\n./jsonl-tool --mode filter --in merged.jsonl --field symbol --rex \"BTC|ETH\"\n```\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:09.976610"
  },
  {
    "basic_info": {
      "name": "konbini",
      "full_name": "whyrusleeping/konbini",
      "owner": "whyrusleeping",
      "description": null,
      "url": "https://github.com/whyrusleeping/konbini",
      "clone_url": "https://github.com/whyrusleeping/konbini.git",
      "ssh_url": "git@github.com:whyrusleeping/konbini.git",
      "homepage": null,
      "created_at": "2025-10-03T20:20:00Z",
      "updated_at": "2025-10-24T07:57:37Z",
      "pushed_at": "2025-10-18T15:56:21Z"
    },
    "stats": {
      "stars": 136,
      "forks": 11,
      "watchers": 136,
      "open_issues": 0,
      "size": 364
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 206416,
        "TypeScript": 56069,
        "CSS": 25038,
        "HTML": 1719,
        "Dockerfile": 1010
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Konbini - A Cozy Bluesky AppView\n\nKonbini is a partially indexed bluesky appview. It's aim is to provide a \"Friends of Friends\" experience to the bluesky network.\n\nIt is currently _very_ jank and I really just hacked this together in a day. More work to come when I get time.\n\n## Prerequisites\n\n- Go 1.25.1 or later\n- PostgreSQL database\n- Node.js and npm (for frontend)\n- Docker (optional, for easy PostgreSQL setup)\n- Bluesky account credentials\n\n## Quick Start with Docker Compose\n\nThe easiest way to run Konbini is with Docker Compose, which will start PostgreSQL, the backend, and frontend all together.\n\n### Prerequisites\n\n- Docker and Docker Compose installed\n- Creating an app password (via: https://bsky.app/settings/app-passwords)\n\n### Setup\n\n1. Create a `.env` file with your credentials:\n\n```bash\ncp .env.example .env\n# Edit .env and add:\n# - BSKY_HANDLE=your-handle.bsky.social\n# - BSKY_PASSWORD=your-app-password\n```\n\n2. Start all services:\n\n```bash\ndocker-compose up -d\n```\n\n3. Wait for the backend to index posts from the firehose (this may take a few minutes for initial indexing)\n\n4. Open your browser to http://localhost:3000\n\n### Stopping the services\n\n```bash\ndocker-compose down\n```\n\nTo also remove the database volume:\n\n```bash\ndocker-compose down -v\n```\n\n## Manual Setup\n\n### 1. PostgreSQL Database Setup\n\n#### Using Docker (Recommended)\n\n```bash\n# Start PostgreSQL container\ndocker run --name konbini-postgres \\\n  -e POSTGRES_DB=konbini \\\n  -e POSTGRES_USER=konbini \\\n  -e POSTGRES_PASSWORD=your_password \\\n  -p 5432:5432 \\\n  -d postgres:15\n\n# The database will be available at: postgresql://konbini:your_password@localhost:5432/konbini\n```\n\n### 2. Environment Configuration\n\nSet the following environment variables:\n\n```bash\n# Database connection\nexport DATABASE_URL=\"postgresql://konbini:your_password@localhost:5432/konbini\"\n\n# Bluesky credentials\nexport BSKY_HANDLE=\"your-handle.bsky.social\"\nexport BSKY_PASSWORD=\"your-app-password\"\n```\n\n### 3. Build and Run the Go Application\n\n```bash\ngo build\n\n# Run with environment variables\n./konbini\n```\n\n### 4. Frontend Setup\n\n```bash\n# Navigate to frontend directory\ncd frontend\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm start\n```\n\nThe frontend will be available at http://localhost:3000 and will connect to the API at http://localhost:4444.\n\n## Running the Bluesky App against Konbini\n\nKonbini implements a large portion of the app.bsky.\\* appview endpoints that\nare required for pointing the main app to it and having it work reasonably\nwell.\n\nTo accomplish this you will need a few things:\n\n### Service DID\n\nYou will need a DID, preferably a did:web for your appview that points at a\npublic endpoint where your appview is accessible via https.\nI'll get into the https proxy next, but for the did, I've just pointed a domain\nI own (in my case appview1.bluesky.day) to a VPS, and used caddy to host a file\nat `/.well-known/did.json`.\nThat file should look like this:\n\n```json\n{\n  \"@context\": [\n    \"https://www.w3.org/ns/did/v1\",\n    \"https://w3id.org/security/multikey/v1\"\n  ],\n  \"id\": \"did:web:appview1.bluesky.day\",\n  \"verificationMethod\": [\n    {\n      \"id\": \"did:web:api.bsky.app#atproto\",\n      \"type\": \"Multikey\",\n      \"controller\": \"did:web:api.bsky.app\",\n      \"publicKeyMultibase\": \"zQ3shpRzb2NDriwCSSsce6EqGxG23kVktHZc57C3NEcuNy1jg\"\n    }\n  ],\n  \"service\": [\n    {\n      \"id\": \"#bsky_notif\",\n      \"type\": \"BskyNotificationService\",\n      \"serviceEndpoint\": \"YOUR APPVIEW HTTPS URL\"\n    },\n    {\n      \"id\": \"#bsky_appview\",\n      \"type\": \"BskyAppView\",\n      \"serviceEndpoint\": \"YOUR APPVIEW HTTPS URL\"\n    }\n  ]\n}\n```\n\nThe verificationMethod isn't used but i'm not sure if _something_ is required\nthere or not, so i'm just leaving that there, it works on my machine.\n\n### HTTPS Endpoint\n\nI've been using ngrok to proxy traffic from a publicly accessible https url to my appview.\nYou can simply run `ngrok http 4446` and it will give you an https url that you\ncan then put in your DID doc above.\n\n### The Social App\n\nNow, clone and build the social app:\n\n```\ngit clone https://github.com/bluesky-social/social-app\ncd social-app\nyarn\n```\n\nAnd then set this environment variable that tells it to use your appview:\n\n```\nexport EXPO_PUBLIC_BLUESKY_PROXY_DID=did:web:YOURDIDWEB\n```\n\nAnd finally run the app:\n\n```\nyarn web\n```\n\nThis takes a while on first load since its building everything.\nAfter that, load the localhost url it gives you and it _should_ work.\n\n## Selective Backfill\n\nIf you'd like to backfill a particular repo, just hit the following endpoint:\n\n```\ncurl http://localhost:4444/rescan/<DID OR HANDLE>\n\n```\n\nIt will take a minute but it should pull all records from that user.\n\n## Upstream Firehose Configuration\n\nKonbini supports both standard firehose endpoints as well as jetstream. If\nbandwidth and CPU usage is a concern, and you trust the jetstream endpoint,\nthen it may be worth trying that out.\n\nThe configuration file is formatted as follows:\n\n```json\n{\n  \"backen",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-28T02:24:11.136567"
  },
  {
    "basic_info": {
      "name": "wellness-ping",
      "full_name": "micr0-dev/wellness-ping",
      "owner": "micr0-dev",
      "description": "A simple dead man's switch service. Get pinged regularly to confirm you're okay. If you don't respond, your emergency contacts get alerted.",
      "url": "https://github.com/micr0-dev/wellness-ping",
      "clone_url": "https://github.com/micr0-dev/wellness-ping.git",
      "ssh_url": "git@github.com:micr0-dev/wellness-ping.git",
      "homepage": null,
      "created_at": "2025-10-14T20:14:48Z",
      "updated_at": "2025-10-23T19:46:26Z",
      "pushed_at": "2025-10-23T19:46:22Z"
    },
    "stats": {
      "stars": 130,
      "forks": 4,
      "watchers": 130,
      "open_issues": 2,
      "size": 58
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 21392,
        "HTML": 9437,
        "CSS": 154
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Wellness Ping\n\nA simple dead man's switch service. Get pinged regularly to confirm you're okay. If you don't respond, your emergency contacts get alerted.\n\n[https://wellness-p.ing](https://wellness-p.ing)\n\n## Contact\n\nFeature requests: [micr0@micr0.dev](mailto:micr0@micr0.dev)\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:12.255113"
  },
  {
    "basic_info": {
      "name": "ssh-dashboard",
      "full_name": "AlpinDale/ssh-dashboard",
      "owner": "AlpinDale",
      "description": "Monitor GPU/CPU Usage on SSH servers, with NVIDIA and AMD support.",
      "url": "https://github.com/AlpinDale/ssh-dashboard",
      "clone_url": "https://github.com/AlpinDale/ssh-dashboard.git",
      "ssh_url": "git@github.com:AlpinDale/ssh-dashboard.git",
      "homepage": "",
      "created_at": "2025-10-12T13:09:29Z",
      "updated_at": "2025-10-27T05:07:30Z",
      "pushed_at": "2025-10-15T11:52:24Z"
    },
    "stats": {
      "stars": 128,
      "forks": 16,
      "watchers": 128,
      "open_issues": 1,
      "size": 374
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 54027,
        "Makefile": 2207,
        "Shell": 1225
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# SSH Dashboard\n\nMonitor CPU, GPU, RAM, and disk usage on your remote servers with a live-updating terminal dashboard.\n\n### Single-host monitoring:\n<div align=\"center\">\n  <img src=\"assets/screenshot.png\" alt=\"SSH Dashboard Screenshot\" width=\"800\">\n</div>\n\n### Multi-host monitoring:\n<div align=\"center\">\n  <img src=\"assets/screenshot2.png\" alt=\"SSH Dashboard Screenshot\" width=\"800\">\n</div>\n\n## Installation\n\n### Pre-built Binaries\n\nDownload the latest release for your platform from the [Releases page](https://github.com/AlpinDale/ssh-dashboard/releases).\n\n**Quick install (Linux/macOS):**\n```bash\n# Download the binary for your platform\n# Example for Linux AMD64:\ncurl -L -o ssh-dashboard https://github.com/AlpinDale/ssh-dashboard/releases/download/v0.0.1/ssh-dashboard-v0.0.1-linux-amd64\n\n# Make it executable and move to PATH\nchmod +x ssh-dashboard\nsudo mv ssh-dashboard /usr/local/bin/\n```\n\n**Supported platforms:**\n- `linux-amd64`, `linux-arm64`\n- `darwin-amd64` (Intel Mac), `darwin-arm64` (Apple Silicon)\n- `windows-amd64.exe`, `windows-arm64.exe`\n\n### From Source\n\n#### AUR\n```bash\nyay -S ssh-dashboard-git\n```\n\n#### Manual\n\n```bash\ngit clone https://github.com/AlpinDale/ssh-dashboard.git\ncd ssh-dashboard\nmake install\n```\n\nThis will install to `~/.local/bin`. Make sure this directory is in your PATH (it usually is):\n\n```bash\nexport PATH=\"$HOME/.local/bin:$PATH\"\n```\n\n### Prerequisites\n\n- Go 1.21 or higher\n- SSH access to remote hosts\n- SSH keys loaded in your SSH agent\n\n## Usage\n\nSimply run:\n\n```bash\nssh-dashboard\n```\n\nThe tool will:\n1. Scan your `~/.ssh/config` for available hosts\n2. Present an interactive list to select from\n3. Connect and display a live dashboard\n4. Update stats every 5 seconds (configurable)\n\n**Multi-host workflow:**\n- Start by selecting one or more hosts (use `Space` to toggle selection)\n- Press `Enter` to connect and view the dashboard\n- While in the dashboard, press `c` to return to host selection to add/remove hosts\n- Press `n` to cycle through connected hosts (like tmux sessions)\n- Press `t` to toggle overview mode, showing all selected hosts at once with GPU pressure summaries\n- Press `s` to exit the dashboard and drop into an interactive SSH shell with the current host\n- All connections remain active - no need to reconnect!\n\n### Configuration\n\n**Update Interval:**\n\nControl how often the dashboard refreshes in seconds (default: 5). Supports decimal values for sub-second updates:\n\n```bash\n# Update every second\nssh-dashboard -n 1\n\n# Update 10 times per second (100ms)\nssh-dashboard -n 0.1\n\n# or with an env var\nexport SSH_DASHBOARD_INTERVAL=0.5\nssh-dashboard\n```\n\n**Keybindings:**\n- `q` or `Ctrl+C` - Quit\n- `Space` - Select/deselect hosts (in host selection screen)\n- `Enter` - Connect to selected host(s)\n- `n` - Switch to next host (when multiple hosts selected)\n- `t` - Toggle overview screen (shows all hosts at once)\n- `s` - Exit and SSH into current host\n- `c` - Add hosts (from dashboard, returns to host selection)\n\n## SSH Configuration\n\nMake sure your `~/.ssh/config` is properly configured:\n\n```\nHost myserver\n    HostName 192.168.1.100\n    User username\n    Port 22  # optional\n    IdentityFile ~/.ssh/id_rsa  # optional\n\nHost gpu-server\n    HostName gpu.example.com\n    User admin\n    IdentityFile ~/.ssh/id_ed25519  # optional\n```\n\n### SSH Agent\n\nThe dashboard uses SSH agent for authentication. Make sure your keys are loaded:\n\n```bash\nssh-add ~/.ssh/id_rsa\nssh-add ~/.ssh/id_ed25519\n\n# verify\nssh-add -l\n```\n\n## Remote Requirements\n\nThe remote hosts should have these commands available:\n- `lscpu` - CPU information\n- `top` - CPU usage\n- `free` - RAM information\n- `df` - Disk usage\n- `nvidia-smi` - GPU information (NVIDIA GPUs only)\n- `amd-smi` or `rocm-smi` - GPU information (AMD GPUs only)\n\nMost Linux distributions include these by default.\n\n## Development\n\n### Build\n\n```bash\nmake build\n```\n\n### Run\n\n```bash\nmake run\n```\n\n### Build for Multiple Platforms\n\nThe project uses [GoReleaser](https://goreleaser.com/) for multi-platform builds and releases.\n\n**Test the release locally:**\n```bash\ngoreleaser release --snapshot --clean\n```\n\n**Build all platforms with Make:**\n```bash\nmake build-all\n```\n\nThis creates binaries for:\n- Linux (amd64, arm64)\n- macOS (amd64, arm64)\n- Windows (amd64, arm64)\n\n### Clean\n\n```bash\nmake clean\n```\n\n## License\n\nMIT License - see LICENSE file for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Troubleshooting\n\n### Connection Issues\n- Verify your SSH config is correct\n- Test manual connection: `ssh hostname`\n- Ensure SSH keys are loaded: `ssh-add -l`\n\n### Missing GPU Information\n- (NVIDIA) Verify NVIDIA drivers are installed: `ssh hostname nvidia-smi`\n- (AMD) Verify AMD drivers are installed: `ssh hostname amd-smi` or `ssh hostname rocm-smi`\n\n### Permission Denied\n- Check SSH key permissions (should be 600)\n- Verify the user has appropriate access rights\n\n## Acknowledgments\n\nBuilt with:\n- [Bubble Tea](https://github.com/c",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-28T02:24:13.367665"
  },
  {
    "basic_info": {
      "name": "sa-token-go",
      "full_name": "click33/sa-token-go",
      "owner": "click33",
      "description": "sa-token for golang ‰∏Ä‰∏™ËΩªÈáèÁ∫ß go ÊùÉÈôêËÆ§ËØÅÊ°ÜÊû∂ÔºåËÆ©Èâ¥ÊùÉÂèòÂæóÁÆÄÂçï‰ºòÈõÖ",
      "url": "https://github.com/click33/sa-token-go",
      "clone_url": "https://github.com/click33/sa-token-go.git",
      "ssh_url": "git@github.com:click33/sa-token-go.git",
      "homepage": null,
      "created_at": "2025-10-13T12:45:42Z",
      "updated_at": "2025-10-27T15:31:45Z",
      "pushed_at": "2025-10-26T02:46:01Z"
    },
    "stats": {
      "stars": 114,
      "forks": 18,
      "watchers": 114,
      "open_issues": 3,
      "size": 5839
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 288391
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "# Sa-Token-Go\n\n**English** | **[‰∏≠Êñá](README_zh.md)**\n\n[![Go Version](https://img.shields.io/badge/Go-%3E%3D1.21-blue)](https://img.shields.io)\n[![License](https://img.shields.io/badge/License-Apache%202.0-green.svg)](https://opensource.org/licenses/Apache-2.0)\n\nA lightweight, high-performance Go authentication and authorization framework, inspired by [sa-token](https://github.com/dromara/sa-token).\n\n## ‚ú® Core Features\n\n- üîê **Authentication** - Multi-device login, Token management\n- üõ°Ô∏è **Authorization** - Fine-grained permission control, wildcard support (`*`, `user:*`, `user:*:view`)\n- üë• **Role Management** - Flexible role authorization mechanism\n- üö´ **Account Ban** - Temporary/permanent account disabling\n- üë¢ **Kickout** - Force user logout, multi-device mutual exclusion\n- üíæ **Session Management** - Complete Session management\n- ‚è∞ **Active Detection** - Automatic token activity detection\n- üîÑ **Auto Renewal** - Asynchronous token auto-renewal (400% performance improvement)\n- üé® **Annotation Support** - `@SaCheckLogin`, `@SaCheckRole`, `@SaCheckPermission`\n- üéß **Event System** - Powerful event system with priority and async execution\n- üì¶ **Modular Design** - Import only what you need, minimal dependencies\n- üîí **Nonce Anti-Replay** - Prevent replay attacks with one-time tokens\n- üîÑ **Refresh Token** - Refresh token mechanism with seamless refresh\n- üîê **OAuth2** - Complete OAuth2 authorization code flow implementation\n\n## üöÄ Quick Start\n\n### üì• Installation\n\n#### Option 1: Simplified Import (Recommended) ‚ú®\n\n**Import only one framework integration package, which automatically includes core and stputil!**\n\n```bash\n# Import only the framework integration (includes core + stputil automatically)\ngo get github.com/click33/sa-token-go/integrations/gin@v0.1.2    # Gin framework\n# or\ngo get github.com/click33/sa-token-go/integrations/echo@v0.1.2   # Echo framework\n# or\ngo get github.com/click33/sa-token-go/integrations/fiber@v0.1.2  # Fiber framework\n# or\ngo get github.com/click33/sa-token-go/integrations/chi@v0.1.2    # Chi framework\n# or\ngo get github.com/click33/sa-token-go/integrations/gf@v0.1.2     # GoFrame framework\n\n# Storage module (choose one)\ngo get github.com/click33/sa-token-go/storage/memory@v0.1.2  # Memory storage (dev)\ngo get github.com/click33/sa-token-go/storage/redis@v0.1.2   # Redis storage (prod)\n```\n\n#### Option 2: Separate Import\n\n```bash\n# Core modules\ngo get github.com/click33/sa-token-go/core@v0.1.2\ngo get github.com/click33/sa-token-go/stputil@v0.1.2\n\n# Storage module (choose one)\ngo get github.com/click33/sa-token-go/storage/memory@v0.1.2  # Memory storage (dev)\ngo get github.com/click33/sa-token-go/storage/redis@v0.1.2   # Redis storage (prod)\n\n# Framework integration (optional)\ngo get github.com/click33/sa-token-go/integrations/gin@v0.1.2    # Gin framework\ngo get github.com/click33/sa-token-go/integrations/echo@v0.1.2   # Echo framework\ngo get github.com/click33/sa-token-go/integrations/fiber@v0.1.2  # Fiber framework\ngo get github.com/click33/sa-token-go/integrations/chi@v0.1.2    # Chi framework\n```\n\n### ‚ö° Minimal Usage (One-line Initialization)\n\n```go\npackage main\n\nimport (\n    \"github.com/click33/sa-token-go/core\"\n    \"github.com/click33/sa-token-go/stputil\"\n    \"github.com/click33/sa-token-go/storage/memory\"\n)\n\nfunc init() {\n    // One-line initialization! Shows startup banner\n    stputil.SetManager(\n        core.NewBuilder().\n            Storage(memory.NewStorage()).\n            TokenName(\"Authorization\").\n            Timeout(86400).                      // 24 hours\n            TokenStyle(core.TokenStyleRandom64). // Token style\n            IsPrintBanner(true).                 // Show startup banner\n            Build(),\n    )\n}\n```\n\n**Startup banner will be displayed:**\n\n```\n   _____         ______      __                  ______     \n  / ___/____ _  /_  __/___  / /_____  ____      / ____/____ \n  \\__ \\/ __  |   / / / __ \\/ //_/ _ \\/ __ \\_____/ / __/ __ \\\n ___/ / /_/ /   / / / /_/ / ,< /  __/ / / /_____/ /_/ / /_/ /\n/____/\\__,_/   /_/  \\____/_/|_|\\___/_/ /_/      \\____/\\____/ \n                                                             \n:: Sa-Token-Go ::                                    (v0.1.2)\n:: Go Version ::                                     go1.21.0\n:: GOOS/GOARCH ::                                    linux/amd64\n\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ Token Style     : random64                              ‚îÇ\n‚îÇ Token Timeout   : 86400                      seconds    ‚îÇ\n‚îÇ Auto Renew      : true                                  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n```go\nfunc main() {\n    // Use StpUtil directly without passing manager\n    token, _ := stputil.Login(1000)\n    println(\"Login successful, Token:\", token)\n    \n    // Set permissions\n    stputil.SetPermissions(1000, []string{\"user:read\", \"user:write\"})\n    \n    // Check permissions\n    if stputil.HasPermission(1000, \"user:read\") {\n        println(\"Has permission!\")\n    ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:14.488072"
  },
  {
    "basic_info": {
      "name": "go-shirei",
      "full_name": "hasenj/go-shirei",
      "owner": "hasenj",
      "description": "Go based GUI framework: practical, immediate mode, flexbox model",
      "url": "https://github.com/hasenj/go-shirei",
      "clone_url": "https://github.com/hasenj/go-shirei.git",
      "ssh_url": "git@github.com:hasenj/go-shirei.git",
      "homepage": "https://judi.systems/shirei/",
      "created_at": "2025-09-30T04:56:54Z",
      "updated_at": "2025-10-26T19:18:55Z",
      "pushed_at": "2025-10-06T11:18:15Z"
    },
    "stats": {
      "stars": 111,
      "forks": 6,
      "watchers": 111,
      "open_issues": 1,
      "size": 138
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 154677
      },
      "license": "zlib License",
      "topics": [
        "gioui",
        "gui",
        "imgui",
        "immediate-mode"
      ]
    },
    "content": {
      "readme": "shi‚Ä¢rei\n\nGUI framework for utility style programs\n\n* Immediate Mode: describe what the UI looks like each frame\n* Cross Platform: same UI code works on macOS, Linux, and Windows\n* Complex Text: shaping and bidirectional layout\n* Flexbox: containers arrange items horizontally or vertically, with options for\n  padding, gaps, alignment, wrapping, floating, scrolling, and size expansion.\n\nGetting started documentation available at: https://judi.systems/shirei\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-28T02:24:15.655873"
  },
  {
    "basic_info": {
      "name": "ch",
      "full_name": "dtonon/ch",
      "owner": "dtonon",
      "description": "Colored Highlighter - A fast, simple terminal tool to highlight specific words in your command output with colors",
      "url": "https://github.com/dtonon/ch",
      "clone_url": "https://github.com/dtonon/ch.git",
      "ssh_url": "git@github.com:dtonon/ch.git",
      "homepage": null,
      "created_at": "2025-10-13T09:47:30Z",
      "updated_at": "2025-10-27T13:15:24Z",
      "pushed_at": "2025-10-16T11:40:21Z"
    },
    "stats": {
      "stars": 101,
      "forks": 5,
      "watchers": 101,
      "open_issues": 1,
      "size": 652
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 7572,
        "Just": 482
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# ch - Colored Highlighter\n\nA fast, simple terminal tool to highlight specific words in your command output with colors. Perfect for tailing logs, debugging, and making command output more readable.\n\n![](screenshot.png)\n\n## Features\n\n- Automatic color assignment from a preset palette\n- Custom hex colors for specific words\n- Optiona discreet sound on match\n- Case-insensitive matching by default\n- Whole word extension mode\n- Fast and efficient - designed for real-time log tailing\n- Cross-platform - works on macOS and Linux\n\n## How It Works\n\n`ch` reads from standard input line by line and:\n\n1. Searches for specified words (case-insensitive by default)\n2. Highlights matches with assigned colors\n3. Handles overlapping matches (first match wins)\n4. Outputs to standard output with ANSI color codes\n\nThe preset colors use a pastel palette optimized for readability on both light and dark terminals: Red, Green, Orange, Blue, Pink, Purple.  \nColors cycle when you have more than 6 words without custom colors.\n\nThe tool is optimized for streaming, making it ideal for real-time log monitoring.\n\n## Usage\n\n### Basic syntax\n\n```bash\nch [options] <word1> <word2> <word3> ...\n```\n\nHighlights specified words with colors from a preset palette.\n\n### Custom colors\n\n```bash\nch <word1>::<HEXCOLOR> <word2>::<COLORNAME> <word3> ...\n```\n\nUse custom hex colors (with or without `#` prefix) or named colors. Words without specified colors use preset colors.\n\nAvailable named colors: `red`, `green`, `orange`, `blue`, `pink`, `purple`\n\n### Options\n\n- `-s` - Case-sensitive matching (default is case-insensitive)\n- `-w` - Whole word extension - extends match until space or end of line\n- `-b` - Use background colors instead of foreground colors\n- `-a` - Play a discreet beep when a match is found\n\n#### Case-sensitive matching\n\n```bash\n# Only highlights exact case matches\necho \"Error ERROR error\" | ch -s Error\n```\n\n#### Whole word extension\n\nThe `-w` flag extends the match to the entire word (until space or EOL):\n\n```bash\n# Input: \"Notice: backup 13344 - started with name backup_13344.zip\"\necho \"Notice: backup 13344 - started with name backup_13344.zip\" | ch -w back\n\n# Highlights: \"backup\" and \"backup_13344.zip\" (entire words)\n```\n\n#### Background colors\n\nThe `-b` flag uses background colors instead of foreground colors:\n\n```bash\n# Highlight with background colors\ntail -f app.log | ch -b error warning success\n\n# Mix with custom colors\ntail -f app.log | ch -b error::red warning::orange info::blue\n```\n\n#### Audible alert\n\nThe `-a` flag plays a discreet beep when a match is found; the alert is not even if matches are frequent (max one every 5 seconds):\n\n```bash\n# Play a beep\ntail -f app.log | ch -a panic::red\n```\n\n```bash\n# Test repeated match heads with a one-second interval\nfor i in {1..10}; do echo \"line $i\"; sleep 1; echo \"error occurred\"; sleep 1; done | ch -a error\n```\n\n## Examples\n\n### Log monitoring\n\n```bash\n# Tail a log file with highlighted keywords\ntail -f app.log | ch error warning success\n\n# Highlight with custom colors (hex and named)\ntail -f app.log | ch error::red warning::orange info::00FF00\n\n# Monitor system logs\njournalctl -f | ch failed::red error::red success::green started::blue\n\n# Watch Docker logs\ndocker logs -f container_name | ch error warning started stopped\n\n# Monitor Kubernetes pods\nkubectl logs -f pod-name | ch error panic fatal warning\n```\n\n### Database and queries\n\n```bash\n# Highlight database queries\ntail -f query.log | ch SELECT INSERT UPDATE DELETE\n\n# Database monitoring\nmysql -e \"SHOW PROCESSLIST;\" | ch SELECT UPDATE DELETE INSERT\n```\n\n### Development and debugging\n\n```bash\n# Search and highlight\ngrep -i \"error\" app.log | ch error exception failed\n\n# Highlight build output\nmake 2>&1 | ch error warning success completed\n\n# Git log highlighting\ngit log --oneline | ch feat fix docs style refactor\n\n# Highlight code patterns\ncat script.sh | ch function if else error\n```\n\n### Combining features\n\n```bash\n# Mix preset, named, and hex colors\ntail -f app.log | ch error::red warning::FF5500 info debug success::green\n\n# Case-insensitive by default (highlights: error, Error, ERROR, ErRoR, etc.)\ntail -f app.log | ch error\n\n# Monitor web server logs with named colors\ntail -f access.log | ch GET::blue POST::orange 404::red 500::red 200::green\n```\n\n## Build\n\n### From source\n\n```bash\n# Clone or download the repository\ngit clone <repository-url>\ncd ch\n\n# Initialize Go module\ngo mod init ch\n\n# Build\ngo build -o ch\n\n# (Optional) Install to your PATH\nsudo mv ch /usr/local/bin/\n```\n\n## Buffering issues\n\nSome programs detect when their output is being piped and switch from line buffering to full buffering for performance. This means output may not appear in real-time when using `ch`. If you experience delayed highlighting or no output until the program completes, you need to force line buffering using one of these methods:\n\n### macOS\n```bash\n# Use script (built-in)\nscript -q /dev/null your-command | ch your-words\n\n# Or install and use unbuf",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-28T02:24:16.777796"
  },
  {
    "basic_info": {
      "name": "go-agile-pool",
      "full_name": "Yiming1997/go-agile-pool",
      "owner": "Yiming1997",
      "description": "A golang goroutine pool with high-performance and elegance",
      "url": "https://github.com/Yiming1997/go-agile-pool",
      "clone_url": "https://github.com/Yiming1997/go-agile-pool.git",
      "ssh_url": "git@github.com:Yiming1997/go-agile-pool.git",
      "homepage": "",
      "created_at": "2025-10-18T05:30:01Z",
      "updated_at": "2025-10-28T02:19:19Z",
      "pushed_at": "2025-10-20T18:54:51Z"
    },
    "stats": {
      "stars": 100,
      "forks": 0,
      "watchers": 100,
      "open_issues": 0,
      "size": 14
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 7889
      },
      "license": null,
      "topics": [
        "concurrency",
        "go",
        "golang",
        "goroutine",
        "high-performance",
        "work-pool",
        "worker-pool"
      ]
    },
    "content": {
      "readme": "## Introduction\ngoAgilePool is a lightweight goroutine pool for Golang, designed for simplicity and high performance\n## Features\n1. Customizable goroutine pool size\n2. Configurable task queue size\n3. Task timeout control\n4. Automatic cleanup of idle workers upon timeout\n5. Efficient worker reuse through FIFO worker queue management\n\n## Installation\ngo get github.com/Yiming1997/go-agile-pool\n\n## Usage\n**Pool.Submit()**\n```go\n    pool := agilepool.NewPool()\n\n    // Supports chainable configuration for pool parameters  \n\tpool.InitConfig().             \n\t\tWithCleanPeriod(500 * time.Millisecond).\n\t\tWithTaskQueueSize(10000).\n\t\tWithWorkerNumCapacity(20000)\n\n    // Start the goroutine pool  \n\tpool.Init()                  \n\n\twait := sync.WaitGroup{}\n\n\tfor i := 0; i < 20000000; i++ {\n\t\twait.Add(1)\n\n\t\tgo func() {\n\t\t\tpool.Submit(func() {\n\t\t\t\tdefer wait.Done()\n\t\t\t\ttime.Sleep(10 * time.Millisecond)\n\t\t\t})\n\t\t}()\n\n\t}\n\n\twait.Wait()\n```\n\n**Pool.SubmitBefore()**    \n```go\n\tpool.SubmitBefore(func() {\n\t\tdefer wait.Done()\n\t\ttime.Sleep(10 * time.Millisecond)\n\t}, 5*time.Second)\n\n```\n**benchmark**    \n```\nBenchmarkAgilePool-14    \t       1\t5953874200 ns/op\t527994424 B/op\t21709143 allocs/op\n```",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:17.875713"
  },
  {
    "basic_info": {
      "name": "brrtfetch",
      "full_name": "ferrebarrat/brrtfetch",
      "owner": "ferrebarrat",
      "description": "Render animated ASCII art from a GIF for your sysinfo fetcher of choice.",
      "url": "https://github.com/ferrebarrat/brrtfetch",
      "clone_url": "https://github.com/ferrebarrat/brrtfetch.git",
      "ssh_url": "git@github.com:ferrebarrat/brrtfetch.git",
      "homepage": "",
      "created_at": "2025-10-05T19:04:58Z",
      "updated_at": "2025-10-27T18:50:05Z",
      "pushed_at": "2025-10-07T09:43:47Z"
    },
    "stats": {
      "stars": 99,
      "forks": 2,
      "watchers": 99,
      "open_issues": 5,
      "size": 126605
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 9370,
        "Nix": 811
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "<h3 align=\"center\"><img src=\"./docs/readme-md-brrtfetch-main-textlogo.png\" alt=\"logo\" height=\"100px\"></h3>\n<p align=\"center\"><img src=\"./docs/readme-md-main.gif\" height=\"400px\"></p>\n<p align=\"center\"><i>Fastfetch config: https://github.com/xerolinux/xero-layan-git</i></p>\n\n**Brrtfetch** is an animated system information fetcher written mainly in Go. Please keep in mind that it is still in it's very early stage of development. It displays the user specified **GIF rendered as animated ASCII art** alongside the system information from your favourite fetcher.\n\nThink of it like a renderer that replaces the ASCII art for your fetcher with **animated** art. You only need to provide a .gif file.\n\nBroken on MacOS. It does not display sysinfo. I do not own any Apple devices so apologies if this takes a while to fix.\n\nIn the next version I plan to use a new way of deciding what to put where in the terminal. It should be way more stable. No more color bugs, already confirmed hyfetch works(no workaround needed),the issue with illegal flags for the script binary on MacOS will also be resolved in the upcoming release. You can also expect a very cool new feature which I have not seen on any other animated fetchers when the new update is released.\n\n---\n \n## ‚ú® Features\n\n* Render animated GIFs as **colorful ASCII art** directly in your terminal.\n* Side-by-side system information via `fastfetch`, `neofetch`, or your fetcher of choice. I have only tested with `fastfetch`, `neofetch` and `hyfetch`. Hyfetch requires a small workaround and even then it's still a bit buggy with hyfetch. See examples below. \n* **True color (24-bit ANSI)** support with optional white monochrome mode via `-color=false`.\n* **Multithreaded prerendering** for smooth playback.\n* Configurable:\n\n  * Width / height to render at\n  * FPS to render at (impacts animation speed)\n  * Brightness multiplier (controls density of ASCII mapping)\n  * Vertical offset for aligning sysinfo height relative to  ASCII art\n* Attempts to preserves **ANSI color codes** from sysinfo commands (broken for hyfetch and Windows CMD/Powershell. WSL does show color for the sysinfo. Only tested this with Ubuntu for WSL).\n* If you can somehow render DOOM in GIF format you could technically use this to play DOOM in your fetcher. It would only be (re)rendered in brrtfetch, not actually run inside of it, at least for now ;)\n\n---\n\n## üì¶ Installation\n\nMore comprehensive instructions for different distros and support for various package managers will be coming soon.\n\nDebian/Ubuntu based steps only for the initial release, it should work on any linux system as long as you replace apt with your package manager for the dependencies. You can install it on Windows and Mac if you want. Just translate the steps to Windows. Will try to add Winget support later so i don't have to make an install script/instructions for Powershell. I will also attempt to add support for all major Linux package managers and Brew.\n\n\n### Prerequisites\n\n* A terminal that supports ANSI colors and escape sequences. Almost all modern terminals do.\n* `Script` (Linux only) \n\n  Optional but highly recommended for sysinfo color support. Part of the **bsdutils** package. Comes by default on most systems. Check with \"which script\"\n* `Unbuffer` (Linux only)\n\n  Optional but recommended. Part of the `expect` package. Install with \"apt install expect\" or any other package manager. Brrtfetch will attempt to fallback on `unbuffer` if `script` is not available. \n* A fetch application with an option to omit the ASCII art.\n\n  * [fastfetch](https://github.com/fastfetch-cli/fastfetch) (default)\n  * [hyfetch](https://github.com/hykilpikonna/hyfetch)\n  * Or any command you like, it can be specified with `-info \"neofetch --off\"` or even `-info \"echo $USER\"` or anything custom if you want.\n\n  ```bash\n  apt install fastfetch # only works on Debian 13+, see fastfetch docs for other version and distros\n  apt install bsdutils expect\n  ```\n\n### Build from source\n\nAdditional prerequisite:\n* Go 1.20+ (I used Go 1.23.3, will assume 1.20+ works)\n\n  ```bash\n  # Install Go (replace apt with your package manager like brew, yum, pacman etc)\n  sudo apt install golang\n\n  # Build\n  git clone https://github.com/ferrebarrat/brrtfetch\n  cd brrtfetch \n  go build -o ./bin/brrtfetch ./go/main.go && chmod +x ./bin/brrtfetch\n\n  # Add to path\n  sudo cp ./bin/brrtfetch /usr/local/bin/brrtfetch\n\n  # Optional - Save gifs from repo before cleanup\n  mkdir -p /home/$USER/Pictures/brrtfetch/gifs\n  cp -r ./gifs/* /home/$USER/Pictures/brrtfetch/gifs\n\n  # Cleanup\n  cd .. && rm -rf brrtfetch\n  ```\n\n---\n\n## üéÆ Usage\n\n  ```bash\n  brrtfetch [options] /path/to/file.gif\n  ```\n\n* **Ctrl-C** ‚Üí attempts to exit the animation gracefully, clears and restores terminal, prints first frame with sysinfo and returns you to your prompt as if it was just a static fetcher.\n* Animation loops endlessly until interrupted with **CTRL-C**.\n\n<p><img src=\"./docs/readme-md-example-run.gif\" height=\"300px\"></p>\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:19.104096"
  },
  {
    "basic_info": {
      "name": "gomem",
      "full_name": "langhuihui/gomem",
      "owner": "langhuihui",
      "description": "GoMem is a high-performance memory allocator library for Go",
      "url": "https://github.com/langhuihui/gomem",
      "clone_url": "https://github.com/langhuihui/gomem.git",
      "ssh_url": "git@github.com:langhuihui/gomem.git",
      "homepage": "",
      "created_at": "2025-09-30T08:54:23Z",
      "updated_at": "2025-10-27T01:09:34Z",
      "pushed_at": "2025-10-13T00:45:53Z"
    },
    "stats": {
      "stars": 79,
      "forks": 3,
      "watchers": 79,
      "open_issues": 0,
      "size": 367
    },
    "tech_info": {
      "language": "Go",
      "languages": {
        "Go": 82357
      },
      "license": "MIT License",
      "topics": [
        "golang",
        "memory-management"
      ]
    },
    "content": {
      "readme": "# GoMem\n\n<div align=\"center\">\n  <img src=\"logo.png\" alt=\"GoMem Logo\" width=\"200\"/>\n</div>\n\n[![Go Version](https://img.shields.io/badge/Go-1.23+-00ADD8?style=flat-square&logo=go)](https://golang.org/)\n[![License](https://img.shields.io/badge/License-MIT-green.svg?style=flat-square)](LICENSE)\n[![Go Report Card](https://goreportcard.com/badge/github.com/langhuihui/gomem?style=flat-square)](https://goreportcard.com/report/github.com/langhuihui/gomem)\n\n> **Language**: [English](README.md) | [‰∏≠Êñá](README_CN.md)\n\nGoMem is a high-performance memory allocator library for Go, extracted from the Monibuca project.\n\n## Features\n\n- **Multiple Allocation Strategies**: Support for both single-tree and two-tree (AVL) allocation algorithms\n- **Buddy Allocator**: Optional buddy system for efficient memory pooling\n- **Recyclable Memory**: Memory recycling support with automatic cleanup\n- **Scalable Allocator**: Dynamically growing memory allocator\n- **Memory Reader**: Efficient multi-buffer reader with zero-copy operations\n\n## Build Tags\n\nThe library supports several build tags to customize behavior:\n\n- `twotree`: Use two-tree (AVL) implementation instead of single treap\n- `enable_buddy`: Enable buddy allocator for memory pooling\n- `disable_rm`: Disable recyclable memory features for reduced overhead\n- `enable_mmap`: Enable memory-mapped allocation for improved memory efficiency (Linux/macOS/Windows)\n  - **Linux**: Automatically enables Transparent Huge Pages (THP) support, using 2MB huge pages instead of 4KB pages for significantly reduced TLB misses and improved memory access performance\n\n## Installation\n\n```bash\ngo get github.com/langhuihui/gomem\n```\n\n## Usage\n\n### Basic Memory Allocation\n\n```go\npackage main\n\nimport \"github.com/langhuihui/gomem\"\n\nfunc main() {\n    // Create a scalable memory allocator\n    allocator := gomem.NewScalableMemoryAllocator(1024)\n    \n    // Allocate memory\n    buf := allocator.Malloc(256)\n    \n    // Use the buffer...\n    copy(buf, []byte(\"Hello, World!\"))\n    \n    // Free the memory\n    allocator.Free(buf)\n}\n```\n\n### Partial Memory Deallocation\n\n```go\npackage main\n\nimport \"github.com/langhuihui/gomem\"\n\nfunc main() {\n    // Create a scalable memory allocator\n    allocator := gomem.NewScalableMemoryAllocator(1024)\n    \n    // Allocate a large block of memory\n    buf := allocator.Malloc(1024)\n    \n    // Use different parts of the memory\n    part1 := buf[0:256]    // First 256 bytes\n    part2 := buf[256:512]  // Middle 256 bytes  \n    part3 := buf[512:1024] // Last 512 bytes\n    \n    // Fill with data\n    copy(part1, []byte(\"Part 1 data\"))\n    copy(part2, []byte(\"Part 2 data\"))\n    copy(part3, []byte(\"Part 3 data\"))\n    \n    // Partial deallocation - can free parts of memory\n    allocator.Free(part1)  // Free first 256 bytes\n    allocator.Free(part2)  // Free middle 256 bytes\n    \n    // Continue using remaining memory\n    copy(part3, []byte(\"Updated part 3\"))\n    \n    // Finally free remaining memory\n    allocator.Free(part3)\n}\n```\n\n### Recyclable Memory\n\n```go\n// Create recyclable memory for batch operations\nallocator := gomem.NewScalableMemoryAllocator(1024)\nrm := gomem.NewRecyclableMemory(allocator)\n\n// Allocate multiple buffers\nbuf1 := rm.NextN(128)\nbuf2 := rm.NextN(256)\n\n// Use the buffers...\ncopy(buf1, []byte(\"Buffer 1\"))\ncopy(buf2, []byte(\"Buffer 2\"))\n\n// Recycle all memory at once\nrm.Recycle()\n```\n\n### Memory Buffer Operations\n\n```go\n// Create a memory buffer\nmem := gomem.NewMemory([]byte{1, 2, 3, 4, 5})\n\n// Add more data\nmem.PushOne([]byte{6, 7, 8})\n\n// Get total size and buffer count\nfmt.Printf(\"Size: %d, Buffers: %d\\n\", mem.Size, mem.Count())\n\n// Convert to bytes\ndata := mem.ToBytes()\n```\n\n### Memory Reader\n\n```go\n// Create a memory reader\nreader := gomem.NewReadableBuffersFromBytes([]byte{1, 2, 3}, []byte{4, 5, 6})\n\n// Read data\nbuf := make([]byte, 6)\nn, err := reader.Read(buf)\n// buf now contains [1, 2, 3, 4, 5, 6]\n```\n\n## Concurrency Safety\n\n‚ö†Ô∏è **Important**: Malloc and Free operations must be called from the same goroutine to avoid race conditions. For more elegant usage, consider using [gotask](https://github.com/langhuihui/gotask), where you can allocate memory in the `Start` method and free it in the `Dispose` method.\n\n```go\n// ‚ùå Wrong: Different goroutines\ngo func() {\n    buf := allocator.Malloc(256)\n    // ... use buffer\n}()\n\ngo func() {\n    allocator.Free(buf) // Race condition!\n}()\n\n// ‚úÖ Correct: Same goroutine\nbuf := allocator.Malloc(256)\n// ... use buffer\nallocator.Free(buf)\n\n// ‚úÖ Elegant: Using gotask\ntype MyTask struct {\n    allocator *gomem.ScalableMemoryAllocator\n    buffer []byte\n}\n\nfunc (t *MyTask) Start() {\n    t.allocator = gomem.NewScalableMemoryAllocator(1024)\n    t.buffer = t.allocator.Malloc(256)\n}\n\nfunc (t *MyTask) Dispose() {\n    t.allocator.Free(t.buffer)\n}\n```\n\n## Performance Considerations\n\n- **Use `enable_mmap` build tag for dramatic performance improvements**: 100-400x faster allocator creation, 99.98% less memory usage\n- Use `enable_buddy` build tag for b",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-28T02:24:20.244768"
  }
]